
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000f9b0  0000fa44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f9b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  0080025a  0080025a  0000fa9e  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  0000fa9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  0001035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000131f7  00000000  00000000  0001304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030f1  00000000  00000000  00026246  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ae22  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fea  00000000  00000000  00034159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  00039143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		"\"128 64 2 1\",\r\n"
		"\"   c #FFFFFF\",\r\n"
		"\".  c #000000\",\r\n";			

void SendChar( char ch )
{
       0:	0c 94 1b 69 	jmp	0xd236	; 0xd236 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	TERMFONT_DisplayString( "Min Volt: 3.45 V", 7, 0 );
}

void LCD_UpdateMaxTemp(uint8_t temp)
{
	TERMFONT_DisplayString( "Max Temp: 35 C", 5, 0 );
      10:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 * called POWER_WakeupCallback(void)
 * 
 * It enables the disabled modules and jtag again when doing a full wakeup
 */
void POWER_EnterPowerSaveMode( void )
{
      18:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 08 73 	jmp	0xe610	; 0xe610 <__vector_9>
/*!
 * \param  pPictureInRam  Pointer to picture in ram with same size as LCD
 */
void PICTURE_CopyFullscreenRamToLcd (const uint8_t * pPictureInRam)
{
  LCD_WriteFrameBuffer( pPictureInRam );
      28:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
		// Check if bottom of element is below bottom of visible area.
		if ((element->startPage + element->height) > (form->firstVisiblePage + LCD_PAGE_COUNT)) {
			visibility->lastPage = (form->firstVisiblePage + LCD_PAGE_COUNT - 1) -
					element->startPage;
		} else {
			visibility->lastPage = element->height - 1;
      2c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      30:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      34:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
      38:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      3c:	0c 94 02 78 	jmp	0xf004	; 0xf004 <__vector_15>
      40:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      44:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      48:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      4c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      50:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      54:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      58:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      5c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      60:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      64:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      68:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      6c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      70:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      74:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      78:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      7c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      80:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      84:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      88:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      8c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      90:	0c 94 91 69 	jmp	0xd322	; 0xd322 <__vector_36>
      94:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      98:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      9c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      ac:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      bc:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <FORMS_focusIndicator>:
    d052:	3e 1c 08 00                                         >...

0000d056 <TERMFONT_fontdata>:
    d056:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d066:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d076:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d086:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d096:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d6:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e6:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f6:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d106:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d116:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d126:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d136:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d146:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d156:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d166:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d176:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d186:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d196:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b6:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c6:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d206:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d216:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d226:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d236 <__ctors_end>:
    d236:	11 24       	eor	r1, r1
    d238:	1f be       	out	0x3f, r1	; 63
    d23a:	cf ef       	ldi	r28, 0xFF	; 255
    d23c:	d1 e2       	ldi	r29, 0x21	; 33
    d23e:	de bf       	out	0x3e, r29	; 62
    d240:	cd bf       	out	0x3d, r28	; 61

0000d242 <__do_copy_data>:
    d242:	12 e0       	ldi	r17, 0x02	; 2
    d244:	a0 e0       	ldi	r26, 0x00	; 0
    d246:	b2 e0       	ldi	r27, 0x02	; 2
    d248:	e0 eb       	ldi	r30, 0xB0	; 176
    d24a:	f9 ef       	ldi	r31, 0xF9	; 249
    d24c:	00 e0       	ldi	r16, 0x00	; 0
    d24e:	0b bf       	out	0x3b, r16	; 59
    d250:	02 c0       	rjmp	.+4      	; 0xd256 <__do_copy_data+0x14>
    d252:	07 90       	elpm	r0, Z+
    d254:	0d 92       	st	X+, r0
    d256:	aa 35       	cpi	r26, 0x5A	; 90
    d258:	b1 07       	cpc	r27, r17
    d25a:	d9 f7       	brne	.-10     	; 0xd252 <__do_copy_data+0x10>

0000d25c <__do_clear_bss>:
    d25c:	18 e1       	ldi	r17, 0x18	; 24
    d25e:	aa e5       	ldi	r26, 0x5A	; 90
    d260:	b2 e0       	ldi	r27, 0x02	; 2
    d262:	01 c0       	rjmp	.+2      	; 0xd266 <.do_clear_bss_start>

0000d264 <.do_clear_bss_loop>:
    d264:	1d 92       	st	X+, r1

0000d266 <.do_clear_bss_start>:
    d266:	ab 3a       	cpi	r26, 0xAB	; 171
    d268:	b1 07       	cpc	r27, r17
    d26a:	e1 f7       	brne	.-8      	; 0xd264 <.do_clear_bss_loop>
    d26c:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <main>
    d270:	0c 94 d7 7c 	jmp	0xf9ae	; 0xf9ae <_exit>

0000d274 <__bad_interrupt>:
    d274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d278 <strcmp>:
    d278:	fb 01       	movw	r30, r22
    d27a:	dc 01       	movw	r26, r24
    d27c:	8d 91       	ld	r24, X+
    d27e:	01 90       	ld	r0, Z+
    d280:	80 19       	sub	r24, r0
    d282:	01 10       	cpse	r0, r1
    d284:	d9 f3       	breq	.-10     	; 0xd27c <strcmp+0x4>
    d286:	99 0b       	sbc	r25, r25
    d288:	08 95       	ret

0000d28a <strncpy>:
    d28a:	fb 01       	movw	r30, r22
    d28c:	dc 01       	movw	r26, r24
    d28e:	41 50       	subi	r20, 0x01	; 1
    d290:	50 40       	sbci	r21, 0x00	; 0
    d292:	48 f0       	brcs	.+18     	; 0xd2a6 <strncpy+0x1c>
    d294:	01 90       	ld	r0, Z+
    d296:	0d 92       	st	X+, r0
    d298:	00 20       	and	r0, r0
    d29a:	c9 f7       	brne	.-14     	; 0xd28e <strncpy+0x4>
    d29c:	01 c0       	rjmp	.+2      	; 0xd2a0 <strncpy+0x16>
    d29e:	1d 92       	st	X+, r1
    d2a0:	41 50       	subi	r20, 0x01	; 1
    d2a2:	50 40       	sbci	r21, 0x00	; 0
    d2a4:	e0 f7       	brcc	.-8      	; 0xd29e <strncpy+0x14>
    d2a6:	08 95       	ret

0000d2a8 <__eerd_word>:
    d2a8:	cf 92       	push	r12
    d2aa:	df 92       	push	r13
    d2ac:	ef 92       	push	r14
    d2ae:	ff 92       	push	r15
    d2b0:	0f 93       	push	r16
    d2b2:	1f 93       	push	r17
    d2b4:	7c 01       	movw	r14, r24
    d2b6:	6b 01       	movw	r12, r22
    d2b8:	fb 01       	movw	r30, r22
    d2ba:	09 95       	icall
    d2bc:	08 2f       	mov	r16, r24
    d2be:	c7 01       	movw	r24, r14
    d2c0:	01 96       	adiw	r24, 0x01	; 1
    d2c2:	f6 01       	movw	r30, r12
    d2c4:	09 95       	icall
    d2c6:	18 2f       	mov	r17, r24
    d2c8:	c8 01       	movw	r24, r16
    d2ca:	1f 91       	pop	r17
    d2cc:	0f 91       	pop	r16
    d2ce:	ff 90       	pop	r15
    d2d0:	ef 90       	pop	r14
    d2d2:	df 90       	pop	r13
    d2d4:	cf 90       	pop	r12
    d2d6:	08 95       	ret

0000d2d8 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d2d8:	f9 99       	sbic	0x1f, 1	; 31
    d2da:	fe cf       	rjmp	.-4      	; 0xd2d8 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d2dc:	92 bd       	out	0x22, r25	; 34
    d2de:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d2e0:	f8 9a       	sbi	0x1f, 0	; 31
    d2e2:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d2e4:	99 27       	eor	r25, r25
    d2e6:	08 95       	ret

0000d2e8 <UnknownError>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
    d2e8:	0f 93       	push	r16
    d2ea:	1f 93       	push	r17
	POPUP_MsgBox( 14, 1, 10, "Unknown error!", NULL );
    d2ec:	00 e0       	ldi	r16, 0x00	; 0
    d2ee:	10 e0       	ldi	r17, 0x00	; 0
    d2f0:	20 e0       	ldi	r18, 0x00	; 0
    d2f2:	32 e0       	ldi	r19, 0x02	; 2
    d2f4:	4a e0       	ldi	r20, 0x0A	; 10
    d2f6:	61 e0       	ldi	r22, 0x01	; 1
    d2f8:	8e e0       	ldi	r24, 0x0E	; 14
    d2fa:	0e 94 6d 70 	call	0xe0da	; 0xe0da <POPUP_MsgBox>
	for (;;) {}
    d2fe:	ff cf       	rjmp	.-2      	; 0xd2fe <UnknownError+0x16>

0000d300 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d300:	cf 93       	push	r28
    d302:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d304:	8a 30       	cpi	r24, 0x0A	; 10
    d306:	19 f4       	brne	.+6      	; 0xd30e <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d308:	8d e0       	ldi	r24, 0x0D	; 13
    d30a:	0e 94 80 69 	call	0xd300	; 0xd300 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d30e:	80 91 c8 00 	lds	r24, 0x00C8
    d312:	85 ff       	sbrs	r24, 5
    d314:	fc cf       	rjmp	.-8      	; 0xd30e <uart_putchar+0xe>
      UDR1 = c;
    d316:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d31a:	80 e0       	ldi	r24, 0x00	; 0
    d31c:	90 e0       	ldi	r25, 0x00	; 0
    d31e:	cf 91       	pop	r28
    d320:	08 95       	ret

0000d322 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d322:	1f 92       	push	r1
    d324:	0f 92       	push	r0
    d326:	0f b6       	in	r0, 0x3f	; 63
    d328:	0f 92       	push	r0
    d32a:	11 24       	eor	r1, r1
    d32c:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d32e:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d332:	80 91 ce 00 	lds	r24, 0x00CE
    d336:	80 93 6b 02 	sts	0x026B, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d33a:	81 e0       	ldi	r24, 0x01	; 1
    d33c:	80 93 6c 02 	sts	0x026C, r24
    d340:	8f 91       	pop	r24
    d342:	0f 90       	pop	r0
    d344:	0f be       	out	0x3f, r0	; 63
    d346:	0f 90       	pop	r0
    d348:	1f 90       	pop	r1
    d34a:	18 95       	reti

0000d34c <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d34c:	88 e9       	ldi	r24, 0x98	; 152
    d34e:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d352:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d356:	87 e0       	ldi	r24, 0x07	; 7
    d358:	80 93 cc 00 	sts	0x00CC, r24
    d35c:	08 95       	ret

0000d35e <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    d35e:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    d360:	80 53       	subi	r24, 0x30	; 48
    d362:	8a 30       	cpi	r24, 0x0A	; 10
    d364:	10 f4       	brcc	.+4      	; 0xd36a <xtod+0xc>
    d366:	99 27       	eor	r25, r25
    d368:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    d36a:	89 2f       	mov	r24, r25
    d36c:	81 54       	subi	r24, 0x41	; 65
    d36e:	86 30       	cpi	r24, 0x06	; 6
    d370:	10 f4       	brcc	.+4      	; 0xd376 <xtod+0x18>
    d372:	97 53       	subi	r25, 0x37	; 55
    d374:	05 c0       	rjmp	.+10     	; 0xd380 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    d376:	89 2f       	mov	r24, r25
    d378:	81 56       	subi	r24, 0x61	; 97
    d37a:	86 30       	cpi	r24, 0x06	; 6
    d37c:	20 f4       	brcc	.+8      	; 0xd386 <xtod+0x28>
    d37e:	97 55       	subi	r25, 0x57	; 87
    d380:	89 2f       	mov	r24, r25
    d382:	99 27       	eor	r25, r25
    d384:	08 95       	ret
 return c=0;        // not Hex digit
    d386:	80 e0       	ldi	r24, 0x00	; 0
    d388:	90 e0       	ldi	r25, 0x00	; 0
}
    d38a:	08 95       	ret

0000d38c <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    d38c:	ef 92       	push	r14
    d38e:	ff 92       	push	r15
    d390:	0f 93       	push	r16
    d392:	1f 93       	push	r17
    d394:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    d396:	80 81       	ld	r24, Z
    d398:	88 23       	and	r24, r24
    d39a:	81 f0       	breq	.+32     	; 0xd3bc <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    d39c:	8f 01       	movw	r16, r30
    d39e:	0f 5f       	subi	r16, 0xFF	; 255
    d3a0:	1f 4f       	sbci	r17, 0xFF	; 255
    d3a2:	7b 01       	movw	r14, r22
    d3a4:	94 e0       	ldi	r25, 0x04	; 4
    d3a6:	ee 0c       	add	r14, r14
    d3a8:	ff 1c       	adc	r15, r15
    d3aa:	9a 95       	dec	r25
    d3ac:	e1 f7       	brne	.-8      	; 0xd3a6 <HextoDec+0x1a>
    d3ae:	0e 94 af 69 	call	0xd35e	; 0xd35e <xtod>
    d3b2:	f8 01       	movw	r30, r16
    d3b4:	b7 01       	movw	r22, r14
    d3b6:	68 0f       	add	r22, r24
    d3b8:	71 1d       	adc	r23, r1
    d3ba:	ed cf       	rjmp	.-38     	; 0xd396 <HextoDec+0xa>
}
    d3bc:	cb 01       	movw	r24, r22
    d3be:	1f 91       	pop	r17
    d3c0:	0f 91       	pop	r16
    d3c2:	ff 90       	pop	r15
    d3c4:	ef 90       	pop	r14
    d3c6:	08 95       	ret

0000d3c8 <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    d3c8:	60 e0       	ldi	r22, 0x00	; 0
    d3ca:	70 e0       	ldi	r23, 0x00	; 0
    d3cc:	0e 94 c6 69 	call	0xd38c	; 0xd38c <HextoDec>
    d3d0:	08 95       	ret

0000d3d2 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    d3d2:	ef 92       	push	r14
    d3d4:	ff 92       	push	r15
    d3d6:	0f 93       	push	r16
    d3d8:	1f 93       	push	r17
    d3da:	8a 01       	movw	r16, r20
    d3dc:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    d3de:	68 0f       	add	r22, r24
    d3e0:	79 1f       	adc	r23, r25
    d3e2:	c9 01       	movw	r24, r18
    d3e4:	0e 94 45 69 	call	0xd28a	; 0xd28a <strncpy>
	pnew[numchars] = '\0';
    d3e8:	0e 0d       	add	r16, r14
    d3ea:	1f 1d       	adc	r17, r15
    d3ec:	f8 01       	movw	r30, r16
    d3ee:	10 82       	st	Z, r1
	return pnew;
}
    d3f0:	c7 01       	movw	r24, r14
    d3f2:	1f 91       	pop	r17
    d3f4:	0f 91       	pop	r16
    d3f6:	ff 90       	pop	r15
    d3f8:	ef 90       	pop	r14
    d3fa:	08 95       	ret

0000d3fc <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    d3fc:	ef 92       	push	r14
    d3fe:	ff 92       	push	r15
    d400:	0f 93       	push	r16
    d402:	1f 93       	push	r17
    d404:	cf 93       	push	r28
    d406:	df 93       	push	r29
    d408:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d40a:	8d 30       	cpi	r24, 0x0D	; 13
    d40c:	19 f0       	breq	.+6      	; 0xd414 <recv_input+0x18>
    d40e:	8a 30       	cpi	r24, 0x0A	; 10
    d410:	09 f0       	breq	.+2      	; 0xd414 <recv_input+0x18>
    d412:	ba c0       	rjmp	.+372    	; 0xd588 <recv_input+0x18c>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d414:	80 91 32 02 	lds	r24, 0x0232
    d418:	e8 2f       	mov	r30, r24
    d41a:	ff 27       	eor	r31, r31
    d41c:	ef 57       	subi	r30, 0x7F	; 127
    d41e:	fd 4f       	sbci	r31, 0xFD	; 253
    d420:	10 82       	st	Z, r1
  int8_t rc;
  int16_t value=0;
  char * raw_byte;
  short * raw_short;

  if (s[0] == 0)
    d422:	80 91 81 02 	lds	r24, 0x0281
    d426:	88 23       	and	r24, r24
    d428:	09 f4       	brne	.+2      	; 0xd42c <recv_input+0x30>
    d42a:	ab c0       	rjmp	.+342    	; 0xd582 <recv_input+0x186>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d42c:	e0 91 33 02 	lds	r30, 0x0233
    d430:	f0 91 34 02 	lds	r31, 0x0234
    d434:	10 82       	st	Z, r1
  index = 0;
    d436:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d438:	80 91 81 02 	lds	r24, 0x0281
    d43c:	88 23       	and	r24, r24
    d43e:	d1 f0       	breq	.+52     	; 0xd474 <recv_input+0x78>
    d440:	8d 33       	cpi	r24, 0x3D	; 61
    d442:	c1 f0       	breq	.+48     	; 0xd474 <recv_input+0x78>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d444:	e9 2f       	mov	r30, r25
    d446:	ff 27       	eor	r31, r31
    d448:	a0 91 33 02 	lds	r26, 0x0233
    d44c:	b0 91 34 02 	lds	r27, 0x0234
    d450:	ae 0f       	add	r26, r30
    d452:	bf 1f       	adc	r27, r31
    d454:	ef 57       	subi	r30, 0x7F	; 127
    d456:	fd 4f       	sbci	r31, 0xFD	; 253
    d458:	80 81       	ld	r24, Z
    d45a:	8c 93       	st	X, r24
    index++;
    d45c:	9f 5f       	subi	r25, 0xFF	; 255
    d45e:	94 31       	cpi	r25, 0x14	; 20
    d460:	48 f4       	brcc	.+18     	; 0xd474 <recv_input+0x78>
    d462:	e9 2f       	mov	r30, r25
    d464:	ff 27       	eor	r31, r31
    d466:	ef 57       	subi	r30, 0x7F	; 127
    d468:	fd 4f       	sbci	r31, 0xFD	; 253
    d46a:	e0 81       	ld	r30, Z
    d46c:	ee 23       	and	r30, r30
    d46e:	11 f0       	breq	.+4      	; 0xd474 <recv_input+0x78>
    d470:	ed 33       	cpi	r30, 0x3D	; 61
    d472:	41 f7       	brne	.-48     	; 0xd444 <recv_input+0x48>
    d474:	a0 91 33 02 	lds	r26, 0x0233
    d478:	b0 91 34 02 	lds	r27, 0x0234
  }
  if (index < sizeof(do_cmdbuf)) {
    d47c:	94 31       	cpi	r25, 0x14	; 20
    d47e:	68 f4       	brcc	.+26     	; 0xd49a <recv_input+0x9e>
    cmd[index] = 0;
    d480:	89 2f       	mov	r24, r25
    d482:	99 27       	eor	r25, r25
    d484:	a8 0f       	add	r26, r24
    d486:	b9 1f       	adc	r27, r25
    d488:	1c 92       	st	X, r1
    args = &s[index];
    d48a:	fc 01       	movw	r30, r24
    d48c:	ef 57       	subi	r30, 0x7F	; 127
    d48e:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d490:	80 81       	ld	r24, Z
    d492:	8d 33       	cpi	r24, 0x3D	; 61
    d494:	21 f4       	brne	.+8      	; 0xd49e <recv_input+0xa2>
    d496:	31 96       	adiw	r30, 0x01	; 1
    d498:	fb cf       	rjmp	.-10     	; 0xd490 <recv_input+0x94>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d49a:	fd 01       	movw	r30, r26
    d49c:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d49e:	e0 91 33 02 	lds	r30, 0x0233
    d4a2:	f0 91 34 02 	lds	r31, 0x0234
    d4a6:	80 81       	ld	r24, Z
    d4a8:	88 23       	and	r24, r24
    d4aa:	09 f4       	brne	.+2      	; 0xd4ae <recv_input+0xb2>
    d4ac:	6a c0       	rjmp	.+212    	; 0xd582 <recv_input+0x186>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d4ae:	64 e7       	ldi	r22, 0x74	; 116
    d4b0:	70 e0       	ldi	r23, 0x00	; 0
    d4b2:	99 27       	eor	r25, r25
    d4b4:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d4b8:	89 2b       	or	r24, r25
    d4ba:	09 f0       	breq	.+2      	; 0xd4be <recv_input+0xc2>
    d4bc:	62 c0       	rjmp	.+196    	; 0xd582 <recv_input+0x186>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d4be:	82 e0       	ldi	r24, 0x02	; 2
    d4c0:	90 e0       	ldi	r25, 0x00	; 0
    d4c2:	0e 94 70 75 	call	0xeae0	; 0xeae0 <MEMBLOCK_Allocate>
    d4c6:	ec 01       	movw	r28, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d4c8:	9c 01       	movw	r18, r24
    d4ca:	43 e0       	ldi	r20, 0x03	; 3
    d4cc:	50 e0       	ldi	r21, 0x00	; 0
    d4ce:	61 e0       	ldi	r22, 0x01	; 1
    d4d0:	70 e0       	ldi	r23, 0x00	; 0
    d4d2:	80 91 33 02 	lds	r24, 0x0233
    d4d6:	90 91 34 02 	lds	r25, 0x0234
    d4da:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <substr>
    d4de:	90 93 5b 02 	sts	0x025B, r25
    d4e2:	80 93 5a 02 	sts	0x025A, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d4e6:	ce 01       	movw	r24, r28
    d4e8:	0e 94 18 76 	call	0xec30	; 0xec30 <MEMBLOCK_Free>
	// 2	unsigned char	Pack State of Health				0.5%
	// 3	unsigned char	Max Pack Temperature				1 deg C
	// 4-5	short			Min Pack Voltage					1mV
	// 6-7	short			Max Pack Voltage					1mV
	 
	if (strcmp(can_addr, "630") == 0) {
    d4ec:	64 e1       	ldi	r22, 0x14	; 20
    d4ee:	72 e0       	ldi	r23, 0x02	; 2
    d4f0:	80 91 5a 02 	lds	r24, 0x025A
    d4f4:	90 91 5b 02 	lds	r25, 0x025B
    d4f8:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d4fc:	7c 01       	movw	r14, r24
    d4fe:	89 2b       	or	r24, r25
    d500:	09 f0       	breq	.+2      	; 0xd504 <recv_input+0x108>
    d502:	3f c0       	rjmp	.+126    	; 0xd582 <recv_input+0x186>
		wdt_reset();
    d504:	a8 95       	wdr
		
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d506:	82 e0       	ldi	r24, 0x02	; 2
    d508:	90 e0       	ldi	r25, 0x00	; 0
    d50a:	0e 94 70 75 	call	0xeae0	; 0xeae0 <MEMBLOCK_Allocate>
    d50e:	88 83       	st	Y, r24

		// SOC, byte 0
		raw_byte = substr(cmd, 5, 2,pnew);
    d510:	9e 01       	movw	r18, r28
    d512:	42 e0       	ldi	r20, 0x02	; 2
    d514:	50 e0       	ldi	r21, 0x00	; 0
    d516:	65 e0       	ldi	r22, 0x05	; 5
    d518:	70 e0       	ldi	r23, 0x00	; 0
    d51a:	80 91 33 02 	lds	r24, 0x0233
    d51e:	90 91 34 02 	lds	r25, 0x0234
    d522:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <substr>
    d526:	8c 01       	movw	r16, r24
		MEM_FREE(pnew);
    d528:	ce 01       	movw	r24, r28
    d52a:	0e 94 18 76 	call	0xec30	; 0xec30 <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d52e:	c8 01       	movw	r24, r16
    d530:	0e 94 e4 69 	call	0xd3c8	; 0xd3c8 <xstrtoi>
		value = value/2;	// 0.5 % per LSB
    d534:	9c 01       	movw	r18, r24
    d536:	97 ff       	sbrs	r25, 7
    d538:	02 c0       	rjmp	.+4      	; 0xd53e <recv_input+0x142>
    d53a:	2f 5f       	subi	r18, 0xFF	; 255
    d53c:	3f 4f       	sbci	r19, 0xFF	; 255
    d53e:	35 95       	asr	r19
    d540:	27 95       	ror	r18
		LCD_UpdateSOC(value);
    d542:	82 2f       	mov	r24, r18
    d544:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>
*/
		
		// Small status line for each frame received. Since ID 630 should
		// be transmitted once per second, there should be small but visible
		// blinking of few pixels in one of the corners of the display. 		
		if (la == 0)
    d548:	80 91 18 02 	lds	r24, 0x0218
    d54c:	90 91 19 02 	lds	r25, 0x0219
    d550:	89 2b       	or	r24, r25
    d552:	69 f4       	brne	.+26     	; 0xd56e <recv_input+0x172>
		{
				LCD_ClrLine(1,63,2,63);
    d554:	2f e3       	ldi	r18, 0x3F	; 63
    d556:	42 e0       	ldi	r20, 0x02	; 2
    d558:	62 2f       	mov	r22, r18
    d55a:	81 e0       	ldi	r24, 0x01	; 1
    d55c:	0e 94 8c 72 	call	0xe518	; 0xe518 <LCD_ClrLine>
				la = 1;
    d560:	81 e0       	ldi	r24, 0x01	; 1
    d562:	90 e0       	ldi	r25, 0x00	; 0
    d564:	90 93 19 02 	sts	0x0219, r25
    d568:	80 93 18 02 	sts	0x0218, r24
    d56c:	0a c0       	rjmp	.+20     	; 0xd582 <recv_input+0x186>
		} else {
				LCD_SetLine(1,63,2,63);
    d56e:	2f e3       	ldi	r18, 0x3F	; 63
    d570:	42 e0       	ldi	r20, 0x02	; 2
    d572:	62 2f       	mov	r22, r18
    d574:	81 e0       	ldi	r24, 0x01	; 1
    d576:	0e 94 24 72 	call	0xe448	; 0xe448 <LCD_SetLine>
				la = 0;
    d57a:	f0 92 19 02 	sts	0x0219, r15
    d57e:	e0 92 18 02 	sts	0x0218, r14
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d582:	10 92 32 02 	sts	0x0232, r1
    d586:	10 c0       	rjmp	.+32     	; 0xd5a8 <recv_input+0x1ac>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d588:	80 91 32 02 	lds	r24, 0x0232
    d58c:	e8 2f       	mov	r30, r24
    d58e:	ff 27       	eor	r31, r31
    d590:	ef 57       	subi	r30, 0x7F	; 127
    d592:	fd 4f       	sbci	r31, 0xFD	; 253
    d594:	90 83       	st	Z, r25
    d596:	8f 5f       	subi	r24, 0xFF	; 255
    d598:	80 93 32 02 	sts	0x0232, r24
    if (idx == CMD_BUF_LEN) {
    d59c:	80 38       	cpi	r24, 0x80	; 128
    d59e:	21 f4       	brne	.+8      	; 0xd5a8 <recv_input+0x1ac>
      idx = 0;
    d5a0:	10 92 32 02 	sts	0x0232, r1
      recv_input_cmdbuf[idx] = 0;
    d5a4:	10 92 81 02 	sts	0x0281, r1
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	ef 90       	pop	r14
    d5b4:	08 95       	ret

0000d5b6 <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d5b6:	ce ef       	ldi	r28, 0xFE	; 254
    d5b8:	d1 e2       	ldi	r29, 0x21	; 33
    d5ba:	de bf       	out	0x3e, r29	; 62
    d5bc:	cd bf       	out	0x3d, r28	; 61
	//wdt_enable(WDTO_4S);
	
	LCD_UpdateSOC(1);
    d5be:	81 e0       	ldi	r24, 0x01	; 1
    d5c0:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	stdout = &mystdout;
    d5c4:	84 e2       	ldi	r24, 0x24	; 36
    d5c6:	92 e0       	ldi	r25, 0x02	; 2
    d5c8:	90 93 a8 18 	sts	0x18A8, r25
    d5cc:	80 93 a7 18 	sts	0x18A7, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d5d0:	54 9a       	sbi	0x0a, 4	; 10
    d5d2:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d5d4:	0e 94 a6 69 	call	0xd34c	; 0xd34c <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d5d8:	82 e0       	ldi	r24, 0x02	; 2
    d5da:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d5de:	0e 94 b5 6b 	call	0xd76a	; 0xd76a <InitMemory>

	LCD_UpdateSOC(3);
    d5e2:	83 e0       	ldi	r24, 0x03	; 3
    d5e4:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	LCD_Init();
    d5e8:	0e 94 a9 6c 	call	0xd952	; 0xd952 <LCD_Init>

	LCD_UpdateSOC(4);
    d5ec:	84 e0       	ldi	r24, 0x04	; 4
    d5ee:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	TIMING_Init();
    d5f2:	0e 94 a6 78 	call	0xf14c	; 0xf14c <TIMING_Init>

	LCD_UpdateSOC(5);
    d5f6:	85 e0       	ldi	r24, 0x05	; 5
    d5f8:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	RTC_Init();
    d5fc:	0e 94 6f 78 	call	0xf0de	; 0xf0de <RTC_Init>

	LCD_UpdateSOC(6);
    d600:	86 e0       	ldi	r24, 0x06	; 6
    d602:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d606:	87 e4       	ldi	r24, 0x47	; 71
    d608:	99 e7       	ldi	r25, 0x79	; 121
    d60a:	0e 94 9e 78 	call	0xf13c	; 0xf13c <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d60e:	87 e0       	ldi	r24, 0x07	; 7
    d610:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d614:	62 e3       	ldi	r22, 0x32	; 50
    d616:	84 e6       	ldi	r24, 0x64	; 100
    d618:	0e 94 30 73 	call	0xe660	; 0xe660 <JOYSTICK_Init>
	 
	//DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.

	//USART_Init();
	// hmm ?
	CAL_enable_interrupt();
    d61c:	78 94       	sei
	
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d61e:	0c e5       	ldi	r16, 0x5C	; 92
    d620:	12 e0       	ldi	r17, 0x02	; 2
    d622:	23 e4       	ldi	r18, 0x43	; 67
    d624:	33 e7       	ldi	r19, 0x73	; 115
    d626:	41 e0       	ldi	r20, 0x01	; 1
    d628:	50 e0       	ldi	r21, 0x00	; 0
    d62a:	60 e0       	ldi	r22, 0x00	; 0
    d62c:	70 e0       	ldi	r23, 0x00	; 0
    d62e:	8f ef       	ldi	r24, 0xFF	; 255
    d630:	0e 94 0b 7b 	call	0xf616	; 0xf616 <TIMING_AddRepCallbackEvent>
	
	// happy startup sound
	LCD_UpdateSOC(8);
    d634:	88 e0       	ldi	r24, 0x08	; 8
    d636:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;
			
	// interrupt enable
	SREG |= 1<<7;
    d63a:	8f b7       	in	r24, 0x3f	; 63
    d63c:	80 68       	ori	r24, 0x80	; 128
    d63e:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d640:	89 e0       	ldi	r24, 0x09	; 9
    d642:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/
	
	LCD_UpdateSOC(10);
    d646:	8a e0       	ldi	r24, 0x0A	; 10
    d648:	0e 94 f3 71 	call	0xe3e6	; 0xe3e6 <LCD_UpdateSOC>
	
	//1 POWER_EnterIdleSleepMode();
	
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );
    d64c:	8c e7       	ldi	r24, 0x7C	; 124
    d64e:	94 e9       	ldi	r25, 0x94	; 148
    d650:	0e 94 6f 76 	call	0xecde	; 0xecde <PICTURE_CopyFullscreenFlashToLcd>
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_amperi_logo );
	

	// init backlight
	BACKLIGHT_Init();
    d654:	0e 94 c1 73 	call	0xe782	; 0xe782 <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d658:	6c e6       	ldi	r22, 0x6C	; 108
    d65a:	79 e6       	ldi	r23, 0x69	; 105
    d65c:	88 e0       	ldi	r24, 0x08	; 8
    d65e:	90 e0       	ldi	r25, 0x00	; 0
    d660:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d664:	90 93 1d 02 	sts	0x021D, r25
    d668:	80 93 1c 02 	sts	0x021C, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d66c:	6c e6       	ldi	r22, 0x6C	; 108
    d66e:	79 e6       	ldi	r23, 0x69	; 105
    d670:	8a e0       	ldi	r24, 0x0A	; 10
    d672:	90 e0       	ldi	r25, 0x00	; 0
    d674:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d678:	90 93 23 02 	sts	0x0223, r25
    d67c:	80 93 22 02 	sts	0x0222, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d680:	6c e6       	ldi	r22, 0x6C	; 108
    d682:	79 e6       	ldi	r23, 0x69	; 105
    d684:	8c e0       	ldi	r24, 0x0C	; 12
    d686:	90 e0       	ldi	r25, 0x00	; 0
    d688:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d68c:	90 93 21 02 	sts	0x0221, r25
    d690:	80 93 20 02 	sts	0x0220, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d694:	6c e6       	ldi	r22, 0x6C	; 108
    d696:	79 e6       	ldi	r23, 0x69	; 105
    d698:	8e e0       	ldi	r24, 0x0E	; 14
    d69a:	90 e0       	ldi	r25, 0x00	; 0
    d69c:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d6a0:	90 93 1f 02 	sts	0x021F, r25
    d6a4:	80 93 1e 02 	sts	0x021E, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d6a8:	6c e6       	ldi	r22, 0x6C	; 108
    d6aa:	79 e6       	ldi	r23, 0x69	; 105
    d6ac:	80 e1       	ldi	r24, 0x10	; 16
    d6ae:	90 e0       	ldi	r25, 0x00	; 0
    d6b0:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d6b4:	90 93 1b 02 	sts	0x021B, r25
    d6b8:	80 93 1a 02 	sts	0x021A, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d6bc:	40 91 1e 02 	lds	r20, 0x021E
    d6c0:	60 91 20 02 	lds	r22, 0x0220
    d6c4:	80 91 22 02 	lds	r24, 0x0222
    d6c8:	0e 94 19 74 	call	0xe832	; 0xe832 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d6cc:	80 91 1a 02 	lds	r24, 0x021A
    d6d0:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <BACKLIGHT_SetIntensity>
	
	PlaySound(11);
    d6d4:	8b e0       	ldi	r24, 0x0B	; 11
    d6d6:	90 e0       	ldi	r25, 0x00	; 0
    d6d8:	0e 94 fd 6b 	call	0xd7fa	; 0xd7fa <PlaySound>

	TIMING_event_t * splashScreenEvent = MEM_ALLOC( TIMING_event_t );
    d6dc:	8f e0       	ldi	r24, 0x0F	; 15
    d6de:	90 e0       	ldi	r25, 0x00	; 0
    d6e0:	0e 94 70 75 	call	0xeae0	; 0xeae0 <MEMBLOCK_Allocate>
    d6e4:	8c 01       	movw	r16, r24
	if (splashScreenEvent == NULL) { UnknownError(); }
    d6e6:	89 2b       	or	r24, r25
    d6e8:	11 f4       	brne	.+4      	; 0xd6ee <main+0x138>
    d6ea:	0e 94 74 69 	call	0xd2e8	; 0xd2e8 <UnknownError>
	TIMING_counter_t volatile splashCounter = 0;
    d6ee:	19 82       	std	Y+1, r1	; 0x01
	TIMING_AddCounterEventAfter( RTC_TICKS_PER_SECOND * SPLASH_SCREEN_SECONDS,
    d6f0:	98 01       	movw	r18, r16
    d6f2:	ae 01       	movw	r20, r28
    d6f4:	4f 5f       	subi	r20, 0xFF	; 255
    d6f6:	5f 4f       	sbci	r21, 0xFF	; 255
    d6f8:	60 e8       	ldi	r22, 0x80	; 128
    d6fa:	71 e0       	ldi	r23, 0x01	; 1
    d6fc:	80 e0       	ldi	r24, 0x00	; 0
    d6fe:	90 e0       	ldi	r25, 0x00	; 0
    d700:	0e 94 62 7a 	call	0xf4c4	; 0xf4c4 <TIMING_AddCounterEventAfter>
			&splashCounter, splashScreenEvent );
	bool exit = false;
    d704:	ff 24       	eor	r15, r15
	do {
		POWER_EnterIdleSleepMode();
    d706:	0e 94 bc 73 	call	0xe778	; 0xe778 <POWER_EnterIdleSleepMode>
		if (JOYSTICK_GetState() != 0x00) { exit = true; };
    d70a:	0e 94 3f 73 	call	0xe67e	; 0xe67e <JOYSTICK_GetState>
    d70e:	88 23       	and	r24, r24
    d710:	11 f0       	breq	.+4      	; 0xd716 <main+0x160>
    d712:	51 e0       	ldi	r21, 0x01	; 1
    d714:	f5 2e       	mov	r15, r21
		if (splashCounter != 0) { exit = true; }
    d716:	89 81       	ldd	r24, Y+1	; 0x01
    d718:	88 23       	and	r24, r24
    d71a:	11 f4       	brne	.+4      	; 0xd720 <main+0x16a>
	} while (exit == false);
    d71c:	ff 20       	and	r15, r15
    d71e:	99 f3       	breq	.-26     	; 0xd706 <main+0x150>


	TIMING_RemoveEvent( splashScreenEvent );
    d720:	c8 01       	movw	r24, r16
    d722:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <TIMING_RemoveEvent>
	MEM_FREE( splashScreenEvent );
    d726:	c8 01       	movw	r24, r16
    d728:	0e 94 18 76 	call	0xec30	; 0xec30 <MEMBLOCK_Free>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d72c:	8d ec       	ldi	r24, 0xCD	; 205
    d72e:	97 e0       	ldi	r25, 0x07	; 7
    d730:	a7 e0       	ldi	r26, 0x07	; 7
    d732:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d734:	01 97       	sbiw	r24, 0x01	; 1
    d736:	a1 09       	sbc	r26, r1
    d738:	b1 09       	sbc	r27, r1
    d73a:	00 00       	nop
    d73c:	01 f0       	breq	.+0      	; 0xd73e <main+0x188>
    d73e:	d1 f7       	brne	.-12     	; 0xd734 <main+0x17e>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d740:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d742:	00 00       	nop
	
	DELAY_MS(500);

	LCD_ClrBox(0,0,128,64);
    d744:	20 e4       	ldi	r18, 0x40	; 64
    d746:	40 e8       	ldi	r20, 0x80	; 128
    d748:	60 e0       	ldi	r22, 0x00	; 0
    d74a:	86 2f       	mov	r24, r22
    d74c:	0e 94 39 6f 	call	0xde72	; 0xde72 <LCD_ClrBox>
*/

	while (1)
 	{

		if (urx_recv) 
    d750:	80 91 6c 02 	lds	r24, 0x026C
    d754:	88 23       	and	r24, r24
    d756:	e1 f3       	breq	.-8      	; 0xd750 <main+0x19a>
		{	

			cli();
    d758:	f8 94       	cli
            urx_recv = 0;
    d75a:	10 92 6c 02 	sts	0x026C, r1
            ch = urx;
    d75e:	80 91 6b 02 	lds	r24, 0x026B
            sei();
    d762:	78 94       	sei
            // build a command line and execute commands when complete
            recv_input(ch);
    d764:	0e 94 fe 69 	call	0xd3fc	; 0xd3fc <recv_input>
    d768:	f3 cf       	rjmp	.-26     	; 0xd750 <main+0x19a>

0000d76a <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d76a:	6a e0       	ldi	r22, 0x0A	; 10
    d76c:	78 e1       	ldi	r23, 0x18	; 24
    d76e:	84 e0       	ldi	r24, 0x04	; 4
    d770:	90 e0       	ldi	r25, 0x00	; 0
    d772:	0e 94 24 75 	call	0xea48	; 0xea48 <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d776:	21 e0       	ldi	r18, 0x01	; 1
    d778:	33 e0       	ldi	r19, 0x03	; 3
    d77a:	40 e1       	ldi	r20, 0x10	; 16
    d77c:	50 e0       	ldi	r21, 0x00	; 0
    d77e:	ba 01       	movw	r22, r20
    d780:	80 e0       	ldi	r24, 0x00	; 0
    d782:	90 e0       	ldi	r25, 0x00	; 0
    d784:	0e 94 2d 75 	call	0xea5a	; 0xea5a <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d788:	23 e0       	ldi	r18, 0x03	; 3
    d78a:	34 e0       	ldi	r19, 0x04	; 4
    d78c:	40 e2       	ldi	r20, 0x20	; 32
    d78e:	50 e0       	ldi	r21, 0x00	; 0
    d790:	ba 01       	movw	r22, r20
    d792:	81 e0       	ldi	r24, 0x01	; 1
    d794:	90 e0       	ldi	r25, 0x00	; 0
    d796:	0e 94 2d 75 	call	0xea5a	; 0xea5a <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d79a:	27 e0       	ldi	r18, 0x07	; 7
    d79c:	38 e0       	ldi	r19, 0x08	; 8
    d79e:	40 e1       	ldi	r20, 0x10	; 16
    d7a0:	50 e0       	ldi	r21, 0x00	; 0
    d7a2:	60 e4       	ldi	r22, 0x40	; 64
    d7a4:	70 e0       	ldi	r23, 0x00	; 0
    d7a6:	82 e0       	ldi	r24, 0x02	; 2
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	0e 94 2d 75 	call	0xea5a	; 0xea5a <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d7ae:	29 e0       	ldi	r18, 0x09	; 9
    d7b0:	3c e0       	ldi	r19, 0x0C	; 12
    d7b2:	43 e0       	ldi	r20, 0x03	; 3
    d7b4:	50 e0       	ldi	r21, 0x00	; 0
    d7b6:	60 e0       	ldi	r22, 0x00	; 0
    d7b8:	74 e0       	ldi	r23, 0x04	; 4
    d7ba:	ca 01       	movw	r24, r20
    d7bc:	0e 94 2d 75 	call	0xea5a	; 0xea5a <MEMBLOCK_InitBag>
    d7c0:	08 95       	ret

0000d7c2 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d7c2:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d7c4:	e8 2f       	mov	r30, r24
    d7c6:	ff 27       	eor	r31, r31
    d7c8:	ee 0f       	add	r30, r30
    d7ca:	ff 1f       	adc	r31, r31
    d7cc:	e4 58       	subi	r30, 0x84	; 132
    d7ce:	f8 43       	sbci	r31, 0x38	; 56
    d7d0:	85 91       	lpm	r24, Z+
    d7d2:	94 91       	lpm	r25, Z+
    d7d4:	bc 01       	movw	r22, r24
    d7d6:	c9 01       	movw	r24, r18
    d7d8:	0e 94 54 7c 	call	0xf8a8	; 0xf8a8 <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d7dc:	8d ec       	ldi	r24, 0xCD	; 205
    d7de:	97 e0       	ldi	r25, 0x07	; 7
    d7e0:	a7 e0       	ldi	r26, 0x07	; 7
    d7e2:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d7e4:	01 97       	sbiw	r24, 0x01	; 1
    d7e6:	a1 09       	sbc	r26, r1
    d7e8:	b1 09       	sbc	r27, r1
    d7ea:	00 00       	nop
    d7ec:	01 f0       	breq	.+0      	; 0xd7ee <SONG_PlayTune+0x2c>
    d7ee:	d1 f7       	brne	.-12     	; 0xd7e4 <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d7f0:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d7f2:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d7f4:	0e 94 45 7c 	call	0xf88a	; 0xf88a <SONG_StopTune>
    d7f8:	08 95       	ret

0000d7fa <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d7fa:	cf 92       	push	r12
    d7fc:	df 92       	push	r13
    d7fe:	ef 92       	push	r14
    d800:	ff 92       	push	r15
    d802:	0f 93       	push	r16
    d804:	1f 93       	push	r17
    d806:	cf 93       	push	r28
    d808:	df 93       	push	r29
    d80a:	cd b7       	in	r28, 0x3d	; 61
    d80c:	de b7       	in	r29, 0x3e	; 62
    d80e:	2e 97       	sbiw	r28, 0x0e	; 14
    d810:	0f b6       	in	r0, 0x3f	; 63
    d812:	f8 94       	cli
    d814:	de bf       	out	0x3e, r29	; 62
    d816:	0f be       	out	0x3f, r0	; 63
    d818:	cd bf       	out	0x3d, r28	; 61
    d81a:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d81c:	88 e2       	ldi	r24, 0x28	; 40
    d81e:	90 e0       	ldi	r25, 0x00	; 0
    d820:	0e 94 70 75 	call	0xeae0	; 0xeae0 <MEMBLOCK_Allocate>
    d824:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d826:	80 e3       	ldi	r24, 0x30	; 48
    d828:	90 e0       	ldi	r25, 0x00	; 0
    d82a:	0e 94 70 75 	call	0xeae0	; 0xeae0 <MEMBLOCK_Allocate>
    d82e:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d830:	48 e2       	ldi	r20, 0x28	; 40
    d832:	b7 01       	movw	r22, r14
    d834:	ce 01       	movw	r24, r28
    d836:	01 96       	adiw	r24, 0x01	; 1
    d838:	0e 94 bf 74 	call	0xe97e	; 0xe97e <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d83c:	be 01       	movw	r22, r28
    d83e:	6f 5f       	subi	r22, 0xFF	; 255
    d840:	7f 4f       	sbci	r23, 0xFF	; 255
    d842:	80 2f       	mov	r24, r16
    d844:	0e 94 e1 6b 	call	0xd7c2	; 0xd7c2 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d848:	c7 01       	movw	r24, r14
    d84a:	0e 94 18 76 	call	0xec30	; 0xec30 <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d84e:	c6 01       	movw	r24, r12
    d850:	0e 94 18 76 	call	0xec30	; 0xec30 <MEMBLOCK_Free>
    d854:	2e 96       	adiw	r28, 0x0e	; 14
    d856:	0f b6       	in	r0, 0x3f	; 63
    d858:	f8 94       	cli
    d85a:	de bf       	out	0x3e, r29	; 62
    d85c:	0f be       	out	0x3f, r0	; 63
    d85e:	cd bf       	out	0x3d, r28	; 61
    d860:	df 91       	pop	r29
    d862:	cf 91       	pop	r28
    d864:	1f 91       	pop	r17
    d866:	0f 91       	pop	r16
    d868:	ff 90       	pop	r15
    d86a:	ef 90       	pop	r14
    d86c:	df 90       	pop	r13
    d86e:	cf 90       	pop	r12
    d870:	08 95       	ret

0000d872 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d872:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d874:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d876:	85 ef       	ldi	r24, 0xF5	; 245
    d878:	97 e6       	ldi	r25, 0x67	; 103
    d87a:	a1 e0       	ldi	r26, 0x01	; 1
    d87c:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d87e:	01 97       	sbiw	r24, 0x01	; 1
    d880:	a1 09       	sbc	r26, r1
    d882:	b1 09       	sbc	r27, r1
    d884:	00 00       	nop
    d886:	01 f0       	breq	.+0      	; 0xd888 <S6B1713_HardReset+0x16>
    d888:	d1 f7       	brne	.-12     	; 0xd87e <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d88a:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d88c:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d88e:	41 9a       	sbi	0x08, 1	; 8
    d890:	08 95       	ret

0000d892 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d892:	0e 94 39 6c 	call	0xd872	; 0xd872 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d896:	87 e8       	ldi	r24, 0x87	; 135
    d898:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d89c:	80 e8       	ldi	r24, 0x80	; 128
    d89e:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d8a2:	38 9a       	sbi	0x07, 0	; 7
    d8a4:	08 95       	ret

0000d8a6 <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d8a6:	40 98       	cbi	0x08, 0	; 8
    d8a8:	8f ea       	ldi	r24, 0xAF	; 175
    d8aa:	80 93 00 80 	sts	0x8000, r24
    d8ae:	08 95       	ret

0000d8b0 <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d8b0:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d8b2:	40 98       	cbi	0x08, 0	; 8
    d8b4:	80 64       	ori	r24, 0x40	; 64
    d8b6:	80 93 00 80 	sts	0x8000, r24
    d8ba:	08 95       	ret

0000d8bc <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d8bc:	98 2f       	mov	r25, r24
    d8be:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d8c0:	40 98       	cbi	0x08, 0	; 8
    d8c2:	81 e8       	ldi	r24, 0x81	; 129
    d8c4:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d8c8:	40 98       	cbi	0x08, 0	; 8
    d8ca:	90 93 00 80 	sts	0x8000, r25
    d8ce:	08 95       	ret

0000d8d0 <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d8d0:	40 98       	cbi	0x08, 0	; 8
    d8d2:	80 ea       	ldi	r24, 0xA0	; 160
    d8d4:	80 93 00 80 	sts	0x8000, r24
    d8d8:	08 95       	ret

0000d8da <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d8da:	40 98       	cbi	0x08, 0	; 8
    d8dc:	83 ea       	ldi	r24, 0xA3	; 163
    d8de:	80 93 00 80 	sts	0x8000, r24
    d8e2:	08 95       	ret

0000d8e4 <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d8e4:	40 98       	cbi	0x08, 0	; 8
    d8e6:	80 ec       	ldi	r24, 0xC0	; 192
    d8e8:	80 93 00 80 	sts	0x8000, r24
    d8ec:	08 95       	ret

0000d8ee <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d8ee:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d8f0:	40 98       	cbi	0x08, 0	; 8
    d8f2:	88 62       	ori	r24, 0x28	; 40
    d8f4:	80 93 00 80 	sts	0x8000, r24
    d8f8:	08 95       	ret

0000d8fa <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d8fa:	40 98       	cbi	0x08, 0	; 8
    d8fc:	87 70       	andi	r24, 0x07	; 7
    d8fe:	80 62       	ori	r24, 0x20	; 32
    d900:	80 93 00 80 	sts	0x8000, r24
    d904:	08 95       	ret

0000d906 <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d906:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d908:	90 e0       	ldi	r25, 0x00	; 0
    d90a:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d90c:	89 2f       	mov	r24, r25
    d90e:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d910:	40 98       	cbi	0x08, 0	; 8
    d912:	80 6b       	ori	r24, 0xB0	; 176
    d914:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d918:	40 98       	cbi	0x08, 0	; 8
    d91a:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d91e:	40 98       	cbi	0x08, 0	; 8
    d920:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d924:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d926:	40 9a       	sbi	0x08, 0	; 8
    d928:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d92c:	81 50       	subi	r24, 0x01	; 1
    d92e:	d9 f7       	brne	.-10     	; 0xd926 <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d930:	9f 5f       	subi	r25, 0xFF	; 255
    d932:	98 30       	cpi	r25, 0x08	; 8
    d934:	58 f3       	brcs	.-42     	; 0xd90c <LCD_SetScreen+0x6>
    d936:	08 95       	ret

0000d938 <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d938:	1f 93       	push	r17
    d93a:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    d93c:	87 70       	andi	r24, 0x07	; 7
    d93e:	88 0f       	add	r24, r24
    d940:	88 0f       	add	r24, r24
    d942:	88 0f       	add	r24, r24
    d944:	86 0f       	add	r24, r22
    d946:	0e 94 58 6c 	call	0xd8b0	; 0xd8b0 <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    d94a:	10 93 35 02 	sts	0x0235, r17
    d94e:	1f 91       	pop	r17
    d950:	08 95       	ret

0000d952 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    d952:	ef 92       	push	r14
    d954:	ff 92       	push	r15
    d956:	0f 93       	push	r16
    d958:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    d95a:	0e 94 49 6c 	call	0xd892	; 0xd892 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    d95e:	84 e0       	ldi	r24, 0x04	; 4
    d960:	0e 94 77 6c 	call	0xd8ee	; 0xd8ee <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    d964:	85 e6       	ldi	r24, 0x65	; 101
    d966:	e8 2e       	mov	r14, r24
    d968:	8e e0       	ldi	r24, 0x0E	; 14
    d96a:	f8 2e       	mov	r15, r24
    d96c:	01 2d       	mov	r16, r1
    d96e:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d970:	c7 01       	movw	r24, r14
    d972:	01 97       	sbiw	r24, 0x01	; 1
    d974:	f1 f7       	brne	.-4      	; 0xd972 <LCD_Init+0x20>
    d976:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d978:	00 c0       	rjmp	.+0      	; 0xd97a <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    d97a:	86 e0       	ldi	r24, 0x06	; 6
    d97c:	0e 94 77 6c 	call	0xd8ee	; 0xd8ee <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d980:	c7 01       	movw	r24, r14
    d982:	01 97       	sbiw	r24, 0x01	; 1
    d984:	f1 f7       	brne	.-4      	; 0xd982 <LCD_Init+0x30>
    d986:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d988:	00 c0       	rjmp	.+0      	; 0xd98a <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    d98a:	87 e0       	ldi	r24, 0x07	; 7
    d98c:	0e 94 77 6c 	call	0xd8ee	; 0xd8ee <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    d990:	86 e0       	ldi	r24, 0x06	; 6
    d992:	90 e0       	ldi	r25, 0x00	; 0
    d994:	0e 94 7d 6c 	call	0xd8fa	; 0xd8fa <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    d998:	84 e0       	ldi	r24, 0x04	; 4
    d99a:	0e 94 5e 6c 	call	0xd8bc	; 0xd8bc <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d99e:	c7 01       	movw	r24, r14
    d9a0:	01 97       	sbiw	r24, 0x01	; 1
    d9a2:	f1 f7       	brne	.-4      	; 0xd9a0 <LCD_Init+0x4e>
    d9a4:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d9a6:	00 c0       	rjmp	.+0      	; 0xd9a8 <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    d9a8:	0e 94 6d 6c 	call	0xd8da	; 0xd8da <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    d9ac:	0e 94 68 6c 	call	0xd8d0	; 0xd8d0 <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    d9b0:	0e 94 72 6c 	call	0xd8e4	; 0xd8e4 <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    d9b4:	60 e0       	ldi	r22, 0x00	; 0
    d9b6:	86 2f       	mov	r24, r22
    d9b8:	0e 94 9c 6c 	call	0xd938	; 0xd938 <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    d9bc:	80 e0       	ldi	r24, 0x00	; 0
    d9be:	0e 94 83 6c 	call	0xd906	; 0xd906 <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    d9c2:	0e 94 53 6c 	call	0xd8a6	; 0xd8a6 <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    d9c6:	85 e5       	ldi	r24, 0x55	; 85
    d9c8:	0e 94 83 6c 	call	0xd906	; 0xd906 <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    d9cc:	80 e0       	ldi	r24, 0x00	; 0
    d9ce:	0e 94 83 6c 	call	0xd906	; 0xd906 <LCD_SetScreen>
    d9d2:	1f 91       	pop	r17
    d9d4:	0f 91       	pop	r16
    d9d6:	ff 90       	pop	r15
    d9d8:	ef 90       	pop	r14
    d9da:	08 95       	ret

0000d9dc <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    d9dc:	cf 93       	push	r28
    d9de:	df 93       	push	r29
    d9e0:	cd b7       	in	r28, 0x3d	; 61
    d9e2:	de b7       	in	r29, 0x3e	; 62
    d9e4:	21 97       	sbiw	r28, 0x01	; 1
    d9e6:	0f b6       	in	r0, 0x3f	; 63
    d9e8:	f8 94       	cli
    d9ea:	de bf       	out	0x3e, r29	; 62
    d9ec:	0f be       	out	0x3f, r0	; 63
    d9ee:	cd bf       	out	0x3d, r28	; 61
    d9f0:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d9f2:	40 98       	cbi	0x08, 0	; 8
    d9f4:	80 ee       	ldi	r24, 0xE0	; 224
    d9f6:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d9fa:	86 2f       	mov	r24, r22
    d9fc:	86 95       	lsr	r24
    d9fe:	86 95       	lsr	r24
    da00:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da02:	40 98       	cbi	0x08, 0	; 8
    da04:	80 6b       	ori	r24, 0xB0	; 176
    da06:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da0a:	82 2f       	mov	r24, r18
    da0c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da0e:	40 98       	cbi	0x08, 0	; 8
    da10:	99 27       	eor	r25, r25
    da12:	44 e0       	ldi	r20, 0x04	; 4
    da14:	96 95       	lsr	r25
    da16:	87 95       	ror	r24
    da18:	4a 95       	dec	r20
    da1a:	e1 f7       	brne	.-8      	; 0xda14 <LCD_SetPixel+0x38>
    da1c:	80 61       	ori	r24, 0x10	; 16
    da1e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    da22:	40 98       	cbi	0x08, 0	; 8
    da24:	2f 70       	andi	r18, 0x0F	; 15
    da26:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    da2a:	40 9a       	sbi	0x08, 0	; 8
    da2c:	80 91 00 81 	lds	r24, 0x8100
    da30:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    da32:	40 9a       	sbi	0x08, 0	; 8
    da34:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    da38:	40 9a       	sbi	0x08, 0	; 8
    da3a:	26 2f       	mov	r18, r22
    da3c:	33 27       	eor	r19, r19
    da3e:	27 70       	andi	r18, 0x07	; 7
    da40:	30 70       	andi	r19, 0x00	; 0
    da42:	81 e0       	ldi	r24, 0x01	; 1
    da44:	90 e0       	ldi	r25, 0x00	; 0
    da46:	02 c0       	rjmp	.+4      	; 0xda4c <LCD_SetPixel+0x70>
    da48:	88 0f       	add	r24, r24
    da4a:	99 1f       	adc	r25, r25
    da4c:	2a 95       	dec	r18
    da4e:	e2 f7       	brpl	.-8      	; 0xda48 <LCD_SetPixel+0x6c>
    da50:	48 2b       	or	r20, r24
    da52:	40 93 00 81 	sts	0x8100, r20
    da56:	21 96       	adiw	r28, 0x01	; 1
    da58:	0f b6       	in	r0, 0x3f	; 63
    da5a:	f8 94       	cli
    da5c:	de bf       	out	0x3e, r29	; 62
    da5e:	0f be       	out	0x3f, r0	; 63
    da60:	cd bf       	out	0x3d, r28	; 61
    da62:	df 91       	pop	r29
    da64:	cf 91       	pop	r28
    da66:	08 95       	ret

0000da68 <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    da68:	cf 93       	push	r28
    da6a:	df 93       	push	r29
    da6c:	cd b7       	in	r28, 0x3d	; 61
    da6e:	de b7       	in	r29, 0x3e	; 62
    da70:	21 97       	sbiw	r28, 0x01	; 1
    da72:	0f b6       	in	r0, 0x3f	; 63
    da74:	f8 94       	cli
    da76:	de bf       	out	0x3e, r29	; 62
    da78:	0f be       	out	0x3f, r0	; 63
    da7a:	cd bf       	out	0x3d, r28	; 61
    da7c:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    da7e:	40 98       	cbi	0x08, 0	; 8
    da80:	80 ee       	ldi	r24, 0xE0	; 224
    da82:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    da86:	86 2f       	mov	r24, r22
    da88:	86 95       	lsr	r24
    da8a:	86 95       	lsr	r24
    da8c:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da8e:	40 98       	cbi	0x08, 0	; 8
    da90:	80 6b       	ori	r24, 0xB0	; 176
    da92:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da96:	82 2f       	mov	r24, r18
    da98:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da9a:	40 98       	cbi	0x08, 0	; 8
    da9c:	99 27       	eor	r25, r25
    da9e:	54 e0       	ldi	r21, 0x04	; 4
    daa0:	96 95       	lsr	r25
    daa2:	87 95       	ror	r24
    daa4:	5a 95       	dec	r21
    daa6:	e1 f7       	brne	.-8      	; 0xdaa0 <LCD_ClrPixel+0x38>
    daa8:	80 61       	ori	r24, 0x10	; 16
    daaa:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    daae:	40 98       	cbi	0x08, 0	; 8
    dab0:	2f 70       	andi	r18, 0x0F	; 15
    dab2:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    dab6:	40 9a       	sbi	0x08, 0	; 8
    dab8:	80 91 00 81 	lds	r24, 0x8100
    dabc:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    dabe:	40 9a       	sbi	0x08, 0	; 8
    dac0:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    dac4:	40 9a       	sbi	0x08, 0	; 8
    dac6:	26 2f       	mov	r18, r22
    dac8:	33 27       	eor	r19, r19
    daca:	27 70       	andi	r18, 0x07	; 7
    dacc:	30 70       	andi	r19, 0x00	; 0
    dace:	81 e0       	ldi	r24, 0x01	; 1
    dad0:	90 e0       	ldi	r25, 0x00	; 0
    dad2:	02 c0       	rjmp	.+4      	; 0xdad8 <LCD_ClrPixel+0x70>
    dad4:	88 0f       	add	r24, r24
    dad6:	99 1f       	adc	r25, r25
    dad8:	2a 95       	dec	r18
    dada:	e2 f7       	brpl	.-8      	; 0xdad4 <LCD_ClrPixel+0x6c>
    dadc:	80 95       	com	r24
    dade:	48 23       	and	r20, r24
    dae0:	40 93 00 81 	sts	0x8100, r20
    dae4:	21 96       	adiw	r28, 0x01	; 1
    dae6:	0f b6       	in	r0, 0x3f	; 63
    dae8:	f8 94       	cli
    daea:	de bf       	out	0x3e, r29	; 62
    daec:	0f be       	out	0x3f, r0	; 63
    daee:	cd bf       	out	0x3d, r28	; 61
    daf0:	df 91       	pop	r29
    daf2:	cf 91       	pop	r28
    daf4:	08 95       	ret

0000daf6 <LCD_SetHLine>:
	return readback;
}


void LCD_SetHLine( uint8_t x1, uint8_t x2, uint8_t y )
{
    daf6:	cf 93       	push	r28
    daf8:	df 93       	push	r29
    dafa:	cd b7       	in	r28, 0x3d	; 61
    dafc:	de b7       	in	r29, 0x3e	; 62
    dafe:	21 97       	sbiw	r28, 0x01	; 1
    db00:	0f b6       	in	r0, 0x3f	; 63
    db02:	f8 94       	cli
    db04:	de bf       	out	0x3e, r29	; 62
    db06:	0f be       	out	0x3f, r0	; 63
    db08:	cd bf       	out	0x3d, r28	; 61
    db0a:	58 2f       	mov	r21, r24
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    db0c:	68 17       	cp	r22, r24
    db0e:	10 f4       	brcc	.+4      	; 0xdb14 <LCD_SetHLine+0x1e>
		uint8_t temp = x1;
		x1 = x2;
    db10:	56 2f       	mov	r21, r22
		x2 = temp;
    db12:	68 2f       	mov	r22, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    db14:	40 98       	cbi	0x08, 0	; 8
    db16:	80 ee       	ldi	r24, 0xE0	; 224
    db18:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    db1c:	84 2f       	mov	r24, r20
    db1e:	86 95       	lsr	r24
    db20:	86 95       	lsr	r24
    db22:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    db24:	40 98       	cbi	0x08, 0	; 8
    db26:	80 6b       	ori	r24, 0xB0	; 176
    db28:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    db2c:	85 2f       	mov	r24, r21
    db2e:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    db30:	40 98       	cbi	0x08, 0	; 8
    db32:	99 27       	eor	r25, r25
    db34:	e4 e0       	ldi	r30, 0x04	; 4
    db36:	96 95       	lsr	r25
    db38:	87 95       	ror	r24
    db3a:	ea 95       	dec	r30
    db3c:	e1 f7       	brne	.-8      	; 0xdb36 <LCD_SetHLine+0x40>
    db3e:	80 61       	ori	r24, 0x10	; 16
    db40:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    db44:	40 98       	cbi	0x08, 0	; 8
    db46:	85 2f       	mov	r24, r21
    db48:	8f 70       	andi	r24, 0x0F	; 15
    db4a:	80 93 00 80 	sts	0x8000, r24
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x1 );

	// Read 8-pixel high columns, modify correct pixel and write back.
	uint8_t width = x2 - x1 + 1;
    db4e:	65 1b       	sub	r22, r21
    db50:	6f 5f       	subi	r22, 0xFF	; 255
	uint8_t pixelMask = 1 << (y & 0x07);
    db52:	24 2f       	mov	r18, r20
    db54:	33 27       	eor	r19, r19
    db56:	27 70       	andi	r18, 0x07	; 7
    db58:	30 70       	andi	r19, 0x00	; 0
    db5a:	81 e0       	ldi	r24, 0x01	; 1
    db5c:	90 e0       	ldi	r25, 0x00	; 0
    db5e:	02 c0       	rjmp	.+4      	; 0xdb64 <LCD_SetHLine+0x6e>
    db60:	88 0f       	add	r24, r24
    db62:	99 1f       	adc	r25, r25
    db64:	2a 95       	dec	r18
    db66:	e2 f7       	brpl	.-8      	; 0xdb60 <LCD_SetHLine+0x6a>
    db68:	98 2f       	mov	r25, r24
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    db6a:	40 9a       	sbi	0x08, 0	; 8
    db6c:	80 91 00 81 	lds	r24, 0x8100
    db70:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixel and write back.
	    uint8_t readback = S6B1713_ReadData(); 
    db72:	40 9a       	sbi	0x08, 0	; 8
    db74:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | pixelMask );
    db78:	40 9a       	sbi	0x08, 0	; 8
    db7a:	89 2b       	or	r24, r25
    db7c:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    db80:	61 50       	subi	r22, 0x01	; 1
    db82:	99 f7       	brne	.-26     	; 0xdb6a <LCD_SetHLine+0x74>
    db84:	21 96       	adiw	r28, 0x01	; 1
    db86:	0f b6       	in	r0, 0x3f	; 63
    db88:	f8 94       	cli
    db8a:	de bf       	out	0x3e, r29	; 62
    db8c:	0f be       	out	0x3f, r0	; 63
    db8e:	cd bf       	out	0x3d, r28	; 61
    db90:	df 91       	pop	r29
    db92:	cf 91       	pop	r28
    db94:	08 95       	ret

0000db96 <LCD_SetVLine>:
	} while (--width > 0);
}


void LCD_SetVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    db96:	cf 93       	push	r28
    db98:	df 93       	push	r29
    db9a:	cd b7       	in	r28, 0x3d	; 61
    db9c:	de b7       	in	r29, 0x3e	; 62
    db9e:	21 97       	sbiw	r28, 0x01	; 1
    dba0:	0f b6       	in	r0, 0x3f	; 63
    dba2:	f8 94       	cli
    dba4:	de bf       	out	0x3e, r29	; 62
    dba6:	0f be       	out	0x3f, r0	; 63
    dba8:	cd bf       	out	0x3d, r28	; 61
    dbaa:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dbac:	46 17       	cp	r20, r22
    dbae:	18 f4       	brcc	.+6      	; 0xdbb6 <LCD_SetVLine+0x20>
		uint8_t temp = y1;
    dbb0:	86 2f       	mov	r24, r22
		y1 = y2;
    dbb2:	64 2f       	mov	r22, r20
		y2 = temp;
    dbb4:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    dbb6:	76 2f       	mov	r23, r22
    dbb8:	76 95       	lsr	r23
    dbba:	76 95       	lsr	r23
    dbbc:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    dbbe:	54 2f       	mov	r21, r20
    dbc0:	56 95       	lsr	r21
    dbc2:	56 95       	lsr	r21
    dbc4:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    dbc6:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    dbc8:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = 0xff << y1Bit;
    dbca:	8f ef       	ldi	r24, 0xFF	; 255
    dbcc:	90 e0       	ldi	r25, 0x00	; 0
    dbce:	28 2f       	mov	r18, r24
    dbd0:	01 c0       	rjmp	.+2      	; 0xdbd4 <LCD_SetVLine+0x3e>
    dbd2:	22 0f       	add	r18, r18
    dbd4:	6a 95       	dec	r22
    dbd6:	ea f7       	brpl	.-6      	; 0xdbd2 <LCD_SetVLine+0x3c>
    dbd8:	62 2f       	mov	r22, r18
	uint8_t y2PixelMask = 0xff >> (7 - y2Bit);
    dbda:	27 e0       	ldi	r18, 0x07	; 7
    dbdc:	30 e0       	ldi	r19, 0x00	; 0
    dbde:	24 1b       	sub	r18, r20
    dbe0:	31 09       	sbc	r19, r1
    dbe2:	02 c0       	rjmp	.+4      	; 0xdbe8 <LCD_SetVLine+0x52>
    dbe4:	95 95       	asr	r25
    dbe6:	87 95       	ror	r24
    dbe8:	2a 95       	dec	r18
    dbea:	e2 f7       	brpl	.-8      	; 0xdbe4 <LCD_SetVLine+0x4e>
    dbec:	f8 2f       	mov	r31, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dbee:	40 98       	cbi	0x08, 0	; 8
    dbf0:	80 ee       	ldi	r24, 0xE0	; 224
    dbf2:	80 93 00 80 	sts	0x8000, r24
    dbf6:	9e 2f       	mov	r25, r30
    dbf8:	9f 77       	andi	r25, 0x7F	; 127
    dbfa:	4e 2f       	mov	r20, r30
    dbfc:	4f 70       	andi	r20, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dbfe:	75 17       	cp	r23, r21
    dc00:	e9 f4       	brne	.+58     	; 0xdc3c <LCD_SetVLine+0xa6>
		uint8_t pixelMask = y1PixelMask & y2PixelMask;
    dc02:	6f 23       	and	r22, r31

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc04:	40 98       	cbi	0x08, 0	; 8
    dc06:	50 6b       	ori	r21, 0xB0	; 176
    dc08:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc0c:	40 98       	cbi	0x08, 0	; 8
    dc0e:	89 2f       	mov	r24, r25
    dc10:	99 27       	eor	r25, r25
    dc12:	54 e0       	ldi	r21, 0x04	; 4
    dc14:	96 95       	lsr	r25
    dc16:	87 95       	ror	r24
    dc18:	5a 95       	dec	r21
    dc1a:	e1 f7       	brne	.-8      	; 0xdc14 <LCD_SetVLine+0x7e>
    dc1c:	80 61       	ori	r24, 0x10	; 16
    dc1e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc22:	40 98       	cbi	0x08, 0	; 8
    dc24:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dc28:	40 9a       	sbi	0x08, 0	; 8
    dc2a:	80 91 00 81 	lds	r24, 0x8100
    dc2e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dc30:	40 9a       	sbi	0x08, 0	; 8
    dc32:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | pixelMask );
    dc36:	40 9a       	sbi	0x08, 0	; 8
    dc38:	86 2b       	or	r24, r22
    dc3a:	5a c0       	rjmp	.+180    	; 0xdcf0 <LCD_SetVLine+0x15a>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    dc3c:	25 2f       	mov	r18, r21
    dc3e:	27 1b       	sub	r18, r23
    dc40:	21 50       	subi	r18, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc42:	40 98       	cbi	0x08, 0	; 8
    dc44:	87 2f       	mov	r24, r23
    dc46:	80 6b       	ori	r24, 0xB0	; 176
    dc48:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc4c:	40 98       	cbi	0x08, 0	; 8
    dc4e:	89 2f       	mov	r24, r25
    dc50:	99 27       	eor	r25, r25
    dc52:	34 e0       	ldi	r19, 0x04	; 4
    dc54:	96 95       	lsr	r25
    dc56:	87 95       	ror	r24
    dc58:	3a 95       	dec	r19
    dc5a:	e1 f7       	brne	.-8      	; 0xdc54 <LCD_SetVLine+0xbe>
    dc5c:	98 2f       	mov	r25, r24
    dc5e:	90 61       	ori	r25, 0x10	; 16
    dc60:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc64:	40 98       	cbi	0x08, 0	; 8
    dc66:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dc6a:	40 9a       	sbi	0x08, 0	; 8
    dc6c:	80 91 00 81 	lds	r24, 0x8100
    dc70:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dc72:	40 9a       	sbi	0x08, 0	; 8
    dc74:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | y1PixelMask );
    dc78:	40 9a       	sbi	0x08, 0	; 8
    dc7a:	86 2b       	or	r24, r22
    dc7c:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    dc80:	37 2f       	mov	r19, r23
    dc82:	3f 5f       	subi	r19, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Set all pixels.
			S6B1713_WriteData( 0xff );
    dc84:	82 2f       	mov	r24, r18
    dc86:	21 50       	subi	r18, 0x01	; 1
    dc88:	18 16       	cp	r1, r24
    dc8a:	ac f4       	brge	.+42     	; 0xdcb6 <LCD_SetVLine+0x120>
    dc8c:	6f ef       	ldi	r22, 0xFF	; 255
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dc8e:	83 2f       	mov	r24, r19
    dc90:	3f 5f       	subi	r19, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dc92:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc94:	40 98       	cbi	0x08, 0	; 8
    dc96:	80 6b       	ori	r24, 0xB0	; 176
    dc98:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc9c:	40 98       	cbi	0x08, 0	; 8
    dc9e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dca2:	40 98       	cbi	0x08, 0	; 8
    dca4:	40 93 00 80 	sts	0x8000, r20
    dca8:	40 9a       	sbi	0x08, 0	; 8
    dcaa:	60 93 00 81 	sts	0x8100, r22
    dcae:	82 2f       	mov	r24, r18
    dcb0:	21 50       	subi	r18, 0x01	; 1
    dcb2:	18 16       	cp	r1, r24
    dcb4:	64 f3       	brlt	.-40     	; 0xdc8e <LCD_SetVLine+0xf8>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dcb6:	40 98       	cbi	0x08, 0	; 8
    dcb8:	50 6b       	ori	r21, 0xB0	; 176
    dcba:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dcbe:	8e 2f       	mov	r24, r30
    dcc0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dcc2:	40 98       	cbi	0x08, 0	; 8
    dcc4:	99 27       	eor	r25, r25
    dcc6:	b4 e0       	ldi	r27, 0x04	; 4
    dcc8:	96 95       	lsr	r25
    dcca:	87 95       	ror	r24
    dccc:	ba 95       	dec	r27
    dcce:	e1 f7       	brne	.-8      	; 0xdcc8 <LCD_SetVLine+0x132>
    dcd0:	80 61       	ori	r24, 0x10	; 16
    dcd2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dcd6:	40 98       	cbi	0x08, 0	; 8
    dcd8:	ef 70       	andi	r30, 0x0F	; 15
    dcda:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    dcde:	40 9a       	sbi	0x08, 0	; 8
    dce0:	80 91 00 81 	lds	r24, 0x8100
    dce4:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    dce6:	40 9a       	sbi	0x08, 0	; 8
    dce8:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | y2PixelMask );
    dcec:	40 9a       	sbi	0x08, 0	; 8
    dcee:	8f 2b       	or	r24, r31
    dcf0:	80 93 00 81 	sts	0x8100, r24
    dcf4:	21 96       	adiw	r28, 0x01	; 1
    dcf6:	0f b6       	in	r0, 0x3f	; 63
    dcf8:	f8 94       	cli
    dcfa:	de bf       	out	0x3e, r29	; 62
    dcfc:	0f be       	out	0x3f, r0	; 63
    dcfe:	cd bf       	out	0x3d, r28	; 61
    dd00:	df 91       	pop	r29
    dd02:	cf 91       	pop	r28
    dd04:	08 95       	ret

0000dd06 <LCD_ClrVLine>:
	}
}


void LCD_ClrVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    dd06:	cf 93       	push	r28
    dd08:	df 93       	push	r29
    dd0a:	cd b7       	in	r28, 0x3d	; 61
    dd0c:	de b7       	in	r29, 0x3e	; 62
    dd0e:	21 97       	sbiw	r28, 0x01	; 1
    dd10:	0f b6       	in	r0, 0x3f	; 63
    dd12:	f8 94       	cli
    dd14:	de bf       	out	0x3e, r29	; 62
    dd16:	0f be       	out	0x3f, r0	; 63
    dd18:	cd bf       	out	0x3d, r28	; 61
    dd1a:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dd1c:	46 17       	cp	r20, r22
    dd1e:	18 f4       	brcc	.+6      	; 0xdd26 <LCD_ClrVLine+0x20>
		uint8_t temp = y1;
    dd20:	86 2f       	mov	r24, r22
		y1 = y2;
    dd22:	64 2f       	mov	r22, r20
		y2 = temp;
    dd24:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    dd26:	76 2f       	mov	r23, r22
    dd28:	76 95       	lsr	r23
    dd2a:	76 95       	lsr	r23
    dd2c:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    dd2e:	54 2f       	mov	r21, r20
    dd30:	56 95       	lsr	r21
    dd32:	56 95       	lsr	r21
    dd34:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    dd36:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    dd38:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    dd3a:	2f ef       	ldi	r18, 0xFF	; 255
    dd3c:	30 e0       	ldi	r19, 0x00	; 0
    dd3e:	c9 01       	movw	r24, r18
    dd40:	02 c0       	rjmp	.+4      	; 0xdd46 <LCD_ClrVLine+0x40>
    dd42:	88 0f       	add	r24, r24
    dd44:	99 1f       	adc	r25, r25
    dd46:	6a 95       	dec	r22
    dd48:	e2 f7       	brpl	.-8      	; 0xdd42 <LCD_ClrVLine+0x3c>
    dd4a:	68 2f       	mov	r22, r24
    dd4c:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dd4e:	87 e0       	ldi	r24, 0x07	; 7
    dd50:	90 e0       	ldi	r25, 0x00	; 0
    dd52:	84 1b       	sub	r24, r20
    dd54:	91 09       	sbc	r25, r1
    dd56:	02 c0       	rjmp	.+4      	; 0xdd5c <LCD_ClrVLine+0x56>
    dd58:	35 95       	asr	r19
    dd5a:	27 95       	ror	r18
    dd5c:	8a 95       	dec	r24
    dd5e:	e2 f7       	brpl	.-8      	; 0xdd58 <LCD_ClrVLine+0x52>
    dd60:	20 95       	com	r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dd62:	40 98       	cbi	0x08, 0	; 8
    dd64:	80 ee       	ldi	r24, 0xE0	; 224
    dd66:	80 93 00 80 	sts	0x8000, r24
    dd6a:	9e 2f       	mov	r25, r30
    dd6c:	9f 77       	andi	r25, 0x7F	; 127
    dd6e:	fe 2f       	mov	r31, r30
    dd70:	ff 70       	andi	r31, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dd72:	75 17       	cp	r23, r21
    dd74:	e9 f4       	brne	.+58     	; 0xddb0 <LCD_ClrVLine+0xaa>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    dd76:	62 2b       	or	r22, r18

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd78:	40 98       	cbi	0x08, 0	; 8
    dd7a:	50 6b       	ori	r21, 0xB0	; 176
    dd7c:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd80:	40 98       	cbi	0x08, 0	; 8
    dd82:	89 2f       	mov	r24, r25
    dd84:	99 27       	eor	r25, r25
    dd86:	b4 e0       	ldi	r27, 0x04	; 4
    dd88:	96 95       	lsr	r25
    dd8a:	87 95       	ror	r24
    dd8c:	ba 95       	dec	r27
    dd8e:	e1 f7       	brne	.-8      	; 0xdd88 <LCD_ClrVLine+0x82>
    dd90:	80 61       	ori	r24, 0x10	; 16
    dd92:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd96:	40 98       	cbi	0x08, 0	; 8
    dd98:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dd9c:	40 9a       	sbi	0x08, 0	; 8
    dd9e:	80 91 00 81 	lds	r24, 0x8100
    dda2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dda4:	40 9a       	sbi	0x08, 0	; 8
    dda6:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & pixelMask );
    ddaa:	40 9a       	sbi	0x08, 0	; 8
    ddac:	86 23       	and	r24, r22
    ddae:	56 c0       	rjmp	.+172    	; 0xde5c <LCD_ClrVLine+0x156>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    ddb0:	35 2f       	mov	r19, r21
    ddb2:	37 1b       	sub	r19, r23
    ddb4:	31 50       	subi	r19, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    ddb6:	40 98       	cbi	0x08, 0	; 8
    ddb8:	87 2f       	mov	r24, r23
    ddba:	80 6b       	ori	r24, 0xB0	; 176
    ddbc:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    ddc0:	40 98       	cbi	0x08, 0	; 8
    ddc2:	89 2f       	mov	r24, r25
    ddc4:	99 27       	eor	r25, r25
    ddc6:	a4 e0       	ldi	r26, 0x04	; 4
    ddc8:	96 95       	lsr	r25
    ddca:	87 95       	ror	r24
    ddcc:	aa 95       	dec	r26
    ddce:	e1 f7       	brne	.-8      	; 0xddc8 <LCD_ClrVLine+0xc2>
    ddd0:	98 2f       	mov	r25, r24
    ddd2:	90 61       	ori	r25, 0x10	; 16
    ddd4:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    ddd8:	40 98       	cbi	0x08, 0	; 8
    ddda:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    ddde:	40 9a       	sbi	0x08, 0	; 8
    dde0:	80 91 00 81 	lds	r24, 0x8100
    dde4:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dde6:	40 9a       	sbi	0x08, 0	; 8
    dde8:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & y1PixelMask );
    ddec:	40 9a       	sbi	0x08, 0	; 8
    ddee:	86 23       	and	r24, r22
    ddf0:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    ddf4:	47 2f       	mov	r20, r23
    ddf6:	4f 5f       	subi	r20, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Clear all pixels.
			S6B1713_WriteData( 0x00 );
    ddf8:	83 2f       	mov	r24, r19
    ddfa:	31 50       	subi	r19, 0x01	; 1
    ddfc:	18 16       	cp	r1, r24
    ddfe:	8c f4       	brge	.+34     	; 0xde22 <LCD_ClrVLine+0x11c>
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    de00:	84 2f       	mov	r24, r20
    de02:	4f 5f       	subi	r20, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    de04:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de06:	40 98       	cbi	0x08, 0	; 8
    de08:	80 6b       	ori	r24, 0xB0	; 176
    de0a:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de0e:	40 98       	cbi	0x08, 0	; 8
    de10:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de14:	40 98       	cbi	0x08, 0	; 8
    de16:	f0 93 00 80 	sts	0x8000, r31
    de1a:	40 9a       	sbi	0x08, 0	; 8
    de1c:	10 92 00 81 	sts	0x8100, r1
    de20:	eb cf       	rjmp	.-42     	; 0xddf8 <LCD_ClrVLine+0xf2>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de22:	40 98       	cbi	0x08, 0	; 8
    de24:	50 6b       	ori	r21, 0xB0	; 176
    de26:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    de2a:	8e 2f       	mov	r24, r30
    de2c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de2e:	40 98       	cbi	0x08, 0	; 8
    de30:	99 27       	eor	r25, r25
    de32:	64 e0       	ldi	r22, 0x04	; 4
    de34:	96 95       	lsr	r25
    de36:	87 95       	ror	r24
    de38:	6a 95       	dec	r22
    de3a:	e1 f7       	brne	.-8      	; 0xde34 <LCD_ClrVLine+0x12e>
    de3c:	80 61       	ori	r24, 0x10	; 16
    de3e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de42:	40 98       	cbi	0x08, 0	; 8
    de44:	ef 70       	andi	r30, 0x0F	; 15
    de46:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    de4a:	40 9a       	sbi	0x08, 0	; 8
    de4c:	80 91 00 81 	lds	r24, 0x8100
    de50:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    de52:	40 9a       	sbi	0x08, 0	; 8
    de54:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback & y2PixelMask );
    de58:	40 9a       	sbi	0x08, 0	; 8
    de5a:	82 23       	and	r24, r18
    de5c:	80 93 00 81 	sts	0x8100, r24
    de60:	21 96       	adiw	r28, 0x01	; 1
    de62:	0f b6       	in	r0, 0x3f	; 63
    de64:	f8 94       	cli
    de66:	de bf       	out	0x3e, r29	; 62
    de68:	0f be       	out	0x3f, r0	; 63
    de6a:	cd bf       	out	0x3d, r28	; 61
    de6c:	df 91       	pop	r29
    de6e:	cf 91       	pop	r28
    de70:	08 95       	ret

0000de72 <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    de72:	cf 93       	push	r28
    de74:	df 93       	push	r29
    de76:	cd b7       	in	r28, 0x3d	; 61
    de78:	de b7       	in	r29, 0x3e	; 62
    de7a:	21 97       	sbiw	r28, 0x01	; 1
    de7c:	0f b6       	in	r0, 0x3f	; 63
    de7e:	f8 94       	cli
    de80:	de bf       	out	0x3e, r29	; 62
    de82:	0f be       	out	0x3f, r0	; 63
    de84:	cd bf       	out	0x3d, r28	; 61
    de86:	e8 2f       	mov	r30, r24
    de88:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    de8a:	48 17       	cp	r20, r24
    de8c:	10 f4       	brcc	.+4      	; 0xde92 <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    de8e:	e4 2f       	mov	r30, r20
		x2 = temp;
    de90:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    de92:	56 17       	cp	r21, r22
    de94:	18 f4       	brcc	.+6      	; 0xde9c <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    de96:	86 2f       	mov	r24, r22
		y1 = y2;
    de98:	65 2f       	mov	r22, r21
		y2 = temp;
    de9a:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    de9c:	f6 2f       	mov	r31, r22
    de9e:	f6 95       	lsr	r31
    dea0:	f6 95       	lsr	r31
    dea2:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    dea4:	75 2f       	mov	r23, r21
    dea6:	76 95       	lsr	r23
    dea8:	76 95       	lsr	r23
    deaa:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    deac:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    deae:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    deb0:	2f ef       	ldi	r18, 0xFF	; 255
    deb2:	30 e0       	ldi	r19, 0x00	; 0
    deb4:	c9 01       	movw	r24, r18
    deb6:	02 c0       	rjmp	.+4      	; 0xdebc <LCD_ClrBox+0x4a>
    deb8:	88 0f       	add	r24, r24
    deba:	99 1f       	adc	r25, r25
    debc:	6a 95       	dec	r22
    debe:	e2 f7       	brpl	.-8      	; 0xdeb8 <LCD_ClrBox+0x46>
    dec0:	68 2f       	mov	r22, r24
    dec2:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dec4:	87 e0       	ldi	r24, 0x07	; 7
    dec6:	90 e0       	ldi	r25, 0x00	; 0
    dec8:	85 1b       	sub	r24, r21
    deca:	91 09       	sbc	r25, r1
    decc:	02 c0       	rjmp	.+4      	; 0xded2 <LCD_ClrBox+0x60>
    dece:	35 95       	asr	r19
    ded0:	27 95       	ror	r18
    ded2:	8a 95       	dec	r24
    ded4:	e2 f7       	brpl	.-8      	; 0xdece <LCD_ClrBox+0x5c>
    ded6:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    ded8:	4e 1b       	sub	r20, r30
    deda:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dedc:	40 98       	cbi	0x08, 0	; 8
    dede:	80 ee       	ldi	r24, 0xE0	; 224
    dee0:	80 93 00 80 	sts	0x8000, r24
    dee4:	ae 2f       	mov	r26, r30
    dee6:	af 77       	andi	r26, 0x7F	; 127
    dee8:	be 2f       	mov	r27, r30
    deea:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    deec:	f7 17       	cp	r31, r23
    deee:	11 f5       	brne	.+68     	; 0xdf34 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    def0:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    def2:	40 98       	cbi	0x08, 0	; 8
    def4:	70 6b       	ori	r23, 0xB0	; 176
    def6:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    defa:	40 98       	cbi	0x08, 0	; 8
    defc:	8a 2f       	mov	r24, r26
    defe:	99 27       	eor	r25, r25
    df00:	54 e0       	ldi	r21, 0x04	; 4
    df02:	96 95       	lsr	r25
    df04:	87 95       	ror	r24
    df06:	5a 95       	dec	r21
    df08:	e1 f7       	brne	.-8      	; 0xdf02 <LCD_ClrBox+0x90>
    df0a:	80 61       	ori	r24, 0x10	; 16
    df0c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df10:	40 98       	cbi	0x08, 0	; 8
    df12:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    df16:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    df18:	40 9a       	sbi	0x08, 0	; 8
    df1a:	80 91 00 81 	lds	r24, 0x8100
    df1e:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    df20:	40 9a       	sbi	0x08, 0	; 8
    df22:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    df26:	40 9a       	sbi	0x08, 0	; 8
    df28:	82 23       	and	r24, r18
    df2a:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    df2e:	31 50       	subi	r19, 0x01	; 1
    df30:	99 f7       	brne	.-26     	; 0xdf18 <LCD_ClrBox+0xa6>
    df32:	6b c0       	rjmp	.+214    	; 0xe00a <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    df34:	57 2f       	mov	r21, r23
    df36:	5f 1b       	sub	r21, r31
    df38:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    df3a:	40 98       	cbi	0x08, 0	; 8
    df3c:	8f 2f       	mov	r24, r31
    df3e:	80 6b       	ori	r24, 0xB0	; 176
    df40:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    df44:	40 98       	cbi	0x08, 0	; 8
    df46:	8a 2f       	mov	r24, r26
    df48:	99 27       	eor	r25, r25
    df4a:	34 e0       	ldi	r19, 0x04	; 4
    df4c:	96 95       	lsr	r25
    df4e:	87 95       	ror	r24
    df50:	3a 95       	dec	r19
    df52:	e1 f7       	brne	.-8      	; 0xdf4c <LCD_ClrBox+0xda>
    df54:	80 61       	ori	r24, 0x10	; 16
    df56:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df5a:	40 98       	cbi	0x08, 0	; 8
    df5c:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    df60:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    df62:	40 9a       	sbi	0x08, 0	; 8
    df64:	80 91 00 81 	lds	r24, 0x8100
    df68:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    df6a:	40 9a       	sbi	0x08, 0	; 8
    df6c:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    df70:	40 9a       	sbi	0x08, 0	; 8
    df72:	86 23       	and	r24, r22
    df74:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    df78:	31 50       	subi	r19, 0x01	; 1
    df7a:	99 f7       	brne	.-26     	; 0xdf62 <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    df7c:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    df7e:	85 2f       	mov	r24, r21
    df80:	51 50       	subi	r21, 0x01	; 1
    df82:	18 16       	cp	r1, r24
    df84:	04 f5       	brge	.+64     	; 0xdfc6 <LCD_ClrBox+0x154>
    df86:	8a 2f       	mov	r24, r26
    df88:	99 27       	eor	r25, r25
    df8a:	64 e0       	ldi	r22, 0x04	; 4
    df8c:	96 95       	lsr	r25
    df8e:	87 95       	ror	r24
    df90:	6a 95       	dec	r22
    df92:	e1 f7       	brne	.-8      	; 0xdf8c <LCD_ClrBox+0x11a>
    df94:	98 2f       	mov	r25, r24
    df96:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    df98:	8f 2f       	mov	r24, r31
    df9a:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    df9c:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    df9e:	40 98       	cbi	0x08, 0	; 8
    dfa0:	80 6b       	ori	r24, 0xB0	; 176
    dfa2:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfa6:	40 98       	cbi	0x08, 0	; 8
    dfa8:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfac:	40 98       	cbi	0x08, 0	; 8
    dfae:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    dfb2:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    dfb4:	40 9a       	sbi	0x08, 0	; 8
    dfb6:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    dfba:	31 50       	subi	r19, 0x01	; 1
    dfbc:	d9 f7       	brne	.-10     	; 0xdfb4 <LCD_ClrBox+0x142>
    dfbe:	85 2f       	mov	r24, r21
    dfc0:	51 50       	subi	r21, 0x01	; 1
    dfc2:	18 16       	cp	r1, r24
    dfc4:	4c f3       	brlt	.-46     	; 0xdf98 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dfc6:	40 98       	cbi	0x08, 0	; 8
    dfc8:	70 6b       	ori	r23, 0xB0	; 176
    dfca:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dfce:	8e 2f       	mov	r24, r30
    dfd0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfd2:	40 98       	cbi	0x08, 0	; 8
    dfd4:	99 27       	eor	r25, r25
    dfd6:	54 e0       	ldi	r21, 0x04	; 4
    dfd8:	96 95       	lsr	r25
    dfda:	87 95       	ror	r24
    dfdc:	5a 95       	dec	r21
    dfde:	e1 f7       	brne	.-8      	; 0xdfd8 <LCD_ClrBox+0x166>
    dfe0:	80 61       	ori	r24, 0x10	; 16
    dfe2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfe6:	40 98       	cbi	0x08, 0	; 8
    dfe8:	ef 70       	andi	r30, 0x0F	; 15
    dfea:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dfee:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dff0:	40 9a       	sbi	0x08, 0	; 8
    dff2:	80 91 00 81 	lds	r24, 0x8100
    dff6:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    dff8:	40 9a       	sbi	0x08, 0	; 8
    dffa:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    dffe:	40 9a       	sbi	0x08, 0	; 8
    e000:	82 23       	and	r24, r18
    e002:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    e006:	31 50       	subi	r19, 0x01	; 1
    e008:	99 f7       	brne	.-26     	; 0xdff0 <LCD_ClrBox+0x17e>
    e00a:	21 96       	adiw	r28, 0x01	; 1
    e00c:	0f b6       	in	r0, 0x3f	; 63
    e00e:	f8 94       	cli
    e010:	de bf       	out	0x3e, r29	; 62
    e012:	0f be       	out	0x3f, r0	; 63
    e014:	cd bf       	out	0x3d, r28	; 61
    e016:	df 91       	pop	r29
    e018:	cf 91       	pop	r28
    e01a:	08 95       	ret

0000e01c <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    e01c:	cf 93       	push	r28
    e01e:	df 93       	push	r29
    e020:	cd b7       	in	r28, 0x3d	; 61
    e022:	de b7       	in	r29, 0x3e	; 62
    e024:	21 97       	sbiw	r28, 0x01	; 1
    e026:	0f b6       	in	r0, 0x3f	; 63
    e028:	f8 94       	cli
    e02a:	de bf       	out	0x3e, r29	; 62
    e02c:	0f be       	out	0x3f, r0	; 63
    e02e:	cd bf       	out	0x3d, r28	; 61
    e030:	36 2f       	mov	r19, r22
    e032:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    e034:	40 98       	cbi	0x08, 0	; 8
    e036:	90 ee       	ldi	r25, 0xE0	; 224
    e038:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e03c:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e03e:	40 98       	cbi	0x08, 0	; 8
    e040:	30 6b       	ori	r19, 0xB0	; 176
    e042:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e046:	94 2f       	mov	r25, r20
    e048:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e04a:	40 98       	cbi	0x08, 0	; 8
    e04c:	29 2f       	mov	r18, r25
    e04e:	33 27       	eor	r19, r19
    e050:	e4 e0       	ldi	r30, 0x04	; 4
    e052:	36 95       	lsr	r19
    e054:	27 95       	ror	r18
    e056:	ea 95       	dec	r30
    e058:	e1 f7       	brne	.-8      	; 0xe052 <LCD_ClrPage+0x36>
    e05a:	92 2f       	mov	r25, r18
    e05c:	90 61       	ori	r25, 0x10	; 16
    e05e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e062:	40 98       	cbi	0x08, 0	; 8
    e064:	4f 70       	andi	r20, 0x0F	; 15
    e066:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    e06a:	98 2f       	mov	r25, r24
    e06c:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    e06e:	40 9a       	sbi	0x08, 0	; 8
    e070:	80 91 00 81 	lds	r24, 0x8100
    e074:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    e076:	40 9a       	sbi	0x08, 0	; 8
    e078:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    e07c:	40 9a       	sbi	0x08, 0	; 8
    e07e:	89 23       	and	r24, r25
    e080:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    e084:	51 50       	subi	r21, 0x01	; 1
    e086:	99 f7       	brne	.-26     	; 0xe06e <LCD_ClrPage+0x52>
    e088:	21 96       	adiw	r28, 0x01	; 1
    e08a:	0f b6       	in	r0, 0x3f	; 63
    e08c:	f8 94       	cli
    e08e:	de bf       	out	0x3e, r29	; 62
    e090:	0f be       	out	0x3f, r0	; 63
    e092:	cd bf       	out	0x3d, r28	; 61
    e094:	df 91       	pop	r29
    e096:	cf 91       	pop	r28
    e098:	08 95       	ret

0000e09a <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    e09a:	fc 01       	movw	r30, r24
    e09c:	86 2f       	mov	r24, r22
    e09e:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e0a0:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e0a2:	40 98       	cbi	0x08, 0	; 8
    e0a4:	80 6b       	ori	r24, 0xB0	; 176
    e0a6:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e0aa:	84 2f       	mov	r24, r20
    e0ac:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e0ae:	40 98       	cbi	0x08, 0	; 8
    e0b0:	99 27       	eor	r25, r25
    e0b2:	44 e0       	ldi	r20, 0x04	; 4
    e0b4:	96 95       	lsr	r25
    e0b6:	87 95       	ror	r24
    e0b8:	4a 95       	dec	r20
    e0ba:	e1 f7       	brne	.-8      	; 0xe0b4 <LCD_WritePage_F+0x1a>
    e0bc:	80 61       	ori	r24, 0x10	; 16
    e0be:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e0c2:	40 98       	cbi	0x08, 0	; 8
    e0c4:	3f 70       	andi	r19, 0x0F	; 15
    e0c6:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    e0ca:	40 9a       	sbi	0x08, 0	; 8
    e0cc:	84 91       	lpm	r24, Z+
    e0ce:	80 93 00 81 	sts	0x8100, r24
		data++;
    e0d2:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    e0d4:	21 50       	subi	r18, 0x01	; 1
    e0d6:	c9 f7       	brne	.-14     	; 0xe0ca <LCD_WritePage_F+0x30>
    e0d8:	08 95       	ret

0000e0da <POPUP_MsgBox>:
 * \param  margin         Number of pixels between the text and the sides of the box
 * \param  str            Pointer to a null-terminated string. Supports LF and CR.
 * \param  parentForm     If specified, this form will be redrawn before the function returns
 */
void POPUP_MsgBox( uint8_t widthInChars, uint8_t heightInPages, uint8_t margin, char const * str, FORMS_form_t * parentForm )
{
    e0da:	4f 92       	push	r4
    e0dc:	5f 92       	push	r5
    e0de:	6f 92       	push	r6
    e0e0:	7f 92       	push	r7
    e0e2:	8f 92       	push	r8
    e0e4:	9f 92       	push	r9
    e0e6:	af 92       	push	r10
    e0e8:	bf 92       	push	r11
    e0ea:	cf 92       	push	r12
    e0ec:	df 92       	push	r13
    e0ee:	ef 92       	push	r14
    e0f0:	ff 92       	push	r15
    e0f2:	0f 93       	push	r16
    e0f4:	1f 93       	push	r17
    e0f6:	cf 93       	push	r28
    e0f8:	c8 2f       	mov	r28, r24
    e0fa:	d6 2e       	mov	r13, r22
    e0fc:	e4 2e       	mov	r14, r20
    e0fe:	49 01       	movw	r8, r18
    e100:	38 01       	movw	r6, r16
	// Reset any hardware LCD scrolling first.
	if (parentForm != NULL) {
    e102:	01 15       	cp	r16, r1
    e104:	11 05       	cpc	r17, r1
    e106:	19 f0       	breq	.+6      	; 0xe10e <POPUP_MsgBox+0x34>
		FORMS_NormalizeLCDScroll( parentForm );
    e108:	c8 01       	movw	r24, r16
    e10a:	0e 94 f5 77 	call	0xefea	; 0xefea <FORMS_NormalizeLCDScroll>
	}
	
	// Calculate some coordinates, with text centered in screen.
	uint8_t const widthInPixels = widthInChars * TERMFONT_CHAR_WIDTH;
    e10e:	86 e0       	ldi	r24, 0x06	; 6
    e110:	c8 9f       	mul	r28, r24
    e112:	80 2d       	mov	r24, r0
    e114:	11 24       	eor	r1, r1
	uint8_t const startColumn = (LCD_WIDTH / 2) - (widthInPixels / 2);
    e116:	86 95       	lsr	r24
    e118:	30 e4       	ldi	r19, 0x40	; 64
    e11a:	43 2e       	mov	r4, r19
    e11c:	48 1a       	sub	r4, r24
	uint8_t const startX = startColumn - margin;
    e11e:	b4 2c       	mov	r11, r4
    e120:	be 18       	sub	r11, r14
	uint8_t const endColumn = (LCD_WIDTH / 2) + (widthInPixels / 2);
    e122:	a8 2e       	mov	r10, r24
    e124:	80 e4       	ldi	r24, 0x40	; 64
    e126:	a8 0e       	add	r10, r24
	uint8_t const endX = endColumn + margin;
    e128:	ca 2d       	mov	r28, r10
    e12a:	ce 0d       	add	r28, r14
	uint8_t const startPage = (LCD_HEIGHT / LCD_PAGE_HEIGHT / 2) - 1 - ((heightInPages - 1) / 2);
    e12c:	2d 2d       	mov	r18, r13
    e12e:	33 27       	eor	r19, r19
    e130:	c9 01       	movw	r24, r18
    e132:	01 97       	sbiw	r24, 0x01	; 1
    e134:	97 fd       	sbrc	r25, 7
    e136:	c9 01       	movw	r24, r18
    e138:	95 95       	asr	r25
    e13a:	87 95       	ror	r24
    e13c:	93 e0       	ldi	r25, 0x03	; 3
    e13e:	f9 2e       	mov	r15, r25
    e140:	f8 1a       	sub	r15, r24
	uint8_t const startY = (startPage * LCD_PAGE_HEIGHT) - margin;
    e142:	0f 2d       	mov	r16, r15
    e144:	00 0f       	add	r16, r16
    e146:	00 0f       	add	r16, r16
    e148:	00 0f       	add	r16, r16
    e14a:	0e 19       	sub	r16, r14
	uint8_t const endPage = startPage + heightInPages;
    e14c:	5f 2c       	mov	r5, r15
    e14e:	5d 0c       	add	r5, r13
	uint8_t const endY = (endPage * LCD_PAGE_HEIGHT) + margin;
    e150:	15 2d       	mov	r17, r5
    e152:	11 0f       	add	r17, r17
    e154:	11 0f       	add	r17, r17
    e156:	11 0f       	add	r17, r17
    e158:	1e 0d       	add	r17, r14
	
	// Draw popup frame.
	LCD_SetHLine( startX, endX, startY );
    e15a:	40 2f       	mov	r20, r16
    e15c:	6c 2f       	mov	r22, r28
    e15e:	8b 2d       	mov	r24, r11
    e160:	0e 94 7b 6d 	call	0xdaf6	; 0xdaf6 <LCD_SetHLine>
	LCD_SetHLine( startX, endX, endY );
    e164:	41 2f       	mov	r20, r17
    e166:	6c 2f       	mov	r22, r28
    e168:	8b 2d       	mov	r24, r11
    e16a:	0e 94 7b 6d 	call	0xdaf6	; 0xdaf6 <LCD_SetHLine>
	LCD_SetHLine( startX + 1, endX + 1, endY + 1 );
    e16e:	e1 2e       	mov	r14, r17
    e170:	e3 94       	inc	r14
    e172:	dc 2e       	mov	r13, r28
    e174:	d3 94       	inc	r13
    e176:	cb 2c       	mov	r12, r11
    e178:	c3 94       	inc	r12
    e17a:	4e 2d       	mov	r20, r14
    e17c:	6d 2d       	mov	r22, r13
    e17e:	8c 2d       	mov	r24, r12
    e180:	0e 94 7b 6d 	call	0xdaf6	; 0xdaf6 <LCD_SetHLine>
	LCD_SetVLine( startX, startY, endY );
    e184:	41 2f       	mov	r20, r17
    e186:	60 2f       	mov	r22, r16
    e188:	8b 2d       	mov	r24, r11
    e18a:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
	LCD_SetVLine( endX, startY, endY );
    e18e:	41 2f       	mov	r20, r17
    e190:	60 2f       	mov	r22, r16
    e192:	8c 2f       	mov	r24, r28
    e194:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
	LCD_SetVLine( endX + 1, startY + 1, endY + 1 );
    e198:	0f 5f       	subi	r16, 0xFF	; 255
    e19a:	4e 2d       	mov	r20, r14
    e19c:	60 2f       	mov	r22, r16
    e19e:	8d 2d       	mov	r24, r13
    e1a0:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
	LCD_ClrBox( startX + 1, startY + 1, endX - 1, endY - 1 );
    e1a4:	11 50       	subi	r17, 0x01	; 1
    e1a6:	c1 50       	subi	r28, 0x01	; 1
    e1a8:	21 2f       	mov	r18, r17
    e1aa:	4c 2f       	mov	r20, r28
    e1ac:	60 2f       	mov	r22, r16
    e1ae:	8c 2d       	mov	r24, r12
    e1b0:	0e 94 39 6f 	call	0xde72	; 0xde72 <LCD_ClrBox>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
    e1b4:	c4 2d       	mov	r28, r4
				column = startColumn;
			}
			TERMFONT_DisplayChar( *str, page, column );
			column += TERMFONT_CHAR_WIDTH;
		}
		++str;
    e1b6:	f4 01       	movw	r30, r8
    e1b8:	80 81       	ld	r24, Z
    e1ba:	88 23       	and	r24, r24
    e1bc:	c9 f0       	breq	.+50     	; 0xe1f0 <POPUP_MsgBox+0x116>
    e1be:	f5 14       	cp	r15, r5
    e1c0:	b8 f4       	brcc	.+46     	; 0xe1f0 <POPUP_MsgBox+0x116>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
	uint8_t page = startPage;
	while ((*str != 0) && (page < endPage)) {
		if (*str == '\r') {
    e1c2:	8d 30       	cpi	r24, 0x0D	; 13
    e1c4:	11 f4       	brne	.+4      	; 0xe1ca <POPUP_MsgBox+0xf0>
			column = startColumn;
    e1c6:	c4 2d       	mov	r28, r4
    e1c8:	0d c0       	rjmp	.+26     	; 0xe1e4 <POPUP_MsgBox+0x10a>
		}
		else if (*str == '\n') {
    e1ca:	8a 30       	cpi	r24, 0x0A	; 10
    e1cc:	11 f4       	brne	.+4      	; 0xe1d2 <POPUP_MsgBox+0xf8>
			++page;
    e1ce:	f3 94       	inc	r15
    e1d0:	09 c0       	rjmp	.+18     	; 0xe1e4 <POPUP_MsgBox+0x10a>
		}
		else {
			if (column >= endColumn) {
    e1d2:	ca 15       	cp	r28, r10
    e1d4:	10 f0       	brcs	.+4      	; 0xe1da <POPUP_MsgBox+0x100>
				++page;
    e1d6:	f3 94       	inc	r15
				column = startColumn;
    e1d8:	c4 2d       	mov	r28, r4
			}
			TERMFONT_DisplayChar( *str, page, column );
    e1da:	4c 2f       	mov	r20, r28
    e1dc:	6f 2d       	mov	r22, r15
    e1de:	0e 94 2c 7b 	call	0xf658	; 0xf658 <TERMFONT_DisplayChar>
			column += TERMFONT_CHAR_WIDTH;
    e1e2:	ca 5f       	subi	r28, 0xFA	; 250
		}
		++str;
    e1e4:	08 94       	sec
    e1e6:	81 1c       	adc	r8, r1
    e1e8:	91 1c       	adc	r9, r1
    e1ea:	e5 cf       	rjmp	.-54     	; 0xe1b6 <POPUP_MsgBox+0xdc>
	}
	
	// Wait until joystick is released (could still be held down after select a menu item).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e1ec:	0e 94 bc 73 	call	0xe778	; 0xe778 <POWER_EnterIdleSleepMode>
    e1f0:	0e 94 3f 73 	call	0xe67e	; 0xe67e <JOYSTICK_GetState>
    e1f4:	88 23       	and	r24, r24
    e1f6:	d1 f7       	brne	.-12     	; 0xe1ec <POPUP_MsgBox+0x112>
	// Wait until joystick is pressed (user wants to exit popup box).
	while (JOYSTICK_GetState() == 0x00) { POWER_EnterIdleSleepMode(); }
    e1f8:	02 c0       	rjmp	.+4      	; 0xe1fe <POPUP_MsgBox+0x124>
    e1fa:	0e 94 bc 73 	call	0xe778	; 0xe778 <POWER_EnterIdleSleepMode>
    e1fe:	0e 94 3f 73 	call	0xe67e	; 0xe67e <JOYSTICK_GetState>
    e202:	88 23       	and	r24, r24
    e204:	d1 f3       	breq	.-12     	; 0xe1fa <POPUP_MsgBox+0x120>
	// Wait until joystick is released again (in order not to give unwanted joystick events to the calling application).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e206:	02 c0       	rjmp	.+4      	; 0xe20c <POPUP_MsgBox+0x132>
    e208:	0e 94 bc 73 	call	0xe778	; 0xe778 <POWER_EnterIdleSleepMode>
    e20c:	0e 94 3f 73 	call	0xe67e	; 0xe67e <JOYSTICK_GetState>
    e210:	88 23       	and	r24, r24
    e212:	d1 f7       	brne	.-12     	; 0xe208 <POPUP_MsgBox+0x12e>

	// Redraw parent form if requested.
	if (parentForm != NULL) {
    e214:	61 14       	cp	r6, r1
    e216:	71 04       	cpc	r7, r1
    e218:	19 f0       	breq	.+6      	; 0xe220 <POPUP_MsgBox+0x146>
		FORMS_Draw( parentForm );
    e21a:	c3 01       	movw	r24, r6
    e21c:	0e 94 86 77 	call	0xef0c	; 0xef0c <FORMS_Draw>
    e220:	cf 91       	pop	r28
    e222:	1f 91       	pop	r17
    e224:	0f 91       	pop	r16
    e226:	ff 90       	pop	r15
    e228:	ef 90       	pop	r14
    e22a:	df 90       	pop	r13
    e22c:	cf 90       	pop	r12
    e22e:	bf 90       	pop	r11
    e230:	af 90       	pop	r10
    e232:	9f 90       	pop	r9
    e234:	8f 90       	pop	r8
    e236:	7f 90       	pop	r7
    e238:	6f 90       	pop	r6
    e23a:	5f 90       	pop	r5
    e23c:	4f 90       	pop	r4
    e23e:	08 95       	ret

0000e240 <LCD_UpdateBigNumbers>:
}

void LCD_UpdateBigNumbers(uint8_t value)
{
    e240:	6f 92       	push	r6
    e242:	7f 92       	push	r7
    e244:	8f 92       	push	r8
    e246:	9f 92       	push	r9
    e248:	af 92       	push	r10
    e24a:	bf 92       	push	r11
    e24c:	cf 92       	push	r12
    e24e:	df 92       	push	r13
    e250:	ef 92       	push	r14
    e252:	ff 92       	push	r15
    e254:	0f 93       	push	r16
    e256:	1f 93       	push	r17
    e258:	cf 93       	push	r28
    e25a:	df 93       	push	r29
    e25c:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    e25e:	66 24       	eor	r6, r6
    e260:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    e262:	8f 3f       	cpi	r24, 0xFF	; 255
    e264:	09 f4       	brne	.+2      	; 0xe268 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    e266:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    e268:	20 e2       	ldi	r18, 0x20	; 32
    e26a:	40 e6       	ldi	r20, 0x60	; 96
    e26c:	60 e0       	ldi	r22, 0x00	; 0
    e26e:	86 2f       	mov	r24, r22
    e270:	0e 94 39 6f 	call	0xde72	; 0xde72 <LCD_ClrBox>

	if (value < 10)
    e274:	ca 30       	cpi	r28, 0x0A	; 10
    e276:	80 f4       	brcc	.+32     	; 0xe298 <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    e278:	ec 2f       	mov	r30, r28
    e27a:	ff 27       	eor	r31, r31
    e27c:	ee 0f       	add	r30, r30
    e27e:	ff 1f       	adc	r31, r31
    e280:	e6 59       	subi	r30, 0x96	; 150
    e282:	f0 43       	sbci	r31, 0x30	; 48
    e284:	85 91       	lpm	r24, Z+
    e286:	94 91       	lpm	r25, Z+
    e288:	f4 e0       	ldi	r31, 0x04	; 4
    e28a:	af 2e       	mov	r10, r31
    e28c:	b1 2c       	mov	r11, r1
    e28e:	e0 e2       	ldi	r30, 0x20	; 32
    e290:	ce 2e       	mov	r12, r30
    e292:	d1 2c       	mov	r13, r1
    e294:	73 01       	movw	r14, r6
    e296:	34 c0       	rjmp	.+104    	; 0xe300 <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    e298:	8c 2f       	mov	r24, r28
    e29a:	8a 50       	subi	r24, 0x0A	; 10
    e29c:	8c 2e       	mov	r8, r28
    e29e:	99 24       	eor	r9, r9
    e2a0:	8a 35       	cpi	r24, 0x5A	; 90
    e2a2:	08 f0       	brcs	.+2      	; 0xe2a6 <LCD_UpdateBigNumbers+0x66>
    e2a4:	3b c0       	rjmp	.+118    	; 0xe31c <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    e2a6:	8c 2f       	mov	r24, r28
    e2a8:	6a e0       	ldi	r22, 0x0A	; 10
    e2aa:	0e 94 82 7c 	call	0xf904	; 0xf904 <__udivmodqi4>
    e2ae:	c8 2f       	mov	r28, r24
    e2b0:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e2b2:	fe 01       	movw	r30, r28
    e2b4:	ec 0f       	add	r30, r28
    e2b6:	fd 1f       	adc	r31, r29
    e2b8:	e6 59       	subi	r30, 0x96	; 150
    e2ba:	f0 43       	sbci	r31, 0x30	; 48
    e2bc:	85 91       	lpm	r24, Z+
    e2be:	94 91       	lpm	r25, Z+
    e2c0:	74 e0       	ldi	r23, 0x04	; 4
    e2c2:	a7 2e       	mov	r10, r23
    e2c4:	b1 2c       	mov	r11, r1
    e2c6:	60 e2       	ldi	r22, 0x20	; 32
    e2c8:	c6 2e       	mov	r12, r22
    e2ca:	d1 2c       	mov	r13, r1
    e2cc:	73 01       	movw	r14, r6
    e2ce:	83 01       	movw	r16, r6
    e2d0:	93 01       	movw	r18, r6
    e2d2:	a3 01       	movw	r20, r6
    e2d4:	b6 01       	movw	r22, r12
    e2d6:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    e2da:	ce 01       	movw	r24, r28
    e2dc:	53 e0       	ldi	r21, 0x03	; 3
    e2de:	88 0f       	add	r24, r24
    e2e0:	99 1f       	adc	r25, r25
    e2e2:	5a 95       	dec	r21
    e2e4:	e1 f7       	brne	.-8      	; 0xe2de <LCD_UpdateBigNumbers+0x9e>
    e2e6:	8c 0f       	add	r24, r28
    e2e8:	9d 1f       	adc	r25, r29
    e2ea:	8c 0f       	add	r24, r28
    e2ec:	9d 1f       	adc	r25, r29
    e2ee:	f4 01       	movw	r30, r8
    e2f0:	e8 1b       	sub	r30, r24
    e2f2:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e2f4:	ee 0f       	add	r30, r30
    e2f6:	ff 1f       	adc	r31, r31
    e2f8:	e6 59       	subi	r30, 0x96	; 150
    e2fa:	f0 43       	sbci	r31, 0x30	; 48
    e2fc:	85 91       	lpm	r24, Z+
    e2fe:	94 91       	lpm	r25, Z+
    e300:	86 01       	movw	r16, r12
    e302:	93 01       	movw	r18, r6
    e304:	a3 01       	movw	r20, r6
    e306:	b6 01       	movw	r22, r12
    e308:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    e30c:	00 e4       	ldi	r16, 0x40	; 64
    e30e:	10 e0       	ldi	r17, 0x00	; 0
    e310:	93 01       	movw	r18, r6
    e312:	a3 01       	movw	r20, r6
    e314:	b6 01       	movw	r22, r12
    e316:	8c e7       	ldi	r24, 0x7C	; 124
    e318:	98 e9       	ldi	r25, 0x98	; 152
    e31a:	54 c0       	rjmp	.+168    	; 0xe3c4 <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    e31c:	8c 2f       	mov	r24, r28
    e31e:	64 e6       	ldi	r22, 0x64	; 100
    e320:	0e 94 82 7c 	call	0xf904	; 0xf904 <__udivmodqi4>
    e324:	c8 2f       	mov	r28, r24
    e326:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    e328:	84 e6       	ldi	r24, 0x64	; 100
    e32a:	90 e0       	ldi	r25, 0x00	; 0
    e32c:	c8 9f       	mul	r28, r24
    e32e:	90 01       	movw	r18, r0
    e330:	c9 9f       	mul	r28, r25
    e332:	30 0d       	add	r19, r0
    e334:	d8 9f       	mul	r29, r24
    e336:	30 0d       	add	r19, r0
    e338:	11 24       	eor	r1, r1
    e33a:	c9 01       	movw	r24, r18
    e33c:	94 01       	movw	r18, r8
    e33e:	28 1b       	sub	r18, r24
    e340:	39 0b       	sbc	r19, r25
    e342:	c9 01       	movw	r24, r18
    e344:	6a e0       	ldi	r22, 0x0A	; 10
    e346:	70 e0       	ldi	r23, 0x00	; 0
    e348:	0e 94 a2 7c 	call	0xf944	; 0xf944 <__divmodhi4>
    e34c:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    e34e:	cb 01       	movw	r24, r22
    e350:	43 e0       	ldi	r20, 0x03	; 3
    e352:	88 0f       	add	r24, r24
    e354:	99 1f       	adc	r25, r25
    e356:	4a 95       	dec	r20
    e358:	e1 f7       	brne	.-8      	; 0xe352 <LCD_UpdateBigNumbers+0x112>
    e35a:	86 0f       	add	r24, r22
    e35c:	97 1f       	adc	r25, r23
    e35e:	86 0f       	add	r24, r22
    e360:	97 1f       	adc	r25, r23
    e362:	39 01       	movw	r6, r18
    e364:	68 1a       	sub	r6, r24
    e366:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e368:	fe 01       	movw	r30, r28
    e36a:	ec 0f       	add	r30, r28
    e36c:	fd 1f       	adc	r31, r29
    e36e:	e6 59       	subi	r30, 0x96	; 150
    e370:	f0 43       	sbci	r31, 0x30	; 48
    e372:	85 91       	lpm	r24, Z+
    e374:	94 91       	lpm	r25, Z+
    e376:	34 e0       	ldi	r19, 0x04	; 4
    e378:	a3 2e       	mov	r10, r19
    e37a:	b1 2c       	mov	r11, r1
    e37c:	20 e2       	ldi	r18, 0x20	; 32
    e37e:	c2 2e       	mov	r12, r18
    e380:	d1 2c       	mov	r13, r1
    e382:	ee 24       	eor	r14, r14
    e384:	ff 24       	eor	r15, r15
    e386:	87 01       	movw	r16, r14
    e388:	97 01       	movw	r18, r14
    e38a:	a7 01       	movw	r20, r14
    e38c:	b6 01       	movw	r22, r12
    e38e:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e392:	f4 01       	movw	r30, r8
    e394:	e8 0d       	add	r30, r8
    e396:	f9 1d       	adc	r31, r9
    e398:	e6 59       	subi	r30, 0x96	; 150
    e39a:	f0 43       	sbci	r31, 0x30	; 48
    e39c:	85 91       	lpm	r24, Z+
    e39e:	94 91       	lpm	r25, Z+
    e3a0:	86 01       	movw	r16, r12
    e3a2:	97 01       	movw	r18, r14
    e3a4:	a7 01       	movw	r20, r14
    e3a6:	b6 01       	movw	r22, r12
    e3a8:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    e3ac:	f3 01       	movw	r30, r6
    e3ae:	e6 0d       	add	r30, r6
    e3b0:	f7 1d       	adc	r31, r7
    e3b2:	e6 59       	subi	r30, 0x96	; 150
    e3b4:	f0 43       	sbci	r31, 0x30	; 48
    e3b6:	85 91       	lpm	r24, Z+
    e3b8:	94 91       	lpm	r25, Z+
    e3ba:	00 e4       	ldi	r16, 0x40	; 64
    e3bc:	10 e0       	ldi	r17, 0x00	; 0
    e3be:	97 01       	movw	r18, r14
    e3c0:	a7 01       	movw	r20, r14
    e3c2:	b6 01       	movw	r22, r12
    e3c4:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>
    e3c8:	df 91       	pop	r29
    e3ca:	cf 91       	pop	r28
    e3cc:	1f 91       	pop	r17
    e3ce:	0f 91       	pop	r16
    e3d0:	ff 90       	pop	r15
    e3d2:	ef 90       	pop	r14
    e3d4:	df 90       	pop	r13
    e3d6:	cf 90       	pop	r12
    e3d8:	bf 90       	pop	r11
    e3da:	af 90       	pop	r10
    e3dc:	9f 90       	pop	r9
    e3de:	8f 90       	pop	r8
    e3e0:	7f 90       	pop	r7
    e3e2:	6f 90       	pop	r6
    e3e4:	08 95       	ret

0000e3e6 <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    e3e6:	af 92       	push	r10
    e3e8:	bf 92       	push	r11
    e3ea:	cf 92       	push	r12
    e3ec:	df 92       	push	r13
    e3ee:	ef 92       	push	r14
    e3f0:	ff 92       	push	r15
    e3f2:	0f 93       	push	r16
    e3f4:	1f 93       	push	r17
    e3f6:	cf 93       	push	r28
    e3f8:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e3fa:	85 36       	cpi	r24, 0x65	; 101
    e3fc:	08 f0       	brcs	.+2      	; 0xe400 <LCD_UpdateSOC+0x1a>
		soc = 100;
    e3fe:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e400:	ec 2f       	mov	r30, r28
    e402:	ff 27       	eor	r31, r31
    e404:	ee 0f       	add	r30, r30
    e406:	ff 1f       	adc	r31, r31
    e408:	ea 57       	subi	r30, 0x7A	; 122
    e40a:	f0 43       	sbci	r31, 0x30	; 48
    e40c:	85 91       	lpm	r24, Z+
    e40e:	94 91       	lpm	r25, Z+
    e410:	b8 e0       	ldi	r27, 0x08	; 8
    e412:	ab 2e       	mov	r10, r27
    e414:	b1 2c       	mov	r11, r1
    e416:	a0 e2       	ldi	r26, 0x20	; 32
    e418:	ca 2e       	mov	r12, r26
    e41a:	d1 2c       	mov	r13, r1
    e41c:	ee 24       	eor	r14, r14
    e41e:	ff 24       	eor	r15, r15
    e420:	00 e6       	ldi	r16, 0x60	; 96
    e422:	10 e0       	ldi	r17, 0x00	; 0
    e424:	97 01       	movw	r18, r14
    e426:	a7 01       	movw	r20, r14
    e428:	b6 01       	movw	r22, r12
    e42a:	0e 94 83 76 	call	0xed06	; 0xed06 <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e42e:	8c 2f       	mov	r24, r28
    e430:	0e 94 20 71 	call	0xe240	; 0xe240 <LCD_UpdateBigNumbers>
    e434:	cf 91       	pop	r28
    e436:	1f 91       	pop	r17
    e438:	0f 91       	pop	r16
    e43a:	ff 90       	pop	r15
    e43c:	ef 90       	pop	r14
    e43e:	df 90       	pop	r13
    e440:	cf 90       	pop	r12
    e442:	bf 90       	pop	r11
    e444:	af 90       	pop	r10
    e446:	08 95       	ret

0000e448 <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e448:	9f 92       	push	r9
    e44a:	af 92       	push	r10
    e44c:	bf 92       	push	r11
    e44e:	cf 92       	push	r12
    e450:	df 92       	push	r13
    e452:	ef 92       	push	r14
    e454:	ff 92       	push	r15
    e456:	0f 93       	push	r16
    e458:	1f 93       	push	r17
    e45a:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e45c:	48 17       	cp	r20, r24
    e45e:	30 f4       	brcc	.+12     	; 0xe46c <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e460:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e462:	84 2f       	mov	r24, r20
        Xend = dx;
    e464:	40 2f       	mov	r20, r16
        dy = Ystart;
    e466:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e468:	62 2f       	mov	r22, r18
        Yend = dy;
    e46a:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e46c:	04 2f       	mov	r16, r20
    e46e:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e470:	12 2f       	mov	r17, r18
    e472:	16 1b       	sub	r17, r22

    x = Xstart;
    e474:	b8 2e       	mov	r11, r24
    y = Ystart;
    e476:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e478:	07 ff       	sbrs	r16, 7
    e47a:	04 c0       	rjmp	.+8      	; 0xe484 <LCD_SetLine+0x3c>
        xinc = -1;
    e47c:	2f ef       	ldi	r18, 0xFF	; 255
    e47e:	92 2e       	mov	r9, r18
        dx = -dx;
    e480:	01 95       	neg	r16
    e482:	02 c0       	rjmp	.+4      	; 0xe488 <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e484:	91 e0       	ldi	r25, 0x01	; 1
    e486:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e488:	17 ff       	sbrs	r17, 7
    e48a:	04 c0       	rjmp	.+8      	; 0xe494 <LCD_SetLine+0x4c>
        yinc = -1;
    e48c:	8f ef       	ldi	r24, 0xFF	; 255
    e48e:	a8 2e       	mov	r10, r24
        dy = -dy;
    e490:	11 95       	neg	r17
    e492:	02 c0       	rjmp	.+4      	; 0xe498 <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e494:	c1 e0       	ldi	r28, 0x01	; 1
    e496:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e498:	10 17       	cp	r17, r16
    e49a:	d4 f4       	brge	.+52     	; 0xe4d0 <LCD_SetLine+0x88>
        e = dy - dx;
    e49c:	c1 2f       	mov	r28, r17
    e49e:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e4a0:	dd 24       	eor	r13, r13
    e4a2:	e0 2e       	mov	r14, r16
    e4a4:	ff 24       	eor	r15, r15
    e4a6:	e7 fc       	sbrc	r14, 7
    e4a8:	f0 94       	com	r15
    e4aa:	f7 fc       	sbrc	r15, 7
    e4ac:	2a c0       	rjmp	.+84     	; 0xe502 <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e4ae:	6c 2d       	mov	r22, r12
    e4b0:	8b 2d       	mov	r24, r11
    e4b2:	0e 94 ee 6c 	call	0xd9dc	; 0xd9dc <LCD_SetPixel>
            if (e >= 0){
    e4b6:	c7 fd       	sbrc	r28, 7
    e4b8:	02 c0       	rjmp	.+4      	; 0xe4be <LCD_SetLine+0x76>
                e -= dx;
    e4ba:	c0 1b       	sub	r28, r16
                y += yinc;
    e4bc:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e4be:	c1 0f       	add	r28, r17
            x += xinc;
    e4c0:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e4c2:	d3 94       	inc	r13
    e4c4:	8d 2d       	mov	r24, r13
    e4c6:	99 27       	eor	r25, r25
    e4c8:	e8 16       	cp	r14, r24
    e4ca:	f9 06       	cpc	r15, r25
    e4cc:	84 f7       	brge	.-32     	; 0xe4ae <LCD_SetLine+0x66>
    e4ce:	19 c0       	rjmp	.+50     	; 0xe502 <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e4d0:	c0 2f       	mov	r28, r16
    e4d2:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e4d4:	dd 24       	eor	r13, r13
    e4d6:	e1 2e       	mov	r14, r17
    e4d8:	ff 24       	eor	r15, r15
    e4da:	e7 fc       	sbrc	r14, 7
    e4dc:	f0 94       	com	r15
    e4de:	f7 fc       	sbrc	r15, 7
    e4e0:	10 c0       	rjmp	.+32     	; 0xe502 <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e4e2:	6c 2d       	mov	r22, r12
    e4e4:	8b 2d       	mov	r24, r11
    e4e6:	0e 94 ee 6c 	call	0xd9dc	; 0xd9dc <LCD_SetPixel>
    
            if (e >= 0){
    e4ea:	c7 fd       	sbrc	r28, 7
    e4ec:	02 c0       	rjmp	.+4      	; 0xe4f2 <LCD_SetLine+0xaa>
                e -= dy;
    e4ee:	c1 1b       	sub	r28, r17
                x += xinc;
    e4f0:	b9 0c       	add	r11, r9
            }
            e += dx;
    e4f2:	c0 0f       	add	r28, r16
            y += yinc;
    e4f4:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e4f6:	d3 94       	inc	r13
    e4f8:	8d 2d       	mov	r24, r13
    e4fa:	99 27       	eor	r25, r25
    e4fc:	e8 16       	cp	r14, r24
    e4fe:	f9 06       	cpc	r15, r25
    e500:	84 f7       	brge	.-32     	; 0xe4e2 <LCD_SetLine+0x9a>
    e502:	cf 91       	pop	r28
    e504:	1f 91       	pop	r17
    e506:	0f 91       	pop	r16
    e508:	ff 90       	pop	r15
    e50a:	ef 90       	pop	r14
    e50c:	df 90       	pop	r13
    e50e:	cf 90       	pop	r12
    e510:	bf 90       	pop	r11
    e512:	af 90       	pop	r10
    e514:	9f 90       	pop	r9
    e516:	08 95       	ret

0000e518 <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e518:	9f 92       	push	r9
    e51a:	af 92       	push	r10
    e51c:	bf 92       	push	r11
    e51e:	cf 92       	push	r12
    e520:	df 92       	push	r13
    e522:	ef 92       	push	r14
    e524:	ff 92       	push	r15
    e526:	0f 93       	push	r16
    e528:	1f 93       	push	r17
    e52a:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e52c:	48 17       	cp	r20, r24
    e52e:	30 f4       	brcc	.+12     	; 0xe53c <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e530:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e532:	84 2f       	mov	r24, r20
        Xend = dx;
    e534:	40 2f       	mov	r20, r16
        dy = Ystart;
    e536:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e538:	62 2f       	mov	r22, r18
        Yend = dy;
    e53a:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e53c:	04 2f       	mov	r16, r20
    e53e:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e540:	12 2f       	mov	r17, r18
    e542:	16 1b       	sub	r17, r22

    x = Xstart;
    e544:	b8 2e       	mov	r11, r24
    y = Ystart;
    e546:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e548:	07 ff       	sbrs	r16, 7
    e54a:	04 c0       	rjmp	.+8      	; 0xe554 <LCD_ClrLine+0x3c>
        xinc = -1;
    e54c:	6f ef       	ldi	r22, 0xFF	; 255
    e54e:	96 2e       	mov	r9, r22
        dx = -dx;
    e550:	01 95       	neg	r16
    e552:	02 c0       	rjmp	.+4      	; 0xe558 <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e554:	51 e0       	ldi	r21, 0x01	; 1
    e556:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e558:	17 ff       	sbrs	r17, 7
    e55a:	04 c0       	rjmp	.+8      	; 0xe564 <LCD_ClrLine+0x4c>
        yinc = -1;
    e55c:	4f ef       	ldi	r20, 0xFF	; 255
    e55e:	a4 2e       	mov	r10, r20
        dy = -dy;
    e560:	11 95       	neg	r17
    e562:	02 c0       	rjmp	.+4      	; 0xe568 <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e564:	31 e0       	ldi	r19, 0x01	; 1
    e566:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e568:	10 17       	cp	r17, r16
    e56a:	d4 f4       	brge	.+52     	; 0xe5a0 <LCD_ClrLine+0x88>
        e = dy - dx;
    e56c:	c1 2f       	mov	r28, r17
    e56e:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e570:	dd 24       	eor	r13, r13
    e572:	e0 2e       	mov	r14, r16
    e574:	ff 24       	eor	r15, r15
    e576:	e7 fc       	sbrc	r14, 7
    e578:	f0 94       	com	r15
    e57a:	f7 fc       	sbrc	r15, 7
    e57c:	2a c0       	rjmp	.+84     	; 0xe5d2 <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e57e:	6c 2d       	mov	r22, r12
    e580:	8b 2d       	mov	r24, r11
    e582:	0e 94 34 6d 	call	0xda68	; 0xda68 <LCD_ClrPixel>
            if (e >= 0){
    e586:	c7 fd       	sbrc	r28, 7
    e588:	02 c0       	rjmp	.+4      	; 0xe58e <LCD_ClrLine+0x76>
                e -= dx;
    e58a:	c0 1b       	sub	r28, r16
                y += yinc;
    e58c:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e58e:	c1 0f       	add	r28, r17
            x += xinc;
    e590:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e592:	d3 94       	inc	r13
    e594:	8d 2d       	mov	r24, r13
    e596:	99 27       	eor	r25, r25
    e598:	e8 16       	cp	r14, r24
    e59a:	f9 06       	cpc	r15, r25
    e59c:	84 f7       	brge	.-32     	; 0xe57e <LCD_ClrLine+0x66>
    e59e:	19 c0       	rjmp	.+50     	; 0xe5d2 <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e5a0:	c0 2f       	mov	r28, r16
    e5a2:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e5a4:	dd 24       	eor	r13, r13
    e5a6:	e1 2e       	mov	r14, r17
    e5a8:	ff 24       	eor	r15, r15
    e5aa:	e7 fc       	sbrc	r14, 7
    e5ac:	f0 94       	com	r15
    e5ae:	f7 fc       	sbrc	r15, 7
    e5b0:	10 c0       	rjmp	.+32     	; 0xe5d2 <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e5b2:	6c 2d       	mov	r22, r12
    e5b4:	8b 2d       	mov	r24, r11
    e5b6:	0e 94 34 6d 	call	0xda68	; 0xda68 <LCD_ClrPixel>
    
            if (e >= 0){
    e5ba:	c7 fd       	sbrc	r28, 7
    e5bc:	02 c0       	rjmp	.+4      	; 0xe5c2 <LCD_ClrLine+0xaa>
                e -= dy;
    e5be:	c1 1b       	sub	r28, r17
                x += xinc;
    e5c0:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e5c2:	c0 0f       	add	r28, r16
            y += yinc;
    e5c4:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e5c6:	d3 94       	inc	r13
    e5c8:	8d 2d       	mov	r24, r13
    e5ca:	99 27       	eor	r25, r25
    e5cc:	e8 16       	cp	r14, r24
    e5ce:	f9 06       	cpc	r15, r25
    e5d0:	84 f7       	brge	.-32     	; 0xe5b2 <LCD_ClrLine+0x9a>
    e5d2:	cf 91       	pop	r28
    e5d4:	1f 91       	pop	r17
    e5d6:	0f 91       	pop	r16
    e5d8:	ff 90       	pop	r15
    e5da:	ef 90       	pop	r14
    e5dc:	df 90       	pop	r13
    e5de:	cf 90       	pop	r12
    e5e0:	bf 90       	pop	r11
    e5e2:	af 90       	pop	r10
    e5e4:	9f 90       	pop	r9
    e5e6:	08 95       	ret

0000e5e8 <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e5e8:	87 b1       	in	r24, 0x07	; 7
    e5ea:	87 70       	andi	r24, 0x07	; 7
    e5ec:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e5ee:	88 b1       	in	r24, 0x08	; 8
    e5f0:	88 6f       	ori	r24, 0xF8	; 248
    e5f2:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e5f4:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e5f6:	24 9a       	sbi	0x04, 4	; 4
    e5f8:	08 95       	ret

0000e5fa <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e5fa:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e5fc:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e5fe:	90 91 6b 00 	lds	r25, 0x006B
    e602:	9f 7e       	andi	r25, 0xEF	; 239
    e604:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e608:	91 e0       	ldi	r25, 0x01	; 1
    e60a:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e60c:	8f bf       	out	0x3f, r24	; 63
    e60e:	08 95       	ret

0000e610 <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e610:	1f 92       	push	r1
    e612:	0f 92       	push	r0
    e614:	0f b6       	in	r0, 0x3f	; 63
    e616:	0f 92       	push	r0
    e618:	11 24       	eor	r1, r1
    e61a:	2f 93       	push	r18
    e61c:	3f 93       	push	r19
    e61e:	4f 93       	push	r20
    e620:	5f 93       	push	r21
    e622:	6f 93       	push	r22
    e624:	7f 93       	push	r23
    e626:	8f 93       	push	r24
    e628:	9f 93       	push	r25
    e62a:	af 93       	push	r26
    e62c:	bf 93       	push	r27
    e62e:	ef 93       	push	r30
    e630:	ff 93       	push	r31
	POWER_WakeupCallback();
    e632:	0e 94 b8 73 	call	0xe770	; 0xe770 <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e636:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e63a:	0e 94 fd 72 	call	0xe5fa	; 0xe5fa <JOYSTICK_DisableWakeupInterrupt>
    e63e:	ff 91       	pop	r31
    e640:	ef 91       	pop	r30
    e642:	bf 91       	pop	r27
    e644:	af 91       	pop	r26
    e646:	9f 91       	pop	r25
    e648:	8f 91       	pop	r24
    e64a:	7f 91       	pop	r23
    e64c:	6f 91       	pop	r22
    e64e:	5f 91       	pop	r21
    e650:	4f 91       	pop	r20
    e652:	3f 91       	pop	r19
    e654:	2f 91       	pop	r18
    e656:	0f 90       	pop	r0
    e658:	0f be       	out	0x3f, r0	; 63
    e65a:	0f 90       	pop	r0
    e65c:	1f 90       	pop	r1
    e65e:	18 95       	reti

0000e660 <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e660:	0f 93       	push	r16
    e662:	1f 93       	push	r17
    e664:	18 2f       	mov	r17, r24
    e666:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e668:	0e 94 f4 72 	call	0xe5e8	; 0xe5e8 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e66c:	0e 94 fd 72 	call	0xe5fa	; 0xe5fa <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e670:	10 93 39 02 	sts	0x0239, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e674:	00 93 38 02 	sts	0x0238, r16
    e678:	1f 91       	pop	r17
    e67a:	0f 91       	pop	r16
    e67c:	08 95       	ret

0000e67e <JOYSTICK_GetState>:
/*
 * \return  Current state of the joystick
 */
uint8_t JOYSTICK_GetState( void )
{
	return JOYSTICK_currentState;
    e67e:	80 91 3b 02 	lds	r24, 0x023B
}
    e682:	99 27       	eor	r25, r25
    e684:	08 95       	ret

0000e686 <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e686:	0f 93       	push	r16
    e688:	1f 93       	push	r17
    e68a:	cf 93       	push	r28
    e68c:	df 93       	push	r29
    e68e:	cd b7       	in	r28, 0x3d	; 61
    e690:	de b7       	in	r29, 0x3e	; 62
    e692:	25 97       	sbiw	r28, 0x05	; 5
    e694:	0f b6       	in	r0, 0x3f	; 63
    e696:	f8 94       	cli
    e698:	de bf       	out	0x3e, r29	; 62
    e69a:	0f be       	out	0x3f, r0	; 63
    e69c:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e69e:	36 b1       	in	r19, 0x06	; 6
    e6a0:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e6a2:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e6a4:	80 91 3c 02 	lds	r24, 0x023C
    e6a8:	38 17       	cp	r19, r24
    e6aa:	19 f0       	breq	.+6      	; 0xe6b2 <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e6ac:	30 93 3c 02 	sts	0x023C, r19
    e6b0:	54 c0       	rjmp	.+168    	; 0xe75a <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e6b2:	20 91 3b 02 	lds	r18, 0x023B
    e6b6:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e6b8:	02 2f       	mov	r16, r18
    e6ba:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e6bc:	50 91 3b 02 	lds	r21, 0x023B
    e6c0:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e6c2:	92 2f       	mov	r25, r18
    e6c4:	90 95       	com	r25
    e6c6:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e6c8:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e6ca:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e6cc:	41 e0       	ldi	r20, 0x01	; 1
    e6ce:	ad e3       	ldi	r26, 0x3D	; 61
    e6d0:	b2 e0       	ldi	r27, 0x02	; 2
    e6d2:	e5 e4       	ldi	r30, 0x45	; 69
    e6d4:	f2 e0       	ldi	r31, 0x02	; 2
    e6d6:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e6d8:	80 81       	ld	r24, Z
    e6da:	88 23       	and	r24, r24
    e6dc:	11 f0       	breq	.+4      	; 0xe6e2 <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e6de:	81 50       	subi	r24, 0x01	; 1
    e6e0:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e6e2:	80 2f       	mov	r24, r16
    e6e4:	84 23       	and	r24, r20
    e6e6:	49 f0       	breq	.+18     	; 0xe6fa <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e6e8:	80 91 39 02 	lds	r24, 0x0239
    e6ec:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e6ee:	80 81       	ld	r24, Z
    e6f0:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e6f2:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e6f4:	80 91 38 02 	lds	r24, 0x0238
    e6f8:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e6fa:	89 2f       	mov	r24, r25
    e6fc:	84 23       	and	r24, r20
    e6fe:	41 f0       	breq	.+16     	; 0xe710 <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e700:	8c 91       	ld	r24, X
    e702:	88 23       	and	r24, r24
    e704:	29 f0       	breq	.+10     	; 0xe710 <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e706:	81 50       	subi	r24, 0x01	; 1
    e708:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e70a:	88 23       	and	r24, r24
    e70c:	09 f4       	brne	.+2      	; 0xe710 <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e70e:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e710:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e712:	61 50       	subi	r22, 0x01	; 1
    e714:	31 96       	adiw	r30, 0x01	; 1
    e716:	11 96       	adiw	r26, 0x01	; 1
    e718:	67 ff       	sbrs	r22, 7
    e71a:	de cf       	rjmp	.-68     	; 0xe6d8 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e71c:	80 91 3a 02 	lds	r24, 0x023A
    e720:	87 2b       	or	r24, r23
    e722:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e726:	95 2f       	mov	r25, r21
    e728:	90 95       	com	r25
    e72a:	80 91 3a 02 	lds	r24, 0x023A
    e72e:	89 23       	and	r24, r25
    e730:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentState = newState;
    e734:	30 93 3b 02 	sts	0x023B, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e738:	e0 91 36 02 	lds	r30, 0x0236
    e73c:	f0 91 37 02 	lds	r31, 0x0237
    e740:	30 97       	sbiw	r30, 0x00	; 0
    e742:	59 f0       	breq	.+22     	; 0xe75a <JOYSTICK_PollingHandler+0xd4>
    e744:	27 2b       	or	r18, r23
    e746:	21 2b       	or	r18, r17
    e748:	41 f0       	breq	.+16     	; 0xe75a <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e74a:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e74c:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e74e:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e750:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e752:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e754:	ce 01       	movw	r24, r28
    e756:	01 96       	adiw	r24, 0x01	; 1
    e758:	09 95       	icall
    e75a:	25 96       	adiw	r28, 0x05	; 5
    e75c:	0f b6       	in	r0, 0x3f	; 63
    e75e:	f8 94       	cli
    e760:	de bf       	out	0x3e, r29	; 62
    e762:	0f be       	out	0x3f, r0	; 63
    e764:	cd bf       	out	0x3d, r28	; 61
    e766:	df 91       	pop	r29
    e768:	cf 91       	pop	r28
    e76a:	1f 91       	pop	r17
    e76c:	0f 91       	pop	r16
    e76e:	08 95       	ret

0000e770 <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e770:	81 e0       	ldi	r24, 0x01	; 1
    e772:	80 93 4d 02 	sts	0x024D, r24
    e776:	08 95       	ret

0000e778 <POWER_EnterIdleSleepMode>:
}

void POWER_EnterIdleSleepMode( void )
{
	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | (1 << SE);
    e778:	81 e0       	ldi	r24, 0x01	; 1
    e77a:	83 bf       	out	0x33, r24	; 51
	CAL_sleep();
    e77c:	88 95       	sleep
	SMCR = (0 << SE);
    e77e:	13 be       	out	0x33, r1	; 51
    e780:	08 95       	ret

0000e782 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e782:	80 91 65 00 	lds	r24, 0x0065
    e786:	87 7f       	andi	r24, 0xF7	; 247
    e788:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e78c:	8d b1       	in	r24, 0x0d	; 13
    e78e:	88 63       	ori	r24, 0x38	; 56
    e790:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e792:	80 91 51 02 	lds	r24, 0x0251
    e796:	99 27       	eor	r25, r25
    e798:	90 93 99 00 	sts	0x0099, r25
    e79c:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e7a0:	80 91 50 02 	lds	r24, 0x0250
    e7a4:	99 27       	eor	r25, r25
    e7a6:	90 93 9b 00 	sts	0x009B, r25
    e7aa:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e7ae:	80 91 4f 02 	lds	r24, 0x024F
    e7b2:	99 27       	eor	r25, r25
    e7b4:	90 93 9d 00 	sts	0x009D, r25
    e7b8:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e7bc:	89 ea       	ldi	r24, 0xA9	; 169
    e7be:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e7c2:	81 e0       	ldi	r24, 0x01	; 1
    e7c4:	80 93 91 00 	sts	0x0091, r24
    e7c8:	08 95       	ret

0000e7ca <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e7ca:	cf 93       	push	r28
    e7cc:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e7ce:	e0 91 51 02 	lds	r30, 0x0251
    green = BACKLIGHT_green;
    e7d2:	f0 91 50 02 	lds	r31, 0x0250
    blue = BACKLIGHT_blue;
    e7d6:	c0 91 4f 02 	lds	r28, 0x024F
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e7da:	2f ef       	ldi	r18, 0xFF	; 255
    e7dc:	30 e0       	ldi	r19, 0x00	; 0
    e7de:	e8 9f       	mul	r30, r24
    e7e0:	c0 01       	movw	r24, r0
    e7e2:	11 24       	eor	r1, r1
    e7e4:	b9 01       	movw	r22, r18
    e7e6:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    e7ea:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e7ec:	f4 9f       	mul	r31, r20
    e7ee:	c0 01       	movw	r24, r0
    e7f0:	11 24       	eor	r1, r1
    e7f2:	b9 01       	movw	r22, r18
    e7f4:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    e7f8:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e7fa:	c4 9f       	mul	r28, r20
    e7fc:	c0 01       	movw	r24, r0
    e7fe:	11 24       	eor	r1, r1
    e800:	b9 01       	movw	r22, r18
    e802:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e806:	40 93 4e 02 	sts	0x024E, r20
    OCR_RED = red;
    e80a:	8e 2f       	mov	r24, r30
    e80c:	99 27       	eor	r25, r25
    e80e:	90 93 99 00 	sts	0x0099, r25
    e812:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e816:	8f 2f       	mov	r24, r31
    e818:	99 27       	eor	r25, r25
    e81a:	90 93 9b 00 	sts	0x009B, r25
    e81e:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e822:	86 2f       	mov	r24, r22
    e824:	99 27       	eor	r25, r25
    e826:	90 93 9d 00 	sts	0x009D, r25
    e82a:	80 93 9c 00 	sts	0x009C, r24
    e82e:	cf 91       	pop	r28
    e830:	08 95       	ret

0000e832 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e832:	38 2f       	mov	r19, r24
    e834:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e836:	80 93 51 02 	sts	0x0251, r24
    BACKLIGHT_green = green;
    e83a:	60 93 50 02 	sts	0x0250, r22
    BACKLIGHT_blue = blue;
    e83e:	40 93 4f 02 	sts	0x024F, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e842:	20 91 4e 02 	lds	r18, 0x024E
    e846:	2f 3f       	cpi	r18, 0xFF	; 255
    e848:	c1 f0       	breq	.+48     	; 0xe87a <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e84a:	82 9f       	mul	r24, r18
    e84c:	c0 01       	movw	r24, r0
    e84e:	11 24       	eor	r1, r1
    e850:	6f ef       	ldi	r22, 0xFF	; 255
    e852:	70 e0       	ldi	r23, 0x00	; 0
    e854:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    e858:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e85a:	e2 9f       	mul	r30, r18
    e85c:	c0 01       	movw	r24, r0
    e85e:	11 24       	eor	r1, r1
    e860:	6f ef       	ldi	r22, 0xFF	; 255
    e862:	70 e0       	ldi	r23, 0x00	; 0
    e864:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    e868:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e86a:	42 9f       	mul	r20, r18
    e86c:	c0 01       	movw	r24, r0
    e86e:	11 24       	eor	r1, r1
    e870:	6f ef       	ldi	r22, 0xFF	; 255
    e872:	70 e0       	ldi	r23, 0x00	; 0
    e874:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    e878:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    e87a:	83 2f       	mov	r24, r19
    e87c:	99 27       	eor	r25, r25
    e87e:	90 93 99 00 	sts	0x0099, r25
    e882:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e886:	8e 2f       	mov	r24, r30
    e888:	99 27       	eor	r25, r25
    e88a:	90 93 9b 00 	sts	0x009B, r25
    e88e:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e892:	84 2f       	mov	r24, r20
    e894:	99 27       	eor	r25, r25
    e896:	90 93 9d 00 	sts	0x009D, r25
    e89a:	80 93 9c 00 	sts	0x009C, r24
    e89e:	08 95       	ret

0000e8a0 <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    e8a0:	cf 93       	push	r28
    e8a2:	df 93       	push	r29
    e8a4:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    e8a6:	ed 01       	movw	r28, r26
    e8a8:	88 85       	ldd	r24, Y+8	; 0x08
    e8aa:	88 23       	and	r24, r24
    e8ac:	e1 f3       	breq	.-8      	; 0xe8a6 <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    e8ae:	ec 81       	ldd	r30, Y+4	; 0x04
    e8b0:	fd 81       	ldd	r31, Y+5	; 0x05
    e8b2:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e8b4:	2a 81       	ldd	r18, Y+2	; 0x02
    e8b6:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    e8b8:	8c 81       	ldd	r24, Y+4	; 0x04
    e8ba:	9d 81       	ldd	r25, Y+5	; 0x05
    e8bc:	82 17       	cp	r24, r18
    e8be:	93 07       	cpc	r25, r19
    e8c0:	31 f4       	brne	.+12     	; 0xe8ce <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    e8c2:	8d 91       	ld	r24, X+
    e8c4:	9c 91       	ld	r25, X
    e8c6:	11 97       	sbiw	r26, 0x01	; 1
    e8c8:	9d 83       	std	Y+5, r25	; 0x05
    e8ca:	8c 83       	std	Y+4, r24	; 0x04
    e8cc:	06 c0       	rjmp	.+12     	; 0xe8da <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    e8ce:	fd 01       	movw	r30, r26
    e8d0:	84 81       	ldd	r24, Z+4	; 0x04
    e8d2:	95 81       	ldd	r25, Z+5	; 0x05
    e8d4:	01 96       	adiw	r24, 0x01	; 1
    e8d6:	95 83       	std	Z+5, r25	; 0x05
    e8d8:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    e8da:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e8dc:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e8de:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    e8e0:	ed 01       	movw	r28, r26
    e8e2:	89 85       	ldd	r24, Y+9	; 0x09
    e8e4:	88 23       	and	r24, r24
    e8e6:	09 f4       	brne	.+2      	; 0xe8ea <FIFO_InternalPutData+0x4a>
    e8e8:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    e8ea:	fd 01       	movw	r30, r26
    e8ec:	80 85       	ldd	r24, Z+8	; 0x08
    e8ee:	81 50       	subi	r24, 0x01	; 1
    e8f0:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    e8f2:	81 85       	ldd	r24, Z+9	; 0x09
    e8f4:	8f 5f       	subi	r24, 0xFF	; 255
    e8f6:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    e8f8:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e8fa:	22 23       	and	r18, r18
    e8fc:	49 f0       	breq	.+18     	; 0xe910 <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e8fe:	84 85       	ldd	r24, Z+12	; 0x0c
    e900:	95 85       	ldd	r25, Z+13	; 0x0d
    e902:	89 2b       	or	r24, r25
    e904:	29 f0       	breq	.+10     	; 0xe910 <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e906:	04 84       	ldd	r0, Z+12	; 0x0c
    e908:	f5 85       	ldd	r31, Z+13	; 0x0d
    e90a:	e0 2d       	mov	r30, r0
    e90c:	cd 01       	movw	r24, r26
    e90e:	09 95       	icall
    e910:	df 91       	pop	r29
    e912:	cf 91       	pop	r28
    e914:	08 95       	ret

0000e916 <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e916:	cf 93       	push	r28
    e918:	df 93       	push	r29
    e91a:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e91c:	89 85       	ldd	r24, Y+9	; 0x09
    e91e:	88 23       	and	r24, r24
    e920:	e9 f3       	breq	.-6      	; 0xe91c <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e922:	2a 81       	ldd	r18, Y+2	; 0x02
    e924:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e926:	8e 81       	ldd	r24, Y+6	; 0x06
    e928:	9f 81       	ldd	r25, Y+7	; 0x07
    e92a:	82 17       	cp	r24, r18
    e92c:	93 07       	cpc	r25, r19
    e92e:	19 f4       	brne	.+6      	; 0xe936 <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e930:	88 81       	ld	r24, Y
    e932:	99 81       	ldd	r25, Y+1	; 0x01
    e934:	03 c0       	rjmp	.+6      	; 0xe93c <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e936:	8e 81       	ldd	r24, Y+6	; 0x06
    e938:	9f 81       	ldd	r25, Y+7	; 0x07
    e93a:	01 96       	adiw	r24, 0x01	; 1
    e93c:	9f 83       	std	Y+7, r25	; 0x07
    e93e:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e940:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e942:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e944:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e946:	88 85       	ldd	r24, Y+8	; 0x08
    e948:	88 23       	and	r24, r24
    e94a:	09 f4       	brne	.+2      	; 0xe94e <FIFO_InternalGetData+0x38>
    e94c:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e94e:	88 85       	ldd	r24, Y+8	; 0x08
    e950:	8f 5f       	subi	r24, 0xFF	; 255
    e952:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e954:	89 85       	ldd	r24, Y+9	; 0x09
    e956:	81 50       	subi	r24, 0x01	; 1
    e958:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e95a:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e95c:	22 23       	and	r18, r18
    e95e:	41 f0       	breq	.+16     	; 0xe970 <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e960:	8a 85       	ldd	r24, Y+10	; 0x0a
    e962:	9b 85       	ldd	r25, Y+11	; 0x0b
    e964:	89 2b       	or	r24, r25
    e966:	21 f0       	breq	.+8      	; 0xe970 <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e968:	ea 85       	ldd	r30, Y+10	; 0x0a
    e96a:	fb 85       	ldd	r31, Y+11	; 0x0b
    e96c:	ce 01       	movw	r24, r28
    e96e:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e970:	ee 81       	ldd	r30, Y+6	; 0x06
    e972:	ff 81       	ldd	r31, Y+7	; 0x07
    e974:	80 81       	ld	r24, Z
}
    e976:	99 27       	eor	r25, r25
    e978:	df 91       	pop	r29
    e97a:	cf 91       	pop	r28
    e97c:	08 95       	ret

0000e97e <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e97e:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e980:	71 83       	std	Z+1, r23	; 0x01
    e982:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e984:	cb 01       	movw	r24, r22
    e986:	84 0f       	add	r24, r20
    e988:	91 1d       	adc	r25, r1
    e98a:	01 97       	sbiw	r24, 0x01	; 1
    e98c:	93 83       	std	Z+3, r25	; 0x03
    e98e:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e990:	75 83       	std	Z+5, r23	; 0x05
    e992:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e994:	97 83       	std	Z+7, r25	; 0x07
    e996:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e998:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e99a:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e99c:	13 86       	std	Z+11, r1	; 0x0b
    e99e:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e9a0:	15 86       	std	Z+13, r1	; 0x0d
    e9a2:	14 86       	std	Z+12, r1	; 0x0c
    e9a4:	08 95       	ret

0000e9a6 <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e9a6:	0e 94 8b 74 	call	0xe916	; 0xe916 <FIFO_InternalGetData>
	
	return data;
}
    e9aa:	99 27       	eor	r25, r25
    e9ac:	08 95       	ret

0000e9ae <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e9ae:	0f 93       	push	r16
    e9b0:	1f 93       	push	r17
    e9b2:	cf 93       	push	r28
    e9b4:	df 93       	push	r29
    e9b6:	cd b7       	in	r28, 0x3d	; 61
    e9b8:	de b7       	in	r29, 0x3e	; 62
    e9ba:	21 97       	sbiw	r28, 0x01	; 1
    e9bc:	0f b6       	in	r0, 0x3f	; 63
    e9be:	f8 94       	cli
    e9c0:	de bf       	out	0x3e, r29	; 62
    e9c2:	0f be       	out	0x3f, r0	; 63
    e9c4:	cd bf       	out	0x3d, r28	; 61
    e9c6:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e9c8:	fc 01       	movw	r30, r24
    e9ca:	81 85       	ldd	r24, Z+9	; 0x09
    e9cc:	88 23       	and	r24, r24
    e9ce:	41 f0       	breq	.+16     	; 0xe9e0 <FIFO_Flush+0x32>
    e9d0:	c8 01       	movw	r24, r16
    e9d2:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <FIFO_GetUint8>
    e9d6:	89 83       	std	Y+1, r24	; 0x01
    e9d8:	f8 01       	movw	r30, r16
    e9da:	81 85       	ldd	r24, Z+9	; 0x09
    e9dc:	88 23       	and	r24, r24
    e9de:	c1 f7       	brne	.-16     	; 0xe9d0 <FIFO_Flush+0x22>
    e9e0:	21 96       	adiw	r28, 0x01	; 1
    e9e2:	0f b6       	in	r0, 0x3f	; 63
    e9e4:	f8 94       	cli
    e9e6:	de bf       	out	0x3e, r29	; 62
    e9e8:	0f be       	out	0x3f, r0	; 63
    e9ea:	cd bf       	out	0x3d, r28	; 61
    e9ec:	df 91       	pop	r29
    e9ee:	cf 91       	pop	r28
    e9f0:	1f 91       	pop	r17
    e9f2:	0f 91       	pop	r16
    e9f4:	08 95       	ret

0000e9f6 <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e9f6:	ef 92       	push	r14
    e9f8:	ff 92       	push	r15
    e9fa:	0f 93       	push	r16
    e9fc:	1f 93       	push	r17
    e9fe:	7c 01       	movw	r14, r24
    ea00:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    ea02:	0e 94 50 74 	call	0xe8a0	; 0xe8a0 <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    ea06:	81 2f       	mov	r24, r17
    ea08:	99 27       	eor	r25, r25
    ea0a:	68 2f       	mov	r22, r24
    ea0c:	c7 01       	movw	r24, r14
    ea0e:	0e 94 50 74 	call	0xe8a0	; 0xe8a0 <FIFO_InternalPutData>
    ea12:	1f 91       	pop	r17
    ea14:	0f 91       	pop	r16
    ea16:	ff 90       	pop	r15
    ea18:	ef 90       	pop	r14
    ea1a:	08 95       	ret

0000ea1c <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    ea1c:	ef 92       	push	r14
    ea1e:	ff 92       	push	r15
    ea20:	0f 93       	push	r16
    ea22:	1f 93       	push	r17
    ea24:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    ea26:	0e 94 8b 74 	call	0xe916	; 0xe916 <FIFO_InternalGetData>
    ea2a:	e8 2e       	mov	r14, r24
    ea2c:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    ea2e:	c8 01       	movw	r24, r16
    ea30:	0e 94 8b 74 	call	0xe916	; 0xe916 <FIFO_InternalGetData>
    ea34:	99 27       	eor	r25, r25
    ea36:	98 2f       	mov	r25, r24
    ea38:	88 27       	eor	r24, r24
	
	return data;
}
    ea3a:	8e 29       	or	r24, r14
    ea3c:	9f 29       	or	r25, r15
    ea3e:	1f 91       	pop	r17
    ea40:	0f 91       	pop	r16
    ea42:	ff 90       	pop	r15
    ea44:	ef 90       	pop	r14
    ea46:	08 95       	ret

0000ea48 <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    ea48:	90 93 53 02 	sts	0x0253, r25
    ea4c:	80 93 52 02 	sts	0x0252, r24
	MEMBLOCK_manager.bags = workspace;
    ea50:	70 93 55 02 	sts	0x0255, r23
    ea54:	60 93 54 02 	sts	0x0254, r22
    ea58:	08 95       	ret

0000ea5a <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    ea5a:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    ea5c:	28 e1       	ldi	r18, 0x18	; 24
    ea5e:	30 e0       	ldi	r19, 0x00	; 0
    ea60:	82 9f       	mul	r24, r18
    ea62:	f0 01       	movw	r30, r0
    ea64:	83 9f       	mul	r24, r19
    ea66:	f0 0d       	add	r31, r0
    ea68:	92 9f       	mul	r25, r18
    ea6a:	f0 0d       	add	r31, r0
    ea6c:	11 24       	eor	r1, r1
    ea6e:	cf 01       	movw	r24, r30
    ea70:	e0 91 54 02 	lds	r30, 0x0254
    ea74:	f0 91 55 02 	lds	r31, 0x0255
    ea78:	e8 0f       	add	r30, r24
    ea7a:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    ea7c:	71 83       	std	Z+1, r23	; 0x01
    ea7e:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    ea80:	53 83       	std	Z+3, r21	; 0x03
    ea82:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    ea84:	55 83       	std	Z+5, r21	; 0x05
    ea86:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    ea88:	13 86       	std	Z+11, r1	; 0x0b
    ea8a:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    ea8c:	75 87       	std	Z+13, r23	; 0x0d
    ea8e:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    ea90:	17 86       	std	Z+15, r1	; 0x0f
    ea92:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    ea94:	10 8a       	std	Z+16, r1	; 0x10
    ea96:	11 8a       	std	Z+17, r1	; 0x11
    ea98:	12 8a       	std	Z+18, r1	; 0x12
    ea9a:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    ea9c:	14 8a       	std	Z+20, r1	; 0x14
    ea9e:	15 8a       	std	Z+21, r1	; 0x15
    eaa0:	16 8a       	std	Z+22, r1	; 0x16
    eaa2:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    eaa4:	b7 83       	std	Z+7, r27	; 0x07
    eaa6:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    eaa8:	64 9f       	mul	r22, r20
    eaaa:	c0 01       	movw	r24, r0
    eaac:	65 9f       	mul	r22, r21
    eaae:	90 0d       	add	r25, r0
    eab0:	74 9f       	mul	r23, r20
    eab2:	90 0d       	add	r25, r0
    eab4:	11 24       	eor	r1, r1
    eab6:	8a 0f       	add	r24, r26
    eab8:	9b 1f       	adc	r25, r27
    eaba:	91 87       	std	Z+9, r25	; 0x09
    eabc:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    eabe:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    eac0:	49 5f       	subi	r20, 0xF9	; 249
    eac2:	5f 4f       	sbci	r21, 0xFF	; 255
    eac4:	83 e0       	ldi	r24, 0x03	; 3
    eac6:	56 95       	lsr	r21
    eac8:	47 95       	ror	r20
    eaca:	8a 95       	dec	r24
    eacc:	e1 f7       	brne	.-8      	; 0xeac6 <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    eace:	41 15       	cp	r20, r1
    ead0:	51 05       	cpc	r21, r1
    ead2:	29 f0       	breq	.+10     	; 0xeade <MEMBLOCK_InitBag+0x84>
    ead4:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    ead6:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    ead8:	41 50       	subi	r20, 0x01	; 1
    eada:	50 40       	sbci	r21, 0x00	; 0
    eadc:	e1 f7       	brne	.-8      	; 0xead6 <MEMBLOCK_InitBag+0x7c>
    eade:	08 95       	ret

0000eae0 <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    eae0:	af 92       	push	r10
    eae2:	bf 92       	push	r11
    eae4:	cf 92       	push	r12
    eae6:	df 92       	push	r13
    eae8:	ff 92       	push	r15
    eaea:	0f 93       	push	r16
    eaec:	1f 93       	push	r17
    eaee:	cf 93       	push	r28
    eaf0:	df 93       	push	r29
    eaf2:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    eaf4:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    eaf6:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    eaf8:	c0 91 54 02 	lds	r28, 0x0254
    eafc:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    eb00:	20 91 52 02 	lds	r18, 0x0252
    eb04:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    eb08:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    eb0a:	21 15       	cp	r18, r1
    eb0c:	31 05       	cpc	r19, r1
    eb0e:	09 f4       	brne	.+2      	; 0xeb12 <MEMBLOCK_Allocate+0x32>
    eb10:	81 c0       	rjmp	.+258    	; 0xec14 <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    eb12:	88 81       	ld	r24, Y
    eb14:	99 81       	ldd	r25, Y+1	; 0x01
    eb16:	86 17       	cp	r24, r22
    eb18:	97 07       	cpc	r25, r23
    eb1a:	30 f0       	brcs	.+12     	; 0xeb28 <MEMBLOCK_Allocate+0x48>
    eb1c:	8c 81       	ldd	r24, Y+4	; 0x04
    eb1e:	9d 81       	ldd	r25, Y+5	; 0x05
    eb20:	89 2b       	or	r24, r25
    eb22:	11 f0       	breq	.+4      	; 0xeb28 <MEMBLOCK_Allocate+0x48>
			found = true;
    eb24:	41 e0       	ldi	r20, 0x01	; 1
    eb26:	03 c0       	rjmp	.+6      	; 0xeb2e <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    eb28:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    eb2a:	21 50       	subi	r18, 0x01	; 1
    eb2c:	30 40       	sbci	r19, 0x00	; 0
    eb2e:	21 15       	cp	r18, r1
    eb30:	31 05       	cpc	r19, r1
    eb32:	11 f0       	breq	.+4      	; 0xeb38 <MEMBLOCK_Allocate+0x58>
    eb34:	44 23       	and	r20, r20
    eb36:	69 f3       	breq	.-38     	; 0xeb12 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    eb38:	44 23       	and	r20, r20
    eb3a:	09 f4       	brne	.+2      	; 0xeb3e <MEMBLOCK_Allocate+0x5e>
    eb3c:	6b c0       	rjmp	.+214    	; 0xec14 <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    eb3e:	e8 85       	ldd	r30, Y+8	; 0x08
    eb40:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    eb42:	20 e0       	ldi	r18, 0x00	; 0
    eb44:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    eb46:	80 81       	ld	r24, Z
    eb48:	88 23       	and	r24, r24
    eb4a:	21 f4       	brne	.+8      	; 0xeb54 <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    eb4c:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    eb4e:	28 5f       	subi	r18, 0xF8	; 248
    eb50:	3f 4f       	sbci	r19, 0xFF	; 255
    eb52:	f9 cf       	rjmp	.-14     	; 0xeb46 <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    eb54:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    eb56:	90 81       	ld	r25, Z
    eb58:	97 fd       	sbrc	r25, 7
    eb5a:	06 c0       	rjmp	.+12     	; 0xeb68 <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    eb5c:	46 95       	lsr	r20
		++blockIndex;
    eb5e:	2f 5f       	subi	r18, 0xFF	; 255
    eb60:	3f 4f       	sbci	r19, 0xFF	; 255
    eb62:	89 2f       	mov	r24, r25
    eb64:	84 23       	and	r24, r20
    eb66:	d1 f3       	breq	.-12     	; 0xeb5c <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    eb68:	40 95       	com	r20
    eb6a:	94 23       	and	r25, r20
    eb6c:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    eb6e:	8c 81       	ldd	r24, Y+4	; 0x04
    eb70:	9d 81       	ldd	r25, Y+5	; 0x05
    eb72:	01 97       	sbiw	r24, 0x01	; 1
    eb74:	9d 83       	std	Y+5, r25	; 0x05
    eb76:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    eb78:	48 81       	ld	r20, Y
    eb7a:	59 81       	ldd	r21, Y+1	; 0x01
    eb7c:	24 9f       	mul	r18, r20
    eb7e:	50 01       	movw	r10, r0
    eb80:	25 9f       	mul	r18, r21
    eb82:	b0 0c       	add	r11, r0
    eb84:	34 9f       	mul	r19, r20
    eb86:	b0 0c       	add	r11, r0
    eb88:	11 24       	eor	r1, r1
    eb8a:	0e 81       	ldd	r16, Y+6	; 0x06
    eb8c:	1f 81       	ldd	r17, Y+7	; 0x07
    eb8e:	0a 0d       	add	r16, r10
    eb90:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    eb92:	2a 81       	ldd	r18, Y+2	; 0x02
    eb94:	3b 81       	ldd	r19, Y+3	; 0x03
    eb96:	28 1b       	sub	r18, r24
    eb98:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    eb9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    eb9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    eb9e:	82 17       	cp	r24, r18
    eba0:	93 07       	cpc	r25, r19
    eba2:	10 f4       	brcc	.+4      	; 0xeba8 <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    eba4:	3b 87       	std	Y+11, r19	; 0x0b
    eba6:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    eba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    ebaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebac:	86 17       	cp	r24, r22
    ebae:	97 07       	cpc	r25, r23
    ebb0:	10 f4       	brcc	.+4      	; 0xebb6 <MEMBLOCK_Allocate+0xd6>
    ebb2:	7f 87       	std	Y+15, r23	; 0x0f
    ebb4:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    ebb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    ebb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    ebba:	68 17       	cp	r22, r24
    ebbc:	79 07       	cpc	r23, r25
    ebbe:	10 f4       	brcc	.+4      	; 0xebc4 <MEMBLOCK_Allocate+0xe4>
    ebc0:	7d 87       	std	Y+13, r23	; 0x0d
    ebc2:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    ebc4:	88 89       	ldd	r24, Y+16	; 0x10
    ebc6:	99 89       	ldd	r25, Y+17	; 0x11
    ebc8:	aa 89       	ldd	r26, Y+18	; 0x12
    ebca:	bb 89       	ldd	r27, Y+19	; 0x13
    ebcc:	01 96       	adiw	r24, 0x01	; 1
    ebce:	a1 1d       	adc	r26, r1
    ebd0:	b1 1d       	adc	r27, r1
    ebd2:	88 8b       	std	Y+16, r24	; 0x10
    ebd4:	99 8b       	std	Y+17, r25	; 0x11
    ebd6:	aa 8b       	std	Y+18, r26	; 0x12
    ebd8:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    ebda:	cb 01       	movw	r24, r22
    ebdc:	aa 27       	eor	r26, r26
    ebde:	bb 27       	eor	r27, r27
    ebe0:	ba 2f       	mov	r27, r26
    ebe2:	a9 2f       	mov	r26, r25
    ebe4:	98 2f       	mov	r25, r24
    ebe6:	88 27       	eor	r24, r24
    ebe8:	5a 01       	movw	r10, r20
    ebea:	cc 24       	eor	r12, r12
    ebec:	dd 24       	eor	r13, r13
    ebee:	a6 01       	movw	r20, r12
    ebf0:	95 01       	movw	r18, r10
    ebf2:	bc 01       	movw	r22, r24
    ebf4:	cd 01       	movw	r24, r26
    ebf6:	0e 94 b5 7c 	call	0xf96a	; 0xf96a <__udivmodsi4>
		bag->allocationUtilization += utilization;
    ebfa:	8c 89       	ldd	r24, Y+20	; 0x14
    ebfc:	9d 89       	ldd	r25, Y+21	; 0x15
    ebfe:	ae 89       	ldd	r26, Y+22	; 0x16
    ec00:	bf 89       	ldd	r27, Y+23	; 0x17
    ec02:	82 0f       	add	r24, r18
    ec04:	93 1f       	adc	r25, r19
    ec06:	a4 1f       	adc	r26, r20
    ec08:	b5 1f       	adc	r27, r21
    ec0a:	8c 8b       	std	Y+20, r24	; 0x14
    ec0c:	9d 8b       	std	Y+21, r25	; 0x15
    ec0e:	ae 8b       	std	Y+22, r26	; 0x16
    ec10:	bf 8b       	std	Y+23, r27	; 0x17
    ec12:	02 c0       	rjmp	.+4      	; 0xec18 <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    ec14:	00 e0       	ldi	r16, 0x00	; 0
    ec16:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    ec18:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    ec1a:	c8 01       	movw	r24, r16
    ec1c:	df 91       	pop	r29
    ec1e:	cf 91       	pop	r28
    ec20:	1f 91       	pop	r17
    ec22:	0f 91       	pop	r16
    ec24:	ff 90       	pop	r15
    ec26:	df 90       	pop	r13
    ec28:	cf 90       	pop	r12
    ec2a:	bf 90       	pop	r11
    ec2c:	af 90       	pop	r10
    ec2e:	08 95       	ret

0000ec30 <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    ec30:	cf 93       	push	r28
    ec32:	df 93       	push	r29
    ec34:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    ec36:	89 2b       	or	r24, r25
    ec38:	09 f4       	brne	.+2      	; 0xec3c <MEMBLOCK_Free+0xc>
    ec3a:	4e c0       	rjmp	.+156    	; 0xecd8 <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    ec3c:	c0 91 54 02 	lds	r28, 0x0254
    ec40:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    ec44:	20 91 52 02 	lds	r18, 0x0252
    ec48:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    ec4c:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    ec4e:	21 15       	cp	r18, r1
    ec50:	31 05       	cpc	r19, r1
    ec52:	e9 f1       	breq	.+122    	; 0xecce <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    ec54:	8e 81       	ldd	r24, Y+6	; 0x06
    ec56:	9f 81       	ldd	r25, Y+7	; 0x07
    ec58:	48 17       	cp	r20, r24
    ec5a:	59 07       	cpc	r21, r25
    ec5c:	38 f0       	brcs	.+14     	; 0xec6c <MEMBLOCK_Free+0x3c>
    ec5e:	88 85       	ldd	r24, Y+8	; 0x08
    ec60:	99 85       	ldd	r25, Y+9	; 0x09
    ec62:	48 17       	cp	r20, r24
    ec64:	59 07       	cpc	r21, r25
    ec66:	10 f4       	brcc	.+4      	; 0xec6c <MEMBLOCK_Free+0x3c>
			found = true;
    ec68:	61 e0       	ldi	r22, 0x01	; 1
    ec6a:	03 c0       	rjmp	.+6      	; 0xec72 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    ec6c:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    ec6e:	21 50       	subi	r18, 0x01	; 1
    ec70:	30 40       	sbci	r19, 0x00	; 0
    ec72:	21 15       	cp	r18, r1
    ec74:	31 05       	cpc	r19, r1
    ec76:	11 f0       	breq	.+4      	; 0xec7c <MEMBLOCK_Free+0x4c>
    ec78:	66 23       	and	r22, r22
    ec7a:	61 f3       	breq	.-40     	; 0xec54 <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    ec7c:	66 23       	and	r22, r22
    ec7e:	39 f1       	breq	.+78     	; 0xecce <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    ec80:	8e 81       	ldd	r24, Y+6	; 0x06
    ec82:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    ec84:	28 81       	ld	r18, Y
    ec86:	39 81       	ldd	r19, Y+1	; 0x01
    ec88:	48 1b       	sub	r20, r24
    ec8a:	59 0b       	sbc	r21, r25
    ec8c:	ca 01       	movw	r24, r20
    ec8e:	b9 01       	movw	r22, r18
    ec90:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    ec94:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    ec96:	cb 01       	movw	r24, r22
    ec98:	43 e0       	ldi	r20, 0x03	; 3
    ec9a:	96 95       	lsr	r25
    ec9c:	87 95       	ror	r24
    ec9e:	4a 95       	dec	r20
    eca0:	e1 f7       	brne	.-8      	; 0xec9a <MEMBLOCK_Free+0x6a>
    eca2:	e8 85       	ldd	r30, Y+8	; 0x08
    eca4:	f9 85       	ldd	r31, Y+9	; 0x09
    eca6:	e8 0f       	add	r30, r24
    eca8:	f9 1f       	adc	r31, r25
    ecaa:	27 70       	andi	r18, 0x07	; 7
    ecac:	30 70       	andi	r19, 0x00	; 0
    ecae:	80 e8       	ldi	r24, 0x80	; 128
    ecb0:	90 e0       	ldi	r25, 0x00	; 0
    ecb2:	02 c0       	rjmp	.+4      	; 0xecb8 <MEMBLOCK_Free+0x88>
    ecb4:	95 95       	asr	r25
    ecb6:	87 95       	ror	r24
    ecb8:	2a 95       	dec	r18
    ecba:	e2 f7       	brpl	.-8      	; 0xecb4 <MEMBLOCK_Free+0x84>
    ecbc:	20 81       	ld	r18, Z
    ecbe:	28 2b       	or	r18, r24
    ecc0:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    ecc2:	8c 81       	ldd	r24, Y+4	; 0x04
    ecc4:	9d 81       	ldd	r25, Y+5	; 0x05
    ecc6:	01 96       	adiw	r24, 0x01	; 1
    ecc8:	9d 83       	std	Y+5, r25	; 0x05
    ecca:	8c 83       	std	Y+4, r24	; 0x04
    eccc:	05 c0       	rjmp	.+10     	; 0xecd8 <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    ecce:	80 91 56 02 	lds	r24, 0x0256
    ecd2:	8f 5f       	subi	r24, 0xFF	; 255
    ecd4:	80 93 56 02 	sts	0x0256, r24
    ecd8:	df 91       	pop	r29
    ecda:	cf 91       	pop	r28
    ecdc:	08 95       	ret

0000ecde <PICTURE_CopyFullscreenFlashToLcd>:

/*!
 * \param  pPictureInFlash  Pointer to picture in flash with same size as LCD
 */
void PICTURE_CopyFullscreenFlashToLcd ( const uint8_t CAL_PGM(* pPictureInFlash))
{
    ecde:	1f 93       	push	r17
    ece0:	cf 93       	push	r28
    ece2:	df 93       	push	r29
    ece4:	ec 01       	movw	r28, r24
  uint8_t page = 0;
    ece6:	10 e0       	ldi	r17, 0x00	; 0
  do{
    LCD_WritePage_F( pPictureInFlash, page, 0, LCD_WIDTH);  // Write full row with page height.
    ece8:	20 e8       	ldi	r18, 0x80	; 128
    ecea:	40 e0       	ldi	r20, 0x00	; 0
    ecec:	61 2f       	mov	r22, r17
    ecee:	ce 01       	movw	r24, r28
    ecf0:	0e 94 4d 70 	call	0xe09a	; 0xe09a <LCD_WritePage_F>
    pPictureInFlash += LCD_WIDTH;
    ecf4:	c0 58       	subi	r28, 0x80	; 128
    ecf6:	df 4f       	sbci	r29, 0xFF	; 255
    page++;
    ecf8:	1f 5f       	subi	r17, 0xFF	; 255
  }while (page < LCD_PAGE_HEIGHT);
    ecfa:	18 30       	cpi	r17, 0x08	; 8
    ecfc:	a8 f3       	brcs	.-22     	; 0xece8 <PICTURE_CopyFullscreenFlashToLcd+0xa>
    ecfe:	df 91       	pop	r29
    ed00:	cf 91       	pop	r28
    ed02:	1f 91       	pop	r17
    ed04:	08 95       	ret

0000ed06 <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    ed06:	8f 92       	push	r8
    ed08:	9f 92       	push	r9
    ed0a:	af 92       	push	r10
    ed0c:	cf 92       	push	r12
    ed0e:	ef 92       	push	r14
    ed10:	0f 93       	push	r16
    ed12:	1f 93       	push	r17
    ed14:	cf 93       	push	r28
    ed16:	df 93       	push	r29
    ed18:	4b 01       	movw	r8, r22
    ed1a:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    ed1c:	33 27       	eor	r19, r19
    ed1e:	62 9f       	mul	r22, r18
    ed20:	e0 01       	movw	r28, r0
    ed22:	63 9f       	mul	r22, r19
    ed24:	d0 0d       	add	r29, r0
    ed26:	72 9f       	mul	r23, r18
    ed28:	d0 0d       	add	r29, r0
    ed2a:	11 24       	eor	r1, r1
    ed2c:	c4 0f       	add	r28, r20
    ed2e:	d5 1f       	adc	r29, r21
    ed30:	c8 0f       	add	r28, r24
    ed32:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    ed34:	11 50       	subi	r17, 0x01	; 1
    ed36:	1f 3f       	cpi	r17, 0xFF	; 255
    ed38:	59 f0       	breq	.+22     	; 0xed50 <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    ed3a:	2c 2d       	mov	r18, r12
    ed3c:	40 2f       	mov	r20, r16
    ed3e:	6e 2d       	mov	r22, r14
    ed40:	ce 01       	movw	r24, r28
    ed42:	0e 94 4d 70 	call	0xe09a	; 0xe09a <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    ed46:	c8 0d       	add	r28, r8
    ed48:	d9 1d       	adc	r29, r9
    destPage++;
    ed4a:	e3 94       	inc	r14
    ed4c:	11 50       	subi	r17, 0x01	; 1
    ed4e:	a8 f7       	brcc	.-22     	; 0xed3a <PICTURE_CopyFlashToLcd+0x34>
    ed50:	df 91       	pop	r29
    ed52:	cf 91       	pop	r28
    ed54:	1f 91       	pop	r17
    ed56:	0f 91       	pop	r16
    ed58:	ef 90       	pop	r14
    ed5a:	cf 90       	pop	r12
    ed5c:	af 90       	pop	r10
    ed5e:	9f 90       	pop	r9
    ed60:	8f 90       	pop	r8
    ed62:	08 95       	ret

0000ed64 <FORMS_CalculateStartPages>:
 * been added or removed from the form.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_CalculateStartPages( FORMS_form_t * form )
{
    ed64:	cf 93       	push	r28
    ed66:	df 93       	push	r29
    ed68:	fc 01       	movw	r30, r24
	// Setup iteration variables.
	FORMS_element_t * element = form->firstElement;
    ed6a:	a6 81       	ldd	r26, Z+6	; 0x06
    ed6c:	b7 81       	ldd	r27, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    ed6e:	95 81       	ldd	r25, Z+5	; 0x05
	FORMS_size_t currentHeight = 0;
    ed70:	40 e0       	ldi	r20, 0x00	; 0
	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
		currentHeight += element->height;
		element = element->next;
		--elementsLeft;
    ed72:	99 23       	and	r25, r25
    ed74:	41 f0       	breq	.+16     	; 0xed86 <FORMS_CalculateStartPages+0x22>
	FORMS_size_t elementsLeft = form->elementCount;
	FORMS_size_t currentHeight = 0;

	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
    ed76:	4c 93       	st	X, r20
		currentHeight += element->height;
    ed78:	ed 01       	movw	r28, r26
    ed7a:	89 81       	ldd	r24, Y+1	; 0x01
    ed7c:	48 0f       	add	r20, r24
		element = element->next;
    ed7e:	ad 85       	ldd	r26, Y+13	; 0x0d
    ed80:	be 85       	ldd	r27, Y+14	; 0x0e
		--elementsLeft;
    ed82:	91 50       	subi	r25, 0x01	; 1
    ed84:	f6 cf       	rjmp	.-20     	; 0xed72 <FORMS_CalculateStartPages+0xe>
	}

	// Now, we know the height of the entire form.
	form->height = currentHeight;
    ed86:	43 83       	std	Z+3, r20	; 0x03
	
	// Make sure form is not scrolled beyond bottom now when we have recalculated.
	if (form->height < LCD_PAGE_COUNT) {
    ed88:	48 30       	cpi	r20, 0x08	; 8
    ed8a:	10 f4       	brcc	.+4      	; 0xed90 <FORMS_CalculateStartPages+0x2c>
		form->firstVisiblePage = 0;
    ed8c:	12 82       	std	Z+2, r1	; 0x02
    ed8e:	0a c0       	rjmp	.+20     	; 0xeda4 <FORMS_CalculateStartPages+0x40>
	}
	else if ((form->firstVisiblePage + LCD_PAGE_COUNT) > form->height) {
    ed90:	82 81       	ldd	r24, Z+2	; 0x02
    ed92:	99 27       	eor	r25, r25
    ed94:	08 96       	adiw	r24, 0x08	; 8
    ed96:	24 2f       	mov	r18, r20
    ed98:	33 27       	eor	r19, r19
    ed9a:	28 17       	cp	r18, r24
    ed9c:	39 07       	cpc	r19, r25
    ed9e:	14 f4       	brge	.+4      	; 0xeda4 <FORMS_CalculateStartPages+0x40>
		form->firstVisiblePage = currentHeight - LCD_PAGE_COUNT;
    eda0:	48 50       	subi	r20, 0x08	; 8
    eda2:	42 83       	std	Z+2, r20	; 0x02
	}
	
	// Indicate that we have recalculated start pages.
	form->needsRecalculation = false;
    eda4:	84 81       	ldd	r24, Z+4	; 0x04
    eda6:	8d 7f       	andi	r24, 0xFD	; 253
    eda8:	84 83       	std	Z+4, r24	; 0x04
    edaa:	df 91       	pop	r29
    edac:	cf 91       	pop	r28
    edae:	08 95       	ret

0000edb0 <FORMS_DrawScrollbar>:
 * position indicator if required.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawScrollbar( FORMS_form_t const * form )
{
    edb0:	ff 92       	push	r15
    edb2:	0f 93       	push	r16
    edb4:	1f 93       	push	r17
    edb6:	cf 93       	push	r28
    edb8:	df 93       	push	r29
    edba:	8c 01       	movw	r16, r24
	// Draw vertical separator and clear old bar.
	LCD_SetVLine( LCD_WIDTH - 3, 0, LCD_HEIGHT - 1 );
    edbc:	4f e3       	ldi	r20, 0x3F	; 63
    edbe:	60 e0       	ldi	r22, 0x00	; 0
    edc0:	8d e7       	ldi	r24, 0x7D	; 125
    edc2:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
	LCD_ClrVLine( LCD_WIDTH - 2, 0, LCD_HEIGHT - 1 );
    edc6:	4f e3       	ldi	r20, 0x3F	; 63
    edc8:	60 e0       	ldi	r22, 0x00	; 0
    edca:	8e e7       	ldi	r24, 0x7E	; 126
    edcc:	0e 94 83 6e 	call	0xdd06	; 0xdd06 <LCD_ClrVLine>
	LCD_ClrVLine( LCD_WIDTH - 1, 0, LCD_HEIGHT - 1 );
    edd0:	4f e3       	ldi	r20, 0x3F	; 63
    edd2:	60 e0       	ldi	r22, 0x00	; 0
    edd4:	8f e7       	ldi	r24, 0x7F	; 127
    edd6:	0e 94 83 6e 	call	0xdd06	; 0xdd06 <LCD_ClrVLine>

	// Draw scroll position indicator if form is not empty.
	if (form->height > LCD_PAGE_COUNT) {
    edda:	e8 01       	movw	r28, r16
    eddc:	fb 80       	ldd	r15, Y+3	; 0x03
    edde:	e8 e0       	ldi	r30, 0x08	; 8
    ede0:	ef 15       	cp	r30, r15
    ede2:	08 f0       	brcs	.+2      	; 0xede6 <FORMS_DrawScrollbar+0x36>
    ede4:	5d c0       	rjmp	.+186    	; 0xeea0 <FORMS_DrawScrollbar+0xf0>
		// Indicator height shows the size of the visible parts
		// related to the entire form height.
		uint16_t heightOfBar = (uint16_t) LCD_HEIGHT * LCD_PAGE_COUNT / form->height;
    ede6:	2f 2d       	mov	r18, r15
    ede8:	33 27       	eor	r19, r19
    edea:	80 e0       	ldi	r24, 0x00	; 0
    edec:	92 e0       	ldi	r25, 0x02	; 2
    edee:	b9 01       	movw	r22, r18
    edf0:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    edf4:	fb 01       	movw	r30, r22
		
		// Make sure the bar is not too small or too large.
		if (heightOfBar == 0) {
    edf6:	61 15       	cp	r22, r1
    edf8:	71 05       	cpc	r23, r1
    edfa:	19 f4       	brne	.+6      	; 0xee02 <FORMS_DrawScrollbar+0x52>
			heightOfBar = 1;
    edfc:	e1 e0       	ldi	r30, 0x01	; 1
    edfe:	f0 e0       	ldi	r31, 0x00	; 0
    ee00:	05 c0       	rjmp	.+10     	; 0xee0c <FORMS_DrawScrollbar+0x5c>
		}
		else if (heightOfBar > LCD_HEIGHT) {
    ee02:	61 34       	cpi	r22, 0x41	; 65
    ee04:	71 05       	cpc	r23, r1
    ee06:	10 f0       	brcs	.+4      	; 0xee0c <FORMS_DrawScrollbar+0x5c>
			heightOfBar = LCD_HEIGHT;
    ee08:	e0 e4       	ldi	r30, 0x40	; 64
    ee0a:	f0 e0       	ldi	r31, 0x00	; 0
		}

		// Position shows the relative position of the visible area within the entire form.
		uint16_t startOfBar = form->firstVisiblePage * (LCD_HEIGHT - heightOfBar) /
    ee0c:	e8 01       	movw	r28, r16
    ee0e:	8a 81       	ldd	r24, Y+2	; 0x02
    ee10:	48 2f       	mov	r20, r24
    ee12:	55 27       	eor	r21, r21
    ee14:	80 e4       	ldi	r24, 0x40	; 64
    ee16:	90 e0       	ldi	r25, 0x00	; 0
    ee18:	8e 1b       	sub	r24, r30
    ee1a:	9f 0b       	sbc	r25, r31
    ee1c:	2f 2d       	mov	r18, r15
    ee1e:	33 27       	eor	r19, r19
    ee20:	28 50       	subi	r18, 0x08	; 8
    ee22:	30 40       	sbci	r19, 0x00	; 0
    ee24:	48 9f       	mul	r20, r24
    ee26:	b0 01       	movw	r22, r0
    ee28:	49 9f       	mul	r20, r25
    ee2a:	70 0d       	add	r23, r0
    ee2c:	58 9f       	mul	r21, r24
    ee2e:	70 0d       	add	r23, r0
    ee30:	11 24       	eor	r1, r1
    ee32:	cb 01       	movw	r24, r22
    ee34:	b9 01       	movw	r22, r18
    ee36:	0e 94 8e 7c 	call	0xf91c	; 0xf91c <__udivmodhi4>
    ee3a:	eb 01       	movw	r28, r22
		                      (form->height - LCD_PAGE_COUNT);

		// Adjust start according to LCD hardware scrolling.
		startOfBar = (startOfBar + (LCD_GetTopPage() * LCD_PAGE_HEIGHT)) % LCD_HEIGHT;
    ee3c:	80 91 35 02 	lds	r24, 0x0235
    ee40:	99 27       	eor	r25, r25
    ee42:	23 e0       	ldi	r18, 0x03	; 3
    ee44:	88 0f       	add	r24, r24
    ee46:	99 1f       	adc	r25, r25
    ee48:	2a 95       	dec	r18
    ee4a:	e1 f7       	brne	.-8      	; 0xee44 <FORMS_DrawScrollbar+0x94>
    ee4c:	c8 0f       	add	r28, r24
    ee4e:	d9 1f       	adc	r29, r25
    ee50:	cf 73       	andi	r28, 0x3F	; 63
    ee52:	d0 70       	andi	r29, 0x00	; 0

		// If bar wraps from bottom to top after adjusting it, draw it in two steps.
		if ((startOfBar + heightOfBar) > LCD_HEIGHT) {
    ee54:	ce 01       	movw	r24, r28
    ee56:	8e 0f       	add	r24, r30
    ee58:	9f 1f       	adc	r25, r31
    ee5a:	1c 2f       	mov	r17, r28
    ee5c:	1e 0f       	add	r17, r30
    ee5e:	81 34       	cpi	r24, 0x41	; 65
    ee60:	91 05       	cpc	r25, r1
    ee62:	98 f0       	brcs	.+38     	; 0xee8a <FORMS_DrawScrollbar+0xda>
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, LCD_HEIGHT - 1 );
    ee64:	4f e3       	ldi	r20, 0x3F	; 63
    ee66:	6c 2f       	mov	r22, r28
    ee68:	8e e7       	ldi	r24, 0x7E	; 126
    ee6a:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, LCD_HEIGHT - 1 );
    ee6e:	4f e3       	ldi	r20, 0x3F	; 63
    ee70:	6c 2f       	mov	r22, r28
    ee72:	8f e7       	ldi	r24, 0x7F	; 127
    ee74:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 2, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ee78:	11 54       	subi	r17, 0x41	; 65
    ee7a:	41 2f       	mov	r20, r17
    ee7c:	60 e0       	ldi	r22, 0x00	; 0
    ee7e:	8e e7       	ldi	r24, 0x7E	; 126
    ee80:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ee84:	41 2f       	mov	r20, r17
    ee86:	60 e0       	ldi	r22, 0x00	; 0
    ee88:	08 c0       	rjmp	.+16     	; 0xee9a <FORMS_DrawScrollbar+0xea>
		} else {
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, startOfBar + heightOfBar - 1 );
    ee8a:	11 50       	subi	r17, 0x01	; 1
    ee8c:	41 2f       	mov	r20, r17
    ee8e:	6c 2f       	mov	r22, r28
    ee90:	8e e7       	ldi	r24, 0x7E	; 126
    ee92:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, startOfBar + heightOfBar - 1 );
    ee96:	41 2f       	mov	r20, r17
    ee98:	6c 2f       	mov	r22, r28
    ee9a:	8f e7       	ldi	r24, 0x7F	; 127
    ee9c:	0e 94 cb 6d 	call	0xdb96	; 0xdb96 <LCD_SetVLine>
    eea0:	df 91       	pop	r29
    eea2:	cf 91       	pop	r28
    eea4:	1f 91       	pop	r17
    eea6:	0f 91       	pop	r16
    eea8:	ff 90       	pop	r15
    eeaa:	08 95       	ret

0000eeac <FORMS_DrawFocusIndicator>:
 * It draws the focus arrow next to the current focused page on screen.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
    eeac:	0f 93       	push	r16
    eeae:	1f 93       	push	r17
    eeb0:	cf 93       	push	r28
    eeb2:	df 93       	push	r29
    eeb4:	8c 01       	movw	r16, r24
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    eeb6:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
    eeb8:	40 e4       	ldi	r20, 0x40	; 64
    eeba:	60 e0       	ldi	r22, 0x00	; 0
    eebc:	8c 2f       	mov	r24, r28
    eebe:	0e 94 83 6e 	call	0xdd06	; 0xdd06 <LCD_ClrVLine>
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    eec2:	cf 5f       	subi	r28, 0xFF	; 255
    eec4:	c4 30       	cpi	r28, 0x04	; 4
    eec6:	c0 f3       	brcs	.-16     	; 0xeeb8 <FORMS_DrawFocusIndicator+0xc>
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
	}

	// Check that focused element is within visible area.
	FORMS_size_t focusedPage = form->focusedElement->startPage +
    eec8:	d8 01       	movw	r26, r16
    eeca:	ed 91       	ld	r30, X+
    eecc:	fc 91       	ld	r31, X
    eece:	60 81       	ld	r22, Z
    eed0:	82 81       	ldd	r24, Z+2	; 0x02
    eed2:	68 0f       	add	r22, r24
	                             form->focusedElement->focusedPage;
	if ((focusedPage >= form->firstVisiblePage) &&
    eed4:	e8 01       	movw	r28, r16
    eed6:	ea 81       	ldd	r30, Y+2	; 0x02
    eed8:	6e 17       	cp	r22, r30
    eeda:	98 f0       	brcs	.+38     	; 0xef02 <FORMS_DrawFocusIndicator+0x56>
    eedc:	26 2f       	mov	r18, r22
    eede:	33 27       	eor	r19, r19
    eee0:	8e 2f       	mov	r24, r30
    eee2:	99 27       	eor	r25, r25
    eee4:	08 96       	adiw	r24, 0x08	; 8
    eee6:	28 17       	cp	r18, r24
    eee8:	39 07       	cpc	r19, r25
    eeea:	5c f4       	brge	.+22     	; 0xef02 <FORMS_DrawFocusIndicator+0x56>
	    (focusedPage < (form->firstVisiblePage + LCD_PAGE_COUNT))) {
		// Find start position for indicator, adjust for LCD hardware scrolling.
		uint8_t lcdPage = LCD_ROW2PAGE( focusedPage - form->firstVisiblePage );
    eeec:	6e 1b       	sub	r22, r30
    eeee:	80 91 35 02 	lds	r24, 0x0235
    eef2:	68 0f       	add	r22, r24
    eef4:	67 70       	andi	r22, 0x07	; 7

		// Draw indicator.
		LCD_WritePage_F( FORMS_focusIndicator, lcdPage, 0, FORMS_FIRST_COLUMN );
    eef6:	24 e0       	ldi	r18, 0x04	; 4
    eef8:	40 e0       	ldi	r20, 0x00	; 0
    eefa:	82 e5       	ldi	r24, 0x52	; 82
    eefc:	90 ed       	ldi	r25, 0xD0	; 208
    eefe:	0e 94 4d 70 	call	0xe09a	; 0xe09a <LCD_WritePage_F>
    ef02:	df 91       	pop	r29
    ef04:	cf 91       	pop	r28
    ef06:	1f 91       	pop	r17
    ef08:	0f 91       	pop	r16
    ef0a:	08 95       	ret

0000ef0c <FORMS_Draw>:
 * after displaying other graphics on top, for instance.
 *
 * \param  form  Pointer to form to draw.
 */
void FORMS_Draw( FORMS_form_t * form )
{
    ef0c:	cf 92       	push	r12
    ef0e:	df 92       	push	r13
    ef10:	ef 92       	push	r14
    ef12:	ff 92       	push	r15
    ef14:	0f 93       	push	r16
    ef16:	1f 93       	push	r17
    ef18:	cf 93       	push	r28
    ef1a:	df 93       	push	r29
    ef1c:	8c 01       	movw	r16, r24
	// Clear screen first.
	LCD_SetScreen( 0x00 );
    ef1e:	80 e0       	ldi	r24, 0x00	; 0
    ef20:	0e 94 83 6c 	call	0xd906	; 0xd906 <LCD_SetScreen>
	
	// Exit if there is nothing to draw for some reason.
	if (form->elementCount == 0) {return; }
    ef24:	f8 01       	movw	r30, r16
    ef26:	85 81       	ldd	r24, Z+5	; 0x05
    ef28:	88 23       	and	r24, r24
    ef2a:	09 f4       	brne	.+2      	; 0xef2e <FORMS_Draw+0x22>
    ef2c:	55 c0       	rjmp	.+170    	; 0xefd8 <FORMS_Draw+0xcc>

	// Calculate start pages if required.
	if (form->needsRecalculation) {
    ef2e:	84 81       	ldd	r24, Z+4	; 0x04
    ef30:	81 ff       	sbrs	r24, 1
    ef32:	03 c0       	rjmp	.+6      	; 0xef3a <FORMS_Draw+0x2e>
		FORMS_CalculateStartPages( form );
    ef34:	c8 01       	movw	r24, r16
    ef36:	0e 94 b2 76 	call	0xed64	; 0xed64 <FORMS_CalculateStartPages>
	}

	// Setup iteration variables.
	FORMS_element_t const * element = form->firstElement;
    ef3a:	f8 01       	movw	r30, r16
    ef3c:	c6 81       	ldd	r28, Z+6	; 0x06
    ef3e:	d7 81       	ldd	r29, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    ef40:	e5 80       	ldd	r14, Z+5	; 0x05

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
		--elementsLeft;
    ef42:	ee 20       	and	r14, r14
    ef44:	b9 f0       	breq	.+46     	; 0xef74 <FORMS_Draw+0x68>
    ef46:	98 81       	ld	r25, Y
    ef48:	89 81       	ldd	r24, Y+1	; 0x01
    ef4a:	89 0f       	add	r24, r25
    ef4c:	91 2d       	mov	r25, r1
    ef4e:	91 1d       	adc	r25, r1
    ef50:	01 97       	sbiw	r24, 0x01	; 1
    ef52:	22 81       	ldd	r18, Z+2	; 0x02
    ef54:	33 27       	eor	r19, r19
    ef56:	82 17       	cp	r24, r18
    ef58:	93 07       	cpc	r25, r19
    ef5a:	64 f4       	brge	.+24     	; 0xef74 <FORMS_Draw+0x68>
	FORMS_size_t elementsLeft = form->elementCount;

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
    ef5c:	0d 84       	ldd	r0, Y+13	; 0x0d
    ef5e:	de 85       	ldd	r29, Y+14	; 0x0e
    ef60:	c0 2d       	mov	r28, r0
		--elementsLeft;
    ef62:	ea 94       	dec	r14
    ef64:	39 f0       	breq	.+14     	; 0xef74 <FORMS_Draw+0x68>
    ef66:	98 81       	ld	r25, Y
    ef68:	89 81       	ldd	r24, Y+1	; 0x01
    ef6a:	89 0f       	add	r24, r25
    ef6c:	91 2d       	mov	r25, r1
    ef6e:	91 1d       	adc	r25, r1
    ef70:	01 97       	sbiw	r24, 0x01	; 1
    ef72:	f1 cf       	rjmp	.-30     	; 0xef56 <FORMS_Draw+0x4a>
	}

	// Find first page to draw within element.
	FORMS_size_t internalPage = form->firstVisiblePage - element->startPage;
    ef74:	f8 01       	movw	r30, r16
    ef76:	f2 80       	ldd	r15, Z+2	; 0x02
    ef78:	88 81       	ld	r24, Y
    ef7a:	f8 1a       	sub	r15, r24

	// Draw nodes page by page until end of LCD reached or no more elements left.
	uint8_t lcdPage = LCD_GetTopPage();
    ef7c:	d0 90 35 02 	lds	r13, 0x0235
	uint8_t lcdPagesLeft = LCD_PAGE_COUNT;
    ef80:	38 e0       	ldi	r19, 0x08	; 8
    ef82:	c3 2e       	mov	r12, r19
			}
			--lcdPagesLeft;
		}
		internalPage = 0;
		element = element->next;
		--elementsLeft;
    ef84:	ee 20       	and	r14, r14
    ef86:	f1 f0       	breq	.+60     	; 0xefc4 <FORMS_Draw+0xb8>
    ef88:	14 c0       	rjmp	.+40     	; 0xefb2 <FORMS_Draw+0xa6>
			++internalPage;
			++lcdPage;
			if (lcdPage >= LCD_PAGE_COUNT) {
				lcdPage = 0;
			}
			--lcdPagesLeft;
    ef8a:	89 81       	ldd	r24, Y+1	; 0x01
    ef8c:	f8 16       	cp	r15, r24
    ef8e:	98 f4       	brcc	.+38     	; 0xefb6 <FORMS_Draw+0xaa>
	while ((lcdPagesLeft > 0) && (elementsLeft > 0)) {
		while ((lcdPagesLeft > 0) && (internalPage < element->height)) {

			///mt element->traits->DrawPage( element, internalPage, lcdPage );
			FORMS_DrawPageFunc_t drawPageFunc;
			drawPageFunc = (FORMS_DrawPageFunc_t)(CAL_pgm_read_pvoid(&(element->traits->DrawPage)));
    ef90:	ed 81       	ldd	r30, Y+5	; 0x05
    ef92:	fe 81       	ldd	r31, Y+6	; 0x06
    ef94:	38 96       	adiw	r30, 0x08	; 8
    ef96:	25 91       	lpm	r18, Z+
    ef98:	34 91       	lpm	r19, Z+
			drawPageFunc( element, internalPage, lcdPage );
    ef9a:	4d 2d       	mov	r20, r13
    ef9c:	6f 2d       	mov	r22, r15
    ef9e:	ce 01       	movw	r24, r28
    efa0:	f9 01       	movw	r30, r18
    efa2:	09 95       	icall

			++internalPage;
    efa4:	f3 94       	inc	r15
			++lcdPage;
    efa6:	d3 94       	inc	r13
			if (lcdPage >= LCD_PAGE_COUNT) {
    efa8:	f7 e0       	ldi	r31, 0x07	; 7
    efaa:	fd 15       	cp	r31, r13
    efac:	08 f4       	brcc	.+2      	; 0xefb0 <FORMS_Draw+0xa4>
				lcdPage = 0;
    efae:	dd 24       	eor	r13, r13
			}
			--lcdPagesLeft;
    efb0:	ca 94       	dec	r12
    efb2:	cc 20       	and	r12, r12
    efb4:	51 f7       	brne	.-44     	; 0xef8a <FORMS_Draw+0x7e>
		}
		internalPage = 0;
    efb6:	ff 24       	eor	r15, r15
		element = element->next;
    efb8:	0d 84       	ldd	r0, Y+13	; 0x0d
    efba:	de 85       	ldd	r29, Y+14	; 0x0e
    efbc:	c0 2d       	mov	r28, r0
		--elementsLeft;
    efbe:	ea 94       	dec	r14
    efc0:	cc 20       	and	r12, r12
    efc2:	01 f7       	brne	.-64     	; 0xef84 <FORMS_Draw+0x78>
	}	

	// Draw non-element form graphics.
	if (form->useScrollbar) {
    efc4:	f8 01       	movw	r30, r16
    efc6:	84 81       	ldd	r24, Z+4	; 0x04
    efc8:	80 ff       	sbrs	r24, 0
    efca:	03 c0       	rjmp	.+6      	; 0xefd2 <FORMS_Draw+0xc6>
		FORMS_DrawScrollbar( form );
    efcc:	c8 01       	movw	r24, r16
    efce:	0e 94 d8 76 	call	0xedb0	; 0xedb0 <FORMS_DrawScrollbar>
	}
	FORMS_DrawFocusIndicator( form );
    efd2:	c8 01       	movw	r24, r16
    efd4:	0e 94 56 77 	call	0xeeac	; 0xeeac <FORMS_DrawFocusIndicator>
    efd8:	df 91       	pop	r29
    efda:	cf 91       	pop	r28
    efdc:	1f 91       	pop	r17
    efde:	0f 91       	pop	r16
    efe0:	ff 90       	pop	r15
    efe2:	ef 90       	pop	r14
    efe4:	df 90       	pop	r13
    efe6:	cf 90       	pop	r12
    efe8:	08 95       	ret

0000efea <FORMS_NormalizeLCDScroll>:
 * a pop-up box, without having to compensate for hardware LCD scrolling.
 *
 * \param  form  Pointer to the form currently being on screen.
 */
void FORMS_NormalizeLCDScroll( FORMS_form_t * form )
{
    efea:	0f 93       	push	r16
    efec:	1f 93       	push	r17
    efee:	8c 01       	movw	r16, r24
	LCD_SetTopPage( 0, 0 );
    eff0:	60 e0       	ldi	r22, 0x00	; 0
    eff2:	86 2f       	mov	r24, r22
    eff4:	0e 94 9c 6c 	call	0xd938	; 0xd938 <LCD_SetTopPage>
	FORMS_Draw( form );
    eff8:	c8 01       	movw	r24, r16
    effa:	0e 94 86 77 	call	0xef0c	; 0xef0c <FORMS_Draw>
    effe:	1f 91       	pop	r17
    f000:	0f 91       	pop	r16
    f002:	08 95       	ret

0000f004 <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    f004:	1f 92       	push	r1
    f006:	0f 92       	push	r0
    f008:	0f b6       	in	r0, 0x3f	; 63
    f00a:	0f 92       	push	r0
    f00c:	11 24       	eor	r1, r1
    f00e:	2f 93       	push	r18
    f010:	3f 93       	push	r19
    f012:	4f 93       	push	r20
    f014:	5f 93       	push	r21
    f016:	6f 93       	push	r22
    f018:	7f 93       	push	r23
    f01a:	8f 93       	push	r24
    f01c:	9f 93       	push	r25
    f01e:	af 93       	push	r26
    f020:	bf 93       	push	r27
    f022:	ef 93       	push	r30
    f024:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    f026:	80 91 6f 18 	lds	r24, 0x186F
    f02a:	90 91 70 18 	lds	r25, 0x1870
    f02e:	89 2b       	or	r24, r25
    f030:	29 f0       	breq	.+10     	; 0xf03c <__vector_15+0x38>
		RTC_TickHandler();
    f032:	e0 91 6f 18 	lds	r30, 0x186F
    f036:	f0 91 70 18 	lds	r31, 0x1870
    f03a:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    f03c:	80 91 6e 18 	lds	r24, 0x186E
    f040:	8f 37       	cpi	r24, 0x7F	; 127
    f042:	30 f4       	brcc	.+12     	; 0xf050 <__vector_15+0x4c>
		++RTC_ticks;
    f044:	80 91 6e 18 	lds	r24, 0x186E
    f048:	8f 5f       	subi	r24, 0xFF	; 255
    f04a:	80 93 6e 18 	sts	0x186E, r24
    f04e:	36 c0       	rjmp	.+108    	; 0xf0bc <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    f050:	10 92 6e 18 	sts	0x186E, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    f054:	80 91 6d 18 	lds	r24, 0x186D
    f058:	8b 33       	cpi	r24, 0x3B	; 59
    f05a:	30 f4       	brcc	.+12     	; 0xf068 <__vector_15+0x64>
			++RTC_seconds;
    f05c:	80 91 6d 18 	lds	r24, 0x186D
    f060:	8f 5f       	subi	r24, 0xFF	; 255
    f062:	80 93 6d 18 	sts	0x186D, r24
    f066:	2a c0       	rjmp	.+84     	; 0xf0bc <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    f068:	10 92 6d 18 	sts	0x186D, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    f06c:	80 91 6c 18 	lds	r24, 0x186C
    f070:	8b 33       	cpi	r24, 0x3B	; 59
    f072:	30 f4       	brcc	.+12     	; 0xf080 <__vector_15+0x7c>
				++RTC_minutes;
    f074:	80 91 6c 18 	lds	r24, 0x186C
    f078:	8f 5f       	subi	r24, 0xFF	; 255
    f07a:	80 93 6c 18 	sts	0x186C, r24
    f07e:	1e c0       	rjmp	.+60     	; 0xf0bc <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    f080:	10 92 6c 18 	sts	0x186C, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    f084:	80 91 6b 18 	lds	r24, 0x186B
    f088:	87 31       	cpi	r24, 0x17	; 23
    f08a:	30 f4       	brcc	.+12     	; 0xf098 <__vector_15+0x94>
					++RTC_hours;
    f08c:	80 91 6b 18 	lds	r24, 0x186B
    f090:	8f 5f       	subi	r24, 0xFF	; 255
    f092:	80 93 6b 18 	sts	0x186B, r24
    f096:	12 c0       	rjmp	.+36     	; 0xf0bc <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    f098:	10 92 6b 18 	sts	0x186B, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    f09c:	80 91 6a 18 	lds	r24, 0x186A
    f0a0:	8f 5f       	subi	r24, 0xFF	; 255
    f0a2:	80 93 6a 18 	sts	0x186A, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    f0a6:	80 91 71 18 	lds	r24, 0x1871
    f0aa:	90 91 72 18 	lds	r25, 0x1872
    f0ae:	89 2b       	or	r24, r25
    f0b0:	29 f0       	breq	.+10     	; 0xf0bc <__vector_15+0xb8>
						RTC_DayHandler();
    f0b2:	e0 91 71 18 	lds	r30, 0x1871
    f0b6:	f0 91 72 18 	lds	r31, 0x1872
    f0ba:	09 95       	icall
    f0bc:	ff 91       	pop	r31
    f0be:	ef 91       	pop	r30
    f0c0:	bf 91       	pop	r27
    f0c2:	af 91       	pop	r26
    f0c4:	9f 91       	pop	r25
    f0c6:	8f 91       	pop	r24
    f0c8:	7f 91       	pop	r23
    f0ca:	6f 91       	pop	r22
    f0cc:	5f 91       	pop	r21
    f0ce:	4f 91       	pop	r20
    f0d0:	3f 91       	pop	r19
    f0d2:	2f 91       	pop	r18
    f0d4:	0f 90       	pop	r0
    f0d6:	0f be       	out	0x3f, r0	; 63
    f0d8:	0f 90       	pop	r0
    f0da:	1f 90       	pop	r1
    f0dc:	18 95       	reti

0000f0de <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    f0de:	10 92 70 18 	sts	0x1870, r1
    f0e2:	10 92 6f 18 	sts	0x186F, r1
	RTC_DayHandler = NULL;
    f0e6:	10 92 72 18 	sts	0x1872, r1
    f0ea:	10 92 71 18 	sts	0x1871, r1
	RTC_ticks = 0;
    f0ee:	10 92 6e 18 	sts	0x186E, r1
	RTC_seconds = 0;
    f0f2:	10 92 6d 18 	sts	0x186D, r1
	RTC_minutes = 0;
    f0f6:	10 92 6c 18 	sts	0x186C, r1
	RTC_hours = 0;
    f0fa:	10 92 6b 18 	sts	0x186B, r1
	RTC_days = 0;
    f0fe:	10 92 6a 18 	sts	0x186A, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    f102:	80 91 64 00 	lds	r24, 0x0064
    f106:	8f 7b       	andi	r24, 0xBF	; 191
    f108:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    f10c:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    f110:	80 e2       	ldi	r24, 0x20	; 32
    f112:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    f116:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    f11a:	81 e0       	ldi	r24, 0x01	; 1
    f11c:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    f120:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    f124:	80 91 b6 00 	lds	r24, 0x00B6
    f128:	99 27       	eor	r25, r25
    f12a:	8f 71       	andi	r24, 0x1F	; 31
    f12c:	90 70       	andi	r25, 0x00	; 0
    f12e:	89 2b       	or	r24, r25
    f130:	c9 f7       	brne	.-14     	; 0xf124 <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    f132:	81 e0       	ldi	r24, 0x01	; 1
    f134:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    f136:	80 93 70 00 	sts	0x0070, r24
    f13a:	08 95       	ret

0000f13c <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    f13c:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    f13e:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    f140:	90 93 70 18 	sts	0x1870, r25
    f144:	80 93 6f 18 	sts	0x186F, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    f148:	2f bf       	out	0x3f, r18	; 63
    f14a:	08 95       	ret

0000f14c <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    f14c:	10 92 74 18 	sts	0x1874, r1
    f150:	10 92 73 18 	sts	0x1873, r1
	TIMING_currentTime = 0;
    f154:	10 92 77 18 	sts	0x1877, r1
    f158:	10 92 78 18 	sts	0x1878, r1
    f15c:	10 92 79 18 	sts	0x1879, r1
    f160:	10 92 7a 18 	sts	0x187A, r1
    f164:	08 95       	ret

0000f166 <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    f166:	6f 92       	push	r6
    f168:	7f 92       	push	r7
    f16a:	9f 92       	push	r9
    f16c:	af 92       	push	r10
    f16e:	bf 92       	push	r11
    f170:	cf 92       	push	r12
    f172:	df 92       	push	r13
    f174:	ef 92       	push	r14
    f176:	ff 92       	push	r15
    f178:	0f 93       	push	r16
    f17a:	1f 93       	push	r17
    f17c:	cf 93       	push	r28
    f17e:	df 93       	push	r29
    f180:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f182:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    f184:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f186:	60 91 73 18 	lds	r22, 0x1873
    f18a:	70 91 74 18 	lds	r23, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f18e:	e0 91 75 18 	lds	r30, 0x1875
    f192:	f0 91 76 18 	lds	r31, 0x1876
    f196:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    f198:	cc 24       	eor	r12, r12
    f19a:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    f19c:	dc 01       	movw	r26, r24
    f19e:	ed 90       	ld	r14, X+
    f1a0:	fd 90       	ld	r15, X+
    f1a2:	0d 91       	ld	r16, X+
    f1a4:	1c 91       	ld	r17, X
    f1a6:	80 91 77 18 	lds	r24, 0x1877
    f1aa:	90 91 78 18 	lds	r25, 0x1878
    f1ae:	a0 91 79 18 	lds	r26, 0x1879
    f1b2:	b0 91 7a 18 	lds	r27, 0x187A
    f1b6:	8e 15       	cp	r24, r14
    f1b8:	9f 05       	cpc	r25, r15
    f1ba:	a0 07       	cpc	r26, r16
    f1bc:	b1 07       	cpc	r27, r17
    f1be:	58 f1       	brcs	.+86     	; 0xf216 <TIMING_AddEvent+0xb0>
    f1c0:	09 c0       	rjmp	.+18     	; 0xf1d4 <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    f1c2:	61 15       	cp	r22, r1
    f1c4:	71 05       	cpc	r23, r1
    f1c6:	39 f1       	breq	.+78     	; 0xf216 <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    f1c8:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    f1ca:	05 84       	ldd	r0, Z+13	; 0x0d
    f1cc:	f6 85       	ldd	r31, Z+14	; 0x0e
    f1ce:	e0 2d       	mov	r30, r0
			--eventsLeft;
    f1d0:	61 50       	subi	r22, 0x01	; 1
    f1d2:	70 40       	sbci	r23, 0x00	; 0
    f1d4:	20 81       	ld	r18, Z
    f1d6:	31 81       	ldd	r19, Z+1	; 0x01
    f1d8:	42 81       	ldd	r20, Z+2	; 0x02
    f1da:	53 81       	ldd	r21, Z+3	; 0x03
    f1dc:	80 91 77 18 	lds	r24, 0x1877
    f1e0:	90 91 78 18 	lds	r25, 0x1878
    f1e4:	a0 91 79 18 	lds	r26, 0x1879
    f1e8:	b0 91 7a 18 	lds	r27, 0x187A
    f1ec:	28 17       	cp	r18, r24
    f1ee:	39 07       	cpc	r19, r25
    f1f0:	4a 07       	cpc	r20, r26
    f1f2:	5b 07       	cpc	r21, r27
    f1f4:	30 f7       	brcc	.-52     	; 0xf1c2 <TIMING_AddEvent+0x5c>
    f1f6:	0f c0       	rjmp	.+30     	; 0xf216 <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    f1f8:	80 81       	ld	r24, Z
    f1fa:	91 81       	ldd	r25, Z+1	; 0x01
    f1fc:	a2 81       	ldd	r26, Z+2	; 0x02
    f1fe:	b3 81       	ldd	r27, Z+3	; 0x03
    f200:	8e 15       	cp	r24, r14
    f202:	9f 05       	cpc	r25, r15
    f204:	a0 07       	cpc	r26, r16
    f206:	b1 07       	cpc	r27, r17
    f208:	48 f4       	brcc	.+18     	; 0xf21c <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    f20a:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    f20c:	05 84       	ldd	r0, Z+13	; 0x0d
    f20e:	f6 85       	ldd	r31, Z+14	; 0x0e
    f210:	e0 2d       	mov	r30, r0
		--eventsLeft;
    f212:	61 50       	subi	r22, 0x01	; 1
    f214:	70 40       	sbci	r23, 0x00	; 0
    f216:	61 15       	cp	r22, r1
    f218:	71 05       	cpc	r23, r1
    f21a:	71 f7       	brne	.-36     	; 0xf1f8 <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    f21c:	80 91 73 18 	lds	r24, 0x1873
    f220:	90 91 74 18 	lds	r25, 0x1874
    f224:	68 17       	cp	r22, r24
    f226:	79 07       	cpc	r23, r25
    f228:	a1 f4       	brne	.+40     	; 0xf252 <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    f22a:	e3 01       	movw	r28, r6
    f22c:	be 86       	std	Y+14, r11	; 0x0e
    f22e:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    f230:	70 92 76 18 	sts	0x1876, r7
    f234:	60 92 75 18 	sts	0x1875, r6
		TIMING_nextEventTime = event->triggerTime;
    f238:	88 81       	ld	r24, Y
    f23a:	99 81       	ldd	r25, Y+1	; 0x01
    f23c:	aa 81       	ldd	r26, Y+2	; 0x02
    f23e:	bb 81       	ldd	r27, Y+3	; 0x03
    f240:	80 93 7b 18 	sts	0x187B, r24
    f244:	90 93 7c 18 	sts	0x187C, r25
    f248:	a0 93 7d 18 	sts	0x187D, r26
    f24c:	b0 93 7e 18 	sts	0x187E, r27
    f250:	06 c0       	rjmp	.+12     	; 0xf25e <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    f252:	e3 01       	movw	r28, r6
    f254:	fe 87       	std	Y+14, r31	; 0x0e
    f256:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    f258:	f6 01       	movw	r30, r12
    f25a:	76 86       	std	Z+14, r7	; 0x0e
    f25c:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    f25e:	80 91 73 18 	lds	r24, 0x1873
    f262:	90 91 74 18 	lds	r25, 0x1874
    f266:	01 96       	adiw	r24, 0x01	; 1
    f268:	90 93 74 18 	sts	0x1874, r25
    f26c:	80 93 73 18 	sts	0x1873, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f270:	9f be       	out	0x3f, r9	; 63
    f272:	df 91       	pop	r29
    f274:	cf 91       	pop	r28
    f276:	1f 91       	pop	r17
    f278:	0f 91       	pop	r16
    f27a:	ff 90       	pop	r15
    f27c:	ef 90       	pop	r14
    f27e:	df 90       	pop	r13
    f280:	cf 90       	pop	r12
    f282:	bf 90       	pop	r11
    f284:	af 90       	pop	r10
    f286:	9f 90       	pop	r9
    f288:	7f 90       	pop	r7
    f28a:	6f 90       	pop	r6
    f28c:	08 95       	ret

0000f28e <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    f28e:	0f 93       	push	r16
    f290:	1f 93       	push	r17
    f292:	cf 93       	push	r28
    f294:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f296:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    f298:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    f29a:	80 91 77 18 	lds	r24, 0x1877
    f29e:	90 91 78 18 	lds	r25, 0x1878
    f2a2:	a0 91 79 18 	lds	r26, 0x1879
    f2a6:	b0 91 7a 18 	lds	r27, 0x187A
    f2aa:	01 96       	adiw	r24, 0x01	; 1
    f2ac:	a1 1d       	adc	r26, r1
    f2ae:	b1 1d       	adc	r27, r1
    f2b0:	80 93 77 18 	sts	0x1877, r24
    f2b4:	90 93 78 18 	sts	0x1878, r25
    f2b8:	a0 93 79 18 	sts	0x1879, r26
    f2bc:	b0 93 7a 18 	sts	0x187A, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    f2c0:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    f2c2:	80 91 73 18 	lds	r24, 0x1873
    f2c6:	90 91 74 18 	lds	r25, 0x1874
    f2ca:	89 2b       	or	r24, r25
    f2cc:	09 f4       	brne	.+2      	; 0xf2d0 <TIMING_TickHandler+0x42>
    f2ce:	70 c0       	rjmp	.+224    	; 0xf3b0 <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    f2d0:	20 91 7b 18 	lds	r18, 0x187B
    f2d4:	30 91 7c 18 	lds	r19, 0x187C
    f2d8:	40 91 7d 18 	lds	r20, 0x187D
    f2dc:	50 91 7e 18 	lds	r21, 0x187E
		if (TIMING_currentTime != next_event) {
    f2e0:	80 91 77 18 	lds	r24, 0x1877
    f2e4:	90 91 78 18 	lds	r25, 0x1878
    f2e8:	a0 91 79 18 	lds	r26, 0x1879
    f2ec:	b0 91 7a 18 	lds	r27, 0x187A
    f2f0:	82 17       	cp	r24, r18
    f2f2:	93 07       	cpc	r25, r19
    f2f4:	a4 07       	cpc	r26, r20
    f2f6:	b5 07       	cpc	r27, r21
    f2f8:	11 f0       	breq	.+4      	; 0xf2fe <TIMING_TickHandler+0x70>
			goon = 0;
    f2fa:	00 e0       	ldi	r16, 0x00	; 0
    f2fc:	50 c0       	rjmp	.+160    	; 0xf39e <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    f2fe:	c0 91 75 18 	lds	r28, 0x1875
    f302:	d0 91 76 18 	lds	r29, 0x1876
			TIMING_firstEvent = event->next;
    f306:	ed 85       	ldd	r30, Y+13	; 0x0d
    f308:	fe 85       	ldd	r31, Y+14	; 0x0e
    f30a:	f0 93 76 18 	sts	0x1876, r31
    f30e:	e0 93 75 18 	sts	0x1875, r30
			--TIMING_queueSize;
    f312:	80 91 73 18 	lds	r24, 0x1873
    f316:	90 91 74 18 	lds	r25, 0x1874
    f31a:	01 97       	sbiw	r24, 0x01	; 1
    f31c:	90 93 74 18 	sts	0x1874, r25
    f320:	80 93 73 18 	sts	0x1873, r24
			if (TIMING_queueSize > 0) {
    f324:	80 91 73 18 	lds	r24, 0x1873
    f328:	90 91 74 18 	lds	r25, 0x1874
    f32c:	89 2b       	or	r24, r25
    f32e:	61 f0       	breq	.+24     	; 0xf348 <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    f330:	80 81       	ld	r24, Z
    f332:	91 81       	ldd	r25, Z+1	; 0x01
    f334:	a2 81       	ldd	r26, Z+2	; 0x02
    f336:	b3 81       	ldd	r27, Z+3	; 0x03
    f338:	80 93 7b 18 	sts	0x187B, r24
    f33c:	90 93 7c 18 	sts	0x187C, r25
    f340:	a0 93 7d 18 	sts	0x187D, r26
    f344:	b0 93 7e 18 	sts	0x187E, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    f348:	89 85       	ldd	r24, Y+9	; 0x09
    f34a:	9a 85       	ldd	r25, Y+10	; 0x0a
    f34c:	00 97       	sbiw	r24, 0x00	; 0
    f34e:	19 f0       	breq	.+6      	; 0xf356 <TIMING_TickHandler+0xc8>
    f350:	01 97       	sbiw	r24, 0x01	; 1
    f352:	39 f0       	breq	.+14     	; 0xf362 <TIMING_TickHandler+0xd4>
    f354:	09 c0       	rjmp	.+18     	; 0xf368 <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    f356:	eb 85       	ldd	r30, Y+11	; 0x0b
    f358:	fc 85       	ldd	r31, Y+12	; 0x0c
    f35a:	80 81       	ld	r24, Z
    f35c:	8f 5f       	subi	r24, 0xFF	; 255
    f35e:	80 83       	st	Z, r24
		break;
    f360:	03 c0       	rjmp	.+6      	; 0xf368 <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    f362:	eb 85       	ldd	r30, Y+11	; 0x0b
    f364:	fc 85       	ldd	r31, Y+12	; 0x0c
    f366:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    f368:	88 85       	ldd	r24, Y+8	; 0x08
    f36a:	8f 3f       	cpi	r24, 0xFF	; 255
    f36c:	11 f0       	breq	.+4      	; 0xf372 <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    f36e:	81 50       	subi	r24, 0x01	; 1
    f370:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    f372:	88 85       	ldd	r24, Y+8	; 0x08
    f374:	88 23       	and	r24, r24
    f376:	99 f0       	breq	.+38     	; 0xf39e <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    f378:	88 81       	ld	r24, Y
    f37a:	99 81       	ldd	r25, Y+1	; 0x01
    f37c:	aa 81       	ldd	r26, Y+2	; 0x02
    f37e:	bb 81       	ldd	r27, Y+3	; 0x03
    f380:	2c 81       	ldd	r18, Y+4	; 0x04
    f382:	3d 81       	ldd	r19, Y+5	; 0x05
    f384:	4e 81       	ldd	r20, Y+6	; 0x06
    f386:	5f 81       	ldd	r21, Y+7	; 0x07
    f388:	82 0f       	add	r24, r18
    f38a:	93 1f       	adc	r25, r19
    f38c:	a4 1f       	adc	r26, r20
    f38e:	b5 1f       	adc	r27, r21
    f390:	88 83       	st	Y, r24
    f392:	99 83       	std	Y+1, r25	; 0x01
    f394:	aa 83       	std	Y+2, r26	; 0x02
    f396:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    f398:	ce 01       	movw	r24, r28
    f39a:	0e 94 b3 78 	call	0xf166	; 0xf166 <TIMING_AddEvent>
    f39e:	80 91 73 18 	lds	r24, 0x1873
    f3a2:	90 91 74 18 	lds	r25, 0x1874
    f3a6:	89 2b       	or	r24, r25
    f3a8:	19 f0       	breq	.+6      	; 0xf3b0 <TIMING_TickHandler+0x122>
    f3aa:	00 23       	and	r16, r16
    f3ac:	09 f0       	breq	.+2      	; 0xf3b0 <TIMING_TickHandler+0x122>
    f3ae:	90 cf       	rjmp	.-224    	; 0xf2d0 <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f3b0:	1f bf       	out	0x3f, r17	; 63
    f3b2:	df 91       	pop	r29
    f3b4:	cf 91       	pop	r28
    f3b6:	1f 91       	pop	r17
    f3b8:	0f 91       	pop	r16
    f3ba:	08 95       	ret

0000f3bc <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    f3bc:	cf 93       	push	r28
    f3be:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f3c0:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    f3c2:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f3c4:	40 91 73 18 	lds	r20, 0x1873
    f3c8:	50 91 74 18 	lds	r21, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f3cc:	e0 91 75 18 	lds	r30, 0x1875
    f3d0:	f0 91 76 18 	lds	r31, 0x1876
	TIMING_event_t * lastEvent = 0;
    f3d4:	a0 e0       	ldi	r26, 0x00	; 0
    f3d6:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    f3d8:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    f3da:	41 15       	cp	r20, r1
    f3dc:	51 05       	cpc	r21, r1
    f3de:	81 f0       	breq	.+32     	; 0xf400 <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    f3e0:	e8 17       	cp	r30, r24
    f3e2:	f9 07       	cpc	r31, r25
    f3e4:	11 f4       	brne	.+4      	; 0xf3ea <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    f3e6:	21 e0       	ldi	r18, 0x01	; 1
    f3e8:	06 c0       	rjmp	.+12     	; 0xf3f6 <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    f3ea:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    f3ec:	05 84       	ldd	r0, Z+13	; 0x0d
    f3ee:	f6 85       	ldd	r31, Z+14	; 0x0e
    f3f0:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    f3f2:	41 50       	subi	r20, 0x01	; 1
    f3f4:	50 40       	sbci	r21, 0x00	; 0
    f3f6:	41 15       	cp	r20, r1
    f3f8:	51 05       	cpc	r21, r1
    f3fa:	11 f0       	breq	.+4      	; 0xf400 <TIMING_RemoveEvent+0x44>
    f3fc:	22 23       	and	r18, r18
    f3fe:	81 f3       	breq	.-32     	; 0xf3e0 <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    f400:	22 23       	and	r18, r18
    f402:	d1 f0       	breq	.+52     	; 0xf438 <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    f404:	80 91 73 18 	lds	r24, 0x1873
    f408:	90 91 74 18 	lds	r25, 0x1874
    f40c:	25 85       	ldd	r18, Z+13	; 0x0d
    f40e:	36 85       	ldd	r19, Z+14	; 0x0e
    f410:	48 17       	cp	r20, r24
    f412:	59 07       	cpc	r21, r25
    f414:	29 f4       	brne	.+10     	; 0xf420 <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    f416:	30 93 76 18 	sts	0x1876, r19
    f41a:	20 93 75 18 	sts	0x1875, r18
    f41e:	03 c0       	rjmp	.+6      	; 0xf426 <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    f420:	ed 01       	movw	r28, r26
    f422:	3e 87       	std	Y+14, r19	; 0x0e
    f424:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    f426:	80 91 73 18 	lds	r24, 0x1873
    f42a:	90 91 74 18 	lds	r25, 0x1874
    f42e:	01 97       	sbiw	r24, 0x01	; 1
    f430:	90 93 74 18 	sts	0x1874, r25
    f434:	80 93 73 18 	sts	0x1873, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f438:	6f bf       	out	0x3f, r22	; 63
    f43a:	df 91       	pop	r29
    f43c:	cf 91       	pop	r28
    f43e:	08 95       	ret

0000f440 <TIMING_AddRepCounterEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  counterPtr      Pointer to counter variable to increment when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCounterEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f440:	cf 92       	push	r12
    f442:	df 92       	push	r13
    f444:	ef 92       	push	r14
    f446:	ff 92       	push	r15
    f448:	0f 93       	push	r16
    f44a:	1f 93       	push	r17
    f44c:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f44e:	44 23       	and	r20, r20
    f450:	81 f0       	breq	.+32     	; 0xf472 <TIMING_AddRepCounterEventAt+0x32>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f452:	60 83       	st	Z, r22
    f454:	71 83       	std	Z+1, r23	; 0x01
    f456:	82 83       	std	Z+2, r24	; 0x02
    f458:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f45a:	04 83       	std	Z+4, r16	; 0x04
    f45c:	15 83       	std	Z+5, r17	; 0x05
    f45e:	26 83       	std	Z+6, r18	; 0x06
    f460:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f462:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_COUNTER_EVENT;
    f464:	12 86       	std	Z+10, r1	; 0x0a
    f466:	11 86       	std	Z+9, r1	; 0x09
		event->counterPtr = counterPtr;
    f468:	f4 86       	std	Z+12, r15	; 0x0c
    f46a:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f46c:	c6 01       	movw	r24, r12
    f46e:	0e 94 b3 78 	call	0xf166	; 0xf166 <TIMING_AddEvent>
    f472:	1f 91       	pop	r17
    f474:	0f 91       	pop	r16
    f476:	ff 90       	pop	r15
    f478:	ef 90       	pop	r14
    f47a:	df 90       	pop	r13
    f47c:	cf 90       	pop	r12
    f47e:	08 95       	ret

0000f480 <TIMING_AddCounterEventAt>:
 *  \param  timestamp   Timestamp to trigger event.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAt( TIMING_time_t timestamp, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f480:	8f 92       	push	r8
    f482:	9f 92       	push	r9
    f484:	af 92       	push	r10
    f486:	bf 92       	push	r11
    f488:	cf 92       	push	r12
    f48a:	df 92       	push	r13
    f48c:	ef 92       	push	r14
    f48e:	ff 92       	push	r15
    f490:	0f 93       	push	r16
    f492:	1f 93       	push	r17
    f494:	4b 01       	movw	r8, r22
    f496:	5c 01       	movw	r10, r24
	TIMING_AddRepCounterEventAt( timestamp, 1, 0, counterPtr, event );
    f498:	69 01       	movw	r12, r18
    f49a:	7a 01       	movw	r14, r20
    f49c:	00 e0       	ldi	r16, 0x00	; 0
    f49e:	10 e0       	ldi	r17, 0x00	; 0
    f4a0:	20 e0       	ldi	r18, 0x00	; 0
    f4a2:	30 e0       	ldi	r19, 0x00	; 0
    f4a4:	41 e0       	ldi	r20, 0x01	; 1
    f4a6:	c5 01       	movw	r24, r10
    f4a8:	b4 01       	movw	r22, r8
    f4aa:	0e 94 20 7a 	call	0xf440	; 0xf440 <TIMING_AddRepCounterEventAt>
    f4ae:	1f 91       	pop	r17
    f4b0:	0f 91       	pop	r16
    f4b2:	ff 90       	pop	r15
    f4b4:	ef 90       	pop	r14
    f4b6:	df 90       	pop	r13
    f4b8:	cf 90       	pop	r12
    f4ba:	bf 90       	pop	r11
    f4bc:	af 90       	pop	r10
    f4be:	9f 90       	pop	r9
    f4c0:	8f 90       	pop	r8
    f4c2:	08 95       	ret

0000f4c4 <TIMING_AddCounterEventAfter>:
 *  \param  delay       Delay in ticks until event triggers.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAfter( TIMING_time_t delay, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f4c4:	ef 92       	push	r14
    f4c6:	ff 92       	push	r15
    f4c8:	0f 93       	push	r16
    f4ca:	1f 93       	push	r17
    f4cc:	7b 01       	movw	r14, r22
    f4ce:	8c 01       	movw	r16, r24
	TIMING_AddCounterEventAt( TIMING_currentTime + delay, counterPtr, event );
    f4d0:	80 91 77 18 	lds	r24, 0x1877
    f4d4:	90 91 78 18 	lds	r25, 0x1878
    f4d8:	a0 91 79 18 	lds	r26, 0x1879
    f4dc:	b0 91 7a 18 	lds	r27, 0x187A
    f4e0:	8e 0d       	add	r24, r14
    f4e2:	9f 1d       	adc	r25, r15
    f4e4:	a0 1f       	adc	r26, r16
    f4e6:	b1 1f       	adc	r27, r17
    f4e8:	bc 01       	movw	r22, r24
    f4ea:	cd 01       	movw	r24, r26
    f4ec:	0e 94 40 7a 	call	0xf480	; 0xf480 <TIMING_AddCounterEventAt>
    f4f0:	1f 91       	pop	r17
    f4f2:	0f 91       	pop	r16
    f4f4:	ff 90       	pop	r15
    f4f6:	ef 90       	pop	r14
    f4f8:	08 95       	ret

0000f4fa <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f4fa:	cf 92       	push	r12
    f4fc:	df 92       	push	r13
    f4fe:	ef 92       	push	r14
    f500:	ff 92       	push	r15
    f502:	0f 93       	push	r16
    f504:	1f 93       	push	r17
    f506:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f508:	44 23       	and	r20, r20
    f50a:	91 f0       	breq	.+36     	; 0xf530 <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f50c:	60 83       	st	Z, r22
    f50e:	71 83       	std	Z+1, r23	; 0x01
    f510:	82 83       	std	Z+2, r24	; 0x02
    f512:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f514:	04 83       	std	Z+4, r16	; 0x04
    f516:	15 83       	std	Z+5, r17	; 0x05
    f518:	26 83       	std	Z+6, r18	; 0x06
    f51a:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f51c:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    f51e:	81 e0       	ldi	r24, 0x01	; 1
    f520:	90 e0       	ldi	r25, 0x00	; 0
    f522:	92 87       	std	Z+10, r25	; 0x0a
    f524:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    f526:	f4 86       	std	Z+12, r15	; 0x0c
    f528:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f52a:	c6 01       	movw	r24, r12
    f52c:	0e 94 b3 78 	call	0xf166	; 0xf166 <TIMING_AddEvent>
    f530:	1f 91       	pop	r17
    f532:	0f 91       	pop	r16
    f534:	ff 90       	pop	r15
    f536:	ef 90       	pop	r14
    f538:	df 90       	pop	r13
    f53a:	cf 90       	pop	r12
    f53c:	08 95       	ret

0000f53e <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f53e:	8f 92       	push	r8
    f540:	9f 92       	push	r9
    f542:	af 92       	push	r10
    f544:	bf 92       	push	r11
    f546:	cf 92       	push	r12
    f548:	df 92       	push	r13
    f54a:	ef 92       	push	r14
    f54c:	ff 92       	push	r15
    f54e:	0f 93       	push	r16
    f550:	1f 93       	push	r17
    f552:	4b 01       	movw	r8, r22
    f554:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    f556:	69 01       	movw	r12, r18
    f558:	7a 01       	movw	r14, r20
    f55a:	00 e0       	ldi	r16, 0x00	; 0
    f55c:	10 e0       	ldi	r17, 0x00	; 0
    f55e:	20 e0       	ldi	r18, 0x00	; 0
    f560:	30 e0       	ldi	r19, 0x00	; 0
    f562:	41 e0       	ldi	r20, 0x01	; 1
    f564:	c5 01       	movw	r24, r10
    f566:	b4 01       	movw	r22, r8
    f568:	0e 94 7d 7a 	call	0xf4fa	; 0xf4fa <TIMING_AddRepCallbackEventAt>
    f56c:	1f 91       	pop	r17
    f56e:	0f 91       	pop	r16
    f570:	ff 90       	pop	r15
    f572:	ef 90       	pop	r14
    f574:	df 90       	pop	r13
    f576:	cf 90       	pop	r12
    f578:	bf 90       	pop	r11
    f57a:	af 90       	pop	r10
    f57c:	9f 90       	pop	r9
    f57e:	8f 90       	pop	r8
    f580:	08 95       	ret

0000f582 <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f582:	ef 92       	push	r14
    f584:	ff 92       	push	r15
    f586:	0f 93       	push	r16
    f588:	1f 93       	push	r17
    f58a:	7b 01       	movw	r14, r22
    f58c:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    f58e:	80 91 77 18 	lds	r24, 0x1877
    f592:	90 91 78 18 	lds	r25, 0x1878
    f596:	a0 91 79 18 	lds	r26, 0x1879
    f59a:	b0 91 7a 18 	lds	r27, 0x187A
    f59e:	8e 0d       	add	r24, r14
    f5a0:	9f 1d       	adc	r25, r15
    f5a2:	a0 1f       	adc	r26, r16
    f5a4:	b1 1f       	adc	r27, r17
    f5a6:	bc 01       	movw	r22, r24
    f5a8:	cd 01       	movw	r24, r26
    f5aa:	0e 94 9f 7a 	call	0xf53e	; 0xf53e <TIMING_AddCallbackEventAt>
    f5ae:	1f 91       	pop	r17
    f5b0:	0f 91       	pop	r16
    f5b2:	ff 90       	pop	r15
    f5b4:	ef 90       	pop	r14
    f5b6:	08 95       	ret

0000f5b8 <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f5b8:	7f 92       	push	r7
    f5ba:	8f 92       	push	r8
    f5bc:	9f 92       	push	r9
    f5be:	af 92       	push	r10
    f5c0:	bf 92       	push	r11
    f5c2:	cf 92       	push	r12
    f5c4:	df 92       	push	r13
    f5c6:	ef 92       	push	r14
    f5c8:	ff 92       	push	r15
    f5ca:	0f 93       	push	r16
    f5cc:	1f 93       	push	r17
    f5ce:	4b 01       	movw	r8, r22
    f5d0:	5c 01       	movw	r10, r24
    f5d2:	74 2e       	mov	r7, r20
    f5d4:	b9 01       	movw	r22, r18
    f5d6:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    f5d8:	80 91 77 18 	lds	r24, 0x1877
    f5dc:	90 91 78 18 	lds	r25, 0x1878
    f5e0:	a0 91 79 18 	lds	r26, 0x1879
    f5e4:	b0 91 7a 18 	lds	r27, 0x187A
    f5e8:	88 0d       	add	r24, r8
    f5ea:	99 1d       	adc	r25, r9
    f5ec:	aa 1d       	adc	r26, r10
    f5ee:	bb 1d       	adc	r27, r11
    f5f0:	8a 01       	movw	r16, r20
    f5f2:	9b 01       	movw	r18, r22
    f5f4:	47 2d       	mov	r20, r7
    f5f6:	bc 01       	movw	r22, r24
    f5f8:	cd 01       	movw	r24, r26
    f5fa:	0e 94 7d 7a 	call	0xf4fa	; 0xf4fa <TIMING_AddRepCallbackEventAt>
    f5fe:	1f 91       	pop	r17
    f600:	0f 91       	pop	r16
    f602:	ff 90       	pop	r15
    f604:	ef 90       	pop	r14
    f606:	df 90       	pop	r13
    f608:	cf 90       	pop	r12
    f60a:	bf 90       	pop	r11
    f60c:	af 90       	pop	r10
    f60e:	9f 90       	pop	r9
    f610:	8f 90       	pop	r8
    f612:	7f 90       	pop	r7
    f614:	08 95       	ret

0000f616 <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f616:	8f 92       	push	r8
    f618:	9f 92       	push	r9
    f61a:	af 92       	push	r10
    f61c:	bf 92       	push	r11
    f61e:	cf 92       	push	r12
    f620:	df 92       	push	r13
    f622:	ef 92       	push	r14
    f624:	ff 92       	push	r15
    f626:	0f 93       	push	r16
    f628:	1f 93       	push	r17
    f62a:	e8 2f       	mov	r30, r24
    f62c:	4a 01       	movw	r8, r20
    f62e:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    f630:	68 01       	movw	r12, r16
    f632:	79 01       	movw	r14, r18
    f634:	8a 01       	movw	r16, r20
    f636:	9b 01       	movw	r18, r22
    f638:	4e 2f       	mov	r20, r30
    f63a:	c5 01       	movw	r24, r10
    f63c:	b4 01       	movw	r22, r8
    f63e:	0e 94 dc 7a 	call	0xf5b8	; 0xf5b8 <TIMING_AddRepCallbackEventAfter>
    f642:	1f 91       	pop	r17
    f644:	0f 91       	pop	r16
    f646:	ff 90       	pop	r15
    f648:	ef 90       	pop	r14
    f64a:	df 90       	pop	r13
    f64c:	cf 90       	pop	r12
    f64e:	bf 90       	pop	r11
    f650:	af 90       	pop	r10
    f652:	9f 90       	pop	r9
    f654:	8f 90       	pop	r8
    f656:	08 95       	ret

0000f658 <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    f658:	ef 92       	push	r14
    f65a:	ff 92       	push	r15
    f65c:	0f 93       	push	r16
    f65e:	1f 93       	push	r17
    f660:	cf 93       	push	r28
    f662:	e6 2e       	mov	r14, r22
    f664:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    f666:	80 52       	subi	r24, 0x20	; 32
    f668:	8f 35       	cpi	r24, 0x5F	; 95
    f66a:	90 f4       	brcc	.+36     	; 0xf690 <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    f66c:	95 e0       	ldi	r25, 0x05	; 5
    f66e:	f9 2e       	mov	r15, r25
    f670:	8f 9d       	mul	r24, r15
    f672:	80 01       	movw	r16, r0
    f674:	11 24       	eor	r1, r1
    f676:	0a 5a       	subi	r16, 0xAA	; 170
    f678:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    f67a:	21 e0       	ldi	r18, 0x01	; 1
    f67c:	8f ef       	ldi	r24, 0xFF	; 255
    f67e:	0e 94 0e 70 	call	0xe01c	; 0xe01c <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    f682:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    f684:	2f 2d       	mov	r18, r15
    f686:	4c 2f       	mov	r20, r28
    f688:	6e 2d       	mov	r22, r14
    f68a:	c8 01       	movw	r24, r16
    f68c:	0e 94 4d 70 	call	0xe09a	; 0xe09a <LCD_WritePage_F>
    f690:	cf 91       	pop	r28
    f692:	1f 91       	pop	r17
    f694:	0f 91       	pop	r16
    f696:	ff 90       	pop	r15
    f698:	ef 90       	pop	r14
    f69a:	08 95       	ret

0000f69c <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    f69c:	20 91 64 00 	lds	r18, 0x0064
    f6a0:	27 7f       	andi	r18, 0xF7	; 247
    f6a2:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    f6a6:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    f6a8:	28 e0       	ldi	r18, 0x08	; 8
    f6aa:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    f6ae:	20 e1       	ldi	r18, 0x10	; 16
    f6b0:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    f6b4:	20 91 81 00 	lds	r18, 0x0081
    f6b8:	21 60       	ori	r18, 0x01	; 1
    f6ba:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f6be:	90 93 8f 18 	sts	0x188F, r25
    f6c2:	80 93 8e 18 	sts	0x188E, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f6c6:	2f e7       	ldi	r18, 0x7F	; 127
    f6c8:	38 e1       	ldi	r19, 0x18	; 24
    f6ca:	4e e6       	ldi	r20, 0x6E	; 110
    f6cc:	5b e7       	ldi	r21, 0x7B	; 123
    f6ce:	6a e0       	ldi	r22, 0x0A	; 10
    f6d0:	70 e0       	ldi	r23, 0x00	; 0
    f6d2:	80 e0       	ldi	r24, 0x00	; 0
    f6d4:	90 e0       	ldi	r25, 0x00	; 0
    f6d6:	0e 94 c1 7a 	call	0xf582	; 0xf582 <TIMING_AddCallbackEventAfter>
    f6da:	08 95       	ret

0000f6dc <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f6dc:	ef 92       	push	r14
    f6de:	ff 92       	push	r15
    f6e0:	0f 93       	push	r16
    f6e2:	1f 93       	push	r17
    f6e4:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f6e6:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f6e8:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f6ea:	e0 91 8e 18 	lds	r30, 0x188E
    f6ee:	f0 91 8f 18 	lds	r31, 0x188F
    f6f2:	81 85       	ldd	r24, Z+9	; 0x09
    f6f4:	84 30       	cpi	r24, 0x04	; 4
    f6f6:	b0 f1       	brcs	.+108    	; 0xf764 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f6f8:	cf 01       	movw	r24, r30
    f6fa:	0e 94 0e 75 	call	0xea1c	; 0xea1c <FIFO_GetUint16>
    f6fe:	7c 01       	movw	r14, r24
    f700:	00 27       	eor	r16, r16
    f702:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f704:	80 91 8e 18 	lds	r24, 0x188E
    f708:	90 91 8f 18 	lds	r25, 0x188F
    f70c:	0e 94 0e 75 	call	0xea1c	; 0xea1c <FIFO_GetUint16>
    f710:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f712:	01 97       	sbiw	r24, 0x01	; 1
    f714:	31 f4       	brne	.+12     	; 0xf722 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f716:	10 92 57 02 	sts	0x0257, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f71a:	80 91 81 00 	lds	r24, 0x0081
    f71e:	8e 7f       	andi	r24, 0xFE	; 254
    f720:	06 c0       	rjmp	.+12     	; 0xf72e <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f722:	81 e0       	ldi	r24, 0x01	; 1
    f724:	80 93 57 02 	sts	0x0257, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f728:	80 91 81 00 	lds	r24, 0x0081
    f72c:	81 60       	ori	r24, 0x01	; 1
    f72e:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f732:	9a 01       	movw	r18, r20
    f734:	36 95       	lsr	r19
    f736:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f738:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f73a:	9a 01       	movw	r18, r20
    f73c:	23 2f       	mov	r18, r19
    f73e:	33 27       	eor	r19, r19
    f740:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f742:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f746:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f74a:	25 2f       	mov	r18, r21
    f74c:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f74e:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f752:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f756:	2f e7       	ldi	r18, 0x7F	; 127
    f758:	38 e1       	ldi	r19, 0x18	; 24
    f75a:	4e e6       	ldi	r20, 0x6E	; 110
    f75c:	5b e7       	ldi	r21, 0x7B	; 123
    f75e:	c8 01       	movw	r24, r16
    f760:	b7 01       	movw	r22, r14
    f762:	0f c0       	rjmp	.+30     	; 0xf782 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f764:	10 92 57 02 	sts	0x0257, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f768:	80 91 81 00 	lds	r24, 0x0081
    f76c:	8e 7f       	andi	r24, 0xFE	; 254
    f76e:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f772:	2f e7       	ldi	r18, 0x7F	; 127
    f774:	38 e1       	ldi	r19, 0x18	; 24
    f776:	4e e6       	ldi	r20, 0x6E	; 110
    f778:	5b e7       	ldi	r21, 0x7B	; 123
    f77a:	6a e0       	ldi	r22, 0x0A	; 10
    f77c:	70 e0       	ldi	r23, 0x00	; 0
    f77e:	80 e0       	ldi	r24, 0x00	; 0
    f780:	90 e0       	ldi	r25, 0x00	; 0
    f782:	0e 94 c1 7a 	call	0xf582	; 0xf582 <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f786:	cf bf       	out	0x3f, r28	; 63
    f788:	cf 91       	pop	r28
    f78a:	1f 91       	pop	r17
    f78c:	0f 91       	pop	r16
    f78e:	ff 90       	pop	r15
    f790:	ef 90       	pop	r14
    f792:	08 95       	ret

0000f794 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f794:	10 92 57 02 	sts	0x0257, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f798:	80 91 81 00 	lds	r24, 0x0081
    f79c:	8e 7f       	andi	r24, 0xFE	; 254
    f79e:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f7a2:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f7a6:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f7aa:	8f e7       	ldi	r24, 0x7F	; 127
    f7ac:	98 e1       	ldi	r25, 0x18	; 24
    f7ae:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f7b2:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f7b4:	80 91 64 00 	lds	r24, 0x0064
    f7b8:	88 60       	ori	r24, 0x08	; 8
    f7ba:	80 93 64 00 	sts	0x0064, r24
    f7be:	08 95       	ret

0000f7c0 <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f7c0:	80 91 57 02 	lds	r24, 0x0257
}
    f7c4:	99 27       	eor	r25, r25
    f7c6:	08 95       	ret

0000f7c8 <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f7c8:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f7ca:	e0 91 90 18 	lds	r30, 0x1890
    f7ce:	f0 91 91 18 	lds	r31, 0x1891
    f7d2:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f7d4:	24 30       	cpi	r18, 0x04	; 4
    f7d6:	08 f4       	brcc	.+2      	; 0xf7da <SONG_CallbackControlTask_F+0x12>
    f7d8:	41 c0       	rjmp	.+130    	; 0xf85c <SONG_CallbackControlTask_F+0x94>
    f7da:	e0 91 a1 18 	lds	r30, 0x18A1
    f7de:	f0 91 a2 18 	lds	r31, 0x18A2
    f7e2:	85 91       	lpm	r24, Z+
    f7e4:	94 91       	lpm	r25, Z+
    f7e6:	89 2b       	or	r24, r25
    f7e8:	09 f4       	brne	.+2      	; 0xf7ec <SONG_CallbackControlTask_F+0x24>
    f7ea:	38 c0       	rjmp	.+112    	; 0xf85c <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f7ec:	80 91 a1 18 	lds	r24, 0x18A1
    f7f0:	90 91 a2 18 	lds	r25, 0x18A2
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	65 91       	lpm	r22, Z+
    f7f8:	74 91       	lpm	r23, Z+
    f7fa:	c2 2f       	mov	r28, r18
    f7fc:	c4 50       	subi	r28, 0x04	; 4
    f7fe:	2f ef       	ldi	r18, 0xFF	; 255
    f800:	6f 3f       	cpi	r22, 0xFF	; 255
    f802:	72 07       	cpc	r23, r18
    f804:	49 f4       	brne	.+18     	; 0xf818 <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f806:	80 91 a3 18 	lds	r24, 0x18A3
    f80a:	90 91 a4 18 	lds	r25, 0x18A4
    f80e:	90 93 a2 18 	sts	0x18A2, r25
    f812:	80 93 a1 18 	sts	0x18A1, r24
    f816:	1e c0       	rjmp	.+60     	; 0xf854 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f818:	02 96       	adiw	r24, 0x02	; 2
    f81a:	90 93 a2 18 	sts	0x18A2, r25
    f81e:	80 93 a1 18 	sts	0x18A1, r24
    f822:	80 91 90 18 	lds	r24, 0x1890
    f826:	90 91 91 18 	lds	r25, 0x1891
    f82a:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f82e:	80 91 a1 18 	lds	r24, 0x18A1
    f832:	90 91 a2 18 	lds	r25, 0x18A2
    f836:	fc 01       	movw	r30, r24
    f838:	02 96       	adiw	r24, 0x02	; 2
    f83a:	90 93 a2 18 	sts	0x18A2, r25
    f83e:	80 93 a1 18 	sts	0x18A1, r24
    f842:	85 91       	lpm	r24, Z+
    f844:	94 91       	lpm	r25, Z+
    f846:	bc 01       	movw	r22, r24
    f848:	80 91 90 18 	lds	r24, 0x1890
    f84c:	90 91 91 18 	lds	r25, 0x1891
    f850:	0e 94 fb 74 	call	0xe9f6	; 0xe9f6 <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f854:	2c 2f       	mov	r18, r28
    f856:	c4 30       	cpi	r28, 0x04	; 4
    f858:	08 f0       	brcs	.+2      	; 0xf85c <SONG_CallbackControlTask_F+0x94>
    f85a:	bf cf       	rjmp	.-130    	; 0xf7da <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    f85c:	e0 91 a1 18 	lds	r30, 0x18A1
    f860:	f0 91 a2 18 	lds	r31, 0x18A2
    f864:	85 91       	lpm	r24, Z+
    f866:	94 91       	lpm	r25, Z+
    f868:	89 2b       	or	r24, r25
    f86a:	69 f4       	brne	.+26     	; 0xf886 <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    f86c:	e0 91 90 18 	lds	r30, 0x1890
    f870:	f0 91 91 18 	lds	r31, 0x1891
    f874:	81 85       	ldd	r24, Z+9	; 0x09
    f876:	88 23       	and	r24, r24
    f878:	31 f4       	brne	.+12     	; 0xf886 <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    f87a:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <SOUND_IsToneBusy>
    f87e:	88 23       	and	r24, r24
    f880:	11 f4       	brne	.+4      	; 0xf886 <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    f882:	0e 94 ca 7b 	call	0xf794	; 0xf794 <SOUND_StopAudio>
    f886:	cf 91       	pop	r28
    f888:	08 95       	ret

0000f88a <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    f88a:	0e 94 ca 7b 	call	0xf794	; 0xf794 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    f88e:	82 e9       	ldi	r24, 0x92	; 146
    f890:	98 e1       	ldi	r25, 0x18	; 24
    f892:	0e 94 de 79 	call	0xf3bc	; 0xf3bc <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    f896:	80 91 90 18 	lds	r24, 0x1890
    f89a:	90 91 91 18 	lds	r25, 0x1891
    f89e:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    f8a2:	10 92 58 02 	sts	0x0258, r1
    f8a6:	08 95       	ret

0000f8a8 <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    f8a8:	0f 93       	push	r16
    f8aa:	1f 93       	push	r17
    f8ac:	cf 93       	push	r28
    f8ae:	df 93       	push	r29
    f8b0:	ec 01       	movw	r28, r24
    f8b2:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    f8b4:	80 91 58 02 	lds	r24, 0x0258
    f8b8:	81 30       	cpi	r24, 0x01	; 1
    f8ba:	11 f4       	brne	.+4      	; 0xf8c0 <SONG_StartTune_F+0x18>
		SONG_StopTune();
    f8bc:	0e 94 45 7c 	call	0xf88a	; 0xf88a <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    f8c0:	d0 93 91 18 	sts	0x1891, r29
    f8c4:	c0 93 90 18 	sts	0x1890, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    f8c8:	81 e0       	ldi	r24, 0x01	; 1
    f8ca:	80 93 58 02 	sts	0x0258, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    f8ce:	10 93 a4 18 	sts	0x18A4, r17
    f8d2:	00 93 a3 18 	sts	0x18A3, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    f8d6:	10 93 a2 18 	sts	0x18A2, r17
    f8da:	00 93 a1 18 	sts	0x18A1, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    f8de:	02 e9       	ldi	r16, 0x92	; 146
    f8e0:	18 e1       	ldi	r17, 0x18	; 24
    f8e2:	24 ee       	ldi	r18, 0xE4	; 228
    f8e4:	3b e7       	ldi	r19, 0x7B	; 123
    f8e6:	49 e0       	ldi	r20, 0x09	; 9
    f8e8:	50 e0       	ldi	r21, 0x00	; 0
    f8ea:	60 e0       	ldi	r22, 0x00	; 0
    f8ec:	70 e0       	ldi	r23, 0x00	; 0
    f8ee:	8f ef       	ldi	r24, 0xFF	; 255
    f8f0:	0e 94 0b 7b 	call	0xf616	; 0xf616 <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    f8f4:	ce 01       	movw	r24, r28
    f8f6:	0e 94 4e 7b 	call	0xf69c	; 0xf69c <SOUND_StartAudio>
    f8fa:	df 91       	pop	r29
    f8fc:	cf 91       	pop	r28
    f8fe:	1f 91       	pop	r17
    f900:	0f 91       	pop	r16
    f902:	08 95       	ret

0000f904 <__udivmodqi4>:
    f904:	99 1b       	sub	r25, r25
    f906:	79 e0       	ldi	r23, 0x09	; 9
    f908:	04 c0       	rjmp	.+8      	; 0xf912 <__udivmodqi4_ep>

0000f90a <__udivmodqi4_loop>:
    f90a:	99 1f       	adc	r25, r25
    f90c:	96 17       	cp	r25, r22
    f90e:	08 f0       	brcs	.+2      	; 0xf912 <__udivmodqi4_ep>
    f910:	96 1b       	sub	r25, r22

0000f912 <__udivmodqi4_ep>:
    f912:	88 1f       	adc	r24, r24
    f914:	7a 95       	dec	r23
    f916:	c9 f7       	brne	.-14     	; 0xf90a <__udivmodqi4_loop>
    f918:	80 95       	com	r24
    f91a:	08 95       	ret

0000f91c <__udivmodhi4>:
    f91c:	aa 1b       	sub	r26, r26
    f91e:	bb 1b       	sub	r27, r27
    f920:	51 e1       	ldi	r21, 0x11	; 17
    f922:	07 c0       	rjmp	.+14     	; 0xf932 <__udivmodhi4_ep>

0000f924 <__udivmodhi4_loop>:
    f924:	aa 1f       	adc	r26, r26
    f926:	bb 1f       	adc	r27, r27
    f928:	a6 17       	cp	r26, r22
    f92a:	b7 07       	cpc	r27, r23
    f92c:	10 f0       	brcs	.+4      	; 0xf932 <__udivmodhi4_ep>
    f92e:	a6 1b       	sub	r26, r22
    f930:	b7 0b       	sbc	r27, r23

0000f932 <__udivmodhi4_ep>:
    f932:	88 1f       	adc	r24, r24
    f934:	99 1f       	adc	r25, r25
    f936:	5a 95       	dec	r21
    f938:	a9 f7       	brne	.-22     	; 0xf924 <__udivmodhi4_loop>
    f93a:	80 95       	com	r24
    f93c:	90 95       	com	r25
    f93e:	bc 01       	movw	r22, r24
    f940:	cd 01       	movw	r24, r26
    f942:	08 95       	ret

0000f944 <__divmodhi4>:
    f944:	97 fb       	bst	r25, 7
    f946:	09 2e       	mov	r0, r25
    f948:	07 26       	eor	r0, r23
    f94a:	0a d0       	rcall	.+20     	; 0xf960 <__divmodhi4_neg1>
    f94c:	77 fd       	sbrc	r23, 7
    f94e:	04 d0       	rcall	.+8      	; 0xf958 <__divmodhi4_neg2>
    f950:	e5 df       	rcall	.-54     	; 0xf91c <__udivmodhi4>
    f952:	06 d0       	rcall	.+12     	; 0xf960 <__divmodhi4_neg1>
    f954:	00 20       	and	r0, r0
    f956:	1a f4       	brpl	.+6      	; 0xf95e <__divmodhi4_exit>

0000f958 <__divmodhi4_neg2>:
    f958:	70 95       	com	r23
    f95a:	61 95       	neg	r22
    f95c:	7f 4f       	sbci	r23, 0xFF	; 255

0000f95e <__divmodhi4_exit>:
    f95e:	08 95       	ret

0000f960 <__divmodhi4_neg1>:
    f960:	f6 f7       	brtc	.-4      	; 0xf95e <__divmodhi4_exit>
    f962:	90 95       	com	r25
    f964:	81 95       	neg	r24
    f966:	9f 4f       	sbci	r25, 0xFF	; 255
    f968:	08 95       	ret

0000f96a <__udivmodsi4>:
    f96a:	a1 e2       	ldi	r26, 0x21	; 33
    f96c:	1a 2e       	mov	r1, r26
    f96e:	aa 1b       	sub	r26, r26
    f970:	bb 1b       	sub	r27, r27
    f972:	fd 01       	movw	r30, r26
    f974:	0d c0       	rjmp	.+26     	; 0xf990 <__udivmodsi4_ep>

0000f976 <__udivmodsi4_loop>:
    f976:	aa 1f       	adc	r26, r26
    f978:	bb 1f       	adc	r27, r27
    f97a:	ee 1f       	adc	r30, r30
    f97c:	ff 1f       	adc	r31, r31
    f97e:	a2 17       	cp	r26, r18
    f980:	b3 07       	cpc	r27, r19
    f982:	e4 07       	cpc	r30, r20
    f984:	f5 07       	cpc	r31, r21
    f986:	20 f0       	brcs	.+8      	; 0xf990 <__udivmodsi4_ep>
    f988:	a2 1b       	sub	r26, r18
    f98a:	b3 0b       	sbc	r27, r19
    f98c:	e4 0b       	sbc	r30, r20
    f98e:	f5 0b       	sbc	r31, r21

0000f990 <__udivmodsi4_ep>:
    f990:	66 1f       	adc	r22, r22
    f992:	77 1f       	adc	r23, r23
    f994:	88 1f       	adc	r24, r24
    f996:	99 1f       	adc	r25, r25
    f998:	1a 94       	dec	r1
    f99a:	69 f7       	brne	.-38     	; 0xf976 <__udivmodsi4_loop>
    f99c:	60 95       	com	r22
    f99e:	70 95       	com	r23
    f9a0:	80 95       	com	r24
    f9a2:	90 95       	com	r25
    f9a4:	9b 01       	movw	r18, r22
    f9a6:	ac 01       	movw	r20, r24
    f9a8:	bd 01       	movw	r22, r26
    f9aa:	cf 01       	movw	r24, r30
    f9ac:	08 95       	ret

0000f9ae <_exit>:
    f9ae:	ff cf       	rjmp	.-2      	; 0xf9ae <_exit>
