
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000f9ae  0000fa42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f9ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  0080025a  0080025a  0000fa9c  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  0000fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000131f7  00000000  00000000  0001304d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030f1  00000000  00000000  00026244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ae1c  00000000  00000000  00029335  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fea  00000000  00000000  00034151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  0003913b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		"\"128 64 2 1\",\r\n"
		"\"   c #FFFFFF\",\r\n"
		"\".  c #000000\",\r\n";			

void SendChar( char ch )
{
       0:	0c 94 1b 69 	jmp	0xd236	; 0xd236 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	TERMFONT_DisplayString( "Min Volt: 3.45 V", 7, 0 );
}

void LCD_UpdateMaxTemp(uint8_t temp)
{
	TERMFONT_DisplayString( "Max Temp: 35 C", 5, 0 );
      10:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 * called POWER_WakeupCallback(void)
 * 
 * It enables the disabled modules and jtag again when doing a full wakeup
 */
void POWER_EnterPowerSaveMode( void )
{
      18:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 07 73 	jmp	0xe60e	; 0xe60e <__vector_9>
/*!
 * \param  pPictureInRam  Pointer to picture in ram with same size as LCD
 */
void PICTURE_CopyFullscreenRamToLcd (const uint8_t * pPictureInRam)
{
  LCD_WriteFrameBuffer( pPictureInRam );
      28:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
		// Check if bottom of element is below bottom of visible area.
		if ((element->startPage + element->height) > (form->firstVisiblePage + LCD_PAGE_COUNT)) {
			visibility->lastPage = (form->firstVisiblePage + LCD_PAGE_COUNT - 1) -
					element->startPage;
		} else {
			visibility->lastPage = element->height - 1;
      2c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      30:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      34:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
      38:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      3c:	0c 94 01 78 	jmp	0xf002	; 0xf002 <__vector_15>
      40:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      44:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      48:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      4c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      50:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      54:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      58:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      5c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      60:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      64:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      68:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      6c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      70:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      74:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      78:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      7c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      80:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      84:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      88:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      8c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      90:	0c 94 91 69 	jmp	0xd322	; 0xd322 <__vector_36>
      94:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      98:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      9c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      ac:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      bc:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <FORMS_focusIndicator>:
    d052:	3e 1c 08 00                                         >...

0000d056 <TERMFONT_fontdata>:
    d056:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d066:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d076:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d086:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d096:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d6:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e6:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f6:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d106:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d116:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d126:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d136:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d146:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d156:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d166:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d176:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d186:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d196:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b6:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c6:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d206:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d216:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d226:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d236 <__ctors_end>:
    d236:	11 24       	eor	r1, r1
    d238:	1f be       	out	0x3f, r1	; 63
    d23a:	cf ef       	ldi	r28, 0xFF	; 255
    d23c:	d1 e2       	ldi	r29, 0x21	; 33
    d23e:	de bf       	out	0x3e, r29	; 62
    d240:	cd bf       	out	0x3d, r28	; 61

0000d242 <__do_copy_data>:
    d242:	12 e0       	ldi	r17, 0x02	; 2
    d244:	a0 e0       	ldi	r26, 0x00	; 0
    d246:	b2 e0       	ldi	r27, 0x02	; 2
    d248:	ee ea       	ldi	r30, 0xAE	; 174
    d24a:	f9 ef       	ldi	r31, 0xF9	; 249
    d24c:	00 e0       	ldi	r16, 0x00	; 0
    d24e:	0b bf       	out	0x3b, r16	; 59
    d250:	02 c0       	rjmp	.+4      	; 0xd256 <__do_copy_data+0x14>
    d252:	07 90       	elpm	r0, Z+
    d254:	0d 92       	st	X+, r0
    d256:	aa 35       	cpi	r26, 0x5A	; 90
    d258:	b1 07       	cpc	r27, r17
    d25a:	d9 f7       	brne	.-10     	; 0xd252 <__do_copy_data+0x10>

0000d25c <__do_clear_bss>:
    d25c:	18 e1       	ldi	r17, 0x18	; 24
    d25e:	aa e5       	ldi	r26, 0x5A	; 90
    d260:	b2 e0       	ldi	r27, 0x02	; 2
    d262:	01 c0       	rjmp	.+2      	; 0xd266 <.do_clear_bss_start>

0000d264 <.do_clear_bss_loop>:
    d264:	1d 92       	st	X+, r1

0000d266 <.do_clear_bss_start>:
    d266:	ab 3a       	cpi	r26, 0xAB	; 171
    d268:	b1 07       	cpc	r27, r17
    d26a:	e1 f7       	brne	.-8      	; 0xd264 <.do_clear_bss_loop>
    d26c:	0e 94 db 6a 	call	0xd5b6	; 0xd5b6 <main>
    d270:	0c 94 d6 7c 	jmp	0xf9ac	; 0xf9ac <_exit>

0000d274 <__bad_interrupt>:
    d274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d278 <strcmp>:
    d278:	fb 01       	movw	r30, r22
    d27a:	dc 01       	movw	r26, r24
    d27c:	8d 91       	ld	r24, X+
    d27e:	01 90       	ld	r0, Z+
    d280:	80 19       	sub	r24, r0
    d282:	01 10       	cpse	r0, r1
    d284:	d9 f3       	breq	.-10     	; 0xd27c <strcmp+0x4>
    d286:	99 0b       	sbc	r25, r25
    d288:	08 95       	ret

0000d28a <strncpy>:
    d28a:	fb 01       	movw	r30, r22
    d28c:	dc 01       	movw	r26, r24
    d28e:	41 50       	subi	r20, 0x01	; 1
    d290:	50 40       	sbci	r21, 0x00	; 0
    d292:	48 f0       	brcs	.+18     	; 0xd2a6 <strncpy+0x1c>
    d294:	01 90       	ld	r0, Z+
    d296:	0d 92       	st	X+, r0
    d298:	00 20       	and	r0, r0
    d29a:	c9 f7       	brne	.-14     	; 0xd28e <strncpy+0x4>
    d29c:	01 c0       	rjmp	.+2      	; 0xd2a0 <strncpy+0x16>
    d29e:	1d 92       	st	X+, r1
    d2a0:	41 50       	subi	r20, 0x01	; 1
    d2a2:	50 40       	sbci	r21, 0x00	; 0
    d2a4:	e0 f7       	brcc	.-8      	; 0xd29e <strncpy+0x14>
    d2a6:	08 95       	ret

0000d2a8 <__eerd_word>:
    d2a8:	cf 92       	push	r12
    d2aa:	df 92       	push	r13
    d2ac:	ef 92       	push	r14
    d2ae:	ff 92       	push	r15
    d2b0:	0f 93       	push	r16
    d2b2:	1f 93       	push	r17
    d2b4:	7c 01       	movw	r14, r24
    d2b6:	6b 01       	movw	r12, r22
    d2b8:	fb 01       	movw	r30, r22
    d2ba:	09 95       	icall
    d2bc:	08 2f       	mov	r16, r24
    d2be:	c7 01       	movw	r24, r14
    d2c0:	01 96       	adiw	r24, 0x01	; 1
    d2c2:	f6 01       	movw	r30, r12
    d2c4:	09 95       	icall
    d2c6:	18 2f       	mov	r17, r24
    d2c8:	c8 01       	movw	r24, r16
    d2ca:	1f 91       	pop	r17
    d2cc:	0f 91       	pop	r16
    d2ce:	ff 90       	pop	r15
    d2d0:	ef 90       	pop	r14
    d2d2:	df 90       	pop	r13
    d2d4:	cf 90       	pop	r12
    d2d6:	08 95       	ret

0000d2d8 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d2d8:	f9 99       	sbic	0x1f, 1	; 31
    d2da:	fe cf       	rjmp	.-4      	; 0xd2d8 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d2dc:	92 bd       	out	0x22, r25	; 34
    d2de:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d2e0:	f8 9a       	sbi	0x1f, 0	; 31
    d2e2:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d2e4:	99 27       	eor	r25, r25
    d2e6:	08 95       	ret

0000d2e8 <UnknownError>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
    d2e8:	0f 93       	push	r16
    d2ea:	1f 93       	push	r17
	POPUP_MsgBox( 14, 1, 10, "Unknown error!", NULL );
    d2ec:	00 e0       	ldi	r16, 0x00	; 0
    d2ee:	10 e0       	ldi	r17, 0x00	; 0
    d2f0:	20 e0       	ldi	r18, 0x00	; 0
    d2f2:	32 e0       	ldi	r19, 0x02	; 2
    d2f4:	4a e0       	ldi	r20, 0x0A	; 10
    d2f6:	61 e0       	ldi	r22, 0x01	; 1
    d2f8:	8e e0       	ldi	r24, 0x0E	; 14
    d2fa:	0e 94 6c 70 	call	0xe0d8	; 0xe0d8 <POPUP_MsgBox>
	for (;;) {}
    d2fe:	ff cf       	rjmp	.-2      	; 0xd2fe <UnknownError+0x16>

0000d300 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d300:	cf 93       	push	r28
    d302:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d304:	8a 30       	cpi	r24, 0x0A	; 10
    d306:	19 f4       	brne	.+6      	; 0xd30e <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d308:	8d e0       	ldi	r24, 0x0D	; 13
    d30a:	0e 94 80 69 	call	0xd300	; 0xd300 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d30e:	80 91 c8 00 	lds	r24, 0x00C8
    d312:	85 ff       	sbrs	r24, 5
    d314:	fc cf       	rjmp	.-8      	; 0xd30e <uart_putchar+0xe>
      UDR1 = c;
    d316:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d31a:	80 e0       	ldi	r24, 0x00	; 0
    d31c:	90 e0       	ldi	r25, 0x00	; 0
    d31e:	cf 91       	pop	r28
    d320:	08 95       	ret

0000d322 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d322:	1f 92       	push	r1
    d324:	0f 92       	push	r0
    d326:	0f b6       	in	r0, 0x3f	; 63
    d328:	0f 92       	push	r0
    d32a:	11 24       	eor	r1, r1
    d32c:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d32e:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d332:	80 91 ce 00 	lds	r24, 0x00CE
    d336:	80 93 6b 02 	sts	0x026B, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d33a:	81 e0       	ldi	r24, 0x01	; 1
    d33c:	80 93 6c 02 	sts	0x026C, r24
    d340:	8f 91       	pop	r24
    d342:	0f 90       	pop	r0
    d344:	0f be       	out	0x3f, r0	; 63
    d346:	0f 90       	pop	r0
    d348:	1f 90       	pop	r1
    d34a:	18 95       	reti

0000d34c <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d34c:	88 e9       	ldi	r24, 0x98	; 152
    d34e:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d352:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d356:	87 e0       	ldi	r24, 0x07	; 7
    d358:	80 93 cc 00 	sts	0x00CC, r24
    d35c:	08 95       	ret

0000d35e <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    d35e:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    d360:	80 53       	subi	r24, 0x30	; 48
    d362:	8a 30       	cpi	r24, 0x0A	; 10
    d364:	10 f4       	brcc	.+4      	; 0xd36a <xtod+0xc>
    d366:	99 27       	eor	r25, r25
    d368:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    d36a:	89 2f       	mov	r24, r25
    d36c:	81 54       	subi	r24, 0x41	; 65
    d36e:	86 30       	cpi	r24, 0x06	; 6
    d370:	10 f4       	brcc	.+4      	; 0xd376 <xtod+0x18>
    d372:	97 53       	subi	r25, 0x37	; 55
    d374:	05 c0       	rjmp	.+10     	; 0xd380 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    d376:	89 2f       	mov	r24, r25
    d378:	81 56       	subi	r24, 0x61	; 97
    d37a:	86 30       	cpi	r24, 0x06	; 6
    d37c:	20 f4       	brcc	.+8      	; 0xd386 <xtod+0x28>
    d37e:	97 55       	subi	r25, 0x57	; 87
    d380:	89 2f       	mov	r24, r25
    d382:	99 27       	eor	r25, r25
    d384:	08 95       	ret
 return c=0;        // not Hex digit
    d386:	80 e0       	ldi	r24, 0x00	; 0
    d388:	90 e0       	ldi	r25, 0x00	; 0
}
    d38a:	08 95       	ret

0000d38c <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    d38c:	ef 92       	push	r14
    d38e:	ff 92       	push	r15
    d390:	0f 93       	push	r16
    d392:	1f 93       	push	r17
    d394:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    d396:	80 81       	ld	r24, Z
    d398:	88 23       	and	r24, r24
    d39a:	81 f0       	breq	.+32     	; 0xd3bc <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    d39c:	8f 01       	movw	r16, r30
    d39e:	0f 5f       	subi	r16, 0xFF	; 255
    d3a0:	1f 4f       	sbci	r17, 0xFF	; 255
    d3a2:	7b 01       	movw	r14, r22
    d3a4:	94 e0       	ldi	r25, 0x04	; 4
    d3a6:	ee 0c       	add	r14, r14
    d3a8:	ff 1c       	adc	r15, r15
    d3aa:	9a 95       	dec	r25
    d3ac:	e1 f7       	brne	.-8      	; 0xd3a6 <HextoDec+0x1a>
    d3ae:	0e 94 af 69 	call	0xd35e	; 0xd35e <xtod>
    d3b2:	f8 01       	movw	r30, r16
    d3b4:	b7 01       	movw	r22, r14
    d3b6:	68 0f       	add	r22, r24
    d3b8:	71 1d       	adc	r23, r1
    d3ba:	ed cf       	rjmp	.-38     	; 0xd396 <HextoDec+0xa>
}
    d3bc:	cb 01       	movw	r24, r22
    d3be:	1f 91       	pop	r17
    d3c0:	0f 91       	pop	r16
    d3c2:	ff 90       	pop	r15
    d3c4:	ef 90       	pop	r14
    d3c6:	08 95       	ret

0000d3c8 <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    d3c8:	60 e0       	ldi	r22, 0x00	; 0
    d3ca:	70 e0       	ldi	r23, 0x00	; 0
    d3cc:	0e 94 c6 69 	call	0xd38c	; 0xd38c <HextoDec>
    d3d0:	08 95       	ret

0000d3d2 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    d3d2:	ef 92       	push	r14
    d3d4:	ff 92       	push	r15
    d3d6:	0f 93       	push	r16
    d3d8:	1f 93       	push	r17
    d3da:	8a 01       	movw	r16, r20
    d3dc:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    d3de:	68 0f       	add	r22, r24
    d3e0:	79 1f       	adc	r23, r25
    d3e2:	c9 01       	movw	r24, r18
    d3e4:	0e 94 45 69 	call	0xd28a	; 0xd28a <strncpy>
	pnew[numchars] = '\0';
    d3e8:	0e 0d       	add	r16, r14
    d3ea:	1f 1d       	adc	r17, r15
    d3ec:	f8 01       	movw	r30, r16
    d3ee:	10 82       	st	Z, r1
	return pnew;
}
    d3f0:	c7 01       	movw	r24, r14
    d3f2:	1f 91       	pop	r17
    d3f4:	0f 91       	pop	r16
    d3f6:	ff 90       	pop	r15
    d3f8:	ef 90       	pop	r14
    d3fa:	08 95       	ret

0000d3fc <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    d3fc:	ef 92       	push	r14
    d3fe:	ff 92       	push	r15
    d400:	0f 93       	push	r16
    d402:	1f 93       	push	r17
    d404:	cf 93       	push	r28
    d406:	df 93       	push	r29
    d408:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d40a:	8d 30       	cpi	r24, 0x0D	; 13
    d40c:	19 f0       	breq	.+6      	; 0xd414 <recv_input+0x18>
    d40e:	8a 30       	cpi	r24, 0x0A	; 10
    d410:	09 f0       	breq	.+2      	; 0xd414 <recv_input+0x18>
    d412:	ba c0       	rjmp	.+372    	; 0xd588 <recv_input+0x18c>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d414:	80 91 32 02 	lds	r24, 0x0232
    d418:	e8 2f       	mov	r30, r24
    d41a:	ff 27       	eor	r31, r31
    d41c:	ef 57       	subi	r30, 0x7F	; 127
    d41e:	fd 4f       	sbci	r31, 0xFD	; 253
    d420:	10 82       	st	Z, r1
  int8_t rc;
  int16_t value=0;
  char * raw_byte;
  short * raw_short;

  if (s[0] == 0)
    d422:	80 91 81 02 	lds	r24, 0x0281
    d426:	88 23       	and	r24, r24
    d428:	09 f4       	brne	.+2      	; 0xd42c <recv_input+0x30>
    d42a:	ab c0       	rjmp	.+342    	; 0xd582 <recv_input+0x186>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d42c:	e0 91 33 02 	lds	r30, 0x0233
    d430:	f0 91 34 02 	lds	r31, 0x0234
    d434:	10 82       	st	Z, r1
  index = 0;
    d436:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d438:	80 91 81 02 	lds	r24, 0x0281
    d43c:	88 23       	and	r24, r24
    d43e:	d1 f0       	breq	.+52     	; 0xd474 <recv_input+0x78>
    d440:	8d 33       	cpi	r24, 0x3D	; 61
    d442:	c1 f0       	breq	.+48     	; 0xd474 <recv_input+0x78>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d444:	e9 2f       	mov	r30, r25
    d446:	ff 27       	eor	r31, r31
    d448:	a0 91 33 02 	lds	r26, 0x0233
    d44c:	b0 91 34 02 	lds	r27, 0x0234
    d450:	ae 0f       	add	r26, r30
    d452:	bf 1f       	adc	r27, r31
    d454:	ef 57       	subi	r30, 0x7F	; 127
    d456:	fd 4f       	sbci	r31, 0xFD	; 253
    d458:	80 81       	ld	r24, Z
    d45a:	8c 93       	st	X, r24
    index++;
    d45c:	9f 5f       	subi	r25, 0xFF	; 255
    d45e:	94 31       	cpi	r25, 0x14	; 20
    d460:	48 f4       	brcc	.+18     	; 0xd474 <recv_input+0x78>
    d462:	e9 2f       	mov	r30, r25
    d464:	ff 27       	eor	r31, r31
    d466:	ef 57       	subi	r30, 0x7F	; 127
    d468:	fd 4f       	sbci	r31, 0xFD	; 253
    d46a:	e0 81       	ld	r30, Z
    d46c:	ee 23       	and	r30, r30
    d46e:	11 f0       	breq	.+4      	; 0xd474 <recv_input+0x78>
    d470:	ed 33       	cpi	r30, 0x3D	; 61
    d472:	41 f7       	brne	.-48     	; 0xd444 <recv_input+0x48>
    d474:	a0 91 33 02 	lds	r26, 0x0233
    d478:	b0 91 34 02 	lds	r27, 0x0234
  }
  if (index < sizeof(do_cmdbuf)) {
    d47c:	94 31       	cpi	r25, 0x14	; 20
    d47e:	68 f4       	brcc	.+26     	; 0xd49a <recv_input+0x9e>
    cmd[index] = 0;
    d480:	89 2f       	mov	r24, r25
    d482:	99 27       	eor	r25, r25
    d484:	a8 0f       	add	r26, r24
    d486:	b9 1f       	adc	r27, r25
    d488:	1c 92       	st	X, r1
    args = &s[index];
    d48a:	fc 01       	movw	r30, r24
    d48c:	ef 57       	subi	r30, 0x7F	; 127
    d48e:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d490:	80 81       	ld	r24, Z
    d492:	8d 33       	cpi	r24, 0x3D	; 61
    d494:	21 f4       	brne	.+8      	; 0xd49e <recv_input+0xa2>
    d496:	31 96       	adiw	r30, 0x01	; 1
    d498:	fb cf       	rjmp	.-10     	; 0xd490 <recv_input+0x94>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d49a:	fd 01       	movw	r30, r26
    d49c:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d49e:	e0 91 33 02 	lds	r30, 0x0233
    d4a2:	f0 91 34 02 	lds	r31, 0x0234
    d4a6:	80 81       	ld	r24, Z
    d4a8:	88 23       	and	r24, r24
    d4aa:	09 f4       	brne	.+2      	; 0xd4ae <recv_input+0xb2>
    d4ac:	6a c0       	rjmp	.+212    	; 0xd582 <recv_input+0x186>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d4ae:	64 e7       	ldi	r22, 0x74	; 116
    d4b0:	70 e0       	ldi	r23, 0x00	; 0
    d4b2:	99 27       	eor	r25, r25
    d4b4:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d4b8:	89 2b       	or	r24, r25
    d4ba:	09 f0       	breq	.+2      	; 0xd4be <recv_input+0xc2>
    d4bc:	62 c0       	rjmp	.+196    	; 0xd582 <recv_input+0x186>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d4be:	82 e0       	ldi	r24, 0x02	; 2
    d4c0:	90 e0       	ldi	r25, 0x00	; 0
    d4c2:	0e 94 6f 75 	call	0xeade	; 0xeade <MEMBLOCK_Allocate>
    d4c6:	ec 01       	movw	r28, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d4c8:	9c 01       	movw	r18, r24
    d4ca:	43 e0       	ldi	r20, 0x03	; 3
    d4cc:	50 e0       	ldi	r21, 0x00	; 0
    d4ce:	61 e0       	ldi	r22, 0x01	; 1
    d4d0:	70 e0       	ldi	r23, 0x00	; 0
    d4d2:	80 91 33 02 	lds	r24, 0x0233
    d4d6:	90 91 34 02 	lds	r25, 0x0234
    d4da:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <substr>
    d4de:	90 93 5b 02 	sts	0x025B, r25
    d4e2:	80 93 5a 02 	sts	0x025A, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d4e6:	ce 01       	movw	r24, r28
    d4e8:	0e 94 17 76 	call	0xec2e	; 0xec2e <MEMBLOCK_Free>
	// 2	unsigned char	Pack State of Health				0.5%
	// 3	unsigned char	Max Pack Temperature				1 deg C
	// 4-5	short			Min Pack Voltage					1mV
	// 6-7	short			Max Pack Voltage					1mV
	 
	if (strcmp(can_addr, "630") == 0) {
    d4ec:	64 e1       	ldi	r22, 0x14	; 20
    d4ee:	72 e0       	ldi	r23, 0x02	; 2
    d4f0:	80 91 5a 02 	lds	r24, 0x025A
    d4f4:	90 91 5b 02 	lds	r25, 0x025B
    d4f8:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d4fc:	7c 01       	movw	r14, r24
    d4fe:	89 2b       	or	r24, r25
    d500:	09 f0       	breq	.+2      	; 0xd504 <recv_input+0x108>
    d502:	3f c0       	rjmp	.+126    	; 0xd582 <recv_input+0x186>
		wdt_reset();
    d504:	a8 95       	wdr
		
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d506:	82 e0       	ldi	r24, 0x02	; 2
    d508:	90 e0       	ldi	r25, 0x00	; 0
    d50a:	0e 94 6f 75 	call	0xeade	; 0xeade <MEMBLOCK_Allocate>
    d50e:	88 83       	st	Y, r24

		// SOC, byte 0
		raw_byte = substr(cmd, 5, 2,pnew);
    d510:	9e 01       	movw	r18, r28
    d512:	42 e0       	ldi	r20, 0x02	; 2
    d514:	50 e0       	ldi	r21, 0x00	; 0
    d516:	65 e0       	ldi	r22, 0x05	; 5
    d518:	70 e0       	ldi	r23, 0x00	; 0
    d51a:	80 91 33 02 	lds	r24, 0x0233
    d51e:	90 91 34 02 	lds	r25, 0x0234
    d522:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <substr>
    d526:	8c 01       	movw	r16, r24
		MEM_FREE(pnew);
    d528:	ce 01       	movw	r24, r28
    d52a:	0e 94 17 76 	call	0xec2e	; 0xec2e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d52e:	c8 01       	movw	r24, r16
    d530:	0e 94 e4 69 	call	0xd3c8	; 0xd3c8 <xstrtoi>
		value = value/2;	// 0.5 % per LSB
    d534:	9c 01       	movw	r18, r24
    d536:	97 ff       	sbrs	r25, 7
    d538:	02 c0       	rjmp	.+4      	; 0xd53e <recv_input+0x142>
    d53a:	2f 5f       	subi	r18, 0xFF	; 255
    d53c:	3f 4f       	sbci	r19, 0xFF	; 255
    d53e:	35 95       	asr	r19
    d540:	27 95       	ror	r18
		LCD_UpdateSOC(value);
    d542:	82 2f       	mov	r24, r18
    d544:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>
*/
		
		// Small status line for each frame received. Since ID 630 should
		// be transmitted once per second, there should be small but visible
		// blinking of few pixels in one of the corners of the display. 		
		if (la == 0)
    d548:	80 91 18 02 	lds	r24, 0x0218
    d54c:	90 91 19 02 	lds	r25, 0x0219
    d550:	89 2b       	or	r24, r25
    d552:	69 f4       	brne	.+26     	; 0xd56e <recv_input+0x172>
		{
				LCD_ClrLine(1,63,2,63);
    d554:	2f e3       	ldi	r18, 0x3F	; 63
    d556:	42 e0       	ldi	r20, 0x02	; 2
    d558:	62 2f       	mov	r22, r18
    d55a:	81 e0       	ldi	r24, 0x01	; 1
    d55c:	0e 94 8b 72 	call	0xe516	; 0xe516 <LCD_ClrLine>
				la = 1;
    d560:	81 e0       	ldi	r24, 0x01	; 1
    d562:	90 e0       	ldi	r25, 0x00	; 0
    d564:	90 93 19 02 	sts	0x0219, r25
    d568:	80 93 18 02 	sts	0x0218, r24
    d56c:	0a c0       	rjmp	.+20     	; 0xd582 <recv_input+0x186>
		} else {
				LCD_SetLine(1,63,2,63);
    d56e:	2f e3       	ldi	r18, 0x3F	; 63
    d570:	42 e0       	ldi	r20, 0x02	; 2
    d572:	62 2f       	mov	r22, r18
    d574:	81 e0       	ldi	r24, 0x01	; 1
    d576:	0e 94 23 72 	call	0xe446	; 0xe446 <LCD_SetLine>
				la = 0;
    d57a:	f0 92 19 02 	sts	0x0219, r15
    d57e:	e0 92 18 02 	sts	0x0218, r14
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d582:	10 92 32 02 	sts	0x0232, r1
    d586:	10 c0       	rjmp	.+32     	; 0xd5a8 <recv_input+0x1ac>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d588:	80 91 32 02 	lds	r24, 0x0232
    d58c:	e8 2f       	mov	r30, r24
    d58e:	ff 27       	eor	r31, r31
    d590:	ef 57       	subi	r30, 0x7F	; 127
    d592:	fd 4f       	sbci	r31, 0xFD	; 253
    d594:	90 83       	st	Z, r25
    d596:	8f 5f       	subi	r24, 0xFF	; 255
    d598:	80 93 32 02 	sts	0x0232, r24
    if (idx == CMD_BUF_LEN) {
    d59c:	80 38       	cpi	r24, 0x80	; 128
    d59e:	21 f4       	brne	.+8      	; 0xd5a8 <recv_input+0x1ac>
      idx = 0;
    d5a0:	10 92 32 02 	sts	0x0232, r1
      recv_input_cmdbuf[idx] = 0;
    d5a4:	10 92 81 02 	sts	0x0281, r1
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	ef 90       	pop	r14
    d5b4:	08 95       	ret

0000d5b6 <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d5b6:	ce ef       	ldi	r28, 0xFE	; 254
    d5b8:	d1 e2       	ldi	r29, 0x21	; 33
    d5ba:	de bf       	out	0x3e, r29	; 62
    d5bc:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);

	LCD_UpdateSOC(1);
    d5be:	81 e0       	ldi	r24, 0x01	; 1
    d5c0:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	stdout = &mystdout;
    d5c4:	84 e2       	ldi	r24, 0x24	; 36
    d5c6:	92 e0       	ldi	r25, 0x02	; 2
    d5c8:	90 93 a8 18 	sts	0x18A8, r25
    d5cc:	80 93 a7 18 	sts	0x18A7, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d5d0:	54 9a       	sbi	0x0a, 4	; 10
    d5d2:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d5d4:	0e 94 a6 69 	call	0xd34c	; 0xd34c <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d5d8:	82 e0       	ldi	r24, 0x02	; 2
    d5da:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d5de:	0e 94 b4 6b 	call	0xd768	; 0xd768 <InitMemory>

	LCD_UpdateSOC(3);
    d5e2:	83 e0       	ldi	r24, 0x03	; 3
    d5e4:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	LCD_Init();
    d5e8:	0e 94 a8 6c 	call	0xd950	; 0xd950 <LCD_Init>

	LCD_UpdateSOC(4);
    d5ec:	84 e0       	ldi	r24, 0x04	; 4
    d5ee:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	TIMING_Init();
    d5f2:	0e 94 a5 78 	call	0xf14a	; 0xf14a <TIMING_Init>

	LCD_UpdateSOC(5);
    d5f6:	85 e0       	ldi	r24, 0x05	; 5
    d5f8:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	RTC_Init();
    d5fc:	0e 94 6e 78 	call	0xf0dc	; 0xf0dc <RTC_Init>

	LCD_UpdateSOC(6);
    d600:	86 e0       	ldi	r24, 0x06	; 6
    d602:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d606:	86 e4       	ldi	r24, 0x46	; 70
    d608:	99 e7       	ldi	r25, 0x79	; 121
    d60a:	0e 94 9d 78 	call	0xf13a	; 0xf13a <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d60e:	87 e0       	ldi	r24, 0x07	; 7
    d610:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d614:	62 e3       	ldi	r22, 0x32	; 50
    d616:	84 e6       	ldi	r24, 0x64	; 100
    d618:	0e 94 2f 73 	call	0xe65e	; 0xe65e <JOYSTICK_Init>

	//USART_Init();

//	CAL_enable_interrupt();

	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d61c:	0c e5       	ldi	r16, 0x5C	; 92
    d61e:	12 e0       	ldi	r17, 0x02	; 2
    d620:	22 e4       	ldi	r18, 0x42	; 66
    d622:	33 e7       	ldi	r19, 0x73	; 115
    d624:	41 e0       	ldi	r20, 0x01	; 1
    d626:	50 e0       	ldi	r21, 0x00	; 0
    d628:	60 e0       	ldi	r22, 0x00	; 0
    d62a:	70 e0       	ldi	r23, 0x00	; 0
    d62c:	8f ef       	ldi	r24, 0xFF	; 255
    d62e:	0e 94 0a 7b 	call	0xf614	; 0xf614 <TIMING_AddRepCallbackEvent>

	// happy startup sound
	LCD_UpdateSOC(8);
    d632:	88 e0       	ldi	r24, 0x08	; 8
    d634:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;

	// interrupt enable
	SREG |= 1<<7;
    d638:	8f b7       	in	r24, 0x3f	; 63
    d63a:	80 68       	ori	r24, 0x80	; 128
    d63c:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d63e:	89 e0       	ldi	r24, 0x09	; 9
    d640:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/

	LCD_UpdateSOC(10);
    d644:	8a e0       	ldi	r24, 0x0A	; 10
    d646:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <LCD_UpdateSOC>

	PlaySound(11);
    d64a:	8b e0       	ldi	r24, 0x0B	; 11
    d64c:	90 e0       	ldi	r25, 0x00	; 0
    d64e:	0e 94 fc 6b 	call	0xd7f8	; 0xd7f8 <PlaySound>

	//1 POWER_EnterIdleSleepMode();

	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );
    d652:	8c e7       	ldi	r24, 0x7C	; 124
    d654:	94 e9       	ldi	r25, 0x94	; 148
    d656:	0e 94 6e 76 	call	0xecdc	; 0xecdc <PICTURE_CopyFullscreenFlashToLcd>

	// init backlight
	BACKLIGHT_Init();
    d65a:	0e 94 c0 73 	call	0xe780	; 0xe780 <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d65e:	6c e6       	ldi	r22, 0x6C	; 108
    d660:	79 e6       	ldi	r23, 0x69	; 105
    d662:	88 e0       	ldi	r24, 0x08	; 8
    d664:	90 e0       	ldi	r25, 0x00	; 0
    d666:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d66a:	90 93 1d 02 	sts	0x021D, r25
    d66e:	80 93 1c 02 	sts	0x021C, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d672:	6c e6       	ldi	r22, 0x6C	; 108
    d674:	79 e6       	ldi	r23, 0x69	; 105
    d676:	8a e0       	ldi	r24, 0x0A	; 10
    d678:	90 e0       	ldi	r25, 0x00	; 0
    d67a:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d67e:	90 93 23 02 	sts	0x0223, r25
    d682:	80 93 22 02 	sts	0x0222, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d686:	6c e6       	ldi	r22, 0x6C	; 108
    d688:	79 e6       	ldi	r23, 0x69	; 105
    d68a:	8c e0       	ldi	r24, 0x0C	; 12
    d68c:	90 e0       	ldi	r25, 0x00	; 0
    d68e:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d692:	90 93 21 02 	sts	0x0221, r25
    d696:	80 93 20 02 	sts	0x0220, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d69a:	6c e6       	ldi	r22, 0x6C	; 108
    d69c:	79 e6       	ldi	r23, 0x69	; 105
    d69e:	8e e0       	ldi	r24, 0x0E	; 14
    d6a0:	90 e0       	ldi	r25, 0x00	; 0
    d6a2:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d6a6:	90 93 1f 02 	sts	0x021F, r25
    d6aa:	80 93 1e 02 	sts	0x021E, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d6ae:	6c e6       	ldi	r22, 0x6C	; 108
    d6b0:	79 e6       	ldi	r23, 0x69	; 105
    d6b2:	80 e1       	ldi	r24, 0x10	; 16
    d6b4:	90 e0       	ldi	r25, 0x00	; 0
    d6b6:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d6ba:	90 93 1b 02 	sts	0x021B, r25
    d6be:	80 93 1a 02 	sts	0x021A, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d6c2:	40 91 1e 02 	lds	r20, 0x021E
    d6c6:	60 91 20 02 	lds	r22, 0x0220
    d6ca:	80 91 22 02 	lds	r24, 0x0222
    d6ce:	0e 94 18 74 	call	0xe830	; 0xe830 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d6d2:	80 91 1a 02 	lds	r24, 0x021A
    d6d6:	0e 94 e4 73 	call	0xe7c8	; 0xe7c8 <BACKLIGHT_SetIntensity>

	TIMING_event_t * splashScreenEvent = MEM_ALLOC( TIMING_event_t );
    d6da:	8f e0       	ldi	r24, 0x0F	; 15
    d6dc:	90 e0       	ldi	r25, 0x00	; 0
    d6de:	0e 94 6f 75 	call	0xeade	; 0xeade <MEMBLOCK_Allocate>
    d6e2:	8c 01       	movw	r16, r24
	if (splashScreenEvent == NULL) { UnknownError(); }
    d6e4:	89 2b       	or	r24, r25
    d6e6:	11 f4       	brne	.+4      	; 0xd6ec <main+0x136>
    d6e8:	0e 94 74 69 	call	0xd2e8	; 0xd2e8 <UnknownError>
	TIMING_counter_t volatile splashCounter = 0;
    d6ec:	19 82       	std	Y+1, r1	; 0x01
	TIMING_AddCounterEventAfter( RTC_TICKS_PER_SECOND * SPLASH_SCREEN_SECONDS,
    d6ee:	98 01       	movw	r18, r16
    d6f0:	ae 01       	movw	r20, r28
    d6f2:	4f 5f       	subi	r20, 0xFF	; 255
    d6f4:	5f 4f       	sbci	r21, 0xFF	; 255
    d6f6:	60 e8       	ldi	r22, 0x80	; 128
    d6f8:	71 e0       	ldi	r23, 0x01	; 1
    d6fa:	80 e0       	ldi	r24, 0x00	; 0
    d6fc:	90 e0       	ldi	r25, 0x00	; 0
    d6fe:	0e 94 61 7a 	call	0xf4c2	; 0xf4c2 <TIMING_AddCounterEventAfter>
			&splashCounter, splashScreenEvent );
	bool exit = false;
    d702:	ff 24       	eor	r15, r15
	do {
		POWER_EnterIdleSleepMode();
    d704:	0e 94 bb 73 	call	0xe776	; 0xe776 <POWER_EnterIdleSleepMode>
		if (JOYSTICK_GetState() != 0x00) { exit = true; };
    d708:	0e 94 3e 73 	call	0xe67c	; 0xe67c <JOYSTICK_GetState>
    d70c:	88 23       	and	r24, r24
    d70e:	11 f0       	breq	.+4      	; 0xd714 <main+0x15e>
    d710:	51 e0       	ldi	r21, 0x01	; 1
    d712:	f5 2e       	mov	r15, r21
		if (splashCounter != 0) { exit = true; }
    d714:	89 81       	ldd	r24, Y+1	; 0x01
    d716:	88 23       	and	r24, r24
    d718:	11 f4       	brne	.+4      	; 0xd71e <main+0x168>
	} while (exit == false);
    d71a:	ff 20       	and	r15, r15
    d71c:	99 f3       	breq	.-26     	; 0xd704 <main+0x14e>


	TIMING_RemoveEvent( splashScreenEvent );
    d71e:	c8 01       	movw	r24, r16
    d720:	0e 94 dd 79 	call	0xf3ba	; 0xf3ba <TIMING_RemoveEvent>
	MEM_FREE( splashScreenEvent );
    d724:	c8 01       	movw	r24, r16
    d726:	0e 94 17 76 	call	0xec2e	; 0xec2e <MEMBLOCK_Free>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d72a:	8d ec       	ldi	r24, 0xCD	; 205
    d72c:	97 e0       	ldi	r25, 0x07	; 7
    d72e:	a7 e0       	ldi	r26, 0x07	; 7
    d730:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d732:	01 97       	sbiw	r24, 0x01	; 1
    d734:	a1 09       	sbc	r26, r1
    d736:	b1 09       	sbc	r27, r1
    d738:	00 00       	nop
    d73a:	01 f0       	breq	.+0      	; 0xd73c <main+0x186>
    d73c:	d1 f7       	brne	.-12     	; 0xd732 <main+0x17c>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d73e:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d740:	00 00       	nop

	DELAY_MS(500);

	LCD_ClrBox(0,0,128,64);
    d742:	20 e4       	ldi	r18, 0x40	; 64
    d744:	40 e8       	ldi	r20, 0x80	; 128
    d746:	60 e0       	ldi	r22, 0x00	; 0
    d748:	86 2f       	mov	r24, r22
    d74a:	0e 94 38 6f 	call	0xde70	; 0xde70 <LCD_ClrBox>
//	LcdContrast();
//}

	while (1)
 	{
		if (urx_recv) 
    d74e:	80 91 6c 02 	lds	r24, 0x026C
    d752:	88 23       	and	r24, r24
    d754:	e1 f3       	breq	.-8      	; 0xd74e <main+0x198>
		{	
			cli();
    d756:	f8 94       	cli
            urx_recv = 0;
    d758:	10 92 6c 02 	sts	0x026C, r1
            ch = urx;
    d75c:	80 91 6b 02 	lds	r24, 0x026B
            sei();
    d760:	78 94       	sei
            /* build a command line and execute commands when complete */
            recv_input(ch);
    d762:	0e 94 fe 69 	call	0xd3fc	; 0xd3fc <recv_input>
    d766:	f3 cf       	rjmp	.-26     	; 0xd74e <main+0x198>

0000d768 <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d768:	6a e0       	ldi	r22, 0x0A	; 10
    d76a:	78 e1       	ldi	r23, 0x18	; 24
    d76c:	84 e0       	ldi	r24, 0x04	; 4
    d76e:	90 e0       	ldi	r25, 0x00	; 0
    d770:	0e 94 23 75 	call	0xea46	; 0xea46 <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d774:	21 e0       	ldi	r18, 0x01	; 1
    d776:	33 e0       	ldi	r19, 0x03	; 3
    d778:	40 e1       	ldi	r20, 0x10	; 16
    d77a:	50 e0       	ldi	r21, 0x00	; 0
    d77c:	ba 01       	movw	r22, r20
    d77e:	80 e0       	ldi	r24, 0x00	; 0
    d780:	90 e0       	ldi	r25, 0x00	; 0
    d782:	0e 94 2c 75 	call	0xea58	; 0xea58 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d786:	23 e0       	ldi	r18, 0x03	; 3
    d788:	34 e0       	ldi	r19, 0x04	; 4
    d78a:	40 e2       	ldi	r20, 0x20	; 32
    d78c:	50 e0       	ldi	r21, 0x00	; 0
    d78e:	ba 01       	movw	r22, r20
    d790:	81 e0       	ldi	r24, 0x01	; 1
    d792:	90 e0       	ldi	r25, 0x00	; 0
    d794:	0e 94 2c 75 	call	0xea58	; 0xea58 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d798:	27 e0       	ldi	r18, 0x07	; 7
    d79a:	38 e0       	ldi	r19, 0x08	; 8
    d79c:	40 e1       	ldi	r20, 0x10	; 16
    d79e:	50 e0       	ldi	r21, 0x00	; 0
    d7a0:	60 e4       	ldi	r22, 0x40	; 64
    d7a2:	70 e0       	ldi	r23, 0x00	; 0
    d7a4:	82 e0       	ldi	r24, 0x02	; 2
    d7a6:	90 e0       	ldi	r25, 0x00	; 0
    d7a8:	0e 94 2c 75 	call	0xea58	; 0xea58 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d7ac:	29 e0       	ldi	r18, 0x09	; 9
    d7ae:	3c e0       	ldi	r19, 0x0C	; 12
    d7b0:	43 e0       	ldi	r20, 0x03	; 3
    d7b2:	50 e0       	ldi	r21, 0x00	; 0
    d7b4:	60 e0       	ldi	r22, 0x00	; 0
    d7b6:	74 e0       	ldi	r23, 0x04	; 4
    d7b8:	ca 01       	movw	r24, r20
    d7ba:	0e 94 2c 75 	call	0xea58	; 0xea58 <MEMBLOCK_InitBag>
    d7be:	08 95       	ret

0000d7c0 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d7c0:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d7c2:	e8 2f       	mov	r30, r24
    d7c4:	ff 27       	eor	r31, r31
    d7c6:	ee 0f       	add	r30, r30
    d7c8:	ff 1f       	adc	r31, r31
    d7ca:	e4 58       	subi	r30, 0x84	; 132
    d7cc:	f8 43       	sbci	r31, 0x38	; 56
    d7ce:	85 91       	lpm	r24, Z+
    d7d0:	94 91       	lpm	r25, Z+
    d7d2:	bc 01       	movw	r22, r24
    d7d4:	c9 01       	movw	r24, r18
    d7d6:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d7da:	8d ec       	ldi	r24, 0xCD	; 205
    d7dc:	97 e0       	ldi	r25, 0x07	; 7
    d7de:	a7 e0       	ldi	r26, 0x07	; 7
    d7e0:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d7e2:	01 97       	sbiw	r24, 0x01	; 1
    d7e4:	a1 09       	sbc	r26, r1
    d7e6:	b1 09       	sbc	r27, r1
    d7e8:	00 00       	nop
    d7ea:	01 f0       	breq	.+0      	; 0xd7ec <SONG_PlayTune+0x2c>
    d7ec:	d1 f7       	brne	.-12     	; 0xd7e2 <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d7ee:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d7f0:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d7f2:	0e 94 44 7c 	call	0xf888	; 0xf888 <SONG_StopTune>
    d7f6:	08 95       	ret

0000d7f8 <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d7f8:	cf 92       	push	r12
    d7fa:	df 92       	push	r13
    d7fc:	ef 92       	push	r14
    d7fe:	ff 92       	push	r15
    d800:	0f 93       	push	r16
    d802:	1f 93       	push	r17
    d804:	cf 93       	push	r28
    d806:	df 93       	push	r29
    d808:	cd b7       	in	r28, 0x3d	; 61
    d80a:	de b7       	in	r29, 0x3e	; 62
    d80c:	2e 97       	sbiw	r28, 0x0e	; 14
    d80e:	0f b6       	in	r0, 0x3f	; 63
    d810:	f8 94       	cli
    d812:	de bf       	out	0x3e, r29	; 62
    d814:	0f be       	out	0x3f, r0	; 63
    d816:	cd bf       	out	0x3d, r28	; 61
    d818:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d81a:	88 e2       	ldi	r24, 0x28	; 40
    d81c:	90 e0       	ldi	r25, 0x00	; 0
    d81e:	0e 94 6f 75 	call	0xeade	; 0xeade <MEMBLOCK_Allocate>
    d822:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d824:	80 e3       	ldi	r24, 0x30	; 48
    d826:	90 e0       	ldi	r25, 0x00	; 0
    d828:	0e 94 6f 75 	call	0xeade	; 0xeade <MEMBLOCK_Allocate>
    d82c:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d82e:	48 e2       	ldi	r20, 0x28	; 40
    d830:	b7 01       	movw	r22, r14
    d832:	ce 01       	movw	r24, r28
    d834:	01 96       	adiw	r24, 0x01	; 1
    d836:	0e 94 be 74 	call	0xe97c	; 0xe97c <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d83a:	be 01       	movw	r22, r28
    d83c:	6f 5f       	subi	r22, 0xFF	; 255
    d83e:	7f 4f       	sbci	r23, 0xFF	; 255
    d840:	80 2f       	mov	r24, r16
    d842:	0e 94 e0 6b 	call	0xd7c0	; 0xd7c0 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d846:	c7 01       	movw	r24, r14
    d848:	0e 94 17 76 	call	0xec2e	; 0xec2e <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d84c:	c6 01       	movw	r24, r12
    d84e:	0e 94 17 76 	call	0xec2e	; 0xec2e <MEMBLOCK_Free>
    d852:	2e 96       	adiw	r28, 0x0e	; 14
    d854:	0f b6       	in	r0, 0x3f	; 63
    d856:	f8 94       	cli
    d858:	de bf       	out	0x3e, r29	; 62
    d85a:	0f be       	out	0x3f, r0	; 63
    d85c:	cd bf       	out	0x3d, r28	; 61
    d85e:	df 91       	pop	r29
    d860:	cf 91       	pop	r28
    d862:	1f 91       	pop	r17
    d864:	0f 91       	pop	r16
    d866:	ff 90       	pop	r15
    d868:	ef 90       	pop	r14
    d86a:	df 90       	pop	r13
    d86c:	cf 90       	pop	r12
    d86e:	08 95       	ret

0000d870 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d870:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d872:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d874:	85 ef       	ldi	r24, 0xF5	; 245
    d876:	97 e6       	ldi	r25, 0x67	; 103
    d878:	a1 e0       	ldi	r26, 0x01	; 1
    d87a:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d87c:	01 97       	sbiw	r24, 0x01	; 1
    d87e:	a1 09       	sbc	r26, r1
    d880:	b1 09       	sbc	r27, r1
    d882:	00 00       	nop
    d884:	01 f0       	breq	.+0      	; 0xd886 <S6B1713_HardReset+0x16>
    d886:	d1 f7       	brne	.-12     	; 0xd87c <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d888:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d88a:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d88c:	41 9a       	sbi	0x08, 1	; 8
    d88e:	08 95       	ret

0000d890 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d890:	0e 94 38 6c 	call	0xd870	; 0xd870 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d894:	87 e8       	ldi	r24, 0x87	; 135
    d896:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d89a:	80 e8       	ldi	r24, 0x80	; 128
    d89c:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d8a0:	38 9a       	sbi	0x07, 0	; 7
    d8a2:	08 95       	ret

0000d8a4 <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d8a4:	40 98       	cbi	0x08, 0	; 8
    d8a6:	8f ea       	ldi	r24, 0xAF	; 175
    d8a8:	80 93 00 80 	sts	0x8000, r24
    d8ac:	08 95       	ret

0000d8ae <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d8ae:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d8b0:	40 98       	cbi	0x08, 0	; 8
    d8b2:	80 64       	ori	r24, 0x40	; 64
    d8b4:	80 93 00 80 	sts	0x8000, r24
    d8b8:	08 95       	ret

0000d8ba <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d8ba:	98 2f       	mov	r25, r24
    d8bc:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d8be:	40 98       	cbi	0x08, 0	; 8
    d8c0:	81 e8       	ldi	r24, 0x81	; 129
    d8c2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d8c6:	40 98       	cbi	0x08, 0	; 8
    d8c8:	90 93 00 80 	sts	0x8000, r25
    d8cc:	08 95       	ret

0000d8ce <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d8ce:	40 98       	cbi	0x08, 0	; 8
    d8d0:	80 ea       	ldi	r24, 0xA0	; 160
    d8d2:	80 93 00 80 	sts	0x8000, r24
    d8d6:	08 95       	ret

0000d8d8 <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d8d8:	40 98       	cbi	0x08, 0	; 8
    d8da:	83 ea       	ldi	r24, 0xA3	; 163
    d8dc:	80 93 00 80 	sts	0x8000, r24
    d8e0:	08 95       	ret

0000d8e2 <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d8e2:	40 98       	cbi	0x08, 0	; 8
    d8e4:	80 ec       	ldi	r24, 0xC0	; 192
    d8e6:	80 93 00 80 	sts	0x8000, r24
    d8ea:	08 95       	ret

0000d8ec <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d8ec:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d8ee:	40 98       	cbi	0x08, 0	; 8
    d8f0:	88 62       	ori	r24, 0x28	; 40
    d8f2:	80 93 00 80 	sts	0x8000, r24
    d8f6:	08 95       	ret

0000d8f8 <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d8f8:	40 98       	cbi	0x08, 0	; 8
    d8fa:	87 70       	andi	r24, 0x07	; 7
    d8fc:	80 62       	ori	r24, 0x20	; 32
    d8fe:	80 93 00 80 	sts	0x8000, r24
    d902:	08 95       	ret

0000d904 <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d904:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d906:	90 e0       	ldi	r25, 0x00	; 0
    d908:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d90a:	89 2f       	mov	r24, r25
    d90c:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d90e:	40 98       	cbi	0x08, 0	; 8
    d910:	80 6b       	ori	r24, 0xB0	; 176
    d912:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d916:	40 98       	cbi	0x08, 0	; 8
    d918:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d91c:	40 98       	cbi	0x08, 0	; 8
    d91e:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d922:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d924:	40 9a       	sbi	0x08, 0	; 8
    d926:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d92a:	81 50       	subi	r24, 0x01	; 1
    d92c:	d9 f7       	brne	.-10     	; 0xd924 <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d92e:	9f 5f       	subi	r25, 0xFF	; 255
    d930:	98 30       	cpi	r25, 0x08	; 8
    d932:	58 f3       	brcs	.-42     	; 0xd90a <LCD_SetScreen+0x6>
    d934:	08 95       	ret

0000d936 <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d936:	1f 93       	push	r17
    d938:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    d93a:	87 70       	andi	r24, 0x07	; 7
    d93c:	88 0f       	add	r24, r24
    d93e:	88 0f       	add	r24, r24
    d940:	88 0f       	add	r24, r24
    d942:	86 0f       	add	r24, r22
    d944:	0e 94 57 6c 	call	0xd8ae	; 0xd8ae <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    d948:	10 93 35 02 	sts	0x0235, r17
    d94c:	1f 91       	pop	r17
    d94e:	08 95       	ret

0000d950 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    d950:	ef 92       	push	r14
    d952:	ff 92       	push	r15
    d954:	0f 93       	push	r16
    d956:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    d958:	0e 94 48 6c 	call	0xd890	; 0xd890 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    d95c:	84 e0       	ldi	r24, 0x04	; 4
    d95e:	0e 94 76 6c 	call	0xd8ec	; 0xd8ec <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    d962:	85 e6       	ldi	r24, 0x65	; 101
    d964:	e8 2e       	mov	r14, r24
    d966:	8e e0       	ldi	r24, 0x0E	; 14
    d968:	f8 2e       	mov	r15, r24
    d96a:	01 2d       	mov	r16, r1
    d96c:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d96e:	c7 01       	movw	r24, r14
    d970:	01 97       	sbiw	r24, 0x01	; 1
    d972:	f1 f7       	brne	.-4      	; 0xd970 <LCD_Init+0x20>
    d974:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d976:	00 c0       	rjmp	.+0      	; 0xd978 <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    d978:	86 e0       	ldi	r24, 0x06	; 6
    d97a:	0e 94 76 6c 	call	0xd8ec	; 0xd8ec <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d97e:	c7 01       	movw	r24, r14
    d980:	01 97       	sbiw	r24, 0x01	; 1
    d982:	f1 f7       	brne	.-4      	; 0xd980 <LCD_Init+0x30>
    d984:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d986:	00 c0       	rjmp	.+0      	; 0xd988 <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    d988:	87 e0       	ldi	r24, 0x07	; 7
    d98a:	0e 94 76 6c 	call	0xd8ec	; 0xd8ec <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    d98e:	86 e0       	ldi	r24, 0x06	; 6
    d990:	90 e0       	ldi	r25, 0x00	; 0
    d992:	0e 94 7c 6c 	call	0xd8f8	; 0xd8f8 <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    d996:	84 e0       	ldi	r24, 0x04	; 4
    d998:	0e 94 5d 6c 	call	0xd8ba	; 0xd8ba <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d99c:	c7 01       	movw	r24, r14
    d99e:	01 97       	sbiw	r24, 0x01	; 1
    d9a0:	f1 f7       	brne	.-4      	; 0xd99e <LCD_Init+0x4e>
    d9a2:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d9a4:	00 c0       	rjmp	.+0      	; 0xd9a6 <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    d9a6:	0e 94 6c 6c 	call	0xd8d8	; 0xd8d8 <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    d9aa:	0e 94 67 6c 	call	0xd8ce	; 0xd8ce <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    d9ae:	0e 94 71 6c 	call	0xd8e2	; 0xd8e2 <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    d9b2:	60 e0       	ldi	r22, 0x00	; 0
    d9b4:	86 2f       	mov	r24, r22
    d9b6:	0e 94 9b 6c 	call	0xd936	; 0xd936 <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    d9ba:	80 e0       	ldi	r24, 0x00	; 0
    d9bc:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    d9c0:	0e 94 52 6c 	call	0xd8a4	; 0xd8a4 <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    d9c4:	85 e5       	ldi	r24, 0x55	; 85
    d9c6:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    d9ca:	80 e0       	ldi	r24, 0x00	; 0
    d9cc:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_SetScreen>
    d9d0:	1f 91       	pop	r17
    d9d2:	0f 91       	pop	r16
    d9d4:	ff 90       	pop	r15
    d9d6:	ef 90       	pop	r14
    d9d8:	08 95       	ret

0000d9da <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    d9da:	cf 93       	push	r28
    d9dc:	df 93       	push	r29
    d9de:	cd b7       	in	r28, 0x3d	; 61
    d9e0:	de b7       	in	r29, 0x3e	; 62
    d9e2:	21 97       	sbiw	r28, 0x01	; 1
    d9e4:	0f b6       	in	r0, 0x3f	; 63
    d9e6:	f8 94       	cli
    d9e8:	de bf       	out	0x3e, r29	; 62
    d9ea:	0f be       	out	0x3f, r0	; 63
    d9ec:	cd bf       	out	0x3d, r28	; 61
    d9ee:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d9f0:	40 98       	cbi	0x08, 0	; 8
    d9f2:	80 ee       	ldi	r24, 0xE0	; 224
    d9f4:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d9f8:	86 2f       	mov	r24, r22
    d9fa:	86 95       	lsr	r24
    d9fc:	86 95       	lsr	r24
    d9fe:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da00:	40 98       	cbi	0x08, 0	; 8
    da02:	80 6b       	ori	r24, 0xB0	; 176
    da04:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da08:	82 2f       	mov	r24, r18
    da0a:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da0c:	40 98       	cbi	0x08, 0	; 8
    da0e:	99 27       	eor	r25, r25
    da10:	44 e0       	ldi	r20, 0x04	; 4
    da12:	96 95       	lsr	r25
    da14:	87 95       	ror	r24
    da16:	4a 95       	dec	r20
    da18:	e1 f7       	brne	.-8      	; 0xda12 <LCD_SetPixel+0x38>
    da1a:	80 61       	ori	r24, 0x10	; 16
    da1c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    da20:	40 98       	cbi	0x08, 0	; 8
    da22:	2f 70       	andi	r18, 0x0F	; 15
    da24:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    da28:	40 9a       	sbi	0x08, 0	; 8
    da2a:	80 91 00 81 	lds	r24, 0x8100
    da2e:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    da30:	40 9a       	sbi	0x08, 0	; 8
    da32:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    da36:	40 9a       	sbi	0x08, 0	; 8
    da38:	26 2f       	mov	r18, r22
    da3a:	33 27       	eor	r19, r19
    da3c:	27 70       	andi	r18, 0x07	; 7
    da3e:	30 70       	andi	r19, 0x00	; 0
    da40:	81 e0       	ldi	r24, 0x01	; 1
    da42:	90 e0       	ldi	r25, 0x00	; 0
    da44:	02 c0       	rjmp	.+4      	; 0xda4a <LCD_SetPixel+0x70>
    da46:	88 0f       	add	r24, r24
    da48:	99 1f       	adc	r25, r25
    da4a:	2a 95       	dec	r18
    da4c:	e2 f7       	brpl	.-8      	; 0xda46 <LCD_SetPixel+0x6c>
    da4e:	48 2b       	or	r20, r24
    da50:	40 93 00 81 	sts	0x8100, r20
    da54:	21 96       	adiw	r28, 0x01	; 1
    da56:	0f b6       	in	r0, 0x3f	; 63
    da58:	f8 94       	cli
    da5a:	de bf       	out	0x3e, r29	; 62
    da5c:	0f be       	out	0x3f, r0	; 63
    da5e:	cd bf       	out	0x3d, r28	; 61
    da60:	df 91       	pop	r29
    da62:	cf 91       	pop	r28
    da64:	08 95       	ret

0000da66 <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    da66:	cf 93       	push	r28
    da68:	df 93       	push	r29
    da6a:	cd b7       	in	r28, 0x3d	; 61
    da6c:	de b7       	in	r29, 0x3e	; 62
    da6e:	21 97       	sbiw	r28, 0x01	; 1
    da70:	0f b6       	in	r0, 0x3f	; 63
    da72:	f8 94       	cli
    da74:	de bf       	out	0x3e, r29	; 62
    da76:	0f be       	out	0x3f, r0	; 63
    da78:	cd bf       	out	0x3d, r28	; 61
    da7a:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    da7c:	40 98       	cbi	0x08, 0	; 8
    da7e:	80 ee       	ldi	r24, 0xE0	; 224
    da80:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    da84:	86 2f       	mov	r24, r22
    da86:	86 95       	lsr	r24
    da88:	86 95       	lsr	r24
    da8a:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da8c:	40 98       	cbi	0x08, 0	; 8
    da8e:	80 6b       	ori	r24, 0xB0	; 176
    da90:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da94:	82 2f       	mov	r24, r18
    da96:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da98:	40 98       	cbi	0x08, 0	; 8
    da9a:	99 27       	eor	r25, r25
    da9c:	54 e0       	ldi	r21, 0x04	; 4
    da9e:	96 95       	lsr	r25
    daa0:	87 95       	ror	r24
    daa2:	5a 95       	dec	r21
    daa4:	e1 f7       	brne	.-8      	; 0xda9e <LCD_ClrPixel+0x38>
    daa6:	80 61       	ori	r24, 0x10	; 16
    daa8:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    daac:	40 98       	cbi	0x08, 0	; 8
    daae:	2f 70       	andi	r18, 0x0F	; 15
    dab0:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    dab4:	40 9a       	sbi	0x08, 0	; 8
    dab6:	80 91 00 81 	lds	r24, 0x8100
    daba:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    dabc:	40 9a       	sbi	0x08, 0	; 8
    dabe:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    dac2:	40 9a       	sbi	0x08, 0	; 8
    dac4:	26 2f       	mov	r18, r22
    dac6:	33 27       	eor	r19, r19
    dac8:	27 70       	andi	r18, 0x07	; 7
    daca:	30 70       	andi	r19, 0x00	; 0
    dacc:	81 e0       	ldi	r24, 0x01	; 1
    dace:	90 e0       	ldi	r25, 0x00	; 0
    dad0:	02 c0       	rjmp	.+4      	; 0xdad6 <LCD_ClrPixel+0x70>
    dad2:	88 0f       	add	r24, r24
    dad4:	99 1f       	adc	r25, r25
    dad6:	2a 95       	dec	r18
    dad8:	e2 f7       	brpl	.-8      	; 0xdad2 <LCD_ClrPixel+0x6c>
    dada:	80 95       	com	r24
    dadc:	48 23       	and	r20, r24
    dade:	40 93 00 81 	sts	0x8100, r20
    dae2:	21 96       	adiw	r28, 0x01	; 1
    dae4:	0f b6       	in	r0, 0x3f	; 63
    dae6:	f8 94       	cli
    dae8:	de bf       	out	0x3e, r29	; 62
    daea:	0f be       	out	0x3f, r0	; 63
    daec:	cd bf       	out	0x3d, r28	; 61
    daee:	df 91       	pop	r29
    daf0:	cf 91       	pop	r28
    daf2:	08 95       	ret

0000daf4 <LCD_SetHLine>:
	return readback;
}


void LCD_SetHLine( uint8_t x1, uint8_t x2, uint8_t y )
{
    daf4:	cf 93       	push	r28
    daf6:	df 93       	push	r29
    daf8:	cd b7       	in	r28, 0x3d	; 61
    dafa:	de b7       	in	r29, 0x3e	; 62
    dafc:	21 97       	sbiw	r28, 0x01	; 1
    dafe:	0f b6       	in	r0, 0x3f	; 63
    db00:	f8 94       	cli
    db02:	de bf       	out	0x3e, r29	; 62
    db04:	0f be       	out	0x3f, r0	; 63
    db06:	cd bf       	out	0x3d, r28	; 61
    db08:	58 2f       	mov	r21, r24
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    db0a:	68 17       	cp	r22, r24
    db0c:	10 f4       	brcc	.+4      	; 0xdb12 <LCD_SetHLine+0x1e>
		uint8_t temp = x1;
		x1 = x2;
    db0e:	56 2f       	mov	r21, r22
		x2 = temp;
    db10:	68 2f       	mov	r22, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    db12:	40 98       	cbi	0x08, 0	; 8
    db14:	80 ee       	ldi	r24, 0xE0	; 224
    db16:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    db1a:	84 2f       	mov	r24, r20
    db1c:	86 95       	lsr	r24
    db1e:	86 95       	lsr	r24
    db20:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    db22:	40 98       	cbi	0x08, 0	; 8
    db24:	80 6b       	ori	r24, 0xB0	; 176
    db26:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    db2a:	85 2f       	mov	r24, r21
    db2c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    db2e:	40 98       	cbi	0x08, 0	; 8
    db30:	99 27       	eor	r25, r25
    db32:	e4 e0       	ldi	r30, 0x04	; 4
    db34:	96 95       	lsr	r25
    db36:	87 95       	ror	r24
    db38:	ea 95       	dec	r30
    db3a:	e1 f7       	brne	.-8      	; 0xdb34 <LCD_SetHLine+0x40>
    db3c:	80 61       	ori	r24, 0x10	; 16
    db3e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    db42:	40 98       	cbi	0x08, 0	; 8
    db44:	85 2f       	mov	r24, r21
    db46:	8f 70       	andi	r24, 0x0F	; 15
    db48:	80 93 00 80 	sts	0x8000, r24
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x1 );

	// Read 8-pixel high columns, modify correct pixel and write back.
	uint8_t width = x2 - x1 + 1;
    db4c:	65 1b       	sub	r22, r21
    db4e:	6f 5f       	subi	r22, 0xFF	; 255
	uint8_t pixelMask = 1 << (y & 0x07);
    db50:	24 2f       	mov	r18, r20
    db52:	33 27       	eor	r19, r19
    db54:	27 70       	andi	r18, 0x07	; 7
    db56:	30 70       	andi	r19, 0x00	; 0
    db58:	81 e0       	ldi	r24, 0x01	; 1
    db5a:	90 e0       	ldi	r25, 0x00	; 0
    db5c:	02 c0       	rjmp	.+4      	; 0xdb62 <LCD_SetHLine+0x6e>
    db5e:	88 0f       	add	r24, r24
    db60:	99 1f       	adc	r25, r25
    db62:	2a 95       	dec	r18
    db64:	e2 f7       	brpl	.-8      	; 0xdb5e <LCD_SetHLine+0x6a>
    db66:	98 2f       	mov	r25, r24
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    db68:	40 9a       	sbi	0x08, 0	; 8
    db6a:	80 91 00 81 	lds	r24, 0x8100
    db6e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixel and write back.
	    uint8_t readback = S6B1713_ReadData(); 
    db70:	40 9a       	sbi	0x08, 0	; 8
    db72:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | pixelMask );
    db76:	40 9a       	sbi	0x08, 0	; 8
    db78:	89 2b       	or	r24, r25
    db7a:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    db7e:	61 50       	subi	r22, 0x01	; 1
    db80:	99 f7       	brne	.-26     	; 0xdb68 <LCD_SetHLine+0x74>
    db82:	21 96       	adiw	r28, 0x01	; 1
    db84:	0f b6       	in	r0, 0x3f	; 63
    db86:	f8 94       	cli
    db88:	de bf       	out	0x3e, r29	; 62
    db8a:	0f be       	out	0x3f, r0	; 63
    db8c:	cd bf       	out	0x3d, r28	; 61
    db8e:	df 91       	pop	r29
    db90:	cf 91       	pop	r28
    db92:	08 95       	ret

0000db94 <LCD_SetVLine>:
	} while (--width > 0);
}


void LCD_SetVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    db94:	cf 93       	push	r28
    db96:	df 93       	push	r29
    db98:	cd b7       	in	r28, 0x3d	; 61
    db9a:	de b7       	in	r29, 0x3e	; 62
    db9c:	21 97       	sbiw	r28, 0x01	; 1
    db9e:	0f b6       	in	r0, 0x3f	; 63
    dba0:	f8 94       	cli
    dba2:	de bf       	out	0x3e, r29	; 62
    dba4:	0f be       	out	0x3f, r0	; 63
    dba6:	cd bf       	out	0x3d, r28	; 61
    dba8:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dbaa:	46 17       	cp	r20, r22
    dbac:	18 f4       	brcc	.+6      	; 0xdbb4 <LCD_SetVLine+0x20>
		uint8_t temp = y1;
    dbae:	86 2f       	mov	r24, r22
		y1 = y2;
    dbb0:	64 2f       	mov	r22, r20
		y2 = temp;
    dbb2:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    dbb4:	76 2f       	mov	r23, r22
    dbb6:	76 95       	lsr	r23
    dbb8:	76 95       	lsr	r23
    dbba:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    dbbc:	54 2f       	mov	r21, r20
    dbbe:	56 95       	lsr	r21
    dbc0:	56 95       	lsr	r21
    dbc2:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    dbc4:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    dbc6:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = 0xff << y1Bit;
    dbc8:	8f ef       	ldi	r24, 0xFF	; 255
    dbca:	90 e0       	ldi	r25, 0x00	; 0
    dbcc:	28 2f       	mov	r18, r24
    dbce:	01 c0       	rjmp	.+2      	; 0xdbd2 <LCD_SetVLine+0x3e>
    dbd0:	22 0f       	add	r18, r18
    dbd2:	6a 95       	dec	r22
    dbd4:	ea f7       	brpl	.-6      	; 0xdbd0 <LCD_SetVLine+0x3c>
    dbd6:	62 2f       	mov	r22, r18
	uint8_t y2PixelMask = 0xff >> (7 - y2Bit);
    dbd8:	27 e0       	ldi	r18, 0x07	; 7
    dbda:	30 e0       	ldi	r19, 0x00	; 0
    dbdc:	24 1b       	sub	r18, r20
    dbde:	31 09       	sbc	r19, r1
    dbe0:	02 c0       	rjmp	.+4      	; 0xdbe6 <LCD_SetVLine+0x52>
    dbe2:	95 95       	asr	r25
    dbe4:	87 95       	ror	r24
    dbe6:	2a 95       	dec	r18
    dbe8:	e2 f7       	brpl	.-8      	; 0xdbe2 <LCD_SetVLine+0x4e>
    dbea:	f8 2f       	mov	r31, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dbec:	40 98       	cbi	0x08, 0	; 8
    dbee:	80 ee       	ldi	r24, 0xE0	; 224
    dbf0:	80 93 00 80 	sts	0x8000, r24
    dbf4:	9e 2f       	mov	r25, r30
    dbf6:	9f 77       	andi	r25, 0x7F	; 127
    dbf8:	4e 2f       	mov	r20, r30
    dbfa:	4f 70       	andi	r20, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dbfc:	75 17       	cp	r23, r21
    dbfe:	e9 f4       	brne	.+58     	; 0xdc3a <LCD_SetVLine+0xa6>
		uint8_t pixelMask = y1PixelMask & y2PixelMask;
    dc00:	6f 23       	and	r22, r31

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc02:	40 98       	cbi	0x08, 0	; 8
    dc04:	50 6b       	ori	r21, 0xB0	; 176
    dc06:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc0a:	40 98       	cbi	0x08, 0	; 8
    dc0c:	89 2f       	mov	r24, r25
    dc0e:	99 27       	eor	r25, r25
    dc10:	54 e0       	ldi	r21, 0x04	; 4
    dc12:	96 95       	lsr	r25
    dc14:	87 95       	ror	r24
    dc16:	5a 95       	dec	r21
    dc18:	e1 f7       	brne	.-8      	; 0xdc12 <LCD_SetVLine+0x7e>
    dc1a:	80 61       	ori	r24, 0x10	; 16
    dc1c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc20:	40 98       	cbi	0x08, 0	; 8
    dc22:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dc26:	40 9a       	sbi	0x08, 0	; 8
    dc28:	80 91 00 81 	lds	r24, 0x8100
    dc2c:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dc2e:	40 9a       	sbi	0x08, 0	; 8
    dc30:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | pixelMask );
    dc34:	40 9a       	sbi	0x08, 0	; 8
    dc36:	86 2b       	or	r24, r22
    dc38:	5a c0       	rjmp	.+180    	; 0xdcee <LCD_SetVLine+0x15a>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    dc3a:	25 2f       	mov	r18, r21
    dc3c:	27 1b       	sub	r18, r23
    dc3e:	21 50       	subi	r18, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc40:	40 98       	cbi	0x08, 0	; 8
    dc42:	87 2f       	mov	r24, r23
    dc44:	80 6b       	ori	r24, 0xB0	; 176
    dc46:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc4a:	40 98       	cbi	0x08, 0	; 8
    dc4c:	89 2f       	mov	r24, r25
    dc4e:	99 27       	eor	r25, r25
    dc50:	34 e0       	ldi	r19, 0x04	; 4
    dc52:	96 95       	lsr	r25
    dc54:	87 95       	ror	r24
    dc56:	3a 95       	dec	r19
    dc58:	e1 f7       	brne	.-8      	; 0xdc52 <LCD_SetVLine+0xbe>
    dc5a:	98 2f       	mov	r25, r24
    dc5c:	90 61       	ori	r25, 0x10	; 16
    dc5e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc62:	40 98       	cbi	0x08, 0	; 8
    dc64:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dc68:	40 9a       	sbi	0x08, 0	; 8
    dc6a:	80 91 00 81 	lds	r24, 0x8100
    dc6e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dc70:	40 9a       	sbi	0x08, 0	; 8
    dc72:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | y1PixelMask );
    dc76:	40 9a       	sbi	0x08, 0	; 8
    dc78:	86 2b       	or	r24, r22
    dc7a:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    dc7e:	37 2f       	mov	r19, r23
    dc80:	3f 5f       	subi	r19, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Set all pixels.
			S6B1713_WriteData( 0xff );
    dc82:	82 2f       	mov	r24, r18
    dc84:	21 50       	subi	r18, 0x01	; 1
    dc86:	18 16       	cp	r1, r24
    dc88:	ac f4       	brge	.+42     	; 0xdcb4 <LCD_SetVLine+0x120>
    dc8a:	6f ef       	ldi	r22, 0xFF	; 255
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dc8c:	83 2f       	mov	r24, r19
    dc8e:	3f 5f       	subi	r19, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dc90:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc92:	40 98       	cbi	0x08, 0	; 8
    dc94:	80 6b       	ori	r24, 0xB0	; 176
    dc96:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc9a:	40 98       	cbi	0x08, 0	; 8
    dc9c:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dca0:	40 98       	cbi	0x08, 0	; 8
    dca2:	40 93 00 80 	sts	0x8000, r20
    dca6:	40 9a       	sbi	0x08, 0	; 8
    dca8:	60 93 00 81 	sts	0x8100, r22
    dcac:	82 2f       	mov	r24, r18
    dcae:	21 50       	subi	r18, 0x01	; 1
    dcb0:	18 16       	cp	r1, r24
    dcb2:	64 f3       	brlt	.-40     	; 0xdc8c <LCD_SetVLine+0xf8>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dcb4:	40 98       	cbi	0x08, 0	; 8
    dcb6:	50 6b       	ori	r21, 0xB0	; 176
    dcb8:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dcbc:	8e 2f       	mov	r24, r30
    dcbe:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dcc0:	40 98       	cbi	0x08, 0	; 8
    dcc2:	99 27       	eor	r25, r25
    dcc4:	b4 e0       	ldi	r27, 0x04	; 4
    dcc6:	96 95       	lsr	r25
    dcc8:	87 95       	ror	r24
    dcca:	ba 95       	dec	r27
    dccc:	e1 f7       	brne	.-8      	; 0xdcc6 <LCD_SetVLine+0x132>
    dcce:	80 61       	ori	r24, 0x10	; 16
    dcd0:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dcd4:	40 98       	cbi	0x08, 0	; 8
    dcd6:	ef 70       	andi	r30, 0x0F	; 15
    dcd8:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    dcdc:	40 9a       	sbi	0x08, 0	; 8
    dcde:	80 91 00 81 	lds	r24, 0x8100
    dce2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    dce4:	40 9a       	sbi	0x08, 0	; 8
    dce6:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | y2PixelMask );
    dcea:	40 9a       	sbi	0x08, 0	; 8
    dcec:	8f 2b       	or	r24, r31
    dcee:	80 93 00 81 	sts	0x8100, r24
    dcf2:	21 96       	adiw	r28, 0x01	; 1
    dcf4:	0f b6       	in	r0, 0x3f	; 63
    dcf6:	f8 94       	cli
    dcf8:	de bf       	out	0x3e, r29	; 62
    dcfa:	0f be       	out	0x3f, r0	; 63
    dcfc:	cd bf       	out	0x3d, r28	; 61
    dcfe:	df 91       	pop	r29
    dd00:	cf 91       	pop	r28
    dd02:	08 95       	ret

0000dd04 <LCD_ClrVLine>:
	}
}


void LCD_ClrVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    dd04:	cf 93       	push	r28
    dd06:	df 93       	push	r29
    dd08:	cd b7       	in	r28, 0x3d	; 61
    dd0a:	de b7       	in	r29, 0x3e	; 62
    dd0c:	21 97       	sbiw	r28, 0x01	; 1
    dd0e:	0f b6       	in	r0, 0x3f	; 63
    dd10:	f8 94       	cli
    dd12:	de bf       	out	0x3e, r29	; 62
    dd14:	0f be       	out	0x3f, r0	; 63
    dd16:	cd bf       	out	0x3d, r28	; 61
    dd18:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dd1a:	46 17       	cp	r20, r22
    dd1c:	18 f4       	brcc	.+6      	; 0xdd24 <LCD_ClrVLine+0x20>
		uint8_t temp = y1;
    dd1e:	86 2f       	mov	r24, r22
		y1 = y2;
    dd20:	64 2f       	mov	r22, r20
		y2 = temp;
    dd22:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    dd24:	76 2f       	mov	r23, r22
    dd26:	76 95       	lsr	r23
    dd28:	76 95       	lsr	r23
    dd2a:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    dd2c:	54 2f       	mov	r21, r20
    dd2e:	56 95       	lsr	r21
    dd30:	56 95       	lsr	r21
    dd32:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    dd34:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    dd36:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    dd38:	2f ef       	ldi	r18, 0xFF	; 255
    dd3a:	30 e0       	ldi	r19, 0x00	; 0
    dd3c:	c9 01       	movw	r24, r18
    dd3e:	02 c0       	rjmp	.+4      	; 0xdd44 <LCD_ClrVLine+0x40>
    dd40:	88 0f       	add	r24, r24
    dd42:	99 1f       	adc	r25, r25
    dd44:	6a 95       	dec	r22
    dd46:	e2 f7       	brpl	.-8      	; 0xdd40 <LCD_ClrVLine+0x3c>
    dd48:	68 2f       	mov	r22, r24
    dd4a:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dd4c:	87 e0       	ldi	r24, 0x07	; 7
    dd4e:	90 e0       	ldi	r25, 0x00	; 0
    dd50:	84 1b       	sub	r24, r20
    dd52:	91 09       	sbc	r25, r1
    dd54:	02 c0       	rjmp	.+4      	; 0xdd5a <LCD_ClrVLine+0x56>
    dd56:	35 95       	asr	r19
    dd58:	27 95       	ror	r18
    dd5a:	8a 95       	dec	r24
    dd5c:	e2 f7       	brpl	.-8      	; 0xdd56 <LCD_ClrVLine+0x52>
    dd5e:	20 95       	com	r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dd60:	40 98       	cbi	0x08, 0	; 8
    dd62:	80 ee       	ldi	r24, 0xE0	; 224
    dd64:	80 93 00 80 	sts	0x8000, r24
    dd68:	9e 2f       	mov	r25, r30
    dd6a:	9f 77       	andi	r25, 0x7F	; 127
    dd6c:	fe 2f       	mov	r31, r30
    dd6e:	ff 70       	andi	r31, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dd70:	75 17       	cp	r23, r21
    dd72:	e9 f4       	brne	.+58     	; 0xddae <LCD_ClrVLine+0xaa>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    dd74:	62 2b       	or	r22, r18

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd76:	40 98       	cbi	0x08, 0	; 8
    dd78:	50 6b       	ori	r21, 0xB0	; 176
    dd7a:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd7e:	40 98       	cbi	0x08, 0	; 8
    dd80:	89 2f       	mov	r24, r25
    dd82:	99 27       	eor	r25, r25
    dd84:	b4 e0       	ldi	r27, 0x04	; 4
    dd86:	96 95       	lsr	r25
    dd88:	87 95       	ror	r24
    dd8a:	ba 95       	dec	r27
    dd8c:	e1 f7       	brne	.-8      	; 0xdd86 <LCD_ClrVLine+0x82>
    dd8e:	80 61       	ori	r24, 0x10	; 16
    dd90:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd94:	40 98       	cbi	0x08, 0	; 8
    dd96:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dd9a:	40 9a       	sbi	0x08, 0	; 8
    dd9c:	80 91 00 81 	lds	r24, 0x8100
    dda0:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dda2:	40 9a       	sbi	0x08, 0	; 8
    dda4:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & pixelMask );
    dda8:	40 9a       	sbi	0x08, 0	; 8
    ddaa:	86 23       	and	r24, r22
    ddac:	56 c0       	rjmp	.+172    	; 0xde5a <LCD_ClrVLine+0x156>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    ddae:	35 2f       	mov	r19, r21
    ddb0:	37 1b       	sub	r19, r23
    ddb2:	31 50       	subi	r19, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    ddb4:	40 98       	cbi	0x08, 0	; 8
    ddb6:	87 2f       	mov	r24, r23
    ddb8:	80 6b       	ori	r24, 0xB0	; 176
    ddba:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    ddbe:	40 98       	cbi	0x08, 0	; 8
    ddc0:	89 2f       	mov	r24, r25
    ddc2:	99 27       	eor	r25, r25
    ddc4:	a4 e0       	ldi	r26, 0x04	; 4
    ddc6:	96 95       	lsr	r25
    ddc8:	87 95       	ror	r24
    ddca:	aa 95       	dec	r26
    ddcc:	e1 f7       	brne	.-8      	; 0xddc6 <LCD_ClrVLine+0xc2>
    ddce:	98 2f       	mov	r25, r24
    ddd0:	90 61       	ori	r25, 0x10	; 16
    ddd2:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    ddd6:	40 98       	cbi	0x08, 0	; 8
    ddd8:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dddc:	40 9a       	sbi	0x08, 0	; 8
    ddde:	80 91 00 81 	lds	r24, 0x8100
    dde2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dde4:	40 9a       	sbi	0x08, 0	; 8
    dde6:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & y1PixelMask );
    ddea:	40 9a       	sbi	0x08, 0	; 8
    ddec:	86 23       	and	r24, r22
    ddee:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    ddf2:	47 2f       	mov	r20, r23
    ddf4:	4f 5f       	subi	r20, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Clear all pixels.
			S6B1713_WriteData( 0x00 );
    ddf6:	83 2f       	mov	r24, r19
    ddf8:	31 50       	subi	r19, 0x01	; 1
    ddfa:	18 16       	cp	r1, r24
    ddfc:	8c f4       	brge	.+34     	; 0xde20 <LCD_ClrVLine+0x11c>
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    ddfe:	84 2f       	mov	r24, r20
    de00:	4f 5f       	subi	r20, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    de02:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de04:	40 98       	cbi	0x08, 0	; 8
    de06:	80 6b       	ori	r24, 0xB0	; 176
    de08:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de0c:	40 98       	cbi	0x08, 0	; 8
    de0e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de12:	40 98       	cbi	0x08, 0	; 8
    de14:	f0 93 00 80 	sts	0x8000, r31
    de18:	40 9a       	sbi	0x08, 0	; 8
    de1a:	10 92 00 81 	sts	0x8100, r1
    de1e:	eb cf       	rjmp	.-42     	; 0xddf6 <LCD_ClrVLine+0xf2>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de20:	40 98       	cbi	0x08, 0	; 8
    de22:	50 6b       	ori	r21, 0xB0	; 176
    de24:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    de28:	8e 2f       	mov	r24, r30
    de2a:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de2c:	40 98       	cbi	0x08, 0	; 8
    de2e:	99 27       	eor	r25, r25
    de30:	64 e0       	ldi	r22, 0x04	; 4
    de32:	96 95       	lsr	r25
    de34:	87 95       	ror	r24
    de36:	6a 95       	dec	r22
    de38:	e1 f7       	brne	.-8      	; 0xde32 <LCD_ClrVLine+0x12e>
    de3a:	80 61       	ori	r24, 0x10	; 16
    de3c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de40:	40 98       	cbi	0x08, 0	; 8
    de42:	ef 70       	andi	r30, 0x0F	; 15
    de44:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    de48:	40 9a       	sbi	0x08, 0	; 8
    de4a:	80 91 00 81 	lds	r24, 0x8100
    de4e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    de50:	40 9a       	sbi	0x08, 0	; 8
    de52:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback & y2PixelMask );
    de56:	40 9a       	sbi	0x08, 0	; 8
    de58:	82 23       	and	r24, r18
    de5a:	80 93 00 81 	sts	0x8100, r24
    de5e:	21 96       	adiw	r28, 0x01	; 1
    de60:	0f b6       	in	r0, 0x3f	; 63
    de62:	f8 94       	cli
    de64:	de bf       	out	0x3e, r29	; 62
    de66:	0f be       	out	0x3f, r0	; 63
    de68:	cd bf       	out	0x3d, r28	; 61
    de6a:	df 91       	pop	r29
    de6c:	cf 91       	pop	r28
    de6e:	08 95       	ret

0000de70 <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    de70:	cf 93       	push	r28
    de72:	df 93       	push	r29
    de74:	cd b7       	in	r28, 0x3d	; 61
    de76:	de b7       	in	r29, 0x3e	; 62
    de78:	21 97       	sbiw	r28, 0x01	; 1
    de7a:	0f b6       	in	r0, 0x3f	; 63
    de7c:	f8 94       	cli
    de7e:	de bf       	out	0x3e, r29	; 62
    de80:	0f be       	out	0x3f, r0	; 63
    de82:	cd bf       	out	0x3d, r28	; 61
    de84:	e8 2f       	mov	r30, r24
    de86:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    de88:	48 17       	cp	r20, r24
    de8a:	10 f4       	brcc	.+4      	; 0xde90 <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    de8c:	e4 2f       	mov	r30, r20
		x2 = temp;
    de8e:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    de90:	56 17       	cp	r21, r22
    de92:	18 f4       	brcc	.+6      	; 0xde9a <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    de94:	86 2f       	mov	r24, r22
		y1 = y2;
    de96:	65 2f       	mov	r22, r21
		y2 = temp;
    de98:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    de9a:	f6 2f       	mov	r31, r22
    de9c:	f6 95       	lsr	r31
    de9e:	f6 95       	lsr	r31
    dea0:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    dea2:	75 2f       	mov	r23, r21
    dea4:	76 95       	lsr	r23
    dea6:	76 95       	lsr	r23
    dea8:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    deaa:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    deac:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    deae:	2f ef       	ldi	r18, 0xFF	; 255
    deb0:	30 e0       	ldi	r19, 0x00	; 0
    deb2:	c9 01       	movw	r24, r18
    deb4:	02 c0       	rjmp	.+4      	; 0xdeba <LCD_ClrBox+0x4a>
    deb6:	88 0f       	add	r24, r24
    deb8:	99 1f       	adc	r25, r25
    deba:	6a 95       	dec	r22
    debc:	e2 f7       	brpl	.-8      	; 0xdeb6 <LCD_ClrBox+0x46>
    debe:	68 2f       	mov	r22, r24
    dec0:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dec2:	87 e0       	ldi	r24, 0x07	; 7
    dec4:	90 e0       	ldi	r25, 0x00	; 0
    dec6:	85 1b       	sub	r24, r21
    dec8:	91 09       	sbc	r25, r1
    deca:	02 c0       	rjmp	.+4      	; 0xded0 <LCD_ClrBox+0x60>
    decc:	35 95       	asr	r19
    dece:	27 95       	ror	r18
    ded0:	8a 95       	dec	r24
    ded2:	e2 f7       	brpl	.-8      	; 0xdecc <LCD_ClrBox+0x5c>
    ded4:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    ded6:	4e 1b       	sub	r20, r30
    ded8:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    deda:	40 98       	cbi	0x08, 0	; 8
    dedc:	80 ee       	ldi	r24, 0xE0	; 224
    dede:	80 93 00 80 	sts	0x8000, r24
    dee2:	ae 2f       	mov	r26, r30
    dee4:	af 77       	andi	r26, 0x7F	; 127
    dee6:	be 2f       	mov	r27, r30
    dee8:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    deea:	f7 17       	cp	r31, r23
    deec:	11 f5       	brne	.+68     	; 0xdf32 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    deee:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    def0:	40 98       	cbi	0x08, 0	; 8
    def2:	70 6b       	ori	r23, 0xB0	; 176
    def4:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    def8:	40 98       	cbi	0x08, 0	; 8
    defa:	8a 2f       	mov	r24, r26
    defc:	99 27       	eor	r25, r25
    defe:	54 e0       	ldi	r21, 0x04	; 4
    df00:	96 95       	lsr	r25
    df02:	87 95       	ror	r24
    df04:	5a 95       	dec	r21
    df06:	e1 f7       	brne	.-8      	; 0xdf00 <LCD_ClrBox+0x90>
    df08:	80 61       	ori	r24, 0x10	; 16
    df0a:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df0e:	40 98       	cbi	0x08, 0	; 8
    df10:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    df14:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    df16:	40 9a       	sbi	0x08, 0	; 8
    df18:	80 91 00 81 	lds	r24, 0x8100
    df1c:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    df1e:	40 9a       	sbi	0x08, 0	; 8
    df20:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    df24:	40 9a       	sbi	0x08, 0	; 8
    df26:	82 23       	and	r24, r18
    df28:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    df2c:	31 50       	subi	r19, 0x01	; 1
    df2e:	99 f7       	brne	.-26     	; 0xdf16 <LCD_ClrBox+0xa6>
    df30:	6b c0       	rjmp	.+214    	; 0xe008 <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    df32:	57 2f       	mov	r21, r23
    df34:	5f 1b       	sub	r21, r31
    df36:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    df38:	40 98       	cbi	0x08, 0	; 8
    df3a:	8f 2f       	mov	r24, r31
    df3c:	80 6b       	ori	r24, 0xB0	; 176
    df3e:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    df42:	40 98       	cbi	0x08, 0	; 8
    df44:	8a 2f       	mov	r24, r26
    df46:	99 27       	eor	r25, r25
    df48:	34 e0       	ldi	r19, 0x04	; 4
    df4a:	96 95       	lsr	r25
    df4c:	87 95       	ror	r24
    df4e:	3a 95       	dec	r19
    df50:	e1 f7       	brne	.-8      	; 0xdf4a <LCD_ClrBox+0xda>
    df52:	80 61       	ori	r24, 0x10	; 16
    df54:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df58:	40 98       	cbi	0x08, 0	; 8
    df5a:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    df5e:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    df60:	40 9a       	sbi	0x08, 0	; 8
    df62:	80 91 00 81 	lds	r24, 0x8100
    df66:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    df68:	40 9a       	sbi	0x08, 0	; 8
    df6a:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    df6e:	40 9a       	sbi	0x08, 0	; 8
    df70:	86 23       	and	r24, r22
    df72:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    df76:	31 50       	subi	r19, 0x01	; 1
    df78:	99 f7       	brne	.-26     	; 0xdf60 <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    df7a:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    df7c:	85 2f       	mov	r24, r21
    df7e:	51 50       	subi	r21, 0x01	; 1
    df80:	18 16       	cp	r1, r24
    df82:	04 f5       	brge	.+64     	; 0xdfc4 <LCD_ClrBox+0x154>
    df84:	8a 2f       	mov	r24, r26
    df86:	99 27       	eor	r25, r25
    df88:	64 e0       	ldi	r22, 0x04	; 4
    df8a:	96 95       	lsr	r25
    df8c:	87 95       	ror	r24
    df8e:	6a 95       	dec	r22
    df90:	e1 f7       	brne	.-8      	; 0xdf8a <LCD_ClrBox+0x11a>
    df92:	98 2f       	mov	r25, r24
    df94:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    df96:	8f 2f       	mov	r24, r31
    df98:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    df9a:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    df9c:	40 98       	cbi	0x08, 0	; 8
    df9e:	80 6b       	ori	r24, 0xB0	; 176
    dfa0:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfa4:	40 98       	cbi	0x08, 0	; 8
    dfa6:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfaa:	40 98       	cbi	0x08, 0	; 8
    dfac:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    dfb0:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    dfb2:	40 9a       	sbi	0x08, 0	; 8
    dfb4:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    dfb8:	31 50       	subi	r19, 0x01	; 1
    dfba:	d9 f7       	brne	.-10     	; 0xdfb2 <LCD_ClrBox+0x142>
    dfbc:	85 2f       	mov	r24, r21
    dfbe:	51 50       	subi	r21, 0x01	; 1
    dfc0:	18 16       	cp	r1, r24
    dfc2:	4c f3       	brlt	.-46     	; 0xdf96 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dfc4:	40 98       	cbi	0x08, 0	; 8
    dfc6:	70 6b       	ori	r23, 0xB0	; 176
    dfc8:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dfcc:	8e 2f       	mov	r24, r30
    dfce:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfd0:	40 98       	cbi	0x08, 0	; 8
    dfd2:	99 27       	eor	r25, r25
    dfd4:	54 e0       	ldi	r21, 0x04	; 4
    dfd6:	96 95       	lsr	r25
    dfd8:	87 95       	ror	r24
    dfda:	5a 95       	dec	r21
    dfdc:	e1 f7       	brne	.-8      	; 0xdfd6 <LCD_ClrBox+0x166>
    dfde:	80 61       	ori	r24, 0x10	; 16
    dfe0:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfe4:	40 98       	cbi	0x08, 0	; 8
    dfe6:	ef 70       	andi	r30, 0x0F	; 15
    dfe8:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dfec:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dfee:	40 9a       	sbi	0x08, 0	; 8
    dff0:	80 91 00 81 	lds	r24, 0x8100
    dff4:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    dff6:	40 9a       	sbi	0x08, 0	; 8
    dff8:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    dffc:	40 9a       	sbi	0x08, 0	; 8
    dffe:	82 23       	and	r24, r18
    e000:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    e004:	31 50       	subi	r19, 0x01	; 1
    e006:	99 f7       	brne	.-26     	; 0xdfee <LCD_ClrBox+0x17e>
    e008:	21 96       	adiw	r28, 0x01	; 1
    e00a:	0f b6       	in	r0, 0x3f	; 63
    e00c:	f8 94       	cli
    e00e:	de bf       	out	0x3e, r29	; 62
    e010:	0f be       	out	0x3f, r0	; 63
    e012:	cd bf       	out	0x3d, r28	; 61
    e014:	df 91       	pop	r29
    e016:	cf 91       	pop	r28
    e018:	08 95       	ret

0000e01a <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    e01a:	cf 93       	push	r28
    e01c:	df 93       	push	r29
    e01e:	cd b7       	in	r28, 0x3d	; 61
    e020:	de b7       	in	r29, 0x3e	; 62
    e022:	21 97       	sbiw	r28, 0x01	; 1
    e024:	0f b6       	in	r0, 0x3f	; 63
    e026:	f8 94       	cli
    e028:	de bf       	out	0x3e, r29	; 62
    e02a:	0f be       	out	0x3f, r0	; 63
    e02c:	cd bf       	out	0x3d, r28	; 61
    e02e:	36 2f       	mov	r19, r22
    e030:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    e032:	40 98       	cbi	0x08, 0	; 8
    e034:	90 ee       	ldi	r25, 0xE0	; 224
    e036:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e03a:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e03c:	40 98       	cbi	0x08, 0	; 8
    e03e:	30 6b       	ori	r19, 0xB0	; 176
    e040:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e044:	94 2f       	mov	r25, r20
    e046:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e048:	40 98       	cbi	0x08, 0	; 8
    e04a:	29 2f       	mov	r18, r25
    e04c:	33 27       	eor	r19, r19
    e04e:	e4 e0       	ldi	r30, 0x04	; 4
    e050:	36 95       	lsr	r19
    e052:	27 95       	ror	r18
    e054:	ea 95       	dec	r30
    e056:	e1 f7       	brne	.-8      	; 0xe050 <LCD_ClrPage+0x36>
    e058:	92 2f       	mov	r25, r18
    e05a:	90 61       	ori	r25, 0x10	; 16
    e05c:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e060:	40 98       	cbi	0x08, 0	; 8
    e062:	4f 70       	andi	r20, 0x0F	; 15
    e064:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    e068:	98 2f       	mov	r25, r24
    e06a:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    e06c:	40 9a       	sbi	0x08, 0	; 8
    e06e:	80 91 00 81 	lds	r24, 0x8100
    e072:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    e074:	40 9a       	sbi	0x08, 0	; 8
    e076:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    e07a:	40 9a       	sbi	0x08, 0	; 8
    e07c:	89 23       	and	r24, r25
    e07e:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    e082:	51 50       	subi	r21, 0x01	; 1
    e084:	99 f7       	brne	.-26     	; 0xe06c <LCD_ClrPage+0x52>
    e086:	21 96       	adiw	r28, 0x01	; 1
    e088:	0f b6       	in	r0, 0x3f	; 63
    e08a:	f8 94       	cli
    e08c:	de bf       	out	0x3e, r29	; 62
    e08e:	0f be       	out	0x3f, r0	; 63
    e090:	cd bf       	out	0x3d, r28	; 61
    e092:	df 91       	pop	r29
    e094:	cf 91       	pop	r28
    e096:	08 95       	ret

0000e098 <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    e098:	fc 01       	movw	r30, r24
    e09a:	86 2f       	mov	r24, r22
    e09c:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e09e:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e0a0:	40 98       	cbi	0x08, 0	; 8
    e0a2:	80 6b       	ori	r24, 0xB0	; 176
    e0a4:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e0a8:	84 2f       	mov	r24, r20
    e0aa:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e0ac:	40 98       	cbi	0x08, 0	; 8
    e0ae:	99 27       	eor	r25, r25
    e0b0:	44 e0       	ldi	r20, 0x04	; 4
    e0b2:	96 95       	lsr	r25
    e0b4:	87 95       	ror	r24
    e0b6:	4a 95       	dec	r20
    e0b8:	e1 f7       	brne	.-8      	; 0xe0b2 <LCD_WritePage_F+0x1a>
    e0ba:	80 61       	ori	r24, 0x10	; 16
    e0bc:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e0c0:	40 98       	cbi	0x08, 0	; 8
    e0c2:	3f 70       	andi	r19, 0x0F	; 15
    e0c4:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    e0c8:	40 9a       	sbi	0x08, 0	; 8
    e0ca:	84 91       	lpm	r24, Z+
    e0cc:	80 93 00 81 	sts	0x8100, r24
		data++;
    e0d0:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    e0d2:	21 50       	subi	r18, 0x01	; 1
    e0d4:	c9 f7       	brne	.-14     	; 0xe0c8 <LCD_WritePage_F+0x30>
    e0d6:	08 95       	ret

0000e0d8 <POPUP_MsgBox>:
 * \param  margin         Number of pixels between the text and the sides of the box
 * \param  str            Pointer to a null-terminated string. Supports LF and CR.
 * \param  parentForm     If specified, this form will be redrawn before the function returns
 */
void POPUP_MsgBox( uint8_t widthInChars, uint8_t heightInPages, uint8_t margin, char const * str, FORMS_form_t * parentForm )
{
    e0d8:	4f 92       	push	r4
    e0da:	5f 92       	push	r5
    e0dc:	6f 92       	push	r6
    e0de:	7f 92       	push	r7
    e0e0:	8f 92       	push	r8
    e0e2:	9f 92       	push	r9
    e0e4:	af 92       	push	r10
    e0e6:	bf 92       	push	r11
    e0e8:	cf 92       	push	r12
    e0ea:	df 92       	push	r13
    e0ec:	ef 92       	push	r14
    e0ee:	ff 92       	push	r15
    e0f0:	0f 93       	push	r16
    e0f2:	1f 93       	push	r17
    e0f4:	cf 93       	push	r28
    e0f6:	c8 2f       	mov	r28, r24
    e0f8:	d6 2e       	mov	r13, r22
    e0fa:	e4 2e       	mov	r14, r20
    e0fc:	49 01       	movw	r8, r18
    e0fe:	38 01       	movw	r6, r16
	// Reset any hardware LCD scrolling first.
	if (parentForm != NULL) {
    e100:	01 15       	cp	r16, r1
    e102:	11 05       	cpc	r17, r1
    e104:	19 f0       	breq	.+6      	; 0xe10c <POPUP_MsgBox+0x34>
		FORMS_NormalizeLCDScroll( parentForm );
    e106:	c8 01       	movw	r24, r16
    e108:	0e 94 f4 77 	call	0xefe8	; 0xefe8 <FORMS_NormalizeLCDScroll>
	}
	
	// Calculate some coordinates, with text centered in screen.
	uint8_t const widthInPixels = widthInChars * TERMFONT_CHAR_WIDTH;
    e10c:	86 e0       	ldi	r24, 0x06	; 6
    e10e:	c8 9f       	mul	r28, r24
    e110:	80 2d       	mov	r24, r0
    e112:	11 24       	eor	r1, r1
	uint8_t const startColumn = (LCD_WIDTH / 2) - (widthInPixels / 2);
    e114:	86 95       	lsr	r24
    e116:	30 e4       	ldi	r19, 0x40	; 64
    e118:	43 2e       	mov	r4, r19
    e11a:	48 1a       	sub	r4, r24
	uint8_t const startX = startColumn - margin;
    e11c:	b4 2c       	mov	r11, r4
    e11e:	be 18       	sub	r11, r14
	uint8_t const endColumn = (LCD_WIDTH / 2) + (widthInPixels / 2);
    e120:	a8 2e       	mov	r10, r24
    e122:	80 e4       	ldi	r24, 0x40	; 64
    e124:	a8 0e       	add	r10, r24
	uint8_t const endX = endColumn + margin;
    e126:	ca 2d       	mov	r28, r10
    e128:	ce 0d       	add	r28, r14
	uint8_t const startPage = (LCD_HEIGHT / LCD_PAGE_HEIGHT / 2) - 1 - ((heightInPages - 1) / 2);
    e12a:	2d 2d       	mov	r18, r13
    e12c:	33 27       	eor	r19, r19
    e12e:	c9 01       	movw	r24, r18
    e130:	01 97       	sbiw	r24, 0x01	; 1
    e132:	97 fd       	sbrc	r25, 7
    e134:	c9 01       	movw	r24, r18
    e136:	95 95       	asr	r25
    e138:	87 95       	ror	r24
    e13a:	93 e0       	ldi	r25, 0x03	; 3
    e13c:	f9 2e       	mov	r15, r25
    e13e:	f8 1a       	sub	r15, r24
	uint8_t const startY = (startPage * LCD_PAGE_HEIGHT) - margin;
    e140:	0f 2d       	mov	r16, r15
    e142:	00 0f       	add	r16, r16
    e144:	00 0f       	add	r16, r16
    e146:	00 0f       	add	r16, r16
    e148:	0e 19       	sub	r16, r14
	uint8_t const endPage = startPage + heightInPages;
    e14a:	5f 2c       	mov	r5, r15
    e14c:	5d 0c       	add	r5, r13
	uint8_t const endY = (endPage * LCD_PAGE_HEIGHT) + margin;
    e14e:	15 2d       	mov	r17, r5
    e150:	11 0f       	add	r17, r17
    e152:	11 0f       	add	r17, r17
    e154:	11 0f       	add	r17, r17
    e156:	1e 0d       	add	r17, r14
	
	// Draw popup frame.
	LCD_SetHLine( startX, endX, startY );
    e158:	40 2f       	mov	r20, r16
    e15a:	6c 2f       	mov	r22, r28
    e15c:	8b 2d       	mov	r24, r11
    e15e:	0e 94 7a 6d 	call	0xdaf4	; 0xdaf4 <LCD_SetHLine>
	LCD_SetHLine( startX, endX, endY );
    e162:	41 2f       	mov	r20, r17
    e164:	6c 2f       	mov	r22, r28
    e166:	8b 2d       	mov	r24, r11
    e168:	0e 94 7a 6d 	call	0xdaf4	; 0xdaf4 <LCD_SetHLine>
	LCD_SetHLine( startX + 1, endX + 1, endY + 1 );
    e16c:	e1 2e       	mov	r14, r17
    e16e:	e3 94       	inc	r14
    e170:	dc 2e       	mov	r13, r28
    e172:	d3 94       	inc	r13
    e174:	cb 2c       	mov	r12, r11
    e176:	c3 94       	inc	r12
    e178:	4e 2d       	mov	r20, r14
    e17a:	6d 2d       	mov	r22, r13
    e17c:	8c 2d       	mov	r24, r12
    e17e:	0e 94 7a 6d 	call	0xdaf4	; 0xdaf4 <LCD_SetHLine>
	LCD_SetVLine( startX, startY, endY );
    e182:	41 2f       	mov	r20, r17
    e184:	60 2f       	mov	r22, r16
    e186:	8b 2d       	mov	r24, r11
    e188:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
	LCD_SetVLine( endX, startY, endY );
    e18c:	41 2f       	mov	r20, r17
    e18e:	60 2f       	mov	r22, r16
    e190:	8c 2f       	mov	r24, r28
    e192:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
	LCD_SetVLine( endX + 1, startY + 1, endY + 1 );
    e196:	0f 5f       	subi	r16, 0xFF	; 255
    e198:	4e 2d       	mov	r20, r14
    e19a:	60 2f       	mov	r22, r16
    e19c:	8d 2d       	mov	r24, r13
    e19e:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
	LCD_ClrBox( startX + 1, startY + 1, endX - 1, endY - 1 );
    e1a2:	11 50       	subi	r17, 0x01	; 1
    e1a4:	c1 50       	subi	r28, 0x01	; 1
    e1a6:	21 2f       	mov	r18, r17
    e1a8:	4c 2f       	mov	r20, r28
    e1aa:	60 2f       	mov	r22, r16
    e1ac:	8c 2d       	mov	r24, r12
    e1ae:	0e 94 38 6f 	call	0xde70	; 0xde70 <LCD_ClrBox>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
    e1b2:	c4 2d       	mov	r28, r4
				column = startColumn;
			}
			TERMFONT_DisplayChar( *str, page, column );
			column += TERMFONT_CHAR_WIDTH;
		}
		++str;
    e1b4:	f4 01       	movw	r30, r8
    e1b6:	80 81       	ld	r24, Z
    e1b8:	88 23       	and	r24, r24
    e1ba:	c9 f0       	breq	.+50     	; 0xe1ee <POPUP_MsgBox+0x116>
    e1bc:	f5 14       	cp	r15, r5
    e1be:	b8 f4       	brcc	.+46     	; 0xe1ee <POPUP_MsgBox+0x116>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
	uint8_t page = startPage;
	while ((*str != 0) && (page < endPage)) {
		if (*str == '\r') {
    e1c0:	8d 30       	cpi	r24, 0x0D	; 13
    e1c2:	11 f4       	brne	.+4      	; 0xe1c8 <POPUP_MsgBox+0xf0>
			column = startColumn;
    e1c4:	c4 2d       	mov	r28, r4
    e1c6:	0d c0       	rjmp	.+26     	; 0xe1e2 <POPUP_MsgBox+0x10a>
		}
		else if (*str == '\n') {
    e1c8:	8a 30       	cpi	r24, 0x0A	; 10
    e1ca:	11 f4       	brne	.+4      	; 0xe1d0 <POPUP_MsgBox+0xf8>
			++page;
    e1cc:	f3 94       	inc	r15
    e1ce:	09 c0       	rjmp	.+18     	; 0xe1e2 <POPUP_MsgBox+0x10a>
		}
		else {
			if (column >= endColumn) {
    e1d0:	ca 15       	cp	r28, r10
    e1d2:	10 f0       	brcs	.+4      	; 0xe1d8 <POPUP_MsgBox+0x100>
				++page;
    e1d4:	f3 94       	inc	r15
				column = startColumn;
    e1d6:	c4 2d       	mov	r28, r4
			}
			TERMFONT_DisplayChar( *str, page, column );
    e1d8:	4c 2f       	mov	r20, r28
    e1da:	6f 2d       	mov	r22, r15
    e1dc:	0e 94 2b 7b 	call	0xf656	; 0xf656 <TERMFONT_DisplayChar>
			column += TERMFONT_CHAR_WIDTH;
    e1e0:	ca 5f       	subi	r28, 0xFA	; 250
		}
		++str;
    e1e2:	08 94       	sec
    e1e4:	81 1c       	adc	r8, r1
    e1e6:	91 1c       	adc	r9, r1
    e1e8:	e5 cf       	rjmp	.-54     	; 0xe1b4 <POPUP_MsgBox+0xdc>
	}
	
	// Wait until joystick is released (could still be held down after select a menu item).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e1ea:	0e 94 bb 73 	call	0xe776	; 0xe776 <POWER_EnterIdleSleepMode>
    e1ee:	0e 94 3e 73 	call	0xe67c	; 0xe67c <JOYSTICK_GetState>
    e1f2:	88 23       	and	r24, r24
    e1f4:	d1 f7       	brne	.-12     	; 0xe1ea <POPUP_MsgBox+0x112>
	// Wait until joystick is pressed (user wants to exit popup box).
	while (JOYSTICK_GetState() == 0x00) { POWER_EnterIdleSleepMode(); }
    e1f6:	02 c0       	rjmp	.+4      	; 0xe1fc <POPUP_MsgBox+0x124>
    e1f8:	0e 94 bb 73 	call	0xe776	; 0xe776 <POWER_EnterIdleSleepMode>
    e1fc:	0e 94 3e 73 	call	0xe67c	; 0xe67c <JOYSTICK_GetState>
    e200:	88 23       	and	r24, r24
    e202:	d1 f3       	breq	.-12     	; 0xe1f8 <POPUP_MsgBox+0x120>
	// Wait until joystick is released again (in order not to give unwanted joystick events to the calling application).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e204:	02 c0       	rjmp	.+4      	; 0xe20a <POPUP_MsgBox+0x132>
    e206:	0e 94 bb 73 	call	0xe776	; 0xe776 <POWER_EnterIdleSleepMode>
    e20a:	0e 94 3e 73 	call	0xe67c	; 0xe67c <JOYSTICK_GetState>
    e20e:	88 23       	and	r24, r24
    e210:	d1 f7       	brne	.-12     	; 0xe206 <POPUP_MsgBox+0x12e>

	// Redraw parent form if requested.
	if (parentForm != NULL) {
    e212:	61 14       	cp	r6, r1
    e214:	71 04       	cpc	r7, r1
    e216:	19 f0       	breq	.+6      	; 0xe21e <POPUP_MsgBox+0x146>
		FORMS_Draw( parentForm );
    e218:	c3 01       	movw	r24, r6
    e21a:	0e 94 85 77 	call	0xef0a	; 0xef0a <FORMS_Draw>
    e21e:	cf 91       	pop	r28
    e220:	1f 91       	pop	r17
    e222:	0f 91       	pop	r16
    e224:	ff 90       	pop	r15
    e226:	ef 90       	pop	r14
    e228:	df 90       	pop	r13
    e22a:	cf 90       	pop	r12
    e22c:	bf 90       	pop	r11
    e22e:	af 90       	pop	r10
    e230:	9f 90       	pop	r9
    e232:	8f 90       	pop	r8
    e234:	7f 90       	pop	r7
    e236:	6f 90       	pop	r6
    e238:	5f 90       	pop	r5
    e23a:	4f 90       	pop	r4
    e23c:	08 95       	ret

0000e23e <LCD_UpdateBigNumbers>:
}

void LCD_UpdateBigNumbers(uint8_t value)
{
    e23e:	6f 92       	push	r6
    e240:	7f 92       	push	r7
    e242:	8f 92       	push	r8
    e244:	9f 92       	push	r9
    e246:	af 92       	push	r10
    e248:	bf 92       	push	r11
    e24a:	cf 92       	push	r12
    e24c:	df 92       	push	r13
    e24e:	ef 92       	push	r14
    e250:	ff 92       	push	r15
    e252:	0f 93       	push	r16
    e254:	1f 93       	push	r17
    e256:	cf 93       	push	r28
    e258:	df 93       	push	r29
    e25a:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    e25c:	66 24       	eor	r6, r6
    e25e:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    e260:	8f 3f       	cpi	r24, 0xFF	; 255
    e262:	09 f4       	brne	.+2      	; 0xe266 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    e264:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    e266:	20 e2       	ldi	r18, 0x20	; 32
    e268:	40 e6       	ldi	r20, 0x60	; 96
    e26a:	60 e0       	ldi	r22, 0x00	; 0
    e26c:	86 2f       	mov	r24, r22
    e26e:	0e 94 38 6f 	call	0xde70	; 0xde70 <LCD_ClrBox>

	if (value < 10)
    e272:	ca 30       	cpi	r28, 0x0A	; 10
    e274:	80 f4       	brcc	.+32     	; 0xe296 <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    e276:	ec 2f       	mov	r30, r28
    e278:	ff 27       	eor	r31, r31
    e27a:	ee 0f       	add	r30, r30
    e27c:	ff 1f       	adc	r31, r31
    e27e:	e6 59       	subi	r30, 0x96	; 150
    e280:	f0 43       	sbci	r31, 0x30	; 48
    e282:	85 91       	lpm	r24, Z+
    e284:	94 91       	lpm	r25, Z+
    e286:	f4 e0       	ldi	r31, 0x04	; 4
    e288:	af 2e       	mov	r10, r31
    e28a:	b1 2c       	mov	r11, r1
    e28c:	e0 e2       	ldi	r30, 0x20	; 32
    e28e:	ce 2e       	mov	r12, r30
    e290:	d1 2c       	mov	r13, r1
    e292:	73 01       	movw	r14, r6
    e294:	34 c0       	rjmp	.+104    	; 0xe2fe <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    e296:	8c 2f       	mov	r24, r28
    e298:	8a 50       	subi	r24, 0x0A	; 10
    e29a:	8c 2e       	mov	r8, r28
    e29c:	99 24       	eor	r9, r9
    e29e:	8a 35       	cpi	r24, 0x5A	; 90
    e2a0:	08 f0       	brcs	.+2      	; 0xe2a4 <LCD_UpdateBigNumbers+0x66>
    e2a2:	3b c0       	rjmp	.+118    	; 0xe31a <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    e2a4:	8c 2f       	mov	r24, r28
    e2a6:	6a e0       	ldi	r22, 0x0A	; 10
    e2a8:	0e 94 81 7c 	call	0xf902	; 0xf902 <__udivmodqi4>
    e2ac:	c8 2f       	mov	r28, r24
    e2ae:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e2b0:	fe 01       	movw	r30, r28
    e2b2:	ec 0f       	add	r30, r28
    e2b4:	fd 1f       	adc	r31, r29
    e2b6:	e6 59       	subi	r30, 0x96	; 150
    e2b8:	f0 43       	sbci	r31, 0x30	; 48
    e2ba:	85 91       	lpm	r24, Z+
    e2bc:	94 91       	lpm	r25, Z+
    e2be:	74 e0       	ldi	r23, 0x04	; 4
    e2c0:	a7 2e       	mov	r10, r23
    e2c2:	b1 2c       	mov	r11, r1
    e2c4:	60 e2       	ldi	r22, 0x20	; 32
    e2c6:	c6 2e       	mov	r12, r22
    e2c8:	d1 2c       	mov	r13, r1
    e2ca:	73 01       	movw	r14, r6
    e2cc:	83 01       	movw	r16, r6
    e2ce:	93 01       	movw	r18, r6
    e2d0:	a3 01       	movw	r20, r6
    e2d2:	b6 01       	movw	r22, r12
    e2d4:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    e2d8:	ce 01       	movw	r24, r28
    e2da:	53 e0       	ldi	r21, 0x03	; 3
    e2dc:	88 0f       	add	r24, r24
    e2de:	99 1f       	adc	r25, r25
    e2e0:	5a 95       	dec	r21
    e2e2:	e1 f7       	brne	.-8      	; 0xe2dc <LCD_UpdateBigNumbers+0x9e>
    e2e4:	8c 0f       	add	r24, r28
    e2e6:	9d 1f       	adc	r25, r29
    e2e8:	8c 0f       	add	r24, r28
    e2ea:	9d 1f       	adc	r25, r29
    e2ec:	f4 01       	movw	r30, r8
    e2ee:	e8 1b       	sub	r30, r24
    e2f0:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e2f2:	ee 0f       	add	r30, r30
    e2f4:	ff 1f       	adc	r31, r31
    e2f6:	e6 59       	subi	r30, 0x96	; 150
    e2f8:	f0 43       	sbci	r31, 0x30	; 48
    e2fa:	85 91       	lpm	r24, Z+
    e2fc:	94 91       	lpm	r25, Z+
    e2fe:	86 01       	movw	r16, r12
    e300:	93 01       	movw	r18, r6
    e302:	a3 01       	movw	r20, r6
    e304:	b6 01       	movw	r22, r12
    e306:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    e30a:	00 e4       	ldi	r16, 0x40	; 64
    e30c:	10 e0       	ldi	r17, 0x00	; 0
    e30e:	93 01       	movw	r18, r6
    e310:	a3 01       	movw	r20, r6
    e312:	b6 01       	movw	r22, r12
    e314:	8c e7       	ldi	r24, 0x7C	; 124
    e316:	98 e9       	ldi	r25, 0x98	; 152
    e318:	54 c0       	rjmp	.+168    	; 0xe3c2 <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    e31a:	8c 2f       	mov	r24, r28
    e31c:	64 e6       	ldi	r22, 0x64	; 100
    e31e:	0e 94 81 7c 	call	0xf902	; 0xf902 <__udivmodqi4>
    e322:	c8 2f       	mov	r28, r24
    e324:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    e326:	84 e6       	ldi	r24, 0x64	; 100
    e328:	90 e0       	ldi	r25, 0x00	; 0
    e32a:	c8 9f       	mul	r28, r24
    e32c:	90 01       	movw	r18, r0
    e32e:	c9 9f       	mul	r28, r25
    e330:	30 0d       	add	r19, r0
    e332:	d8 9f       	mul	r29, r24
    e334:	30 0d       	add	r19, r0
    e336:	11 24       	eor	r1, r1
    e338:	c9 01       	movw	r24, r18
    e33a:	94 01       	movw	r18, r8
    e33c:	28 1b       	sub	r18, r24
    e33e:	39 0b       	sbc	r19, r25
    e340:	c9 01       	movw	r24, r18
    e342:	6a e0       	ldi	r22, 0x0A	; 10
    e344:	70 e0       	ldi	r23, 0x00	; 0
    e346:	0e 94 a1 7c 	call	0xf942	; 0xf942 <__divmodhi4>
    e34a:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    e34c:	cb 01       	movw	r24, r22
    e34e:	43 e0       	ldi	r20, 0x03	; 3
    e350:	88 0f       	add	r24, r24
    e352:	99 1f       	adc	r25, r25
    e354:	4a 95       	dec	r20
    e356:	e1 f7       	brne	.-8      	; 0xe350 <LCD_UpdateBigNumbers+0x112>
    e358:	86 0f       	add	r24, r22
    e35a:	97 1f       	adc	r25, r23
    e35c:	86 0f       	add	r24, r22
    e35e:	97 1f       	adc	r25, r23
    e360:	39 01       	movw	r6, r18
    e362:	68 1a       	sub	r6, r24
    e364:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e366:	fe 01       	movw	r30, r28
    e368:	ec 0f       	add	r30, r28
    e36a:	fd 1f       	adc	r31, r29
    e36c:	e6 59       	subi	r30, 0x96	; 150
    e36e:	f0 43       	sbci	r31, 0x30	; 48
    e370:	85 91       	lpm	r24, Z+
    e372:	94 91       	lpm	r25, Z+
    e374:	34 e0       	ldi	r19, 0x04	; 4
    e376:	a3 2e       	mov	r10, r19
    e378:	b1 2c       	mov	r11, r1
    e37a:	20 e2       	ldi	r18, 0x20	; 32
    e37c:	c2 2e       	mov	r12, r18
    e37e:	d1 2c       	mov	r13, r1
    e380:	ee 24       	eor	r14, r14
    e382:	ff 24       	eor	r15, r15
    e384:	87 01       	movw	r16, r14
    e386:	97 01       	movw	r18, r14
    e388:	a7 01       	movw	r20, r14
    e38a:	b6 01       	movw	r22, r12
    e38c:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e390:	f4 01       	movw	r30, r8
    e392:	e8 0d       	add	r30, r8
    e394:	f9 1d       	adc	r31, r9
    e396:	e6 59       	subi	r30, 0x96	; 150
    e398:	f0 43       	sbci	r31, 0x30	; 48
    e39a:	85 91       	lpm	r24, Z+
    e39c:	94 91       	lpm	r25, Z+
    e39e:	86 01       	movw	r16, r12
    e3a0:	97 01       	movw	r18, r14
    e3a2:	a7 01       	movw	r20, r14
    e3a4:	b6 01       	movw	r22, r12
    e3a6:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    e3aa:	f3 01       	movw	r30, r6
    e3ac:	e6 0d       	add	r30, r6
    e3ae:	f7 1d       	adc	r31, r7
    e3b0:	e6 59       	subi	r30, 0x96	; 150
    e3b2:	f0 43       	sbci	r31, 0x30	; 48
    e3b4:	85 91       	lpm	r24, Z+
    e3b6:	94 91       	lpm	r25, Z+
    e3b8:	00 e4       	ldi	r16, 0x40	; 64
    e3ba:	10 e0       	ldi	r17, 0x00	; 0
    e3bc:	97 01       	movw	r18, r14
    e3be:	a7 01       	movw	r20, r14
    e3c0:	b6 01       	movw	r22, r12
    e3c2:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>
    e3c6:	df 91       	pop	r29
    e3c8:	cf 91       	pop	r28
    e3ca:	1f 91       	pop	r17
    e3cc:	0f 91       	pop	r16
    e3ce:	ff 90       	pop	r15
    e3d0:	ef 90       	pop	r14
    e3d2:	df 90       	pop	r13
    e3d4:	cf 90       	pop	r12
    e3d6:	bf 90       	pop	r11
    e3d8:	af 90       	pop	r10
    e3da:	9f 90       	pop	r9
    e3dc:	8f 90       	pop	r8
    e3de:	7f 90       	pop	r7
    e3e0:	6f 90       	pop	r6
    e3e2:	08 95       	ret

0000e3e4 <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    e3e4:	af 92       	push	r10
    e3e6:	bf 92       	push	r11
    e3e8:	cf 92       	push	r12
    e3ea:	df 92       	push	r13
    e3ec:	ef 92       	push	r14
    e3ee:	ff 92       	push	r15
    e3f0:	0f 93       	push	r16
    e3f2:	1f 93       	push	r17
    e3f4:	cf 93       	push	r28
    e3f6:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e3f8:	85 36       	cpi	r24, 0x65	; 101
    e3fa:	08 f0       	brcs	.+2      	; 0xe3fe <LCD_UpdateSOC+0x1a>
		soc = 100;
    e3fc:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e3fe:	ec 2f       	mov	r30, r28
    e400:	ff 27       	eor	r31, r31
    e402:	ee 0f       	add	r30, r30
    e404:	ff 1f       	adc	r31, r31
    e406:	ea 57       	subi	r30, 0x7A	; 122
    e408:	f0 43       	sbci	r31, 0x30	; 48
    e40a:	85 91       	lpm	r24, Z+
    e40c:	94 91       	lpm	r25, Z+
    e40e:	b8 e0       	ldi	r27, 0x08	; 8
    e410:	ab 2e       	mov	r10, r27
    e412:	b1 2c       	mov	r11, r1
    e414:	a0 e2       	ldi	r26, 0x20	; 32
    e416:	ca 2e       	mov	r12, r26
    e418:	d1 2c       	mov	r13, r1
    e41a:	ee 24       	eor	r14, r14
    e41c:	ff 24       	eor	r15, r15
    e41e:	00 e6       	ldi	r16, 0x60	; 96
    e420:	10 e0       	ldi	r17, 0x00	; 0
    e422:	97 01       	movw	r18, r14
    e424:	a7 01       	movw	r20, r14
    e426:	b6 01       	movw	r22, r12
    e428:	0e 94 82 76 	call	0xed04	; 0xed04 <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e42c:	8c 2f       	mov	r24, r28
    e42e:	0e 94 1f 71 	call	0xe23e	; 0xe23e <LCD_UpdateBigNumbers>
    e432:	cf 91       	pop	r28
    e434:	1f 91       	pop	r17
    e436:	0f 91       	pop	r16
    e438:	ff 90       	pop	r15
    e43a:	ef 90       	pop	r14
    e43c:	df 90       	pop	r13
    e43e:	cf 90       	pop	r12
    e440:	bf 90       	pop	r11
    e442:	af 90       	pop	r10
    e444:	08 95       	ret

0000e446 <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e446:	9f 92       	push	r9
    e448:	af 92       	push	r10
    e44a:	bf 92       	push	r11
    e44c:	cf 92       	push	r12
    e44e:	df 92       	push	r13
    e450:	ef 92       	push	r14
    e452:	ff 92       	push	r15
    e454:	0f 93       	push	r16
    e456:	1f 93       	push	r17
    e458:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e45a:	48 17       	cp	r20, r24
    e45c:	30 f4       	brcc	.+12     	; 0xe46a <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e45e:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e460:	84 2f       	mov	r24, r20
        Xend = dx;
    e462:	40 2f       	mov	r20, r16
        dy = Ystart;
    e464:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e466:	62 2f       	mov	r22, r18
        Yend = dy;
    e468:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e46a:	04 2f       	mov	r16, r20
    e46c:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e46e:	12 2f       	mov	r17, r18
    e470:	16 1b       	sub	r17, r22

    x = Xstart;
    e472:	b8 2e       	mov	r11, r24
    y = Ystart;
    e474:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e476:	07 ff       	sbrs	r16, 7
    e478:	04 c0       	rjmp	.+8      	; 0xe482 <LCD_SetLine+0x3c>
        xinc = -1;
    e47a:	2f ef       	ldi	r18, 0xFF	; 255
    e47c:	92 2e       	mov	r9, r18
        dx = -dx;
    e47e:	01 95       	neg	r16
    e480:	02 c0       	rjmp	.+4      	; 0xe486 <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e482:	91 e0       	ldi	r25, 0x01	; 1
    e484:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e486:	17 ff       	sbrs	r17, 7
    e488:	04 c0       	rjmp	.+8      	; 0xe492 <LCD_SetLine+0x4c>
        yinc = -1;
    e48a:	8f ef       	ldi	r24, 0xFF	; 255
    e48c:	a8 2e       	mov	r10, r24
        dy = -dy;
    e48e:	11 95       	neg	r17
    e490:	02 c0       	rjmp	.+4      	; 0xe496 <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e492:	c1 e0       	ldi	r28, 0x01	; 1
    e494:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e496:	10 17       	cp	r17, r16
    e498:	d4 f4       	brge	.+52     	; 0xe4ce <LCD_SetLine+0x88>
        e = dy - dx;
    e49a:	c1 2f       	mov	r28, r17
    e49c:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e49e:	dd 24       	eor	r13, r13
    e4a0:	e0 2e       	mov	r14, r16
    e4a2:	ff 24       	eor	r15, r15
    e4a4:	e7 fc       	sbrc	r14, 7
    e4a6:	f0 94       	com	r15
    e4a8:	f7 fc       	sbrc	r15, 7
    e4aa:	2a c0       	rjmp	.+84     	; 0xe500 <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e4ac:	6c 2d       	mov	r22, r12
    e4ae:	8b 2d       	mov	r24, r11
    e4b0:	0e 94 ed 6c 	call	0xd9da	; 0xd9da <LCD_SetPixel>
            if (e >= 0){
    e4b4:	c7 fd       	sbrc	r28, 7
    e4b6:	02 c0       	rjmp	.+4      	; 0xe4bc <LCD_SetLine+0x76>
                e -= dx;
    e4b8:	c0 1b       	sub	r28, r16
                y += yinc;
    e4ba:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e4bc:	c1 0f       	add	r28, r17
            x += xinc;
    e4be:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e4c0:	d3 94       	inc	r13
    e4c2:	8d 2d       	mov	r24, r13
    e4c4:	99 27       	eor	r25, r25
    e4c6:	e8 16       	cp	r14, r24
    e4c8:	f9 06       	cpc	r15, r25
    e4ca:	84 f7       	brge	.-32     	; 0xe4ac <LCD_SetLine+0x66>
    e4cc:	19 c0       	rjmp	.+50     	; 0xe500 <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e4ce:	c0 2f       	mov	r28, r16
    e4d0:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e4d2:	dd 24       	eor	r13, r13
    e4d4:	e1 2e       	mov	r14, r17
    e4d6:	ff 24       	eor	r15, r15
    e4d8:	e7 fc       	sbrc	r14, 7
    e4da:	f0 94       	com	r15
    e4dc:	f7 fc       	sbrc	r15, 7
    e4de:	10 c0       	rjmp	.+32     	; 0xe500 <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e4e0:	6c 2d       	mov	r22, r12
    e4e2:	8b 2d       	mov	r24, r11
    e4e4:	0e 94 ed 6c 	call	0xd9da	; 0xd9da <LCD_SetPixel>
    
            if (e >= 0){
    e4e8:	c7 fd       	sbrc	r28, 7
    e4ea:	02 c0       	rjmp	.+4      	; 0xe4f0 <LCD_SetLine+0xaa>
                e -= dy;
    e4ec:	c1 1b       	sub	r28, r17
                x += xinc;
    e4ee:	b9 0c       	add	r11, r9
            }
            e += dx;
    e4f0:	c0 0f       	add	r28, r16
            y += yinc;
    e4f2:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e4f4:	d3 94       	inc	r13
    e4f6:	8d 2d       	mov	r24, r13
    e4f8:	99 27       	eor	r25, r25
    e4fa:	e8 16       	cp	r14, r24
    e4fc:	f9 06       	cpc	r15, r25
    e4fe:	84 f7       	brge	.-32     	; 0xe4e0 <LCD_SetLine+0x9a>
    e500:	cf 91       	pop	r28
    e502:	1f 91       	pop	r17
    e504:	0f 91       	pop	r16
    e506:	ff 90       	pop	r15
    e508:	ef 90       	pop	r14
    e50a:	df 90       	pop	r13
    e50c:	cf 90       	pop	r12
    e50e:	bf 90       	pop	r11
    e510:	af 90       	pop	r10
    e512:	9f 90       	pop	r9
    e514:	08 95       	ret

0000e516 <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e516:	9f 92       	push	r9
    e518:	af 92       	push	r10
    e51a:	bf 92       	push	r11
    e51c:	cf 92       	push	r12
    e51e:	df 92       	push	r13
    e520:	ef 92       	push	r14
    e522:	ff 92       	push	r15
    e524:	0f 93       	push	r16
    e526:	1f 93       	push	r17
    e528:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e52a:	48 17       	cp	r20, r24
    e52c:	30 f4       	brcc	.+12     	; 0xe53a <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e52e:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e530:	84 2f       	mov	r24, r20
        Xend = dx;
    e532:	40 2f       	mov	r20, r16
        dy = Ystart;
    e534:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e536:	62 2f       	mov	r22, r18
        Yend = dy;
    e538:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e53a:	04 2f       	mov	r16, r20
    e53c:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e53e:	12 2f       	mov	r17, r18
    e540:	16 1b       	sub	r17, r22

    x = Xstart;
    e542:	b8 2e       	mov	r11, r24
    y = Ystart;
    e544:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e546:	07 ff       	sbrs	r16, 7
    e548:	04 c0       	rjmp	.+8      	; 0xe552 <LCD_ClrLine+0x3c>
        xinc = -1;
    e54a:	6f ef       	ldi	r22, 0xFF	; 255
    e54c:	96 2e       	mov	r9, r22
        dx = -dx;
    e54e:	01 95       	neg	r16
    e550:	02 c0       	rjmp	.+4      	; 0xe556 <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e552:	51 e0       	ldi	r21, 0x01	; 1
    e554:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e556:	17 ff       	sbrs	r17, 7
    e558:	04 c0       	rjmp	.+8      	; 0xe562 <LCD_ClrLine+0x4c>
        yinc = -1;
    e55a:	4f ef       	ldi	r20, 0xFF	; 255
    e55c:	a4 2e       	mov	r10, r20
        dy = -dy;
    e55e:	11 95       	neg	r17
    e560:	02 c0       	rjmp	.+4      	; 0xe566 <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e562:	31 e0       	ldi	r19, 0x01	; 1
    e564:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e566:	10 17       	cp	r17, r16
    e568:	d4 f4       	brge	.+52     	; 0xe59e <LCD_ClrLine+0x88>
        e = dy - dx;
    e56a:	c1 2f       	mov	r28, r17
    e56c:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e56e:	dd 24       	eor	r13, r13
    e570:	e0 2e       	mov	r14, r16
    e572:	ff 24       	eor	r15, r15
    e574:	e7 fc       	sbrc	r14, 7
    e576:	f0 94       	com	r15
    e578:	f7 fc       	sbrc	r15, 7
    e57a:	2a c0       	rjmp	.+84     	; 0xe5d0 <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e57c:	6c 2d       	mov	r22, r12
    e57e:	8b 2d       	mov	r24, r11
    e580:	0e 94 33 6d 	call	0xda66	; 0xda66 <LCD_ClrPixel>
            if (e >= 0){
    e584:	c7 fd       	sbrc	r28, 7
    e586:	02 c0       	rjmp	.+4      	; 0xe58c <LCD_ClrLine+0x76>
                e -= dx;
    e588:	c0 1b       	sub	r28, r16
                y += yinc;
    e58a:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e58c:	c1 0f       	add	r28, r17
            x += xinc;
    e58e:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e590:	d3 94       	inc	r13
    e592:	8d 2d       	mov	r24, r13
    e594:	99 27       	eor	r25, r25
    e596:	e8 16       	cp	r14, r24
    e598:	f9 06       	cpc	r15, r25
    e59a:	84 f7       	brge	.-32     	; 0xe57c <LCD_ClrLine+0x66>
    e59c:	19 c0       	rjmp	.+50     	; 0xe5d0 <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e59e:	c0 2f       	mov	r28, r16
    e5a0:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e5a2:	dd 24       	eor	r13, r13
    e5a4:	e1 2e       	mov	r14, r17
    e5a6:	ff 24       	eor	r15, r15
    e5a8:	e7 fc       	sbrc	r14, 7
    e5aa:	f0 94       	com	r15
    e5ac:	f7 fc       	sbrc	r15, 7
    e5ae:	10 c0       	rjmp	.+32     	; 0xe5d0 <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e5b0:	6c 2d       	mov	r22, r12
    e5b2:	8b 2d       	mov	r24, r11
    e5b4:	0e 94 33 6d 	call	0xda66	; 0xda66 <LCD_ClrPixel>
    
            if (e >= 0){
    e5b8:	c7 fd       	sbrc	r28, 7
    e5ba:	02 c0       	rjmp	.+4      	; 0xe5c0 <LCD_ClrLine+0xaa>
                e -= dy;
    e5bc:	c1 1b       	sub	r28, r17
                x += xinc;
    e5be:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e5c0:	c0 0f       	add	r28, r16
            y += yinc;
    e5c2:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e5c4:	d3 94       	inc	r13
    e5c6:	8d 2d       	mov	r24, r13
    e5c8:	99 27       	eor	r25, r25
    e5ca:	e8 16       	cp	r14, r24
    e5cc:	f9 06       	cpc	r15, r25
    e5ce:	84 f7       	brge	.-32     	; 0xe5b0 <LCD_ClrLine+0x9a>
    e5d0:	cf 91       	pop	r28
    e5d2:	1f 91       	pop	r17
    e5d4:	0f 91       	pop	r16
    e5d6:	ff 90       	pop	r15
    e5d8:	ef 90       	pop	r14
    e5da:	df 90       	pop	r13
    e5dc:	cf 90       	pop	r12
    e5de:	bf 90       	pop	r11
    e5e0:	af 90       	pop	r10
    e5e2:	9f 90       	pop	r9
    e5e4:	08 95       	ret

0000e5e6 <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e5e6:	87 b1       	in	r24, 0x07	; 7
    e5e8:	87 70       	andi	r24, 0x07	; 7
    e5ea:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e5ec:	88 b1       	in	r24, 0x08	; 8
    e5ee:	88 6f       	ori	r24, 0xF8	; 248
    e5f0:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e5f2:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e5f4:	24 9a       	sbi	0x04, 4	; 4
    e5f6:	08 95       	ret

0000e5f8 <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e5f8:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e5fa:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e5fc:	90 91 6b 00 	lds	r25, 0x006B
    e600:	9f 7e       	andi	r25, 0xEF	; 239
    e602:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e606:	91 e0       	ldi	r25, 0x01	; 1
    e608:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e60a:	8f bf       	out	0x3f, r24	; 63
    e60c:	08 95       	ret

0000e60e <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e60e:	1f 92       	push	r1
    e610:	0f 92       	push	r0
    e612:	0f b6       	in	r0, 0x3f	; 63
    e614:	0f 92       	push	r0
    e616:	11 24       	eor	r1, r1
    e618:	2f 93       	push	r18
    e61a:	3f 93       	push	r19
    e61c:	4f 93       	push	r20
    e61e:	5f 93       	push	r21
    e620:	6f 93       	push	r22
    e622:	7f 93       	push	r23
    e624:	8f 93       	push	r24
    e626:	9f 93       	push	r25
    e628:	af 93       	push	r26
    e62a:	bf 93       	push	r27
    e62c:	ef 93       	push	r30
    e62e:	ff 93       	push	r31
	POWER_WakeupCallback();
    e630:	0e 94 b7 73 	call	0xe76e	; 0xe76e <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e634:	0e 94 f3 72 	call	0xe5e6	; 0xe5e6 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e638:	0e 94 fc 72 	call	0xe5f8	; 0xe5f8 <JOYSTICK_DisableWakeupInterrupt>
    e63c:	ff 91       	pop	r31
    e63e:	ef 91       	pop	r30
    e640:	bf 91       	pop	r27
    e642:	af 91       	pop	r26
    e644:	9f 91       	pop	r25
    e646:	8f 91       	pop	r24
    e648:	7f 91       	pop	r23
    e64a:	6f 91       	pop	r22
    e64c:	5f 91       	pop	r21
    e64e:	4f 91       	pop	r20
    e650:	3f 91       	pop	r19
    e652:	2f 91       	pop	r18
    e654:	0f 90       	pop	r0
    e656:	0f be       	out	0x3f, r0	; 63
    e658:	0f 90       	pop	r0
    e65a:	1f 90       	pop	r1
    e65c:	18 95       	reti

0000e65e <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e65e:	0f 93       	push	r16
    e660:	1f 93       	push	r17
    e662:	18 2f       	mov	r17, r24
    e664:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e666:	0e 94 f3 72 	call	0xe5e6	; 0xe5e6 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e66a:	0e 94 fc 72 	call	0xe5f8	; 0xe5f8 <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e66e:	10 93 39 02 	sts	0x0239, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e672:	00 93 38 02 	sts	0x0238, r16
    e676:	1f 91       	pop	r17
    e678:	0f 91       	pop	r16
    e67a:	08 95       	ret

0000e67c <JOYSTICK_GetState>:
/*
 * \return  Current state of the joystick
 */
uint8_t JOYSTICK_GetState( void )
{
	return JOYSTICK_currentState;
    e67c:	80 91 3b 02 	lds	r24, 0x023B
}
    e680:	99 27       	eor	r25, r25
    e682:	08 95       	ret

0000e684 <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e684:	0f 93       	push	r16
    e686:	1f 93       	push	r17
    e688:	cf 93       	push	r28
    e68a:	df 93       	push	r29
    e68c:	cd b7       	in	r28, 0x3d	; 61
    e68e:	de b7       	in	r29, 0x3e	; 62
    e690:	25 97       	sbiw	r28, 0x05	; 5
    e692:	0f b6       	in	r0, 0x3f	; 63
    e694:	f8 94       	cli
    e696:	de bf       	out	0x3e, r29	; 62
    e698:	0f be       	out	0x3f, r0	; 63
    e69a:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e69c:	36 b1       	in	r19, 0x06	; 6
    e69e:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e6a0:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e6a2:	80 91 3c 02 	lds	r24, 0x023C
    e6a6:	38 17       	cp	r19, r24
    e6a8:	19 f0       	breq	.+6      	; 0xe6b0 <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e6aa:	30 93 3c 02 	sts	0x023C, r19
    e6ae:	54 c0       	rjmp	.+168    	; 0xe758 <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e6b0:	20 91 3b 02 	lds	r18, 0x023B
    e6b4:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e6b6:	02 2f       	mov	r16, r18
    e6b8:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e6ba:	50 91 3b 02 	lds	r21, 0x023B
    e6be:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e6c0:	92 2f       	mov	r25, r18
    e6c2:	90 95       	com	r25
    e6c4:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e6c6:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e6c8:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e6ca:	41 e0       	ldi	r20, 0x01	; 1
    e6cc:	ad e3       	ldi	r26, 0x3D	; 61
    e6ce:	b2 e0       	ldi	r27, 0x02	; 2
    e6d0:	e5 e4       	ldi	r30, 0x45	; 69
    e6d2:	f2 e0       	ldi	r31, 0x02	; 2
    e6d4:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e6d6:	80 81       	ld	r24, Z
    e6d8:	88 23       	and	r24, r24
    e6da:	11 f0       	breq	.+4      	; 0xe6e0 <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e6dc:	81 50       	subi	r24, 0x01	; 1
    e6de:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e6e0:	80 2f       	mov	r24, r16
    e6e2:	84 23       	and	r24, r20
    e6e4:	49 f0       	breq	.+18     	; 0xe6f8 <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e6e6:	80 91 39 02 	lds	r24, 0x0239
    e6ea:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e6ec:	80 81       	ld	r24, Z
    e6ee:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e6f0:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e6f2:	80 91 38 02 	lds	r24, 0x0238
    e6f6:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e6f8:	89 2f       	mov	r24, r25
    e6fa:	84 23       	and	r24, r20
    e6fc:	41 f0       	breq	.+16     	; 0xe70e <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e6fe:	8c 91       	ld	r24, X
    e700:	88 23       	and	r24, r24
    e702:	29 f0       	breq	.+10     	; 0xe70e <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e704:	81 50       	subi	r24, 0x01	; 1
    e706:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e708:	88 23       	and	r24, r24
    e70a:	09 f4       	brne	.+2      	; 0xe70e <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e70c:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e70e:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e710:	61 50       	subi	r22, 0x01	; 1
    e712:	31 96       	adiw	r30, 0x01	; 1
    e714:	11 96       	adiw	r26, 0x01	; 1
    e716:	67 ff       	sbrs	r22, 7
    e718:	de cf       	rjmp	.-68     	; 0xe6d6 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e71a:	80 91 3a 02 	lds	r24, 0x023A
    e71e:	87 2b       	or	r24, r23
    e720:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e724:	95 2f       	mov	r25, r21
    e726:	90 95       	com	r25
    e728:	80 91 3a 02 	lds	r24, 0x023A
    e72c:	89 23       	and	r24, r25
    e72e:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentState = newState;
    e732:	30 93 3b 02 	sts	0x023B, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e736:	e0 91 36 02 	lds	r30, 0x0236
    e73a:	f0 91 37 02 	lds	r31, 0x0237
    e73e:	30 97       	sbiw	r30, 0x00	; 0
    e740:	59 f0       	breq	.+22     	; 0xe758 <JOYSTICK_PollingHandler+0xd4>
    e742:	27 2b       	or	r18, r23
    e744:	21 2b       	or	r18, r17
    e746:	41 f0       	breq	.+16     	; 0xe758 <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e748:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e74a:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e74c:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e74e:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e750:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e752:	ce 01       	movw	r24, r28
    e754:	01 96       	adiw	r24, 0x01	; 1
    e756:	09 95       	icall
    e758:	25 96       	adiw	r28, 0x05	; 5
    e75a:	0f b6       	in	r0, 0x3f	; 63
    e75c:	f8 94       	cli
    e75e:	de bf       	out	0x3e, r29	; 62
    e760:	0f be       	out	0x3f, r0	; 63
    e762:	cd bf       	out	0x3d, r28	; 61
    e764:	df 91       	pop	r29
    e766:	cf 91       	pop	r28
    e768:	1f 91       	pop	r17
    e76a:	0f 91       	pop	r16
    e76c:	08 95       	ret

0000e76e <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e76e:	81 e0       	ldi	r24, 0x01	; 1
    e770:	80 93 4d 02 	sts	0x024D, r24
    e774:	08 95       	ret

0000e776 <POWER_EnterIdleSleepMode>:
}

void POWER_EnterIdleSleepMode( void )
{
	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | (1 << SE);
    e776:	81 e0       	ldi	r24, 0x01	; 1
    e778:	83 bf       	out	0x33, r24	; 51
	CAL_sleep();
    e77a:	88 95       	sleep
	SMCR = (0 << SE);
    e77c:	13 be       	out	0x33, r1	; 51
    e77e:	08 95       	ret

0000e780 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e780:	80 91 65 00 	lds	r24, 0x0065
    e784:	87 7f       	andi	r24, 0xF7	; 247
    e786:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e78a:	8d b1       	in	r24, 0x0d	; 13
    e78c:	88 63       	ori	r24, 0x38	; 56
    e78e:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e790:	80 91 51 02 	lds	r24, 0x0251
    e794:	99 27       	eor	r25, r25
    e796:	90 93 99 00 	sts	0x0099, r25
    e79a:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e79e:	80 91 50 02 	lds	r24, 0x0250
    e7a2:	99 27       	eor	r25, r25
    e7a4:	90 93 9b 00 	sts	0x009B, r25
    e7a8:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e7ac:	80 91 4f 02 	lds	r24, 0x024F
    e7b0:	99 27       	eor	r25, r25
    e7b2:	90 93 9d 00 	sts	0x009D, r25
    e7b6:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e7ba:	89 ea       	ldi	r24, 0xA9	; 169
    e7bc:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e7c0:	81 e0       	ldi	r24, 0x01	; 1
    e7c2:	80 93 91 00 	sts	0x0091, r24
    e7c6:	08 95       	ret

0000e7c8 <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e7c8:	cf 93       	push	r28
    e7ca:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e7cc:	e0 91 51 02 	lds	r30, 0x0251
    green = BACKLIGHT_green;
    e7d0:	f0 91 50 02 	lds	r31, 0x0250
    blue = BACKLIGHT_blue;
    e7d4:	c0 91 4f 02 	lds	r28, 0x024F
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e7d8:	2f ef       	ldi	r18, 0xFF	; 255
    e7da:	30 e0       	ldi	r19, 0x00	; 0
    e7dc:	e8 9f       	mul	r30, r24
    e7de:	c0 01       	movw	r24, r0
    e7e0:	11 24       	eor	r1, r1
    e7e2:	b9 01       	movw	r22, r18
    e7e4:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    e7e8:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e7ea:	f4 9f       	mul	r31, r20
    e7ec:	c0 01       	movw	r24, r0
    e7ee:	11 24       	eor	r1, r1
    e7f0:	b9 01       	movw	r22, r18
    e7f2:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    e7f6:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e7f8:	c4 9f       	mul	r28, r20
    e7fa:	c0 01       	movw	r24, r0
    e7fc:	11 24       	eor	r1, r1
    e7fe:	b9 01       	movw	r22, r18
    e800:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e804:	40 93 4e 02 	sts	0x024E, r20
    OCR_RED = red;
    e808:	8e 2f       	mov	r24, r30
    e80a:	99 27       	eor	r25, r25
    e80c:	90 93 99 00 	sts	0x0099, r25
    e810:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e814:	8f 2f       	mov	r24, r31
    e816:	99 27       	eor	r25, r25
    e818:	90 93 9b 00 	sts	0x009B, r25
    e81c:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e820:	86 2f       	mov	r24, r22
    e822:	99 27       	eor	r25, r25
    e824:	90 93 9d 00 	sts	0x009D, r25
    e828:	80 93 9c 00 	sts	0x009C, r24
    e82c:	cf 91       	pop	r28
    e82e:	08 95       	ret

0000e830 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e830:	38 2f       	mov	r19, r24
    e832:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e834:	80 93 51 02 	sts	0x0251, r24
    BACKLIGHT_green = green;
    e838:	60 93 50 02 	sts	0x0250, r22
    BACKLIGHT_blue = blue;
    e83c:	40 93 4f 02 	sts	0x024F, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e840:	20 91 4e 02 	lds	r18, 0x024E
    e844:	2f 3f       	cpi	r18, 0xFF	; 255
    e846:	c1 f0       	breq	.+48     	; 0xe878 <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e848:	82 9f       	mul	r24, r18
    e84a:	c0 01       	movw	r24, r0
    e84c:	11 24       	eor	r1, r1
    e84e:	6f ef       	ldi	r22, 0xFF	; 255
    e850:	70 e0       	ldi	r23, 0x00	; 0
    e852:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    e856:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e858:	e2 9f       	mul	r30, r18
    e85a:	c0 01       	movw	r24, r0
    e85c:	11 24       	eor	r1, r1
    e85e:	6f ef       	ldi	r22, 0xFF	; 255
    e860:	70 e0       	ldi	r23, 0x00	; 0
    e862:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    e866:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e868:	42 9f       	mul	r20, r18
    e86a:	c0 01       	movw	r24, r0
    e86c:	11 24       	eor	r1, r1
    e86e:	6f ef       	ldi	r22, 0xFF	; 255
    e870:	70 e0       	ldi	r23, 0x00	; 0
    e872:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    e876:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    e878:	83 2f       	mov	r24, r19
    e87a:	99 27       	eor	r25, r25
    e87c:	90 93 99 00 	sts	0x0099, r25
    e880:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e884:	8e 2f       	mov	r24, r30
    e886:	99 27       	eor	r25, r25
    e888:	90 93 9b 00 	sts	0x009B, r25
    e88c:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e890:	84 2f       	mov	r24, r20
    e892:	99 27       	eor	r25, r25
    e894:	90 93 9d 00 	sts	0x009D, r25
    e898:	80 93 9c 00 	sts	0x009C, r24
    e89c:	08 95       	ret

0000e89e <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    e89e:	cf 93       	push	r28
    e8a0:	df 93       	push	r29
    e8a2:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    e8a4:	ed 01       	movw	r28, r26
    e8a6:	88 85       	ldd	r24, Y+8	; 0x08
    e8a8:	88 23       	and	r24, r24
    e8aa:	e1 f3       	breq	.-8      	; 0xe8a4 <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    e8ac:	ec 81       	ldd	r30, Y+4	; 0x04
    e8ae:	fd 81       	ldd	r31, Y+5	; 0x05
    e8b0:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e8b2:	2a 81       	ldd	r18, Y+2	; 0x02
    e8b4:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    e8b6:	8c 81       	ldd	r24, Y+4	; 0x04
    e8b8:	9d 81       	ldd	r25, Y+5	; 0x05
    e8ba:	82 17       	cp	r24, r18
    e8bc:	93 07       	cpc	r25, r19
    e8be:	31 f4       	brne	.+12     	; 0xe8cc <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    e8c0:	8d 91       	ld	r24, X+
    e8c2:	9c 91       	ld	r25, X
    e8c4:	11 97       	sbiw	r26, 0x01	; 1
    e8c6:	9d 83       	std	Y+5, r25	; 0x05
    e8c8:	8c 83       	std	Y+4, r24	; 0x04
    e8ca:	06 c0       	rjmp	.+12     	; 0xe8d8 <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    e8cc:	fd 01       	movw	r30, r26
    e8ce:	84 81       	ldd	r24, Z+4	; 0x04
    e8d0:	95 81       	ldd	r25, Z+5	; 0x05
    e8d2:	01 96       	adiw	r24, 0x01	; 1
    e8d4:	95 83       	std	Z+5, r25	; 0x05
    e8d6:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    e8d8:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e8da:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e8dc:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    e8de:	ed 01       	movw	r28, r26
    e8e0:	89 85       	ldd	r24, Y+9	; 0x09
    e8e2:	88 23       	and	r24, r24
    e8e4:	09 f4       	brne	.+2      	; 0xe8e8 <FIFO_InternalPutData+0x4a>
    e8e6:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    e8e8:	fd 01       	movw	r30, r26
    e8ea:	80 85       	ldd	r24, Z+8	; 0x08
    e8ec:	81 50       	subi	r24, 0x01	; 1
    e8ee:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    e8f0:	81 85       	ldd	r24, Z+9	; 0x09
    e8f2:	8f 5f       	subi	r24, 0xFF	; 255
    e8f4:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    e8f6:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e8f8:	22 23       	and	r18, r18
    e8fa:	49 f0       	breq	.+18     	; 0xe90e <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e8fc:	84 85       	ldd	r24, Z+12	; 0x0c
    e8fe:	95 85       	ldd	r25, Z+13	; 0x0d
    e900:	89 2b       	or	r24, r25
    e902:	29 f0       	breq	.+10     	; 0xe90e <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e904:	04 84       	ldd	r0, Z+12	; 0x0c
    e906:	f5 85       	ldd	r31, Z+13	; 0x0d
    e908:	e0 2d       	mov	r30, r0
    e90a:	cd 01       	movw	r24, r26
    e90c:	09 95       	icall
    e90e:	df 91       	pop	r29
    e910:	cf 91       	pop	r28
    e912:	08 95       	ret

0000e914 <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e914:	cf 93       	push	r28
    e916:	df 93       	push	r29
    e918:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e91a:	89 85       	ldd	r24, Y+9	; 0x09
    e91c:	88 23       	and	r24, r24
    e91e:	e9 f3       	breq	.-6      	; 0xe91a <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e920:	2a 81       	ldd	r18, Y+2	; 0x02
    e922:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e924:	8e 81       	ldd	r24, Y+6	; 0x06
    e926:	9f 81       	ldd	r25, Y+7	; 0x07
    e928:	82 17       	cp	r24, r18
    e92a:	93 07       	cpc	r25, r19
    e92c:	19 f4       	brne	.+6      	; 0xe934 <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e92e:	88 81       	ld	r24, Y
    e930:	99 81       	ldd	r25, Y+1	; 0x01
    e932:	03 c0       	rjmp	.+6      	; 0xe93a <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e934:	8e 81       	ldd	r24, Y+6	; 0x06
    e936:	9f 81       	ldd	r25, Y+7	; 0x07
    e938:	01 96       	adiw	r24, 0x01	; 1
    e93a:	9f 83       	std	Y+7, r25	; 0x07
    e93c:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e93e:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e940:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e942:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e944:	88 85       	ldd	r24, Y+8	; 0x08
    e946:	88 23       	and	r24, r24
    e948:	09 f4       	brne	.+2      	; 0xe94c <FIFO_InternalGetData+0x38>
    e94a:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e94c:	88 85       	ldd	r24, Y+8	; 0x08
    e94e:	8f 5f       	subi	r24, 0xFF	; 255
    e950:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e952:	89 85       	ldd	r24, Y+9	; 0x09
    e954:	81 50       	subi	r24, 0x01	; 1
    e956:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e958:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e95a:	22 23       	and	r18, r18
    e95c:	41 f0       	breq	.+16     	; 0xe96e <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e95e:	8a 85       	ldd	r24, Y+10	; 0x0a
    e960:	9b 85       	ldd	r25, Y+11	; 0x0b
    e962:	89 2b       	or	r24, r25
    e964:	21 f0       	breq	.+8      	; 0xe96e <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e966:	ea 85       	ldd	r30, Y+10	; 0x0a
    e968:	fb 85       	ldd	r31, Y+11	; 0x0b
    e96a:	ce 01       	movw	r24, r28
    e96c:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e96e:	ee 81       	ldd	r30, Y+6	; 0x06
    e970:	ff 81       	ldd	r31, Y+7	; 0x07
    e972:	80 81       	ld	r24, Z
}
    e974:	99 27       	eor	r25, r25
    e976:	df 91       	pop	r29
    e978:	cf 91       	pop	r28
    e97a:	08 95       	ret

0000e97c <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e97c:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e97e:	71 83       	std	Z+1, r23	; 0x01
    e980:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e982:	cb 01       	movw	r24, r22
    e984:	84 0f       	add	r24, r20
    e986:	91 1d       	adc	r25, r1
    e988:	01 97       	sbiw	r24, 0x01	; 1
    e98a:	93 83       	std	Z+3, r25	; 0x03
    e98c:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e98e:	75 83       	std	Z+5, r23	; 0x05
    e990:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e992:	97 83       	std	Z+7, r25	; 0x07
    e994:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e996:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e998:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e99a:	13 86       	std	Z+11, r1	; 0x0b
    e99c:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e99e:	15 86       	std	Z+13, r1	; 0x0d
    e9a0:	14 86       	std	Z+12, r1	; 0x0c
    e9a2:	08 95       	ret

0000e9a4 <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e9a4:	0e 94 8a 74 	call	0xe914	; 0xe914 <FIFO_InternalGetData>
	
	return data;
}
    e9a8:	99 27       	eor	r25, r25
    e9aa:	08 95       	ret

0000e9ac <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e9ac:	0f 93       	push	r16
    e9ae:	1f 93       	push	r17
    e9b0:	cf 93       	push	r28
    e9b2:	df 93       	push	r29
    e9b4:	cd b7       	in	r28, 0x3d	; 61
    e9b6:	de b7       	in	r29, 0x3e	; 62
    e9b8:	21 97       	sbiw	r28, 0x01	; 1
    e9ba:	0f b6       	in	r0, 0x3f	; 63
    e9bc:	f8 94       	cli
    e9be:	de bf       	out	0x3e, r29	; 62
    e9c0:	0f be       	out	0x3f, r0	; 63
    e9c2:	cd bf       	out	0x3d, r28	; 61
    e9c4:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e9c6:	fc 01       	movw	r30, r24
    e9c8:	81 85       	ldd	r24, Z+9	; 0x09
    e9ca:	88 23       	and	r24, r24
    e9cc:	41 f0       	breq	.+16     	; 0xe9de <FIFO_Flush+0x32>
    e9ce:	c8 01       	movw	r24, r16
    e9d0:	0e 94 d2 74 	call	0xe9a4	; 0xe9a4 <FIFO_GetUint8>
    e9d4:	89 83       	std	Y+1, r24	; 0x01
    e9d6:	f8 01       	movw	r30, r16
    e9d8:	81 85       	ldd	r24, Z+9	; 0x09
    e9da:	88 23       	and	r24, r24
    e9dc:	c1 f7       	brne	.-16     	; 0xe9ce <FIFO_Flush+0x22>
    e9de:	21 96       	adiw	r28, 0x01	; 1
    e9e0:	0f b6       	in	r0, 0x3f	; 63
    e9e2:	f8 94       	cli
    e9e4:	de bf       	out	0x3e, r29	; 62
    e9e6:	0f be       	out	0x3f, r0	; 63
    e9e8:	cd bf       	out	0x3d, r28	; 61
    e9ea:	df 91       	pop	r29
    e9ec:	cf 91       	pop	r28
    e9ee:	1f 91       	pop	r17
    e9f0:	0f 91       	pop	r16
    e9f2:	08 95       	ret

0000e9f4 <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e9f4:	ef 92       	push	r14
    e9f6:	ff 92       	push	r15
    e9f8:	0f 93       	push	r16
    e9fa:	1f 93       	push	r17
    e9fc:	7c 01       	movw	r14, r24
    e9fe:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    ea00:	0e 94 4f 74 	call	0xe89e	; 0xe89e <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    ea04:	81 2f       	mov	r24, r17
    ea06:	99 27       	eor	r25, r25
    ea08:	68 2f       	mov	r22, r24
    ea0a:	c7 01       	movw	r24, r14
    ea0c:	0e 94 4f 74 	call	0xe89e	; 0xe89e <FIFO_InternalPutData>
    ea10:	1f 91       	pop	r17
    ea12:	0f 91       	pop	r16
    ea14:	ff 90       	pop	r15
    ea16:	ef 90       	pop	r14
    ea18:	08 95       	ret

0000ea1a <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    ea1a:	ef 92       	push	r14
    ea1c:	ff 92       	push	r15
    ea1e:	0f 93       	push	r16
    ea20:	1f 93       	push	r17
    ea22:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    ea24:	0e 94 8a 74 	call	0xe914	; 0xe914 <FIFO_InternalGetData>
    ea28:	e8 2e       	mov	r14, r24
    ea2a:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    ea2c:	c8 01       	movw	r24, r16
    ea2e:	0e 94 8a 74 	call	0xe914	; 0xe914 <FIFO_InternalGetData>
    ea32:	99 27       	eor	r25, r25
    ea34:	98 2f       	mov	r25, r24
    ea36:	88 27       	eor	r24, r24
	
	return data;
}
    ea38:	8e 29       	or	r24, r14
    ea3a:	9f 29       	or	r25, r15
    ea3c:	1f 91       	pop	r17
    ea3e:	0f 91       	pop	r16
    ea40:	ff 90       	pop	r15
    ea42:	ef 90       	pop	r14
    ea44:	08 95       	ret

0000ea46 <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    ea46:	90 93 53 02 	sts	0x0253, r25
    ea4a:	80 93 52 02 	sts	0x0252, r24
	MEMBLOCK_manager.bags = workspace;
    ea4e:	70 93 55 02 	sts	0x0255, r23
    ea52:	60 93 54 02 	sts	0x0254, r22
    ea56:	08 95       	ret

0000ea58 <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    ea58:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    ea5a:	28 e1       	ldi	r18, 0x18	; 24
    ea5c:	30 e0       	ldi	r19, 0x00	; 0
    ea5e:	82 9f       	mul	r24, r18
    ea60:	f0 01       	movw	r30, r0
    ea62:	83 9f       	mul	r24, r19
    ea64:	f0 0d       	add	r31, r0
    ea66:	92 9f       	mul	r25, r18
    ea68:	f0 0d       	add	r31, r0
    ea6a:	11 24       	eor	r1, r1
    ea6c:	cf 01       	movw	r24, r30
    ea6e:	e0 91 54 02 	lds	r30, 0x0254
    ea72:	f0 91 55 02 	lds	r31, 0x0255
    ea76:	e8 0f       	add	r30, r24
    ea78:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    ea7a:	71 83       	std	Z+1, r23	; 0x01
    ea7c:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    ea7e:	53 83       	std	Z+3, r21	; 0x03
    ea80:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    ea82:	55 83       	std	Z+5, r21	; 0x05
    ea84:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    ea86:	13 86       	std	Z+11, r1	; 0x0b
    ea88:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    ea8a:	75 87       	std	Z+13, r23	; 0x0d
    ea8c:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    ea8e:	17 86       	std	Z+15, r1	; 0x0f
    ea90:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    ea92:	10 8a       	std	Z+16, r1	; 0x10
    ea94:	11 8a       	std	Z+17, r1	; 0x11
    ea96:	12 8a       	std	Z+18, r1	; 0x12
    ea98:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    ea9a:	14 8a       	std	Z+20, r1	; 0x14
    ea9c:	15 8a       	std	Z+21, r1	; 0x15
    ea9e:	16 8a       	std	Z+22, r1	; 0x16
    eaa0:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    eaa2:	b7 83       	std	Z+7, r27	; 0x07
    eaa4:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    eaa6:	64 9f       	mul	r22, r20
    eaa8:	c0 01       	movw	r24, r0
    eaaa:	65 9f       	mul	r22, r21
    eaac:	90 0d       	add	r25, r0
    eaae:	74 9f       	mul	r23, r20
    eab0:	90 0d       	add	r25, r0
    eab2:	11 24       	eor	r1, r1
    eab4:	8a 0f       	add	r24, r26
    eab6:	9b 1f       	adc	r25, r27
    eab8:	91 87       	std	Z+9, r25	; 0x09
    eaba:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    eabc:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    eabe:	49 5f       	subi	r20, 0xF9	; 249
    eac0:	5f 4f       	sbci	r21, 0xFF	; 255
    eac2:	83 e0       	ldi	r24, 0x03	; 3
    eac4:	56 95       	lsr	r21
    eac6:	47 95       	ror	r20
    eac8:	8a 95       	dec	r24
    eaca:	e1 f7       	brne	.-8      	; 0xeac4 <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    eacc:	41 15       	cp	r20, r1
    eace:	51 05       	cpc	r21, r1
    ead0:	29 f0       	breq	.+10     	; 0xeadc <MEMBLOCK_InitBag+0x84>
    ead2:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    ead4:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    ead6:	41 50       	subi	r20, 0x01	; 1
    ead8:	50 40       	sbci	r21, 0x00	; 0
    eada:	e1 f7       	brne	.-8      	; 0xead4 <MEMBLOCK_InitBag+0x7c>
    eadc:	08 95       	ret

0000eade <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    eade:	af 92       	push	r10
    eae0:	bf 92       	push	r11
    eae2:	cf 92       	push	r12
    eae4:	df 92       	push	r13
    eae6:	ff 92       	push	r15
    eae8:	0f 93       	push	r16
    eaea:	1f 93       	push	r17
    eaec:	cf 93       	push	r28
    eaee:	df 93       	push	r29
    eaf0:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    eaf2:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    eaf4:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    eaf6:	c0 91 54 02 	lds	r28, 0x0254
    eafa:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    eafe:	20 91 52 02 	lds	r18, 0x0252
    eb02:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    eb06:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    eb08:	21 15       	cp	r18, r1
    eb0a:	31 05       	cpc	r19, r1
    eb0c:	09 f4       	brne	.+2      	; 0xeb10 <MEMBLOCK_Allocate+0x32>
    eb0e:	81 c0       	rjmp	.+258    	; 0xec12 <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    eb10:	88 81       	ld	r24, Y
    eb12:	99 81       	ldd	r25, Y+1	; 0x01
    eb14:	86 17       	cp	r24, r22
    eb16:	97 07       	cpc	r25, r23
    eb18:	30 f0       	brcs	.+12     	; 0xeb26 <MEMBLOCK_Allocate+0x48>
    eb1a:	8c 81       	ldd	r24, Y+4	; 0x04
    eb1c:	9d 81       	ldd	r25, Y+5	; 0x05
    eb1e:	89 2b       	or	r24, r25
    eb20:	11 f0       	breq	.+4      	; 0xeb26 <MEMBLOCK_Allocate+0x48>
			found = true;
    eb22:	41 e0       	ldi	r20, 0x01	; 1
    eb24:	03 c0       	rjmp	.+6      	; 0xeb2c <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    eb26:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    eb28:	21 50       	subi	r18, 0x01	; 1
    eb2a:	30 40       	sbci	r19, 0x00	; 0
    eb2c:	21 15       	cp	r18, r1
    eb2e:	31 05       	cpc	r19, r1
    eb30:	11 f0       	breq	.+4      	; 0xeb36 <MEMBLOCK_Allocate+0x58>
    eb32:	44 23       	and	r20, r20
    eb34:	69 f3       	breq	.-38     	; 0xeb10 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    eb36:	44 23       	and	r20, r20
    eb38:	09 f4       	brne	.+2      	; 0xeb3c <MEMBLOCK_Allocate+0x5e>
    eb3a:	6b c0       	rjmp	.+214    	; 0xec12 <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    eb3c:	e8 85       	ldd	r30, Y+8	; 0x08
    eb3e:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    eb40:	20 e0       	ldi	r18, 0x00	; 0
    eb42:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    eb44:	80 81       	ld	r24, Z
    eb46:	88 23       	and	r24, r24
    eb48:	21 f4       	brne	.+8      	; 0xeb52 <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    eb4a:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    eb4c:	28 5f       	subi	r18, 0xF8	; 248
    eb4e:	3f 4f       	sbci	r19, 0xFF	; 255
    eb50:	f9 cf       	rjmp	.-14     	; 0xeb44 <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    eb52:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    eb54:	90 81       	ld	r25, Z
    eb56:	97 fd       	sbrc	r25, 7
    eb58:	06 c0       	rjmp	.+12     	; 0xeb66 <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    eb5a:	46 95       	lsr	r20
		++blockIndex;
    eb5c:	2f 5f       	subi	r18, 0xFF	; 255
    eb5e:	3f 4f       	sbci	r19, 0xFF	; 255
    eb60:	89 2f       	mov	r24, r25
    eb62:	84 23       	and	r24, r20
    eb64:	d1 f3       	breq	.-12     	; 0xeb5a <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    eb66:	40 95       	com	r20
    eb68:	94 23       	and	r25, r20
    eb6a:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    eb6c:	8c 81       	ldd	r24, Y+4	; 0x04
    eb6e:	9d 81       	ldd	r25, Y+5	; 0x05
    eb70:	01 97       	sbiw	r24, 0x01	; 1
    eb72:	9d 83       	std	Y+5, r25	; 0x05
    eb74:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    eb76:	48 81       	ld	r20, Y
    eb78:	59 81       	ldd	r21, Y+1	; 0x01
    eb7a:	24 9f       	mul	r18, r20
    eb7c:	50 01       	movw	r10, r0
    eb7e:	25 9f       	mul	r18, r21
    eb80:	b0 0c       	add	r11, r0
    eb82:	34 9f       	mul	r19, r20
    eb84:	b0 0c       	add	r11, r0
    eb86:	11 24       	eor	r1, r1
    eb88:	0e 81       	ldd	r16, Y+6	; 0x06
    eb8a:	1f 81       	ldd	r17, Y+7	; 0x07
    eb8c:	0a 0d       	add	r16, r10
    eb8e:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    eb90:	2a 81       	ldd	r18, Y+2	; 0x02
    eb92:	3b 81       	ldd	r19, Y+3	; 0x03
    eb94:	28 1b       	sub	r18, r24
    eb96:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    eb98:	8a 85       	ldd	r24, Y+10	; 0x0a
    eb9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    eb9c:	82 17       	cp	r24, r18
    eb9e:	93 07       	cpc	r25, r19
    eba0:	10 f4       	brcc	.+4      	; 0xeba6 <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    eba2:	3b 87       	std	Y+11, r19	; 0x0b
    eba4:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    eba6:	8e 85       	ldd	r24, Y+14	; 0x0e
    eba8:	9f 85       	ldd	r25, Y+15	; 0x0f
    ebaa:	86 17       	cp	r24, r22
    ebac:	97 07       	cpc	r25, r23
    ebae:	10 f4       	brcc	.+4      	; 0xebb4 <MEMBLOCK_Allocate+0xd6>
    ebb0:	7f 87       	std	Y+15, r23	; 0x0f
    ebb2:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    ebb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    ebb6:	9d 85       	ldd	r25, Y+13	; 0x0d
    ebb8:	68 17       	cp	r22, r24
    ebba:	79 07       	cpc	r23, r25
    ebbc:	10 f4       	brcc	.+4      	; 0xebc2 <MEMBLOCK_Allocate+0xe4>
    ebbe:	7d 87       	std	Y+13, r23	; 0x0d
    ebc0:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    ebc2:	88 89       	ldd	r24, Y+16	; 0x10
    ebc4:	99 89       	ldd	r25, Y+17	; 0x11
    ebc6:	aa 89       	ldd	r26, Y+18	; 0x12
    ebc8:	bb 89       	ldd	r27, Y+19	; 0x13
    ebca:	01 96       	adiw	r24, 0x01	; 1
    ebcc:	a1 1d       	adc	r26, r1
    ebce:	b1 1d       	adc	r27, r1
    ebd0:	88 8b       	std	Y+16, r24	; 0x10
    ebd2:	99 8b       	std	Y+17, r25	; 0x11
    ebd4:	aa 8b       	std	Y+18, r26	; 0x12
    ebd6:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    ebd8:	cb 01       	movw	r24, r22
    ebda:	aa 27       	eor	r26, r26
    ebdc:	bb 27       	eor	r27, r27
    ebde:	ba 2f       	mov	r27, r26
    ebe0:	a9 2f       	mov	r26, r25
    ebe2:	98 2f       	mov	r25, r24
    ebe4:	88 27       	eor	r24, r24
    ebe6:	5a 01       	movw	r10, r20
    ebe8:	cc 24       	eor	r12, r12
    ebea:	dd 24       	eor	r13, r13
    ebec:	a6 01       	movw	r20, r12
    ebee:	95 01       	movw	r18, r10
    ebf0:	bc 01       	movw	r22, r24
    ebf2:	cd 01       	movw	r24, r26
    ebf4:	0e 94 b4 7c 	call	0xf968	; 0xf968 <__udivmodsi4>
		bag->allocationUtilization += utilization;
    ebf8:	8c 89       	ldd	r24, Y+20	; 0x14
    ebfa:	9d 89       	ldd	r25, Y+21	; 0x15
    ebfc:	ae 89       	ldd	r26, Y+22	; 0x16
    ebfe:	bf 89       	ldd	r27, Y+23	; 0x17
    ec00:	82 0f       	add	r24, r18
    ec02:	93 1f       	adc	r25, r19
    ec04:	a4 1f       	adc	r26, r20
    ec06:	b5 1f       	adc	r27, r21
    ec08:	8c 8b       	std	Y+20, r24	; 0x14
    ec0a:	9d 8b       	std	Y+21, r25	; 0x15
    ec0c:	ae 8b       	std	Y+22, r26	; 0x16
    ec0e:	bf 8b       	std	Y+23, r27	; 0x17
    ec10:	02 c0       	rjmp	.+4      	; 0xec16 <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    ec12:	00 e0       	ldi	r16, 0x00	; 0
    ec14:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    ec16:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    ec18:	c8 01       	movw	r24, r16
    ec1a:	df 91       	pop	r29
    ec1c:	cf 91       	pop	r28
    ec1e:	1f 91       	pop	r17
    ec20:	0f 91       	pop	r16
    ec22:	ff 90       	pop	r15
    ec24:	df 90       	pop	r13
    ec26:	cf 90       	pop	r12
    ec28:	bf 90       	pop	r11
    ec2a:	af 90       	pop	r10
    ec2c:	08 95       	ret

0000ec2e <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    ec2e:	cf 93       	push	r28
    ec30:	df 93       	push	r29
    ec32:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    ec34:	89 2b       	or	r24, r25
    ec36:	09 f4       	brne	.+2      	; 0xec3a <MEMBLOCK_Free+0xc>
    ec38:	4e c0       	rjmp	.+156    	; 0xecd6 <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    ec3a:	c0 91 54 02 	lds	r28, 0x0254
    ec3e:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    ec42:	20 91 52 02 	lds	r18, 0x0252
    ec46:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    ec4a:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    ec4c:	21 15       	cp	r18, r1
    ec4e:	31 05       	cpc	r19, r1
    ec50:	e9 f1       	breq	.+122    	; 0xeccc <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    ec52:	8e 81       	ldd	r24, Y+6	; 0x06
    ec54:	9f 81       	ldd	r25, Y+7	; 0x07
    ec56:	48 17       	cp	r20, r24
    ec58:	59 07       	cpc	r21, r25
    ec5a:	38 f0       	brcs	.+14     	; 0xec6a <MEMBLOCK_Free+0x3c>
    ec5c:	88 85       	ldd	r24, Y+8	; 0x08
    ec5e:	99 85       	ldd	r25, Y+9	; 0x09
    ec60:	48 17       	cp	r20, r24
    ec62:	59 07       	cpc	r21, r25
    ec64:	10 f4       	brcc	.+4      	; 0xec6a <MEMBLOCK_Free+0x3c>
			found = true;
    ec66:	61 e0       	ldi	r22, 0x01	; 1
    ec68:	03 c0       	rjmp	.+6      	; 0xec70 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    ec6a:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    ec6c:	21 50       	subi	r18, 0x01	; 1
    ec6e:	30 40       	sbci	r19, 0x00	; 0
    ec70:	21 15       	cp	r18, r1
    ec72:	31 05       	cpc	r19, r1
    ec74:	11 f0       	breq	.+4      	; 0xec7a <MEMBLOCK_Free+0x4c>
    ec76:	66 23       	and	r22, r22
    ec78:	61 f3       	breq	.-40     	; 0xec52 <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    ec7a:	66 23       	and	r22, r22
    ec7c:	39 f1       	breq	.+78     	; 0xeccc <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    ec7e:	8e 81       	ldd	r24, Y+6	; 0x06
    ec80:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    ec82:	28 81       	ld	r18, Y
    ec84:	39 81       	ldd	r19, Y+1	; 0x01
    ec86:	48 1b       	sub	r20, r24
    ec88:	59 0b       	sbc	r21, r25
    ec8a:	ca 01       	movw	r24, r20
    ec8c:	b9 01       	movw	r22, r18
    ec8e:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    ec92:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    ec94:	cb 01       	movw	r24, r22
    ec96:	43 e0       	ldi	r20, 0x03	; 3
    ec98:	96 95       	lsr	r25
    ec9a:	87 95       	ror	r24
    ec9c:	4a 95       	dec	r20
    ec9e:	e1 f7       	brne	.-8      	; 0xec98 <MEMBLOCK_Free+0x6a>
    eca0:	e8 85       	ldd	r30, Y+8	; 0x08
    eca2:	f9 85       	ldd	r31, Y+9	; 0x09
    eca4:	e8 0f       	add	r30, r24
    eca6:	f9 1f       	adc	r31, r25
    eca8:	27 70       	andi	r18, 0x07	; 7
    ecaa:	30 70       	andi	r19, 0x00	; 0
    ecac:	80 e8       	ldi	r24, 0x80	; 128
    ecae:	90 e0       	ldi	r25, 0x00	; 0
    ecb0:	02 c0       	rjmp	.+4      	; 0xecb6 <MEMBLOCK_Free+0x88>
    ecb2:	95 95       	asr	r25
    ecb4:	87 95       	ror	r24
    ecb6:	2a 95       	dec	r18
    ecb8:	e2 f7       	brpl	.-8      	; 0xecb2 <MEMBLOCK_Free+0x84>
    ecba:	20 81       	ld	r18, Z
    ecbc:	28 2b       	or	r18, r24
    ecbe:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    ecc0:	8c 81       	ldd	r24, Y+4	; 0x04
    ecc2:	9d 81       	ldd	r25, Y+5	; 0x05
    ecc4:	01 96       	adiw	r24, 0x01	; 1
    ecc6:	9d 83       	std	Y+5, r25	; 0x05
    ecc8:	8c 83       	std	Y+4, r24	; 0x04
    ecca:	05 c0       	rjmp	.+10     	; 0xecd6 <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    eccc:	80 91 56 02 	lds	r24, 0x0256
    ecd0:	8f 5f       	subi	r24, 0xFF	; 255
    ecd2:	80 93 56 02 	sts	0x0256, r24
    ecd6:	df 91       	pop	r29
    ecd8:	cf 91       	pop	r28
    ecda:	08 95       	ret

0000ecdc <PICTURE_CopyFullscreenFlashToLcd>:

/*!
 * \param  pPictureInFlash  Pointer to picture in flash with same size as LCD
 */
void PICTURE_CopyFullscreenFlashToLcd ( const uint8_t CAL_PGM(* pPictureInFlash))
{
    ecdc:	1f 93       	push	r17
    ecde:	cf 93       	push	r28
    ece0:	df 93       	push	r29
    ece2:	ec 01       	movw	r28, r24
  uint8_t page = 0;
    ece4:	10 e0       	ldi	r17, 0x00	; 0
  do{
    LCD_WritePage_F( pPictureInFlash, page, 0, LCD_WIDTH);  // Write full row with page height.
    ece6:	20 e8       	ldi	r18, 0x80	; 128
    ece8:	40 e0       	ldi	r20, 0x00	; 0
    ecea:	61 2f       	mov	r22, r17
    ecec:	ce 01       	movw	r24, r28
    ecee:	0e 94 4c 70 	call	0xe098	; 0xe098 <LCD_WritePage_F>
    pPictureInFlash += LCD_WIDTH;
    ecf2:	c0 58       	subi	r28, 0x80	; 128
    ecf4:	df 4f       	sbci	r29, 0xFF	; 255
    page++;
    ecf6:	1f 5f       	subi	r17, 0xFF	; 255
  }while (page < LCD_PAGE_HEIGHT);
    ecf8:	18 30       	cpi	r17, 0x08	; 8
    ecfa:	a8 f3       	brcs	.-22     	; 0xece6 <PICTURE_CopyFullscreenFlashToLcd+0xa>
    ecfc:	df 91       	pop	r29
    ecfe:	cf 91       	pop	r28
    ed00:	1f 91       	pop	r17
    ed02:	08 95       	ret

0000ed04 <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    ed04:	8f 92       	push	r8
    ed06:	9f 92       	push	r9
    ed08:	af 92       	push	r10
    ed0a:	cf 92       	push	r12
    ed0c:	ef 92       	push	r14
    ed0e:	0f 93       	push	r16
    ed10:	1f 93       	push	r17
    ed12:	cf 93       	push	r28
    ed14:	df 93       	push	r29
    ed16:	4b 01       	movw	r8, r22
    ed18:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    ed1a:	33 27       	eor	r19, r19
    ed1c:	62 9f       	mul	r22, r18
    ed1e:	e0 01       	movw	r28, r0
    ed20:	63 9f       	mul	r22, r19
    ed22:	d0 0d       	add	r29, r0
    ed24:	72 9f       	mul	r23, r18
    ed26:	d0 0d       	add	r29, r0
    ed28:	11 24       	eor	r1, r1
    ed2a:	c4 0f       	add	r28, r20
    ed2c:	d5 1f       	adc	r29, r21
    ed2e:	c8 0f       	add	r28, r24
    ed30:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    ed32:	11 50       	subi	r17, 0x01	; 1
    ed34:	1f 3f       	cpi	r17, 0xFF	; 255
    ed36:	59 f0       	breq	.+22     	; 0xed4e <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    ed38:	2c 2d       	mov	r18, r12
    ed3a:	40 2f       	mov	r20, r16
    ed3c:	6e 2d       	mov	r22, r14
    ed3e:	ce 01       	movw	r24, r28
    ed40:	0e 94 4c 70 	call	0xe098	; 0xe098 <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    ed44:	c8 0d       	add	r28, r8
    ed46:	d9 1d       	adc	r29, r9
    destPage++;
    ed48:	e3 94       	inc	r14
    ed4a:	11 50       	subi	r17, 0x01	; 1
    ed4c:	a8 f7       	brcc	.-22     	; 0xed38 <PICTURE_CopyFlashToLcd+0x34>
    ed4e:	df 91       	pop	r29
    ed50:	cf 91       	pop	r28
    ed52:	1f 91       	pop	r17
    ed54:	0f 91       	pop	r16
    ed56:	ef 90       	pop	r14
    ed58:	cf 90       	pop	r12
    ed5a:	af 90       	pop	r10
    ed5c:	9f 90       	pop	r9
    ed5e:	8f 90       	pop	r8
    ed60:	08 95       	ret

0000ed62 <FORMS_CalculateStartPages>:
 * been added or removed from the form.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_CalculateStartPages( FORMS_form_t * form )
{
    ed62:	cf 93       	push	r28
    ed64:	df 93       	push	r29
    ed66:	fc 01       	movw	r30, r24
	// Setup iteration variables.
	FORMS_element_t * element = form->firstElement;
    ed68:	a6 81       	ldd	r26, Z+6	; 0x06
    ed6a:	b7 81       	ldd	r27, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    ed6c:	95 81       	ldd	r25, Z+5	; 0x05
	FORMS_size_t currentHeight = 0;
    ed6e:	40 e0       	ldi	r20, 0x00	; 0
	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
		currentHeight += element->height;
		element = element->next;
		--elementsLeft;
    ed70:	99 23       	and	r25, r25
    ed72:	41 f0       	breq	.+16     	; 0xed84 <FORMS_CalculateStartPages+0x22>
	FORMS_size_t elementsLeft = form->elementCount;
	FORMS_size_t currentHeight = 0;

	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
    ed74:	4c 93       	st	X, r20
		currentHeight += element->height;
    ed76:	ed 01       	movw	r28, r26
    ed78:	89 81       	ldd	r24, Y+1	; 0x01
    ed7a:	48 0f       	add	r20, r24
		element = element->next;
    ed7c:	ad 85       	ldd	r26, Y+13	; 0x0d
    ed7e:	be 85       	ldd	r27, Y+14	; 0x0e
		--elementsLeft;
    ed80:	91 50       	subi	r25, 0x01	; 1
    ed82:	f6 cf       	rjmp	.-20     	; 0xed70 <FORMS_CalculateStartPages+0xe>
	}

	// Now, we know the height of the entire form.
	form->height = currentHeight;
    ed84:	43 83       	std	Z+3, r20	; 0x03
	
	// Make sure form is not scrolled beyond bottom now when we have recalculated.
	if (form->height < LCD_PAGE_COUNT) {
    ed86:	48 30       	cpi	r20, 0x08	; 8
    ed88:	10 f4       	brcc	.+4      	; 0xed8e <FORMS_CalculateStartPages+0x2c>
		form->firstVisiblePage = 0;
    ed8a:	12 82       	std	Z+2, r1	; 0x02
    ed8c:	0a c0       	rjmp	.+20     	; 0xeda2 <FORMS_CalculateStartPages+0x40>
	}
	else if ((form->firstVisiblePage + LCD_PAGE_COUNT) > form->height) {
    ed8e:	82 81       	ldd	r24, Z+2	; 0x02
    ed90:	99 27       	eor	r25, r25
    ed92:	08 96       	adiw	r24, 0x08	; 8
    ed94:	24 2f       	mov	r18, r20
    ed96:	33 27       	eor	r19, r19
    ed98:	28 17       	cp	r18, r24
    ed9a:	39 07       	cpc	r19, r25
    ed9c:	14 f4       	brge	.+4      	; 0xeda2 <FORMS_CalculateStartPages+0x40>
		form->firstVisiblePage = currentHeight - LCD_PAGE_COUNT;
    ed9e:	48 50       	subi	r20, 0x08	; 8
    eda0:	42 83       	std	Z+2, r20	; 0x02
	}
	
	// Indicate that we have recalculated start pages.
	form->needsRecalculation = false;
    eda2:	84 81       	ldd	r24, Z+4	; 0x04
    eda4:	8d 7f       	andi	r24, 0xFD	; 253
    eda6:	84 83       	std	Z+4, r24	; 0x04
    eda8:	df 91       	pop	r29
    edaa:	cf 91       	pop	r28
    edac:	08 95       	ret

0000edae <FORMS_DrawScrollbar>:
 * position indicator if required.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawScrollbar( FORMS_form_t const * form )
{
    edae:	ff 92       	push	r15
    edb0:	0f 93       	push	r16
    edb2:	1f 93       	push	r17
    edb4:	cf 93       	push	r28
    edb6:	df 93       	push	r29
    edb8:	8c 01       	movw	r16, r24
	// Draw vertical separator and clear old bar.
	LCD_SetVLine( LCD_WIDTH - 3, 0, LCD_HEIGHT - 1 );
    edba:	4f e3       	ldi	r20, 0x3F	; 63
    edbc:	60 e0       	ldi	r22, 0x00	; 0
    edbe:	8d e7       	ldi	r24, 0x7D	; 125
    edc0:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
	LCD_ClrVLine( LCD_WIDTH - 2, 0, LCD_HEIGHT - 1 );
    edc4:	4f e3       	ldi	r20, 0x3F	; 63
    edc6:	60 e0       	ldi	r22, 0x00	; 0
    edc8:	8e e7       	ldi	r24, 0x7E	; 126
    edca:	0e 94 82 6e 	call	0xdd04	; 0xdd04 <LCD_ClrVLine>
	LCD_ClrVLine( LCD_WIDTH - 1, 0, LCD_HEIGHT - 1 );
    edce:	4f e3       	ldi	r20, 0x3F	; 63
    edd0:	60 e0       	ldi	r22, 0x00	; 0
    edd2:	8f e7       	ldi	r24, 0x7F	; 127
    edd4:	0e 94 82 6e 	call	0xdd04	; 0xdd04 <LCD_ClrVLine>

	// Draw scroll position indicator if form is not empty.
	if (form->height > LCD_PAGE_COUNT) {
    edd8:	e8 01       	movw	r28, r16
    edda:	fb 80       	ldd	r15, Y+3	; 0x03
    eddc:	e8 e0       	ldi	r30, 0x08	; 8
    edde:	ef 15       	cp	r30, r15
    ede0:	08 f0       	brcs	.+2      	; 0xede4 <FORMS_DrawScrollbar+0x36>
    ede2:	5d c0       	rjmp	.+186    	; 0xee9e <FORMS_DrawScrollbar+0xf0>
		// Indicator height shows the size of the visible parts
		// related to the entire form height.
		uint16_t heightOfBar = (uint16_t) LCD_HEIGHT * LCD_PAGE_COUNT / form->height;
    ede4:	2f 2d       	mov	r18, r15
    ede6:	33 27       	eor	r19, r19
    ede8:	80 e0       	ldi	r24, 0x00	; 0
    edea:	92 e0       	ldi	r25, 0x02	; 2
    edec:	b9 01       	movw	r22, r18
    edee:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    edf2:	fb 01       	movw	r30, r22
		
		// Make sure the bar is not too small or too large.
		if (heightOfBar == 0) {
    edf4:	61 15       	cp	r22, r1
    edf6:	71 05       	cpc	r23, r1
    edf8:	19 f4       	brne	.+6      	; 0xee00 <FORMS_DrawScrollbar+0x52>
			heightOfBar = 1;
    edfa:	e1 e0       	ldi	r30, 0x01	; 1
    edfc:	f0 e0       	ldi	r31, 0x00	; 0
    edfe:	05 c0       	rjmp	.+10     	; 0xee0a <FORMS_DrawScrollbar+0x5c>
		}
		else if (heightOfBar > LCD_HEIGHT) {
    ee00:	61 34       	cpi	r22, 0x41	; 65
    ee02:	71 05       	cpc	r23, r1
    ee04:	10 f0       	brcs	.+4      	; 0xee0a <FORMS_DrawScrollbar+0x5c>
			heightOfBar = LCD_HEIGHT;
    ee06:	e0 e4       	ldi	r30, 0x40	; 64
    ee08:	f0 e0       	ldi	r31, 0x00	; 0
		}

		// Position shows the relative position of the visible area within the entire form.
		uint16_t startOfBar = form->firstVisiblePage * (LCD_HEIGHT - heightOfBar) /
    ee0a:	e8 01       	movw	r28, r16
    ee0c:	8a 81       	ldd	r24, Y+2	; 0x02
    ee0e:	48 2f       	mov	r20, r24
    ee10:	55 27       	eor	r21, r21
    ee12:	80 e4       	ldi	r24, 0x40	; 64
    ee14:	90 e0       	ldi	r25, 0x00	; 0
    ee16:	8e 1b       	sub	r24, r30
    ee18:	9f 0b       	sbc	r25, r31
    ee1a:	2f 2d       	mov	r18, r15
    ee1c:	33 27       	eor	r19, r19
    ee1e:	28 50       	subi	r18, 0x08	; 8
    ee20:	30 40       	sbci	r19, 0x00	; 0
    ee22:	48 9f       	mul	r20, r24
    ee24:	b0 01       	movw	r22, r0
    ee26:	49 9f       	mul	r20, r25
    ee28:	70 0d       	add	r23, r0
    ee2a:	58 9f       	mul	r21, r24
    ee2c:	70 0d       	add	r23, r0
    ee2e:	11 24       	eor	r1, r1
    ee30:	cb 01       	movw	r24, r22
    ee32:	b9 01       	movw	r22, r18
    ee34:	0e 94 8d 7c 	call	0xf91a	; 0xf91a <__udivmodhi4>
    ee38:	eb 01       	movw	r28, r22
		                      (form->height - LCD_PAGE_COUNT);

		// Adjust start according to LCD hardware scrolling.
		startOfBar = (startOfBar + (LCD_GetTopPage() * LCD_PAGE_HEIGHT)) % LCD_HEIGHT;
    ee3a:	80 91 35 02 	lds	r24, 0x0235
    ee3e:	99 27       	eor	r25, r25
    ee40:	23 e0       	ldi	r18, 0x03	; 3
    ee42:	88 0f       	add	r24, r24
    ee44:	99 1f       	adc	r25, r25
    ee46:	2a 95       	dec	r18
    ee48:	e1 f7       	brne	.-8      	; 0xee42 <FORMS_DrawScrollbar+0x94>
    ee4a:	c8 0f       	add	r28, r24
    ee4c:	d9 1f       	adc	r29, r25
    ee4e:	cf 73       	andi	r28, 0x3F	; 63
    ee50:	d0 70       	andi	r29, 0x00	; 0

		// If bar wraps from bottom to top after adjusting it, draw it in two steps.
		if ((startOfBar + heightOfBar) > LCD_HEIGHT) {
    ee52:	ce 01       	movw	r24, r28
    ee54:	8e 0f       	add	r24, r30
    ee56:	9f 1f       	adc	r25, r31
    ee58:	1c 2f       	mov	r17, r28
    ee5a:	1e 0f       	add	r17, r30
    ee5c:	81 34       	cpi	r24, 0x41	; 65
    ee5e:	91 05       	cpc	r25, r1
    ee60:	98 f0       	brcs	.+38     	; 0xee88 <FORMS_DrawScrollbar+0xda>
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, LCD_HEIGHT - 1 );
    ee62:	4f e3       	ldi	r20, 0x3F	; 63
    ee64:	6c 2f       	mov	r22, r28
    ee66:	8e e7       	ldi	r24, 0x7E	; 126
    ee68:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, LCD_HEIGHT - 1 );
    ee6c:	4f e3       	ldi	r20, 0x3F	; 63
    ee6e:	6c 2f       	mov	r22, r28
    ee70:	8f e7       	ldi	r24, 0x7F	; 127
    ee72:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 2, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ee76:	11 54       	subi	r17, 0x41	; 65
    ee78:	41 2f       	mov	r20, r17
    ee7a:	60 e0       	ldi	r22, 0x00	; 0
    ee7c:	8e e7       	ldi	r24, 0x7E	; 126
    ee7e:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ee82:	41 2f       	mov	r20, r17
    ee84:	60 e0       	ldi	r22, 0x00	; 0
    ee86:	08 c0       	rjmp	.+16     	; 0xee98 <FORMS_DrawScrollbar+0xea>
		} else {
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, startOfBar + heightOfBar - 1 );
    ee88:	11 50       	subi	r17, 0x01	; 1
    ee8a:	41 2f       	mov	r20, r17
    ee8c:	6c 2f       	mov	r22, r28
    ee8e:	8e e7       	ldi	r24, 0x7E	; 126
    ee90:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, startOfBar + heightOfBar - 1 );
    ee94:	41 2f       	mov	r20, r17
    ee96:	6c 2f       	mov	r22, r28
    ee98:	8f e7       	ldi	r24, 0x7F	; 127
    ee9a:	0e 94 ca 6d 	call	0xdb94	; 0xdb94 <LCD_SetVLine>
    ee9e:	df 91       	pop	r29
    eea0:	cf 91       	pop	r28
    eea2:	1f 91       	pop	r17
    eea4:	0f 91       	pop	r16
    eea6:	ff 90       	pop	r15
    eea8:	08 95       	ret

0000eeaa <FORMS_DrawFocusIndicator>:
 * It draws the focus arrow next to the current focused page on screen.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
    eeaa:	0f 93       	push	r16
    eeac:	1f 93       	push	r17
    eeae:	cf 93       	push	r28
    eeb0:	df 93       	push	r29
    eeb2:	8c 01       	movw	r16, r24
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    eeb4:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
    eeb6:	40 e4       	ldi	r20, 0x40	; 64
    eeb8:	60 e0       	ldi	r22, 0x00	; 0
    eeba:	8c 2f       	mov	r24, r28
    eebc:	0e 94 82 6e 	call	0xdd04	; 0xdd04 <LCD_ClrVLine>
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    eec0:	cf 5f       	subi	r28, 0xFF	; 255
    eec2:	c4 30       	cpi	r28, 0x04	; 4
    eec4:	c0 f3       	brcs	.-16     	; 0xeeb6 <FORMS_DrawFocusIndicator+0xc>
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
	}

	// Check that focused element is within visible area.
	FORMS_size_t focusedPage = form->focusedElement->startPage +
    eec6:	d8 01       	movw	r26, r16
    eec8:	ed 91       	ld	r30, X+
    eeca:	fc 91       	ld	r31, X
    eecc:	60 81       	ld	r22, Z
    eece:	82 81       	ldd	r24, Z+2	; 0x02
    eed0:	68 0f       	add	r22, r24
	                             form->focusedElement->focusedPage;
	if ((focusedPage >= form->firstVisiblePage) &&
    eed2:	e8 01       	movw	r28, r16
    eed4:	ea 81       	ldd	r30, Y+2	; 0x02
    eed6:	6e 17       	cp	r22, r30
    eed8:	98 f0       	brcs	.+38     	; 0xef00 <FORMS_DrawFocusIndicator+0x56>
    eeda:	26 2f       	mov	r18, r22
    eedc:	33 27       	eor	r19, r19
    eede:	8e 2f       	mov	r24, r30
    eee0:	99 27       	eor	r25, r25
    eee2:	08 96       	adiw	r24, 0x08	; 8
    eee4:	28 17       	cp	r18, r24
    eee6:	39 07       	cpc	r19, r25
    eee8:	5c f4       	brge	.+22     	; 0xef00 <FORMS_DrawFocusIndicator+0x56>
	    (focusedPage < (form->firstVisiblePage + LCD_PAGE_COUNT))) {
		// Find start position for indicator, adjust for LCD hardware scrolling.
		uint8_t lcdPage = LCD_ROW2PAGE( focusedPage - form->firstVisiblePage );
    eeea:	6e 1b       	sub	r22, r30
    eeec:	80 91 35 02 	lds	r24, 0x0235
    eef0:	68 0f       	add	r22, r24
    eef2:	67 70       	andi	r22, 0x07	; 7

		// Draw indicator.
		LCD_WritePage_F( FORMS_focusIndicator, lcdPage, 0, FORMS_FIRST_COLUMN );
    eef4:	24 e0       	ldi	r18, 0x04	; 4
    eef6:	40 e0       	ldi	r20, 0x00	; 0
    eef8:	82 e5       	ldi	r24, 0x52	; 82
    eefa:	90 ed       	ldi	r25, 0xD0	; 208
    eefc:	0e 94 4c 70 	call	0xe098	; 0xe098 <LCD_WritePage_F>
    ef00:	df 91       	pop	r29
    ef02:	cf 91       	pop	r28
    ef04:	1f 91       	pop	r17
    ef06:	0f 91       	pop	r16
    ef08:	08 95       	ret

0000ef0a <FORMS_Draw>:
 * after displaying other graphics on top, for instance.
 *
 * \param  form  Pointer to form to draw.
 */
void FORMS_Draw( FORMS_form_t * form )
{
    ef0a:	cf 92       	push	r12
    ef0c:	df 92       	push	r13
    ef0e:	ef 92       	push	r14
    ef10:	ff 92       	push	r15
    ef12:	0f 93       	push	r16
    ef14:	1f 93       	push	r17
    ef16:	cf 93       	push	r28
    ef18:	df 93       	push	r29
    ef1a:	8c 01       	movw	r16, r24
	// Clear screen first.
	LCD_SetScreen( 0x00 );
    ef1c:	80 e0       	ldi	r24, 0x00	; 0
    ef1e:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_SetScreen>
	
	// Exit if there is nothing to draw for some reason.
	if (form->elementCount == 0) {return; }
    ef22:	f8 01       	movw	r30, r16
    ef24:	85 81       	ldd	r24, Z+5	; 0x05
    ef26:	88 23       	and	r24, r24
    ef28:	09 f4       	brne	.+2      	; 0xef2c <FORMS_Draw+0x22>
    ef2a:	55 c0       	rjmp	.+170    	; 0xefd6 <FORMS_Draw+0xcc>

	// Calculate start pages if required.
	if (form->needsRecalculation) {
    ef2c:	84 81       	ldd	r24, Z+4	; 0x04
    ef2e:	81 ff       	sbrs	r24, 1
    ef30:	03 c0       	rjmp	.+6      	; 0xef38 <FORMS_Draw+0x2e>
		FORMS_CalculateStartPages( form );
    ef32:	c8 01       	movw	r24, r16
    ef34:	0e 94 b1 76 	call	0xed62	; 0xed62 <FORMS_CalculateStartPages>
	}

	// Setup iteration variables.
	FORMS_element_t const * element = form->firstElement;
    ef38:	f8 01       	movw	r30, r16
    ef3a:	c6 81       	ldd	r28, Z+6	; 0x06
    ef3c:	d7 81       	ldd	r29, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    ef3e:	e5 80       	ldd	r14, Z+5	; 0x05

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
		--elementsLeft;
    ef40:	ee 20       	and	r14, r14
    ef42:	b9 f0       	breq	.+46     	; 0xef72 <FORMS_Draw+0x68>
    ef44:	98 81       	ld	r25, Y
    ef46:	89 81       	ldd	r24, Y+1	; 0x01
    ef48:	89 0f       	add	r24, r25
    ef4a:	91 2d       	mov	r25, r1
    ef4c:	91 1d       	adc	r25, r1
    ef4e:	01 97       	sbiw	r24, 0x01	; 1
    ef50:	22 81       	ldd	r18, Z+2	; 0x02
    ef52:	33 27       	eor	r19, r19
    ef54:	82 17       	cp	r24, r18
    ef56:	93 07       	cpc	r25, r19
    ef58:	64 f4       	brge	.+24     	; 0xef72 <FORMS_Draw+0x68>
	FORMS_size_t elementsLeft = form->elementCount;

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
    ef5a:	0d 84       	ldd	r0, Y+13	; 0x0d
    ef5c:	de 85       	ldd	r29, Y+14	; 0x0e
    ef5e:	c0 2d       	mov	r28, r0
		--elementsLeft;
    ef60:	ea 94       	dec	r14
    ef62:	39 f0       	breq	.+14     	; 0xef72 <FORMS_Draw+0x68>
    ef64:	98 81       	ld	r25, Y
    ef66:	89 81       	ldd	r24, Y+1	; 0x01
    ef68:	89 0f       	add	r24, r25
    ef6a:	91 2d       	mov	r25, r1
    ef6c:	91 1d       	adc	r25, r1
    ef6e:	01 97       	sbiw	r24, 0x01	; 1
    ef70:	f1 cf       	rjmp	.-30     	; 0xef54 <FORMS_Draw+0x4a>
	}

	// Find first page to draw within element.
	FORMS_size_t internalPage = form->firstVisiblePage - element->startPage;
    ef72:	f8 01       	movw	r30, r16
    ef74:	f2 80       	ldd	r15, Z+2	; 0x02
    ef76:	88 81       	ld	r24, Y
    ef78:	f8 1a       	sub	r15, r24

	// Draw nodes page by page until end of LCD reached or no more elements left.
	uint8_t lcdPage = LCD_GetTopPage();
    ef7a:	d0 90 35 02 	lds	r13, 0x0235
	uint8_t lcdPagesLeft = LCD_PAGE_COUNT;
    ef7e:	38 e0       	ldi	r19, 0x08	; 8
    ef80:	c3 2e       	mov	r12, r19
			}
			--lcdPagesLeft;
		}
		internalPage = 0;
		element = element->next;
		--elementsLeft;
    ef82:	ee 20       	and	r14, r14
    ef84:	f1 f0       	breq	.+60     	; 0xefc2 <FORMS_Draw+0xb8>
    ef86:	14 c0       	rjmp	.+40     	; 0xefb0 <FORMS_Draw+0xa6>
			++internalPage;
			++lcdPage;
			if (lcdPage >= LCD_PAGE_COUNT) {
				lcdPage = 0;
			}
			--lcdPagesLeft;
    ef88:	89 81       	ldd	r24, Y+1	; 0x01
    ef8a:	f8 16       	cp	r15, r24
    ef8c:	98 f4       	brcc	.+38     	; 0xefb4 <FORMS_Draw+0xaa>
	while ((lcdPagesLeft > 0) && (elementsLeft > 0)) {
		while ((lcdPagesLeft > 0) && (internalPage < element->height)) {

			///mt element->traits->DrawPage( element, internalPage, lcdPage );
			FORMS_DrawPageFunc_t drawPageFunc;
			drawPageFunc = (FORMS_DrawPageFunc_t)(CAL_pgm_read_pvoid(&(element->traits->DrawPage)));
    ef8e:	ed 81       	ldd	r30, Y+5	; 0x05
    ef90:	fe 81       	ldd	r31, Y+6	; 0x06
    ef92:	38 96       	adiw	r30, 0x08	; 8
    ef94:	25 91       	lpm	r18, Z+
    ef96:	34 91       	lpm	r19, Z+
			drawPageFunc( element, internalPage, lcdPage );
    ef98:	4d 2d       	mov	r20, r13
    ef9a:	6f 2d       	mov	r22, r15
    ef9c:	ce 01       	movw	r24, r28
    ef9e:	f9 01       	movw	r30, r18
    efa0:	09 95       	icall

			++internalPage;
    efa2:	f3 94       	inc	r15
			++lcdPage;
    efa4:	d3 94       	inc	r13
			if (lcdPage >= LCD_PAGE_COUNT) {
    efa6:	f7 e0       	ldi	r31, 0x07	; 7
    efa8:	fd 15       	cp	r31, r13
    efaa:	08 f4       	brcc	.+2      	; 0xefae <FORMS_Draw+0xa4>
				lcdPage = 0;
    efac:	dd 24       	eor	r13, r13
			}
			--lcdPagesLeft;
    efae:	ca 94       	dec	r12
    efb0:	cc 20       	and	r12, r12
    efb2:	51 f7       	brne	.-44     	; 0xef88 <FORMS_Draw+0x7e>
		}
		internalPage = 0;
    efb4:	ff 24       	eor	r15, r15
		element = element->next;
    efb6:	0d 84       	ldd	r0, Y+13	; 0x0d
    efb8:	de 85       	ldd	r29, Y+14	; 0x0e
    efba:	c0 2d       	mov	r28, r0
		--elementsLeft;
    efbc:	ea 94       	dec	r14
    efbe:	cc 20       	and	r12, r12
    efc0:	01 f7       	brne	.-64     	; 0xef82 <FORMS_Draw+0x78>
	}	

	// Draw non-element form graphics.
	if (form->useScrollbar) {
    efc2:	f8 01       	movw	r30, r16
    efc4:	84 81       	ldd	r24, Z+4	; 0x04
    efc6:	80 ff       	sbrs	r24, 0
    efc8:	03 c0       	rjmp	.+6      	; 0xefd0 <FORMS_Draw+0xc6>
		FORMS_DrawScrollbar( form );
    efca:	c8 01       	movw	r24, r16
    efcc:	0e 94 d7 76 	call	0xedae	; 0xedae <FORMS_DrawScrollbar>
	}
	FORMS_DrawFocusIndicator( form );
    efd0:	c8 01       	movw	r24, r16
    efd2:	0e 94 55 77 	call	0xeeaa	; 0xeeaa <FORMS_DrawFocusIndicator>
    efd6:	df 91       	pop	r29
    efd8:	cf 91       	pop	r28
    efda:	1f 91       	pop	r17
    efdc:	0f 91       	pop	r16
    efde:	ff 90       	pop	r15
    efe0:	ef 90       	pop	r14
    efe2:	df 90       	pop	r13
    efe4:	cf 90       	pop	r12
    efe6:	08 95       	ret

0000efe8 <FORMS_NormalizeLCDScroll>:
 * a pop-up box, without having to compensate for hardware LCD scrolling.
 *
 * \param  form  Pointer to the form currently being on screen.
 */
void FORMS_NormalizeLCDScroll( FORMS_form_t * form )
{
    efe8:	0f 93       	push	r16
    efea:	1f 93       	push	r17
    efec:	8c 01       	movw	r16, r24
	LCD_SetTopPage( 0, 0 );
    efee:	60 e0       	ldi	r22, 0x00	; 0
    eff0:	86 2f       	mov	r24, r22
    eff2:	0e 94 9b 6c 	call	0xd936	; 0xd936 <LCD_SetTopPage>
	FORMS_Draw( form );
    eff6:	c8 01       	movw	r24, r16
    eff8:	0e 94 85 77 	call	0xef0a	; 0xef0a <FORMS_Draw>
    effc:	1f 91       	pop	r17
    effe:	0f 91       	pop	r16
    f000:	08 95       	ret

0000f002 <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    f002:	1f 92       	push	r1
    f004:	0f 92       	push	r0
    f006:	0f b6       	in	r0, 0x3f	; 63
    f008:	0f 92       	push	r0
    f00a:	11 24       	eor	r1, r1
    f00c:	2f 93       	push	r18
    f00e:	3f 93       	push	r19
    f010:	4f 93       	push	r20
    f012:	5f 93       	push	r21
    f014:	6f 93       	push	r22
    f016:	7f 93       	push	r23
    f018:	8f 93       	push	r24
    f01a:	9f 93       	push	r25
    f01c:	af 93       	push	r26
    f01e:	bf 93       	push	r27
    f020:	ef 93       	push	r30
    f022:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    f024:	80 91 6f 18 	lds	r24, 0x186F
    f028:	90 91 70 18 	lds	r25, 0x1870
    f02c:	89 2b       	or	r24, r25
    f02e:	29 f0       	breq	.+10     	; 0xf03a <__vector_15+0x38>
		RTC_TickHandler();
    f030:	e0 91 6f 18 	lds	r30, 0x186F
    f034:	f0 91 70 18 	lds	r31, 0x1870
    f038:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    f03a:	80 91 6e 18 	lds	r24, 0x186E
    f03e:	8f 37       	cpi	r24, 0x7F	; 127
    f040:	30 f4       	brcc	.+12     	; 0xf04e <__vector_15+0x4c>
		++RTC_ticks;
    f042:	80 91 6e 18 	lds	r24, 0x186E
    f046:	8f 5f       	subi	r24, 0xFF	; 255
    f048:	80 93 6e 18 	sts	0x186E, r24
    f04c:	36 c0       	rjmp	.+108    	; 0xf0ba <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    f04e:	10 92 6e 18 	sts	0x186E, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    f052:	80 91 6d 18 	lds	r24, 0x186D
    f056:	8b 33       	cpi	r24, 0x3B	; 59
    f058:	30 f4       	brcc	.+12     	; 0xf066 <__vector_15+0x64>
			++RTC_seconds;
    f05a:	80 91 6d 18 	lds	r24, 0x186D
    f05e:	8f 5f       	subi	r24, 0xFF	; 255
    f060:	80 93 6d 18 	sts	0x186D, r24
    f064:	2a c0       	rjmp	.+84     	; 0xf0ba <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    f066:	10 92 6d 18 	sts	0x186D, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    f06a:	80 91 6c 18 	lds	r24, 0x186C
    f06e:	8b 33       	cpi	r24, 0x3B	; 59
    f070:	30 f4       	brcc	.+12     	; 0xf07e <__vector_15+0x7c>
				++RTC_minutes;
    f072:	80 91 6c 18 	lds	r24, 0x186C
    f076:	8f 5f       	subi	r24, 0xFF	; 255
    f078:	80 93 6c 18 	sts	0x186C, r24
    f07c:	1e c0       	rjmp	.+60     	; 0xf0ba <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    f07e:	10 92 6c 18 	sts	0x186C, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    f082:	80 91 6b 18 	lds	r24, 0x186B
    f086:	87 31       	cpi	r24, 0x17	; 23
    f088:	30 f4       	brcc	.+12     	; 0xf096 <__vector_15+0x94>
					++RTC_hours;
    f08a:	80 91 6b 18 	lds	r24, 0x186B
    f08e:	8f 5f       	subi	r24, 0xFF	; 255
    f090:	80 93 6b 18 	sts	0x186B, r24
    f094:	12 c0       	rjmp	.+36     	; 0xf0ba <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    f096:	10 92 6b 18 	sts	0x186B, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    f09a:	80 91 6a 18 	lds	r24, 0x186A
    f09e:	8f 5f       	subi	r24, 0xFF	; 255
    f0a0:	80 93 6a 18 	sts	0x186A, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    f0a4:	80 91 71 18 	lds	r24, 0x1871
    f0a8:	90 91 72 18 	lds	r25, 0x1872
    f0ac:	89 2b       	or	r24, r25
    f0ae:	29 f0       	breq	.+10     	; 0xf0ba <__vector_15+0xb8>
						RTC_DayHandler();
    f0b0:	e0 91 71 18 	lds	r30, 0x1871
    f0b4:	f0 91 72 18 	lds	r31, 0x1872
    f0b8:	09 95       	icall
    f0ba:	ff 91       	pop	r31
    f0bc:	ef 91       	pop	r30
    f0be:	bf 91       	pop	r27
    f0c0:	af 91       	pop	r26
    f0c2:	9f 91       	pop	r25
    f0c4:	8f 91       	pop	r24
    f0c6:	7f 91       	pop	r23
    f0c8:	6f 91       	pop	r22
    f0ca:	5f 91       	pop	r21
    f0cc:	4f 91       	pop	r20
    f0ce:	3f 91       	pop	r19
    f0d0:	2f 91       	pop	r18
    f0d2:	0f 90       	pop	r0
    f0d4:	0f be       	out	0x3f, r0	; 63
    f0d6:	0f 90       	pop	r0
    f0d8:	1f 90       	pop	r1
    f0da:	18 95       	reti

0000f0dc <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    f0dc:	10 92 70 18 	sts	0x1870, r1
    f0e0:	10 92 6f 18 	sts	0x186F, r1
	RTC_DayHandler = NULL;
    f0e4:	10 92 72 18 	sts	0x1872, r1
    f0e8:	10 92 71 18 	sts	0x1871, r1
	RTC_ticks = 0;
    f0ec:	10 92 6e 18 	sts	0x186E, r1
	RTC_seconds = 0;
    f0f0:	10 92 6d 18 	sts	0x186D, r1
	RTC_minutes = 0;
    f0f4:	10 92 6c 18 	sts	0x186C, r1
	RTC_hours = 0;
    f0f8:	10 92 6b 18 	sts	0x186B, r1
	RTC_days = 0;
    f0fc:	10 92 6a 18 	sts	0x186A, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    f100:	80 91 64 00 	lds	r24, 0x0064
    f104:	8f 7b       	andi	r24, 0xBF	; 191
    f106:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    f10a:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    f10e:	80 e2       	ldi	r24, 0x20	; 32
    f110:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    f114:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    f118:	81 e0       	ldi	r24, 0x01	; 1
    f11a:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    f11e:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    f122:	80 91 b6 00 	lds	r24, 0x00B6
    f126:	99 27       	eor	r25, r25
    f128:	8f 71       	andi	r24, 0x1F	; 31
    f12a:	90 70       	andi	r25, 0x00	; 0
    f12c:	89 2b       	or	r24, r25
    f12e:	c9 f7       	brne	.-14     	; 0xf122 <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    f130:	81 e0       	ldi	r24, 0x01	; 1
    f132:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    f134:	80 93 70 00 	sts	0x0070, r24
    f138:	08 95       	ret

0000f13a <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    f13a:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    f13c:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    f13e:	90 93 70 18 	sts	0x1870, r25
    f142:	80 93 6f 18 	sts	0x186F, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    f146:	2f bf       	out	0x3f, r18	; 63
    f148:	08 95       	ret

0000f14a <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    f14a:	10 92 74 18 	sts	0x1874, r1
    f14e:	10 92 73 18 	sts	0x1873, r1
	TIMING_currentTime = 0;
    f152:	10 92 77 18 	sts	0x1877, r1
    f156:	10 92 78 18 	sts	0x1878, r1
    f15a:	10 92 79 18 	sts	0x1879, r1
    f15e:	10 92 7a 18 	sts	0x187A, r1
    f162:	08 95       	ret

0000f164 <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    f164:	6f 92       	push	r6
    f166:	7f 92       	push	r7
    f168:	9f 92       	push	r9
    f16a:	af 92       	push	r10
    f16c:	bf 92       	push	r11
    f16e:	cf 92       	push	r12
    f170:	df 92       	push	r13
    f172:	ef 92       	push	r14
    f174:	ff 92       	push	r15
    f176:	0f 93       	push	r16
    f178:	1f 93       	push	r17
    f17a:	cf 93       	push	r28
    f17c:	df 93       	push	r29
    f17e:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f180:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    f182:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f184:	60 91 73 18 	lds	r22, 0x1873
    f188:	70 91 74 18 	lds	r23, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f18c:	e0 91 75 18 	lds	r30, 0x1875
    f190:	f0 91 76 18 	lds	r31, 0x1876
    f194:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    f196:	cc 24       	eor	r12, r12
    f198:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    f19a:	dc 01       	movw	r26, r24
    f19c:	ed 90       	ld	r14, X+
    f19e:	fd 90       	ld	r15, X+
    f1a0:	0d 91       	ld	r16, X+
    f1a2:	1c 91       	ld	r17, X
    f1a4:	80 91 77 18 	lds	r24, 0x1877
    f1a8:	90 91 78 18 	lds	r25, 0x1878
    f1ac:	a0 91 79 18 	lds	r26, 0x1879
    f1b0:	b0 91 7a 18 	lds	r27, 0x187A
    f1b4:	8e 15       	cp	r24, r14
    f1b6:	9f 05       	cpc	r25, r15
    f1b8:	a0 07       	cpc	r26, r16
    f1ba:	b1 07       	cpc	r27, r17
    f1bc:	58 f1       	brcs	.+86     	; 0xf214 <TIMING_AddEvent+0xb0>
    f1be:	09 c0       	rjmp	.+18     	; 0xf1d2 <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    f1c0:	61 15       	cp	r22, r1
    f1c2:	71 05       	cpc	r23, r1
    f1c4:	39 f1       	breq	.+78     	; 0xf214 <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    f1c6:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    f1c8:	05 84       	ldd	r0, Z+13	; 0x0d
    f1ca:	f6 85       	ldd	r31, Z+14	; 0x0e
    f1cc:	e0 2d       	mov	r30, r0
			--eventsLeft;
    f1ce:	61 50       	subi	r22, 0x01	; 1
    f1d0:	70 40       	sbci	r23, 0x00	; 0
    f1d2:	20 81       	ld	r18, Z
    f1d4:	31 81       	ldd	r19, Z+1	; 0x01
    f1d6:	42 81       	ldd	r20, Z+2	; 0x02
    f1d8:	53 81       	ldd	r21, Z+3	; 0x03
    f1da:	80 91 77 18 	lds	r24, 0x1877
    f1de:	90 91 78 18 	lds	r25, 0x1878
    f1e2:	a0 91 79 18 	lds	r26, 0x1879
    f1e6:	b0 91 7a 18 	lds	r27, 0x187A
    f1ea:	28 17       	cp	r18, r24
    f1ec:	39 07       	cpc	r19, r25
    f1ee:	4a 07       	cpc	r20, r26
    f1f0:	5b 07       	cpc	r21, r27
    f1f2:	30 f7       	brcc	.-52     	; 0xf1c0 <TIMING_AddEvent+0x5c>
    f1f4:	0f c0       	rjmp	.+30     	; 0xf214 <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    f1f6:	80 81       	ld	r24, Z
    f1f8:	91 81       	ldd	r25, Z+1	; 0x01
    f1fa:	a2 81       	ldd	r26, Z+2	; 0x02
    f1fc:	b3 81       	ldd	r27, Z+3	; 0x03
    f1fe:	8e 15       	cp	r24, r14
    f200:	9f 05       	cpc	r25, r15
    f202:	a0 07       	cpc	r26, r16
    f204:	b1 07       	cpc	r27, r17
    f206:	48 f4       	brcc	.+18     	; 0xf21a <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    f208:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    f20a:	05 84       	ldd	r0, Z+13	; 0x0d
    f20c:	f6 85       	ldd	r31, Z+14	; 0x0e
    f20e:	e0 2d       	mov	r30, r0
		--eventsLeft;
    f210:	61 50       	subi	r22, 0x01	; 1
    f212:	70 40       	sbci	r23, 0x00	; 0
    f214:	61 15       	cp	r22, r1
    f216:	71 05       	cpc	r23, r1
    f218:	71 f7       	brne	.-36     	; 0xf1f6 <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    f21a:	80 91 73 18 	lds	r24, 0x1873
    f21e:	90 91 74 18 	lds	r25, 0x1874
    f222:	68 17       	cp	r22, r24
    f224:	79 07       	cpc	r23, r25
    f226:	a1 f4       	brne	.+40     	; 0xf250 <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    f228:	e3 01       	movw	r28, r6
    f22a:	be 86       	std	Y+14, r11	; 0x0e
    f22c:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    f22e:	70 92 76 18 	sts	0x1876, r7
    f232:	60 92 75 18 	sts	0x1875, r6
		TIMING_nextEventTime = event->triggerTime;
    f236:	88 81       	ld	r24, Y
    f238:	99 81       	ldd	r25, Y+1	; 0x01
    f23a:	aa 81       	ldd	r26, Y+2	; 0x02
    f23c:	bb 81       	ldd	r27, Y+3	; 0x03
    f23e:	80 93 7b 18 	sts	0x187B, r24
    f242:	90 93 7c 18 	sts	0x187C, r25
    f246:	a0 93 7d 18 	sts	0x187D, r26
    f24a:	b0 93 7e 18 	sts	0x187E, r27
    f24e:	06 c0       	rjmp	.+12     	; 0xf25c <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    f250:	e3 01       	movw	r28, r6
    f252:	fe 87       	std	Y+14, r31	; 0x0e
    f254:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    f256:	f6 01       	movw	r30, r12
    f258:	76 86       	std	Z+14, r7	; 0x0e
    f25a:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    f25c:	80 91 73 18 	lds	r24, 0x1873
    f260:	90 91 74 18 	lds	r25, 0x1874
    f264:	01 96       	adiw	r24, 0x01	; 1
    f266:	90 93 74 18 	sts	0x1874, r25
    f26a:	80 93 73 18 	sts	0x1873, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f26e:	9f be       	out	0x3f, r9	; 63
    f270:	df 91       	pop	r29
    f272:	cf 91       	pop	r28
    f274:	1f 91       	pop	r17
    f276:	0f 91       	pop	r16
    f278:	ff 90       	pop	r15
    f27a:	ef 90       	pop	r14
    f27c:	df 90       	pop	r13
    f27e:	cf 90       	pop	r12
    f280:	bf 90       	pop	r11
    f282:	af 90       	pop	r10
    f284:	9f 90       	pop	r9
    f286:	7f 90       	pop	r7
    f288:	6f 90       	pop	r6
    f28a:	08 95       	ret

0000f28c <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    f28c:	0f 93       	push	r16
    f28e:	1f 93       	push	r17
    f290:	cf 93       	push	r28
    f292:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f294:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    f296:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    f298:	80 91 77 18 	lds	r24, 0x1877
    f29c:	90 91 78 18 	lds	r25, 0x1878
    f2a0:	a0 91 79 18 	lds	r26, 0x1879
    f2a4:	b0 91 7a 18 	lds	r27, 0x187A
    f2a8:	01 96       	adiw	r24, 0x01	; 1
    f2aa:	a1 1d       	adc	r26, r1
    f2ac:	b1 1d       	adc	r27, r1
    f2ae:	80 93 77 18 	sts	0x1877, r24
    f2b2:	90 93 78 18 	sts	0x1878, r25
    f2b6:	a0 93 79 18 	sts	0x1879, r26
    f2ba:	b0 93 7a 18 	sts	0x187A, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    f2be:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    f2c0:	80 91 73 18 	lds	r24, 0x1873
    f2c4:	90 91 74 18 	lds	r25, 0x1874
    f2c8:	89 2b       	or	r24, r25
    f2ca:	09 f4       	brne	.+2      	; 0xf2ce <TIMING_TickHandler+0x42>
    f2cc:	70 c0       	rjmp	.+224    	; 0xf3ae <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    f2ce:	20 91 7b 18 	lds	r18, 0x187B
    f2d2:	30 91 7c 18 	lds	r19, 0x187C
    f2d6:	40 91 7d 18 	lds	r20, 0x187D
    f2da:	50 91 7e 18 	lds	r21, 0x187E
		if (TIMING_currentTime != next_event) {
    f2de:	80 91 77 18 	lds	r24, 0x1877
    f2e2:	90 91 78 18 	lds	r25, 0x1878
    f2e6:	a0 91 79 18 	lds	r26, 0x1879
    f2ea:	b0 91 7a 18 	lds	r27, 0x187A
    f2ee:	82 17       	cp	r24, r18
    f2f0:	93 07       	cpc	r25, r19
    f2f2:	a4 07       	cpc	r26, r20
    f2f4:	b5 07       	cpc	r27, r21
    f2f6:	11 f0       	breq	.+4      	; 0xf2fc <TIMING_TickHandler+0x70>
			goon = 0;
    f2f8:	00 e0       	ldi	r16, 0x00	; 0
    f2fa:	50 c0       	rjmp	.+160    	; 0xf39c <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    f2fc:	c0 91 75 18 	lds	r28, 0x1875
    f300:	d0 91 76 18 	lds	r29, 0x1876
			TIMING_firstEvent = event->next;
    f304:	ed 85       	ldd	r30, Y+13	; 0x0d
    f306:	fe 85       	ldd	r31, Y+14	; 0x0e
    f308:	f0 93 76 18 	sts	0x1876, r31
    f30c:	e0 93 75 18 	sts	0x1875, r30
			--TIMING_queueSize;
    f310:	80 91 73 18 	lds	r24, 0x1873
    f314:	90 91 74 18 	lds	r25, 0x1874
    f318:	01 97       	sbiw	r24, 0x01	; 1
    f31a:	90 93 74 18 	sts	0x1874, r25
    f31e:	80 93 73 18 	sts	0x1873, r24
			if (TIMING_queueSize > 0) {
    f322:	80 91 73 18 	lds	r24, 0x1873
    f326:	90 91 74 18 	lds	r25, 0x1874
    f32a:	89 2b       	or	r24, r25
    f32c:	61 f0       	breq	.+24     	; 0xf346 <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    f32e:	80 81       	ld	r24, Z
    f330:	91 81       	ldd	r25, Z+1	; 0x01
    f332:	a2 81       	ldd	r26, Z+2	; 0x02
    f334:	b3 81       	ldd	r27, Z+3	; 0x03
    f336:	80 93 7b 18 	sts	0x187B, r24
    f33a:	90 93 7c 18 	sts	0x187C, r25
    f33e:	a0 93 7d 18 	sts	0x187D, r26
    f342:	b0 93 7e 18 	sts	0x187E, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    f346:	89 85       	ldd	r24, Y+9	; 0x09
    f348:	9a 85       	ldd	r25, Y+10	; 0x0a
    f34a:	00 97       	sbiw	r24, 0x00	; 0
    f34c:	19 f0       	breq	.+6      	; 0xf354 <TIMING_TickHandler+0xc8>
    f34e:	01 97       	sbiw	r24, 0x01	; 1
    f350:	39 f0       	breq	.+14     	; 0xf360 <TIMING_TickHandler+0xd4>
    f352:	09 c0       	rjmp	.+18     	; 0xf366 <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    f354:	eb 85       	ldd	r30, Y+11	; 0x0b
    f356:	fc 85       	ldd	r31, Y+12	; 0x0c
    f358:	80 81       	ld	r24, Z
    f35a:	8f 5f       	subi	r24, 0xFF	; 255
    f35c:	80 83       	st	Z, r24
		break;
    f35e:	03 c0       	rjmp	.+6      	; 0xf366 <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    f360:	eb 85       	ldd	r30, Y+11	; 0x0b
    f362:	fc 85       	ldd	r31, Y+12	; 0x0c
    f364:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    f366:	88 85       	ldd	r24, Y+8	; 0x08
    f368:	8f 3f       	cpi	r24, 0xFF	; 255
    f36a:	11 f0       	breq	.+4      	; 0xf370 <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    f36c:	81 50       	subi	r24, 0x01	; 1
    f36e:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    f370:	88 85       	ldd	r24, Y+8	; 0x08
    f372:	88 23       	and	r24, r24
    f374:	99 f0       	breq	.+38     	; 0xf39c <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    f376:	88 81       	ld	r24, Y
    f378:	99 81       	ldd	r25, Y+1	; 0x01
    f37a:	aa 81       	ldd	r26, Y+2	; 0x02
    f37c:	bb 81       	ldd	r27, Y+3	; 0x03
    f37e:	2c 81       	ldd	r18, Y+4	; 0x04
    f380:	3d 81       	ldd	r19, Y+5	; 0x05
    f382:	4e 81       	ldd	r20, Y+6	; 0x06
    f384:	5f 81       	ldd	r21, Y+7	; 0x07
    f386:	82 0f       	add	r24, r18
    f388:	93 1f       	adc	r25, r19
    f38a:	a4 1f       	adc	r26, r20
    f38c:	b5 1f       	adc	r27, r21
    f38e:	88 83       	st	Y, r24
    f390:	99 83       	std	Y+1, r25	; 0x01
    f392:	aa 83       	std	Y+2, r26	; 0x02
    f394:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    f396:	ce 01       	movw	r24, r28
    f398:	0e 94 b2 78 	call	0xf164	; 0xf164 <TIMING_AddEvent>
    f39c:	80 91 73 18 	lds	r24, 0x1873
    f3a0:	90 91 74 18 	lds	r25, 0x1874
    f3a4:	89 2b       	or	r24, r25
    f3a6:	19 f0       	breq	.+6      	; 0xf3ae <TIMING_TickHandler+0x122>
    f3a8:	00 23       	and	r16, r16
    f3aa:	09 f0       	breq	.+2      	; 0xf3ae <TIMING_TickHandler+0x122>
    f3ac:	90 cf       	rjmp	.-224    	; 0xf2ce <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f3ae:	1f bf       	out	0x3f, r17	; 63
    f3b0:	df 91       	pop	r29
    f3b2:	cf 91       	pop	r28
    f3b4:	1f 91       	pop	r17
    f3b6:	0f 91       	pop	r16
    f3b8:	08 95       	ret

0000f3ba <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    f3ba:	cf 93       	push	r28
    f3bc:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f3be:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    f3c0:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f3c2:	40 91 73 18 	lds	r20, 0x1873
    f3c6:	50 91 74 18 	lds	r21, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f3ca:	e0 91 75 18 	lds	r30, 0x1875
    f3ce:	f0 91 76 18 	lds	r31, 0x1876
	TIMING_event_t * lastEvent = 0;
    f3d2:	a0 e0       	ldi	r26, 0x00	; 0
    f3d4:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    f3d6:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    f3d8:	41 15       	cp	r20, r1
    f3da:	51 05       	cpc	r21, r1
    f3dc:	81 f0       	breq	.+32     	; 0xf3fe <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    f3de:	e8 17       	cp	r30, r24
    f3e0:	f9 07       	cpc	r31, r25
    f3e2:	11 f4       	brne	.+4      	; 0xf3e8 <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    f3e4:	21 e0       	ldi	r18, 0x01	; 1
    f3e6:	06 c0       	rjmp	.+12     	; 0xf3f4 <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    f3e8:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    f3ea:	05 84       	ldd	r0, Z+13	; 0x0d
    f3ec:	f6 85       	ldd	r31, Z+14	; 0x0e
    f3ee:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    f3f0:	41 50       	subi	r20, 0x01	; 1
    f3f2:	50 40       	sbci	r21, 0x00	; 0
    f3f4:	41 15       	cp	r20, r1
    f3f6:	51 05       	cpc	r21, r1
    f3f8:	11 f0       	breq	.+4      	; 0xf3fe <TIMING_RemoveEvent+0x44>
    f3fa:	22 23       	and	r18, r18
    f3fc:	81 f3       	breq	.-32     	; 0xf3de <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    f3fe:	22 23       	and	r18, r18
    f400:	d1 f0       	breq	.+52     	; 0xf436 <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    f402:	80 91 73 18 	lds	r24, 0x1873
    f406:	90 91 74 18 	lds	r25, 0x1874
    f40a:	25 85       	ldd	r18, Z+13	; 0x0d
    f40c:	36 85       	ldd	r19, Z+14	; 0x0e
    f40e:	48 17       	cp	r20, r24
    f410:	59 07       	cpc	r21, r25
    f412:	29 f4       	brne	.+10     	; 0xf41e <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    f414:	30 93 76 18 	sts	0x1876, r19
    f418:	20 93 75 18 	sts	0x1875, r18
    f41c:	03 c0       	rjmp	.+6      	; 0xf424 <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    f41e:	ed 01       	movw	r28, r26
    f420:	3e 87       	std	Y+14, r19	; 0x0e
    f422:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    f424:	80 91 73 18 	lds	r24, 0x1873
    f428:	90 91 74 18 	lds	r25, 0x1874
    f42c:	01 97       	sbiw	r24, 0x01	; 1
    f42e:	90 93 74 18 	sts	0x1874, r25
    f432:	80 93 73 18 	sts	0x1873, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f436:	6f bf       	out	0x3f, r22	; 63
    f438:	df 91       	pop	r29
    f43a:	cf 91       	pop	r28
    f43c:	08 95       	ret

0000f43e <TIMING_AddRepCounterEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  counterPtr      Pointer to counter variable to increment when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCounterEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f43e:	cf 92       	push	r12
    f440:	df 92       	push	r13
    f442:	ef 92       	push	r14
    f444:	ff 92       	push	r15
    f446:	0f 93       	push	r16
    f448:	1f 93       	push	r17
    f44a:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f44c:	44 23       	and	r20, r20
    f44e:	81 f0       	breq	.+32     	; 0xf470 <TIMING_AddRepCounterEventAt+0x32>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f450:	60 83       	st	Z, r22
    f452:	71 83       	std	Z+1, r23	; 0x01
    f454:	82 83       	std	Z+2, r24	; 0x02
    f456:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f458:	04 83       	std	Z+4, r16	; 0x04
    f45a:	15 83       	std	Z+5, r17	; 0x05
    f45c:	26 83       	std	Z+6, r18	; 0x06
    f45e:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f460:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_COUNTER_EVENT;
    f462:	12 86       	std	Z+10, r1	; 0x0a
    f464:	11 86       	std	Z+9, r1	; 0x09
		event->counterPtr = counterPtr;
    f466:	f4 86       	std	Z+12, r15	; 0x0c
    f468:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f46a:	c6 01       	movw	r24, r12
    f46c:	0e 94 b2 78 	call	0xf164	; 0xf164 <TIMING_AddEvent>
    f470:	1f 91       	pop	r17
    f472:	0f 91       	pop	r16
    f474:	ff 90       	pop	r15
    f476:	ef 90       	pop	r14
    f478:	df 90       	pop	r13
    f47a:	cf 90       	pop	r12
    f47c:	08 95       	ret

0000f47e <TIMING_AddCounterEventAt>:
 *  \param  timestamp   Timestamp to trigger event.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAt( TIMING_time_t timestamp, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f47e:	8f 92       	push	r8
    f480:	9f 92       	push	r9
    f482:	af 92       	push	r10
    f484:	bf 92       	push	r11
    f486:	cf 92       	push	r12
    f488:	df 92       	push	r13
    f48a:	ef 92       	push	r14
    f48c:	ff 92       	push	r15
    f48e:	0f 93       	push	r16
    f490:	1f 93       	push	r17
    f492:	4b 01       	movw	r8, r22
    f494:	5c 01       	movw	r10, r24
	TIMING_AddRepCounterEventAt( timestamp, 1, 0, counterPtr, event );
    f496:	69 01       	movw	r12, r18
    f498:	7a 01       	movw	r14, r20
    f49a:	00 e0       	ldi	r16, 0x00	; 0
    f49c:	10 e0       	ldi	r17, 0x00	; 0
    f49e:	20 e0       	ldi	r18, 0x00	; 0
    f4a0:	30 e0       	ldi	r19, 0x00	; 0
    f4a2:	41 e0       	ldi	r20, 0x01	; 1
    f4a4:	c5 01       	movw	r24, r10
    f4a6:	b4 01       	movw	r22, r8
    f4a8:	0e 94 1f 7a 	call	0xf43e	; 0xf43e <TIMING_AddRepCounterEventAt>
    f4ac:	1f 91       	pop	r17
    f4ae:	0f 91       	pop	r16
    f4b0:	ff 90       	pop	r15
    f4b2:	ef 90       	pop	r14
    f4b4:	df 90       	pop	r13
    f4b6:	cf 90       	pop	r12
    f4b8:	bf 90       	pop	r11
    f4ba:	af 90       	pop	r10
    f4bc:	9f 90       	pop	r9
    f4be:	8f 90       	pop	r8
    f4c0:	08 95       	ret

0000f4c2 <TIMING_AddCounterEventAfter>:
 *  \param  delay       Delay in ticks until event triggers.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAfter( TIMING_time_t delay, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f4c2:	ef 92       	push	r14
    f4c4:	ff 92       	push	r15
    f4c6:	0f 93       	push	r16
    f4c8:	1f 93       	push	r17
    f4ca:	7b 01       	movw	r14, r22
    f4cc:	8c 01       	movw	r16, r24
	TIMING_AddCounterEventAt( TIMING_currentTime + delay, counterPtr, event );
    f4ce:	80 91 77 18 	lds	r24, 0x1877
    f4d2:	90 91 78 18 	lds	r25, 0x1878
    f4d6:	a0 91 79 18 	lds	r26, 0x1879
    f4da:	b0 91 7a 18 	lds	r27, 0x187A
    f4de:	8e 0d       	add	r24, r14
    f4e0:	9f 1d       	adc	r25, r15
    f4e2:	a0 1f       	adc	r26, r16
    f4e4:	b1 1f       	adc	r27, r17
    f4e6:	bc 01       	movw	r22, r24
    f4e8:	cd 01       	movw	r24, r26
    f4ea:	0e 94 3f 7a 	call	0xf47e	; 0xf47e <TIMING_AddCounterEventAt>
    f4ee:	1f 91       	pop	r17
    f4f0:	0f 91       	pop	r16
    f4f2:	ff 90       	pop	r15
    f4f4:	ef 90       	pop	r14
    f4f6:	08 95       	ret

0000f4f8 <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f4f8:	cf 92       	push	r12
    f4fa:	df 92       	push	r13
    f4fc:	ef 92       	push	r14
    f4fe:	ff 92       	push	r15
    f500:	0f 93       	push	r16
    f502:	1f 93       	push	r17
    f504:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f506:	44 23       	and	r20, r20
    f508:	91 f0       	breq	.+36     	; 0xf52e <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f50a:	60 83       	st	Z, r22
    f50c:	71 83       	std	Z+1, r23	; 0x01
    f50e:	82 83       	std	Z+2, r24	; 0x02
    f510:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f512:	04 83       	std	Z+4, r16	; 0x04
    f514:	15 83       	std	Z+5, r17	; 0x05
    f516:	26 83       	std	Z+6, r18	; 0x06
    f518:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f51a:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    f51c:	81 e0       	ldi	r24, 0x01	; 1
    f51e:	90 e0       	ldi	r25, 0x00	; 0
    f520:	92 87       	std	Z+10, r25	; 0x0a
    f522:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    f524:	f4 86       	std	Z+12, r15	; 0x0c
    f526:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f528:	c6 01       	movw	r24, r12
    f52a:	0e 94 b2 78 	call	0xf164	; 0xf164 <TIMING_AddEvent>
    f52e:	1f 91       	pop	r17
    f530:	0f 91       	pop	r16
    f532:	ff 90       	pop	r15
    f534:	ef 90       	pop	r14
    f536:	df 90       	pop	r13
    f538:	cf 90       	pop	r12
    f53a:	08 95       	ret

0000f53c <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f53c:	8f 92       	push	r8
    f53e:	9f 92       	push	r9
    f540:	af 92       	push	r10
    f542:	bf 92       	push	r11
    f544:	cf 92       	push	r12
    f546:	df 92       	push	r13
    f548:	ef 92       	push	r14
    f54a:	ff 92       	push	r15
    f54c:	0f 93       	push	r16
    f54e:	1f 93       	push	r17
    f550:	4b 01       	movw	r8, r22
    f552:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    f554:	69 01       	movw	r12, r18
    f556:	7a 01       	movw	r14, r20
    f558:	00 e0       	ldi	r16, 0x00	; 0
    f55a:	10 e0       	ldi	r17, 0x00	; 0
    f55c:	20 e0       	ldi	r18, 0x00	; 0
    f55e:	30 e0       	ldi	r19, 0x00	; 0
    f560:	41 e0       	ldi	r20, 0x01	; 1
    f562:	c5 01       	movw	r24, r10
    f564:	b4 01       	movw	r22, r8
    f566:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <TIMING_AddRepCallbackEventAt>
    f56a:	1f 91       	pop	r17
    f56c:	0f 91       	pop	r16
    f56e:	ff 90       	pop	r15
    f570:	ef 90       	pop	r14
    f572:	df 90       	pop	r13
    f574:	cf 90       	pop	r12
    f576:	bf 90       	pop	r11
    f578:	af 90       	pop	r10
    f57a:	9f 90       	pop	r9
    f57c:	8f 90       	pop	r8
    f57e:	08 95       	ret

0000f580 <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f580:	ef 92       	push	r14
    f582:	ff 92       	push	r15
    f584:	0f 93       	push	r16
    f586:	1f 93       	push	r17
    f588:	7b 01       	movw	r14, r22
    f58a:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    f58c:	80 91 77 18 	lds	r24, 0x1877
    f590:	90 91 78 18 	lds	r25, 0x1878
    f594:	a0 91 79 18 	lds	r26, 0x1879
    f598:	b0 91 7a 18 	lds	r27, 0x187A
    f59c:	8e 0d       	add	r24, r14
    f59e:	9f 1d       	adc	r25, r15
    f5a0:	a0 1f       	adc	r26, r16
    f5a2:	b1 1f       	adc	r27, r17
    f5a4:	bc 01       	movw	r22, r24
    f5a6:	cd 01       	movw	r24, r26
    f5a8:	0e 94 9e 7a 	call	0xf53c	; 0xf53c <TIMING_AddCallbackEventAt>
    f5ac:	1f 91       	pop	r17
    f5ae:	0f 91       	pop	r16
    f5b0:	ff 90       	pop	r15
    f5b2:	ef 90       	pop	r14
    f5b4:	08 95       	ret

0000f5b6 <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f5b6:	7f 92       	push	r7
    f5b8:	8f 92       	push	r8
    f5ba:	9f 92       	push	r9
    f5bc:	af 92       	push	r10
    f5be:	bf 92       	push	r11
    f5c0:	cf 92       	push	r12
    f5c2:	df 92       	push	r13
    f5c4:	ef 92       	push	r14
    f5c6:	ff 92       	push	r15
    f5c8:	0f 93       	push	r16
    f5ca:	1f 93       	push	r17
    f5cc:	4b 01       	movw	r8, r22
    f5ce:	5c 01       	movw	r10, r24
    f5d0:	74 2e       	mov	r7, r20
    f5d2:	b9 01       	movw	r22, r18
    f5d4:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    f5d6:	80 91 77 18 	lds	r24, 0x1877
    f5da:	90 91 78 18 	lds	r25, 0x1878
    f5de:	a0 91 79 18 	lds	r26, 0x1879
    f5e2:	b0 91 7a 18 	lds	r27, 0x187A
    f5e6:	88 0d       	add	r24, r8
    f5e8:	99 1d       	adc	r25, r9
    f5ea:	aa 1d       	adc	r26, r10
    f5ec:	bb 1d       	adc	r27, r11
    f5ee:	8a 01       	movw	r16, r20
    f5f0:	9b 01       	movw	r18, r22
    f5f2:	47 2d       	mov	r20, r7
    f5f4:	bc 01       	movw	r22, r24
    f5f6:	cd 01       	movw	r24, r26
    f5f8:	0e 94 7c 7a 	call	0xf4f8	; 0xf4f8 <TIMING_AddRepCallbackEventAt>
    f5fc:	1f 91       	pop	r17
    f5fe:	0f 91       	pop	r16
    f600:	ff 90       	pop	r15
    f602:	ef 90       	pop	r14
    f604:	df 90       	pop	r13
    f606:	cf 90       	pop	r12
    f608:	bf 90       	pop	r11
    f60a:	af 90       	pop	r10
    f60c:	9f 90       	pop	r9
    f60e:	8f 90       	pop	r8
    f610:	7f 90       	pop	r7
    f612:	08 95       	ret

0000f614 <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f614:	8f 92       	push	r8
    f616:	9f 92       	push	r9
    f618:	af 92       	push	r10
    f61a:	bf 92       	push	r11
    f61c:	cf 92       	push	r12
    f61e:	df 92       	push	r13
    f620:	ef 92       	push	r14
    f622:	ff 92       	push	r15
    f624:	0f 93       	push	r16
    f626:	1f 93       	push	r17
    f628:	e8 2f       	mov	r30, r24
    f62a:	4a 01       	movw	r8, r20
    f62c:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    f62e:	68 01       	movw	r12, r16
    f630:	79 01       	movw	r14, r18
    f632:	8a 01       	movw	r16, r20
    f634:	9b 01       	movw	r18, r22
    f636:	4e 2f       	mov	r20, r30
    f638:	c5 01       	movw	r24, r10
    f63a:	b4 01       	movw	r22, r8
    f63c:	0e 94 db 7a 	call	0xf5b6	; 0xf5b6 <TIMING_AddRepCallbackEventAfter>
    f640:	1f 91       	pop	r17
    f642:	0f 91       	pop	r16
    f644:	ff 90       	pop	r15
    f646:	ef 90       	pop	r14
    f648:	df 90       	pop	r13
    f64a:	cf 90       	pop	r12
    f64c:	bf 90       	pop	r11
    f64e:	af 90       	pop	r10
    f650:	9f 90       	pop	r9
    f652:	8f 90       	pop	r8
    f654:	08 95       	ret

0000f656 <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    f656:	ef 92       	push	r14
    f658:	ff 92       	push	r15
    f65a:	0f 93       	push	r16
    f65c:	1f 93       	push	r17
    f65e:	cf 93       	push	r28
    f660:	e6 2e       	mov	r14, r22
    f662:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    f664:	80 52       	subi	r24, 0x20	; 32
    f666:	8f 35       	cpi	r24, 0x5F	; 95
    f668:	90 f4       	brcc	.+36     	; 0xf68e <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    f66a:	95 e0       	ldi	r25, 0x05	; 5
    f66c:	f9 2e       	mov	r15, r25
    f66e:	8f 9d       	mul	r24, r15
    f670:	80 01       	movw	r16, r0
    f672:	11 24       	eor	r1, r1
    f674:	0a 5a       	subi	r16, 0xAA	; 170
    f676:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    f678:	21 e0       	ldi	r18, 0x01	; 1
    f67a:	8f ef       	ldi	r24, 0xFF	; 255
    f67c:	0e 94 0d 70 	call	0xe01a	; 0xe01a <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    f680:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    f682:	2f 2d       	mov	r18, r15
    f684:	4c 2f       	mov	r20, r28
    f686:	6e 2d       	mov	r22, r14
    f688:	c8 01       	movw	r24, r16
    f68a:	0e 94 4c 70 	call	0xe098	; 0xe098 <LCD_WritePage_F>
    f68e:	cf 91       	pop	r28
    f690:	1f 91       	pop	r17
    f692:	0f 91       	pop	r16
    f694:	ff 90       	pop	r15
    f696:	ef 90       	pop	r14
    f698:	08 95       	ret

0000f69a <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    f69a:	20 91 64 00 	lds	r18, 0x0064
    f69e:	27 7f       	andi	r18, 0xF7	; 247
    f6a0:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    f6a4:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    f6a6:	28 e0       	ldi	r18, 0x08	; 8
    f6a8:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    f6ac:	20 e1       	ldi	r18, 0x10	; 16
    f6ae:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    f6b2:	20 91 81 00 	lds	r18, 0x0081
    f6b6:	21 60       	ori	r18, 0x01	; 1
    f6b8:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f6bc:	90 93 8f 18 	sts	0x188F, r25
    f6c0:	80 93 8e 18 	sts	0x188E, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f6c4:	2f e7       	ldi	r18, 0x7F	; 127
    f6c6:	38 e1       	ldi	r19, 0x18	; 24
    f6c8:	4d e6       	ldi	r20, 0x6D	; 109
    f6ca:	5b e7       	ldi	r21, 0x7B	; 123
    f6cc:	6a e0       	ldi	r22, 0x0A	; 10
    f6ce:	70 e0       	ldi	r23, 0x00	; 0
    f6d0:	80 e0       	ldi	r24, 0x00	; 0
    f6d2:	90 e0       	ldi	r25, 0x00	; 0
    f6d4:	0e 94 c0 7a 	call	0xf580	; 0xf580 <TIMING_AddCallbackEventAfter>
    f6d8:	08 95       	ret

0000f6da <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f6da:	ef 92       	push	r14
    f6dc:	ff 92       	push	r15
    f6de:	0f 93       	push	r16
    f6e0:	1f 93       	push	r17
    f6e2:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f6e4:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f6e6:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f6e8:	e0 91 8e 18 	lds	r30, 0x188E
    f6ec:	f0 91 8f 18 	lds	r31, 0x188F
    f6f0:	81 85       	ldd	r24, Z+9	; 0x09
    f6f2:	84 30       	cpi	r24, 0x04	; 4
    f6f4:	b0 f1       	brcs	.+108    	; 0xf762 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f6f6:	cf 01       	movw	r24, r30
    f6f8:	0e 94 0d 75 	call	0xea1a	; 0xea1a <FIFO_GetUint16>
    f6fc:	7c 01       	movw	r14, r24
    f6fe:	00 27       	eor	r16, r16
    f700:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f702:	80 91 8e 18 	lds	r24, 0x188E
    f706:	90 91 8f 18 	lds	r25, 0x188F
    f70a:	0e 94 0d 75 	call	0xea1a	; 0xea1a <FIFO_GetUint16>
    f70e:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f710:	01 97       	sbiw	r24, 0x01	; 1
    f712:	31 f4       	brne	.+12     	; 0xf720 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f714:	10 92 57 02 	sts	0x0257, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f718:	80 91 81 00 	lds	r24, 0x0081
    f71c:	8e 7f       	andi	r24, 0xFE	; 254
    f71e:	06 c0       	rjmp	.+12     	; 0xf72c <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f720:	81 e0       	ldi	r24, 0x01	; 1
    f722:	80 93 57 02 	sts	0x0257, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f726:	80 91 81 00 	lds	r24, 0x0081
    f72a:	81 60       	ori	r24, 0x01	; 1
    f72c:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f730:	9a 01       	movw	r18, r20
    f732:	36 95       	lsr	r19
    f734:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f736:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f738:	9a 01       	movw	r18, r20
    f73a:	23 2f       	mov	r18, r19
    f73c:	33 27       	eor	r19, r19
    f73e:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f740:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f744:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f748:	25 2f       	mov	r18, r21
    f74a:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f74c:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f750:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f754:	2f e7       	ldi	r18, 0x7F	; 127
    f756:	38 e1       	ldi	r19, 0x18	; 24
    f758:	4d e6       	ldi	r20, 0x6D	; 109
    f75a:	5b e7       	ldi	r21, 0x7B	; 123
    f75c:	c8 01       	movw	r24, r16
    f75e:	b7 01       	movw	r22, r14
    f760:	0f c0       	rjmp	.+30     	; 0xf780 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f762:	10 92 57 02 	sts	0x0257, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f766:	80 91 81 00 	lds	r24, 0x0081
    f76a:	8e 7f       	andi	r24, 0xFE	; 254
    f76c:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f770:	2f e7       	ldi	r18, 0x7F	; 127
    f772:	38 e1       	ldi	r19, 0x18	; 24
    f774:	4d e6       	ldi	r20, 0x6D	; 109
    f776:	5b e7       	ldi	r21, 0x7B	; 123
    f778:	6a e0       	ldi	r22, 0x0A	; 10
    f77a:	70 e0       	ldi	r23, 0x00	; 0
    f77c:	80 e0       	ldi	r24, 0x00	; 0
    f77e:	90 e0       	ldi	r25, 0x00	; 0
    f780:	0e 94 c0 7a 	call	0xf580	; 0xf580 <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f784:	cf bf       	out	0x3f, r28	; 63
    f786:	cf 91       	pop	r28
    f788:	1f 91       	pop	r17
    f78a:	0f 91       	pop	r16
    f78c:	ff 90       	pop	r15
    f78e:	ef 90       	pop	r14
    f790:	08 95       	ret

0000f792 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f792:	10 92 57 02 	sts	0x0257, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f796:	80 91 81 00 	lds	r24, 0x0081
    f79a:	8e 7f       	andi	r24, 0xFE	; 254
    f79c:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f7a0:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f7a4:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f7a8:	8f e7       	ldi	r24, 0x7F	; 127
    f7aa:	98 e1       	ldi	r25, 0x18	; 24
    f7ac:	0e 94 dd 79 	call	0xf3ba	; 0xf3ba <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f7b0:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f7b2:	80 91 64 00 	lds	r24, 0x0064
    f7b6:	88 60       	ori	r24, 0x08	; 8
    f7b8:	80 93 64 00 	sts	0x0064, r24
    f7bc:	08 95       	ret

0000f7be <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f7be:	80 91 57 02 	lds	r24, 0x0257
}
    f7c2:	99 27       	eor	r25, r25
    f7c4:	08 95       	ret

0000f7c6 <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f7c6:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f7c8:	e0 91 90 18 	lds	r30, 0x1890
    f7cc:	f0 91 91 18 	lds	r31, 0x1891
    f7d0:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f7d2:	24 30       	cpi	r18, 0x04	; 4
    f7d4:	08 f4       	brcc	.+2      	; 0xf7d8 <SONG_CallbackControlTask_F+0x12>
    f7d6:	41 c0       	rjmp	.+130    	; 0xf85a <SONG_CallbackControlTask_F+0x94>
    f7d8:	e0 91 a1 18 	lds	r30, 0x18A1
    f7dc:	f0 91 a2 18 	lds	r31, 0x18A2
    f7e0:	85 91       	lpm	r24, Z+
    f7e2:	94 91       	lpm	r25, Z+
    f7e4:	89 2b       	or	r24, r25
    f7e6:	09 f4       	brne	.+2      	; 0xf7ea <SONG_CallbackControlTask_F+0x24>
    f7e8:	38 c0       	rjmp	.+112    	; 0xf85a <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f7ea:	80 91 a1 18 	lds	r24, 0x18A1
    f7ee:	90 91 a2 18 	lds	r25, 0x18A2
    f7f2:	fc 01       	movw	r30, r24
    f7f4:	65 91       	lpm	r22, Z+
    f7f6:	74 91       	lpm	r23, Z+
    f7f8:	c2 2f       	mov	r28, r18
    f7fa:	c4 50       	subi	r28, 0x04	; 4
    f7fc:	2f ef       	ldi	r18, 0xFF	; 255
    f7fe:	6f 3f       	cpi	r22, 0xFF	; 255
    f800:	72 07       	cpc	r23, r18
    f802:	49 f4       	brne	.+18     	; 0xf816 <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f804:	80 91 a3 18 	lds	r24, 0x18A3
    f808:	90 91 a4 18 	lds	r25, 0x18A4
    f80c:	90 93 a2 18 	sts	0x18A2, r25
    f810:	80 93 a1 18 	sts	0x18A1, r24
    f814:	1e c0       	rjmp	.+60     	; 0xf852 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f816:	02 96       	adiw	r24, 0x02	; 2
    f818:	90 93 a2 18 	sts	0x18A2, r25
    f81c:	80 93 a1 18 	sts	0x18A1, r24
    f820:	80 91 90 18 	lds	r24, 0x1890
    f824:	90 91 91 18 	lds	r25, 0x1891
    f828:	0e 94 fa 74 	call	0xe9f4	; 0xe9f4 <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f82c:	80 91 a1 18 	lds	r24, 0x18A1
    f830:	90 91 a2 18 	lds	r25, 0x18A2
    f834:	fc 01       	movw	r30, r24
    f836:	02 96       	adiw	r24, 0x02	; 2
    f838:	90 93 a2 18 	sts	0x18A2, r25
    f83c:	80 93 a1 18 	sts	0x18A1, r24
    f840:	85 91       	lpm	r24, Z+
    f842:	94 91       	lpm	r25, Z+
    f844:	bc 01       	movw	r22, r24
    f846:	80 91 90 18 	lds	r24, 0x1890
    f84a:	90 91 91 18 	lds	r25, 0x1891
    f84e:	0e 94 fa 74 	call	0xe9f4	; 0xe9f4 <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f852:	2c 2f       	mov	r18, r28
    f854:	c4 30       	cpi	r28, 0x04	; 4
    f856:	08 f0       	brcs	.+2      	; 0xf85a <SONG_CallbackControlTask_F+0x94>
    f858:	bf cf       	rjmp	.-130    	; 0xf7d8 <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    f85a:	e0 91 a1 18 	lds	r30, 0x18A1
    f85e:	f0 91 a2 18 	lds	r31, 0x18A2
    f862:	85 91       	lpm	r24, Z+
    f864:	94 91       	lpm	r25, Z+
    f866:	89 2b       	or	r24, r25
    f868:	69 f4       	brne	.+26     	; 0xf884 <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    f86a:	e0 91 90 18 	lds	r30, 0x1890
    f86e:	f0 91 91 18 	lds	r31, 0x1891
    f872:	81 85       	ldd	r24, Z+9	; 0x09
    f874:	88 23       	and	r24, r24
    f876:	31 f4       	brne	.+12     	; 0xf884 <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    f878:	0e 94 df 7b 	call	0xf7be	; 0xf7be <SOUND_IsToneBusy>
    f87c:	88 23       	and	r24, r24
    f87e:	11 f4       	brne	.+4      	; 0xf884 <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    f880:	0e 94 c9 7b 	call	0xf792	; 0xf792 <SOUND_StopAudio>
    f884:	cf 91       	pop	r28
    f886:	08 95       	ret

0000f888 <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    f888:	0e 94 c9 7b 	call	0xf792	; 0xf792 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    f88c:	82 e9       	ldi	r24, 0x92	; 146
    f88e:	98 e1       	ldi	r25, 0x18	; 24
    f890:	0e 94 dd 79 	call	0xf3ba	; 0xf3ba <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    f894:	80 91 90 18 	lds	r24, 0x1890
    f898:	90 91 91 18 	lds	r25, 0x1891
    f89c:	0e 94 d6 74 	call	0xe9ac	; 0xe9ac <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    f8a0:	10 92 58 02 	sts	0x0258, r1
    f8a4:	08 95       	ret

0000f8a6 <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    f8a6:	0f 93       	push	r16
    f8a8:	1f 93       	push	r17
    f8aa:	cf 93       	push	r28
    f8ac:	df 93       	push	r29
    f8ae:	ec 01       	movw	r28, r24
    f8b0:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    f8b2:	80 91 58 02 	lds	r24, 0x0258
    f8b6:	81 30       	cpi	r24, 0x01	; 1
    f8b8:	11 f4       	brne	.+4      	; 0xf8be <SONG_StartTune_F+0x18>
		SONG_StopTune();
    f8ba:	0e 94 44 7c 	call	0xf888	; 0xf888 <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    f8be:	d0 93 91 18 	sts	0x1891, r29
    f8c2:	c0 93 90 18 	sts	0x1890, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    f8c6:	81 e0       	ldi	r24, 0x01	; 1
    f8c8:	80 93 58 02 	sts	0x0258, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    f8cc:	10 93 a4 18 	sts	0x18A4, r17
    f8d0:	00 93 a3 18 	sts	0x18A3, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    f8d4:	10 93 a2 18 	sts	0x18A2, r17
    f8d8:	00 93 a1 18 	sts	0x18A1, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    f8dc:	02 e9       	ldi	r16, 0x92	; 146
    f8de:	18 e1       	ldi	r17, 0x18	; 24
    f8e0:	23 ee       	ldi	r18, 0xE3	; 227
    f8e2:	3b e7       	ldi	r19, 0x7B	; 123
    f8e4:	49 e0       	ldi	r20, 0x09	; 9
    f8e6:	50 e0       	ldi	r21, 0x00	; 0
    f8e8:	60 e0       	ldi	r22, 0x00	; 0
    f8ea:	70 e0       	ldi	r23, 0x00	; 0
    f8ec:	8f ef       	ldi	r24, 0xFF	; 255
    f8ee:	0e 94 0a 7b 	call	0xf614	; 0xf614 <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    f8f2:	ce 01       	movw	r24, r28
    f8f4:	0e 94 4d 7b 	call	0xf69a	; 0xf69a <SOUND_StartAudio>
    f8f8:	df 91       	pop	r29
    f8fa:	cf 91       	pop	r28
    f8fc:	1f 91       	pop	r17
    f8fe:	0f 91       	pop	r16
    f900:	08 95       	ret

0000f902 <__udivmodqi4>:
    f902:	99 1b       	sub	r25, r25
    f904:	79 e0       	ldi	r23, 0x09	; 9
    f906:	04 c0       	rjmp	.+8      	; 0xf910 <__udivmodqi4_ep>

0000f908 <__udivmodqi4_loop>:
    f908:	99 1f       	adc	r25, r25
    f90a:	96 17       	cp	r25, r22
    f90c:	08 f0       	brcs	.+2      	; 0xf910 <__udivmodqi4_ep>
    f90e:	96 1b       	sub	r25, r22

0000f910 <__udivmodqi4_ep>:
    f910:	88 1f       	adc	r24, r24
    f912:	7a 95       	dec	r23
    f914:	c9 f7       	brne	.-14     	; 0xf908 <__udivmodqi4_loop>
    f916:	80 95       	com	r24
    f918:	08 95       	ret

0000f91a <__udivmodhi4>:
    f91a:	aa 1b       	sub	r26, r26
    f91c:	bb 1b       	sub	r27, r27
    f91e:	51 e1       	ldi	r21, 0x11	; 17
    f920:	07 c0       	rjmp	.+14     	; 0xf930 <__udivmodhi4_ep>

0000f922 <__udivmodhi4_loop>:
    f922:	aa 1f       	adc	r26, r26
    f924:	bb 1f       	adc	r27, r27
    f926:	a6 17       	cp	r26, r22
    f928:	b7 07       	cpc	r27, r23
    f92a:	10 f0       	brcs	.+4      	; 0xf930 <__udivmodhi4_ep>
    f92c:	a6 1b       	sub	r26, r22
    f92e:	b7 0b       	sbc	r27, r23

0000f930 <__udivmodhi4_ep>:
    f930:	88 1f       	adc	r24, r24
    f932:	99 1f       	adc	r25, r25
    f934:	5a 95       	dec	r21
    f936:	a9 f7       	brne	.-22     	; 0xf922 <__udivmodhi4_loop>
    f938:	80 95       	com	r24
    f93a:	90 95       	com	r25
    f93c:	bc 01       	movw	r22, r24
    f93e:	cd 01       	movw	r24, r26
    f940:	08 95       	ret

0000f942 <__divmodhi4>:
    f942:	97 fb       	bst	r25, 7
    f944:	09 2e       	mov	r0, r25
    f946:	07 26       	eor	r0, r23
    f948:	0a d0       	rcall	.+20     	; 0xf95e <__divmodhi4_neg1>
    f94a:	77 fd       	sbrc	r23, 7
    f94c:	04 d0       	rcall	.+8      	; 0xf956 <__divmodhi4_neg2>
    f94e:	e5 df       	rcall	.-54     	; 0xf91a <__udivmodhi4>
    f950:	06 d0       	rcall	.+12     	; 0xf95e <__divmodhi4_neg1>
    f952:	00 20       	and	r0, r0
    f954:	1a f4       	brpl	.+6      	; 0xf95c <__divmodhi4_exit>

0000f956 <__divmodhi4_neg2>:
    f956:	70 95       	com	r23
    f958:	61 95       	neg	r22
    f95a:	7f 4f       	sbci	r23, 0xFF	; 255

0000f95c <__divmodhi4_exit>:
    f95c:	08 95       	ret

0000f95e <__divmodhi4_neg1>:
    f95e:	f6 f7       	brtc	.-4      	; 0xf95c <__divmodhi4_exit>
    f960:	90 95       	com	r25
    f962:	81 95       	neg	r24
    f964:	9f 4f       	sbci	r25, 0xFF	; 255
    f966:	08 95       	ret

0000f968 <__udivmodsi4>:
    f968:	a1 e2       	ldi	r26, 0x21	; 33
    f96a:	1a 2e       	mov	r1, r26
    f96c:	aa 1b       	sub	r26, r26
    f96e:	bb 1b       	sub	r27, r27
    f970:	fd 01       	movw	r30, r26
    f972:	0d c0       	rjmp	.+26     	; 0xf98e <__udivmodsi4_ep>

0000f974 <__udivmodsi4_loop>:
    f974:	aa 1f       	adc	r26, r26
    f976:	bb 1f       	adc	r27, r27
    f978:	ee 1f       	adc	r30, r30
    f97a:	ff 1f       	adc	r31, r31
    f97c:	a2 17       	cp	r26, r18
    f97e:	b3 07       	cpc	r27, r19
    f980:	e4 07       	cpc	r30, r20
    f982:	f5 07       	cpc	r31, r21
    f984:	20 f0       	brcs	.+8      	; 0xf98e <__udivmodsi4_ep>
    f986:	a2 1b       	sub	r26, r18
    f988:	b3 0b       	sbc	r27, r19
    f98a:	e4 0b       	sbc	r30, r20
    f98c:	f5 0b       	sbc	r31, r21

0000f98e <__udivmodsi4_ep>:
    f98e:	66 1f       	adc	r22, r22
    f990:	77 1f       	adc	r23, r23
    f992:	88 1f       	adc	r24, r24
    f994:	99 1f       	adc	r25, r25
    f996:	1a 94       	dec	r1
    f998:	69 f7       	brne	.-38     	; 0xf974 <__udivmodsi4_loop>
    f99a:	60 95       	com	r22
    f99c:	70 95       	com	r23
    f99e:	80 95       	com	r24
    f9a0:	90 95       	com	r25
    f9a2:	9b 01       	movw	r18, r22
    f9a4:	ac 01       	movw	r20, r24
    f9a6:	bd 01       	movw	r22, r26
    f9a8:	cf 01       	movw	r24, r30
    f9aa:	08 95       	ret

0000f9ac <_exit>:
    f9ac:	ff cf       	rjmp	.-2      	; 0xf9ac <_exit>
