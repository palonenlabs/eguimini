
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  0000f2f4  0000f388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f2f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  00800276  00800276  0000f3fe  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  0000f3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  0000fcbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000131a8  00000000  00000000  000129af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030bd  00000000  00000000  00025b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ae22  00000000  00000000  00028c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fdf  00000000  00000000  00033a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  00038a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
       0:	0c 94 19 69 	jmp	0xd232	; 0xd232 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_DrawProgressBar(uint8_t Xstart, uint8_t Ystart, uint8_t height, uint8_t lenght, uint8_t maxvalue, uint8_t currvalue, uint8_t peakvalue)
{
      10:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
{
	POWER_wakeupRequested = true;
}

void POWER_EnterIdleSleepMode( void )
{
      18:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 5a 71 	jmp	0xe2b4	; 0xe2b4 <__vector_9>
    while (colsLeft-- > 0) {
      *dest++ = *source++;
    }
    // Move to next page.
    source += sourceWidth - width;
    dest += destWidth - width;
      28:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      2c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      30:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  pTextString  Pointer to null-terminated string in flash
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString_F(char const CAL_PGM(* pTextString), uint8_t page, uint8_t column)
{
      34:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      38:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      3c:	0c 94 e7 74 	jmp	0xe9ce	; 0xe9ce <__vector_15>
      40:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      44:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      48:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      4c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      50:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      54:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      58:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      5c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      60:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      64:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      68:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      6c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      70:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      74:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      78:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      7c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      80:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      84:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      88:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      8c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      90:	0c 94 b4 69 	jmp	0xd368	; 0xd368 <__vector_36>
      94:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      98:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      9c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      ac:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      bc:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <TERMFONT_fontdata>:
    d052:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d062:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d072:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d082:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d092:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a2:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b2:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c2:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d2:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e2:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f2:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d102:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d112:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d122:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d132:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d142:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d152:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d162:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d172:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d182:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d192:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a2:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b2:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c2:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d2:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e2:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f2:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d202:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d212:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d222:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d232 <__ctors_end>:
    d232:	11 24       	eor	r1, r1
    d234:	1f be       	out	0x3f, r1	; 63
    d236:	cf ef       	ldi	r28, 0xFF	; 255
    d238:	d1 e2       	ldi	r29, 0x21	; 33
    d23a:	de bf       	out	0x3e, r29	; 62
    d23c:	cd bf       	out	0x3d, r28	; 61

0000d23e <__do_copy_data>:
    d23e:	12 e0       	ldi	r17, 0x02	; 2
    d240:	a0 e0       	ldi	r26, 0x00	; 0
    d242:	b2 e0       	ldi	r27, 0x02	; 2
    d244:	e4 ef       	ldi	r30, 0xF4	; 244
    d246:	f2 ef       	ldi	r31, 0xF2	; 242
    d248:	00 e0       	ldi	r16, 0x00	; 0
    d24a:	0b bf       	out	0x3b, r16	; 59
    d24c:	02 c0       	rjmp	.+4      	; 0xd252 <__do_copy_data+0x14>
    d24e:	07 90       	elpm	r0, Z+
    d250:	0d 92       	st	X+, r0
    d252:	a6 37       	cpi	r26, 0x76	; 118
    d254:	b1 07       	cpc	r27, r17
    d256:	d9 f7       	brne	.-10     	; 0xd24e <__do_copy_data+0x10>

0000d258 <__do_clear_bss>:
    d258:	18 e1       	ldi	r17, 0x18	; 24
    d25a:	a6 e7       	ldi	r26, 0x76	; 118
    d25c:	b2 e0       	ldi	r27, 0x02	; 2
    d25e:	01 c0       	rjmp	.+2      	; 0xd262 <.do_clear_bss_start>

0000d260 <.do_clear_bss_loop>:
    d260:	1d 92       	st	X+, r1

0000d262 <.do_clear_bss_start>:
    d262:	a7 3c       	cpi	r26, 0xC7	; 199
    d264:	b1 07       	cpc	r27, r17
    d266:	e1 f7       	brne	.-8      	; 0xd260 <.do_clear_bss_loop>
    d268:	0e 94 30 6b 	call	0xd660	; 0xd660 <main>
    d26c:	0c 94 79 79 	jmp	0xf2f2	; 0xf2f2 <_exit>

0000d270 <__bad_interrupt>:
    d270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d274 <strcmp>:
    d274:	fb 01       	movw	r30, r22
    d276:	dc 01       	movw	r26, r24
    d278:	8d 91       	ld	r24, X+
    d27a:	01 90       	ld	r0, Z+
    d27c:	80 19       	sub	r24, r0
    d27e:	01 10       	cpse	r0, r1
    d280:	d9 f3       	breq	.-10     	; 0xd278 <strcmp+0x4>
    d282:	99 0b       	sbc	r25, r25
    d284:	08 95       	ret

0000d286 <strncpy>:
    d286:	fb 01       	movw	r30, r22
    d288:	dc 01       	movw	r26, r24
    d28a:	41 50       	subi	r20, 0x01	; 1
    d28c:	50 40       	sbci	r21, 0x00	; 0
    d28e:	48 f0       	brcs	.+18     	; 0xd2a2 <strncpy+0x1c>
    d290:	01 90       	ld	r0, Z+
    d292:	0d 92       	st	X+, r0
    d294:	00 20       	and	r0, r0
    d296:	c9 f7       	brne	.-14     	; 0xd28a <strncpy+0x4>
    d298:	01 c0       	rjmp	.+2      	; 0xd29c <strncpy+0x16>
    d29a:	1d 92       	st	X+, r1
    d29c:	41 50       	subi	r20, 0x01	; 1
    d29e:	50 40       	sbci	r21, 0x00	; 0
    d2a0:	e0 f7       	brcc	.-8      	; 0xd29a <strncpy+0x14>
    d2a2:	08 95       	ret

0000d2a4 <__eerd_word>:
    d2a4:	cf 92       	push	r12
    d2a6:	df 92       	push	r13
    d2a8:	ef 92       	push	r14
    d2aa:	ff 92       	push	r15
    d2ac:	0f 93       	push	r16
    d2ae:	1f 93       	push	r17
    d2b0:	7c 01       	movw	r14, r24
    d2b2:	6b 01       	movw	r12, r22
    d2b4:	fb 01       	movw	r30, r22
    d2b6:	09 95       	icall
    d2b8:	08 2f       	mov	r16, r24
    d2ba:	c7 01       	movw	r24, r14
    d2bc:	01 96       	adiw	r24, 0x01	; 1
    d2be:	f6 01       	movw	r30, r12
    d2c0:	09 95       	icall
    d2c2:	18 2f       	mov	r17, r24
    d2c4:	c8 01       	movw	r24, r16
    d2c6:	1f 91       	pop	r17
    d2c8:	0f 91       	pop	r16
    d2ca:	ff 90       	pop	r15
    d2cc:	ef 90       	pop	r14
    d2ce:	df 90       	pop	r13
    d2d0:	cf 90       	pop	r12
    d2d2:	08 95       	ret

0000d2d4 <itoa>:
    d2d4:	fb 01       	movw	r30, r22
    d2d6:	9f 01       	movw	r18, r30
    d2d8:	e8 94       	clt
    d2da:	42 30       	cpi	r20, 0x02	; 2
    d2dc:	c4 f0       	brlt	.+48     	; 0xd30e <itoa+0x3a>
    d2de:	45 32       	cpi	r20, 0x25	; 37
    d2e0:	b4 f4       	brge	.+44     	; 0xd30e <itoa+0x3a>
    d2e2:	4a 30       	cpi	r20, 0x0A	; 10
    d2e4:	29 f4       	brne	.+10     	; 0xd2f0 <itoa+0x1c>
    d2e6:	97 fb       	bst	r25, 7
    d2e8:	1e f4       	brtc	.+6      	; 0xd2f0 <itoa+0x1c>
    d2ea:	90 95       	com	r25
    d2ec:	81 95       	neg	r24
    d2ee:	9f 4f       	sbci	r25, 0xFF	; 255
    d2f0:	64 2f       	mov	r22, r20
    d2f2:	77 27       	eor	r23, r23
    d2f4:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    d2f8:	80 5d       	subi	r24, 0xD0	; 208
    d2fa:	8a 33       	cpi	r24, 0x3A	; 58
    d2fc:	0c f0       	brlt	.+2      	; 0xd300 <itoa+0x2c>
    d2fe:	89 5d       	subi	r24, 0xD9	; 217
    d300:	81 93       	st	Z+, r24
    d302:	cb 01       	movw	r24, r22
    d304:	00 97       	sbiw	r24, 0x00	; 0
    d306:	a1 f7       	brne	.-24     	; 0xd2f0 <itoa+0x1c>
    d308:	16 f4       	brtc	.+4      	; 0xd30e <itoa+0x3a>
    d30a:	5d e2       	ldi	r21, 0x2D	; 45
    d30c:	51 93       	st	Z+, r21
    d30e:	10 82       	st	Z, r1
    d310:	c9 01       	movw	r24, r18
    d312:	0c 94 8b 69 	jmp	0xd316	; 0xd316 <strrev>

0000d316 <strrev>:
    d316:	dc 01       	movw	r26, r24
    d318:	fc 01       	movw	r30, r24
    d31a:	67 2f       	mov	r22, r23
    d31c:	71 91       	ld	r23, Z+
    d31e:	77 23       	and	r23, r23
    d320:	e1 f7       	brne	.-8      	; 0xd31a <strrev+0x4>
    d322:	32 97       	sbiw	r30, 0x02	; 2
    d324:	04 c0       	rjmp	.+8      	; 0xd32e <strrev+0x18>
    d326:	7c 91       	ld	r23, X
    d328:	6d 93       	st	X+, r22
    d32a:	70 83       	st	Z, r23
    d32c:	62 91       	ld	r22, -Z
    d32e:	ae 17       	cp	r26, r30
    d330:	bf 07       	cpc	r27, r31
    d332:	c8 f3       	brcs	.-14     	; 0xd326 <strrev+0x10>
    d334:	08 95       	ret

0000d336 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d336:	f9 99       	sbic	0x1f, 1	; 31
    d338:	fe cf       	rjmp	.-4      	; 0xd336 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d33a:	92 bd       	out	0x22, r25	; 34
    d33c:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d33e:	f8 9a       	sbi	0x1f, 0	; 31
    d340:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d342:	99 27       	eor	r25, r25
    d344:	08 95       	ret

0000d346 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d346:	cf 93       	push	r28
    d348:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d34a:	8a 30       	cpi	r24, 0x0A	; 10
    d34c:	19 f4       	brne	.+6      	; 0xd354 <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d34e:	8d e0       	ldi	r24, 0x0D	; 13
    d350:	0e 94 a3 69 	call	0xd346	; 0xd346 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d354:	80 91 c8 00 	lds	r24, 0x00C8
    d358:	85 ff       	sbrs	r24, 5
    d35a:	fc cf       	rjmp	.-8      	; 0xd354 <uart_putchar+0xe>
      UDR1 = c;
    d35c:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d360:	80 e0       	ldi	r24, 0x00	; 0
    d362:	90 e0       	ldi	r25, 0x00	; 0
    d364:	cf 91       	pop	r28
    d366:	08 95       	ret

0000d368 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d368:	1f 92       	push	r1
    d36a:	0f 92       	push	r0
    d36c:	0f b6       	in	r0, 0x3f	; 63
    d36e:	0f 92       	push	r0
    d370:	11 24       	eor	r1, r1
    d372:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d374:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d378:	80 91 ce 00 	lds	r24, 0x00CE
    d37c:	80 93 87 02 	sts	0x0287, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d380:	81 e0       	ldi	r24, 0x01	; 1
    d382:	80 93 88 02 	sts	0x0288, r24
    d386:	8f 91       	pop	r24
    d388:	0f 90       	pop	r0
    d38a:	0f be       	out	0x3f, r0	; 63
    d38c:	0f 90       	pop	r0
    d38e:	1f 90       	pop	r1
    d390:	18 95       	reti

0000d392 <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d392:	88 e9       	ldi	r24, 0x98	; 152
    d394:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d398:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d39c:	87 e0       	ldi	r24, 0x07	; 7
    d39e:	80 93 cc 00 	sts	0x00CC, r24
    d3a2:	08 95       	ret

0000d3a4 <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    d3a4:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    d3a6:	80 53       	subi	r24, 0x30	; 48
    d3a8:	8a 30       	cpi	r24, 0x0A	; 10
    d3aa:	10 f4       	brcc	.+4      	; 0xd3b0 <xtod+0xc>
    d3ac:	99 27       	eor	r25, r25
    d3ae:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    d3b0:	89 2f       	mov	r24, r25
    d3b2:	81 54       	subi	r24, 0x41	; 65
    d3b4:	86 30       	cpi	r24, 0x06	; 6
    d3b6:	10 f4       	brcc	.+4      	; 0xd3bc <xtod+0x18>
    d3b8:	97 53       	subi	r25, 0x37	; 55
    d3ba:	05 c0       	rjmp	.+10     	; 0xd3c6 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    d3bc:	89 2f       	mov	r24, r25
    d3be:	81 56       	subi	r24, 0x61	; 97
    d3c0:	86 30       	cpi	r24, 0x06	; 6
    d3c2:	20 f4       	brcc	.+8      	; 0xd3cc <xtod+0x28>
    d3c4:	97 55       	subi	r25, 0x57	; 87
    d3c6:	89 2f       	mov	r24, r25
    d3c8:	99 27       	eor	r25, r25
    d3ca:	08 95       	ret
 return c=0;        // not Hex digit
    d3cc:	80 e0       	ldi	r24, 0x00	; 0
    d3ce:	90 e0       	ldi	r25, 0x00	; 0
}
    d3d0:	08 95       	ret

0000d3d2 <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    d3d2:	ef 92       	push	r14
    d3d4:	ff 92       	push	r15
    d3d6:	0f 93       	push	r16
    d3d8:	1f 93       	push	r17
    d3da:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    d3dc:	80 81       	ld	r24, Z
    d3de:	88 23       	and	r24, r24
    d3e0:	81 f0       	breq	.+32     	; 0xd402 <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    d3e2:	8f 01       	movw	r16, r30
    d3e4:	0f 5f       	subi	r16, 0xFF	; 255
    d3e6:	1f 4f       	sbci	r17, 0xFF	; 255
    d3e8:	7b 01       	movw	r14, r22
    d3ea:	94 e0       	ldi	r25, 0x04	; 4
    d3ec:	ee 0c       	add	r14, r14
    d3ee:	ff 1c       	adc	r15, r15
    d3f0:	9a 95       	dec	r25
    d3f2:	e1 f7       	brne	.-8      	; 0xd3ec <HextoDec+0x1a>
    d3f4:	0e 94 d2 69 	call	0xd3a4	; 0xd3a4 <xtod>
    d3f8:	f8 01       	movw	r30, r16
    d3fa:	b7 01       	movw	r22, r14
    d3fc:	68 0f       	add	r22, r24
    d3fe:	71 1d       	adc	r23, r1
    d400:	ed cf       	rjmp	.-38     	; 0xd3dc <HextoDec+0xa>
}
    d402:	cb 01       	movw	r24, r22
    d404:	1f 91       	pop	r17
    d406:	0f 91       	pop	r16
    d408:	ff 90       	pop	r15
    d40a:	ef 90       	pop	r14
    d40c:	08 95       	ret

0000d40e <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    d40e:	60 e0       	ldi	r22, 0x00	; 0
    d410:	70 e0       	ldi	r23, 0x00	; 0
    d412:	0e 94 e9 69 	call	0xd3d2	; 0xd3d2 <HextoDec>
    d416:	08 95       	ret

0000d418 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    d418:	ef 92       	push	r14
    d41a:	ff 92       	push	r15
    d41c:	0f 93       	push	r16
    d41e:	1f 93       	push	r17
    d420:	8a 01       	movw	r16, r20
    d422:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    d424:	68 0f       	add	r22, r24
    d426:	79 1f       	adc	r23, r25
    d428:	c9 01       	movw	r24, r18
    d42a:	0e 94 43 69 	call	0xd286	; 0xd286 <strncpy>
	pnew[numchars] = '\0';
    d42e:	0e 0d       	add	r16, r14
    d430:	1f 1d       	adc	r17, r15
    d432:	f8 01       	movw	r30, r16
    d434:	10 82       	st	Z, r1
	return pnew;
}
    d436:	c7 01       	movw	r24, r14
    d438:	1f 91       	pop	r17
    d43a:	0f 91       	pop	r16
    d43c:	ff 90       	pop	r15
    d43e:	ef 90       	pop	r14
    d440:	08 95       	ret

0000d442 <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    d442:	cf 92       	push	r12
    d444:	df 92       	push	r13
    d446:	ef 92       	push	r14
    d448:	ff 92       	push	r15
    d44a:	0f 93       	push	r16
    d44c:	1f 93       	push	r17
    d44e:	cf 93       	push	r28
    d450:	df 93       	push	r29
    d452:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d454:	8d 30       	cpi	r24, 0x0D	; 13
    d456:	19 f0       	breq	.+6      	; 0xd45e <recv_input+0x1c>
    d458:	8a 30       	cpi	r24, 0x0A	; 10
    d45a:	09 f0       	breq	.+2      	; 0xd45e <recv_input+0x1c>
    d45c:	e8 c0       	rjmp	.+464    	; 0xd62e <recv_input+0x1ec>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d45e:	80 91 4f 02 	lds	r24, 0x024F
    d462:	e8 2f       	mov	r30, r24
    d464:	ff 27       	eor	r31, r31
    d466:	e3 56       	subi	r30, 0x63	; 99
    d468:	fd 4f       	sbci	r31, 0xFD	; 253
    d46a:	10 82       	st	Z, r1
  int8_t rc;
  int16_t value=0;
  char * raw_byte;
  short * raw_short;

  if (s[0] == 0)
    d46c:	80 91 9d 02 	lds	r24, 0x029D
    d470:	88 23       	and	r24, r24
    d472:	09 f4       	brne	.+2      	; 0xd476 <recv_input+0x34>
    d474:	d9 c0       	rjmp	.+434    	; 0xd628 <recv_input+0x1e6>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d476:	e0 91 50 02 	lds	r30, 0x0250
    d47a:	f0 91 51 02 	lds	r31, 0x0251
    d47e:	10 82       	st	Z, r1
  index = 0;
    d480:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d482:	80 91 9d 02 	lds	r24, 0x029D
    d486:	88 23       	and	r24, r24
    d488:	d1 f0       	breq	.+52     	; 0xd4be <recv_input+0x7c>
    d48a:	8d 33       	cpi	r24, 0x3D	; 61
    d48c:	c1 f0       	breq	.+48     	; 0xd4be <recv_input+0x7c>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d48e:	e9 2f       	mov	r30, r25
    d490:	ff 27       	eor	r31, r31
    d492:	a0 91 50 02 	lds	r26, 0x0250
    d496:	b0 91 51 02 	lds	r27, 0x0251
    d49a:	ae 0f       	add	r26, r30
    d49c:	bf 1f       	adc	r27, r31
    d49e:	e3 56       	subi	r30, 0x63	; 99
    d4a0:	fd 4f       	sbci	r31, 0xFD	; 253
    d4a2:	80 81       	ld	r24, Z
    d4a4:	8c 93       	st	X, r24
    index++;
    d4a6:	9f 5f       	subi	r25, 0xFF	; 255
    d4a8:	94 31       	cpi	r25, 0x14	; 20
    d4aa:	48 f4       	brcc	.+18     	; 0xd4be <recv_input+0x7c>
    d4ac:	e9 2f       	mov	r30, r25
    d4ae:	ff 27       	eor	r31, r31
    d4b0:	e3 56       	subi	r30, 0x63	; 99
    d4b2:	fd 4f       	sbci	r31, 0xFD	; 253
    d4b4:	e0 81       	ld	r30, Z
    d4b6:	ee 23       	and	r30, r30
    d4b8:	11 f0       	breq	.+4      	; 0xd4be <recv_input+0x7c>
    d4ba:	ed 33       	cpi	r30, 0x3D	; 61
    d4bc:	41 f7       	brne	.-48     	; 0xd48e <recv_input+0x4c>
    d4be:	a0 91 50 02 	lds	r26, 0x0250
    d4c2:	b0 91 51 02 	lds	r27, 0x0251
  }
  if (index < sizeof(do_cmdbuf)) {
    d4c6:	94 31       	cpi	r25, 0x14	; 20
    d4c8:	68 f4       	brcc	.+26     	; 0xd4e4 <recv_input+0xa2>
    cmd[index] = 0;
    d4ca:	89 2f       	mov	r24, r25
    d4cc:	99 27       	eor	r25, r25
    d4ce:	a8 0f       	add	r26, r24
    d4d0:	b9 1f       	adc	r27, r25
    d4d2:	1c 92       	st	X, r1
    args = &s[index];
    d4d4:	fc 01       	movw	r30, r24
    d4d6:	e3 56       	subi	r30, 0x63	; 99
    d4d8:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d4da:	80 81       	ld	r24, Z
    d4dc:	8d 33       	cpi	r24, 0x3D	; 61
    d4de:	21 f4       	brne	.+8      	; 0xd4e8 <recv_input+0xa6>
    d4e0:	31 96       	adiw	r30, 0x01	; 1
    d4e2:	fb cf       	rjmp	.-10     	; 0xd4da <recv_input+0x98>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d4e4:	fd 01       	movw	r30, r26
    d4e6:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d4e8:	e0 91 50 02 	lds	r30, 0x0250
    d4ec:	f0 91 51 02 	lds	r31, 0x0251
    d4f0:	80 81       	ld	r24, Z
    d4f2:	88 23       	and	r24, r24
    d4f4:	09 f4       	brne	.+2      	; 0xd4f8 <recv_input+0xb6>
    d4f6:	98 c0       	rjmp	.+304    	; 0xd628 <recv_input+0x1e6>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d4f8:	64 e7       	ldi	r22, 0x74	; 116
    d4fa:	70 e0       	ldi	r23, 0x00	; 0
    d4fc:	99 27       	eor	r25, r25
    d4fe:	0e 94 3a 69 	call	0xd274	; 0xd274 <strcmp>
    d502:	89 2b       	or	r24, r25
    d504:	09 f0       	breq	.+2      	; 0xd508 <recv_input+0xc6>
    d506:	90 c0       	rjmp	.+288    	; 0xd628 <recv_input+0x1e6>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d508:	82 e0       	ldi	r24, 0x02	; 2
    d50a:	90 e0       	ldi	r25, 0x00	; 0
    d50c:	0e 94 b9 73 	call	0xe772	; 0xe772 <MEMBLOCK_Allocate>
    d510:	8c 01       	movw	r16, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d512:	9c 01       	movw	r18, r24
    d514:	43 e0       	ldi	r20, 0x03	; 3
    d516:	50 e0       	ldi	r21, 0x00	; 0
    d518:	61 e0       	ldi	r22, 0x01	; 1
    d51a:	70 e0       	ldi	r23, 0x00	; 0
    d51c:	80 91 50 02 	lds	r24, 0x0250
    d520:	90 91 51 02 	lds	r25, 0x0251
    d524:	0e 94 0c 6a 	call	0xd418	; 0xd418 <substr>
    d528:	90 93 77 02 	sts	0x0277, r25
    d52c:	80 93 76 02 	sts	0x0276, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d530:	c8 01       	movw	r24, r16
    d532:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
	// 2	unsigned char	Pack State of Health				0.5%
	// 3	unsigned char	Max Pack Temperature				1 deg C
	// 4-5	short			Min Pack Voltage					1mV
	// 6-7	short			Max Pack Voltage					1mV
	 
	if (strcmp(can_addr, "630") == 0) {
    d536:	64 e1       	ldi	r22, 0x14	; 20
    d538:	72 e0       	ldi	r23, 0x02	; 2
    d53a:	80 91 76 02 	lds	r24, 0x0276
    d53e:	90 91 77 02 	lds	r25, 0x0277
    d542:	0e 94 3a 69 	call	0xd274	; 0xd274 <strcmp>
    d546:	6c 01       	movw	r12, r24
    d548:	89 2b       	or	r24, r25
    d54a:	09 f0       	breq	.+2      	; 0xd54e <recv_input+0x10c>
    d54c:	6d c0       	rjmp	.+218    	; 0xd628 <recv_input+0x1e6>
		wdt_reset();
    d54e:	a8 95       	wdr
		
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d550:	82 e0       	ldi	r24, 0x02	; 2
    d552:	90 e0       	ldi	r25, 0x00	; 0
    d554:	0e 94 b9 73 	call	0xe772	; 0xe772 <MEMBLOCK_Allocate>
    d558:	f8 01       	movw	r30, r16
    d55a:	80 83       	st	Z, r24

		// SOC, byte 0
		raw_byte = substr(cmd, 5, 2,pnew);
    d55c:	98 01       	movw	r18, r16
    d55e:	42 e0       	ldi	r20, 0x02	; 2
    d560:	50 e0       	ldi	r21, 0x00	; 0
    d562:	65 e0       	ldi	r22, 0x05	; 5
    d564:	70 e0       	ldi	r23, 0x00	; 0
    d566:	80 91 50 02 	lds	r24, 0x0250
    d56a:	90 91 51 02 	lds	r25, 0x0251
    d56e:	0e 94 0c 6a 	call	0xd418	; 0xd418 <substr>
    d572:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d574:	c8 01       	movw	r24, r16
    d576:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d57a:	ce 01       	movw	r24, r28
    d57c:	0e 94 07 6a 	call	0xd40e	; 0xd40e <xstrtoi>
		value = value/2;	// 0.5 % per LSB
    d580:	9c 01       	movw	r18, r24
    d582:	97 ff       	sbrs	r25, 7
    d584:	02 c0       	rjmp	.+4      	; 0xd58a <recv_input+0x148>
    d586:	2f 5f       	subi	r18, 0xFF	; 255
    d588:	3f 4f       	sbci	r19, 0xFF	; 255
    d58a:	35 95       	asr	r19
    d58c:	27 95       	ror	r18
		LCD_UpdateSOC(value);
    d58e:	82 2f       	mov	r24, r18
    d590:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>


		// Max Pack temp, byte 3
		raw_byte = substr(cmd, 11, 2,pnew);
    d594:	98 01       	movw	r18, r16
    d596:	42 e0       	ldi	r20, 0x02	; 2
    d598:	50 e0       	ldi	r21, 0x00	; 0
    d59a:	6b e0       	ldi	r22, 0x0B	; 11
    d59c:	70 e0       	ldi	r23, 0x00	; 0
    d59e:	80 91 50 02 	lds	r24, 0x0250
    d5a2:	90 91 51 02 	lds	r25, 0x0251
    d5a6:	0e 94 0c 6a 	call	0xd418	; 0xd418 <substr>
    d5aa:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d5ac:	c8 01       	movw	r24, r16
    d5ae:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d5b2:	ce 01       	movw	r24, r28
    d5b4:	0e 94 07 6a 	call	0xd40e	; 0xd40e <xstrtoi>
		LCD_UpdateMaxTemp(value);
    d5b8:	0e 94 32 6f 	call	0xde64	; 0xde64 <LCD_UpdateMaxTemp>
		
		char *spnew = MEM_ALLOC(6);
    d5bc:	82 e0       	ldi	r24, 0x02	; 2
    d5be:	90 e0       	ldi	r25, 0x00	; 0
    d5c0:	0e 94 b9 73 	call	0xe772	; 0xe772 <MEMBLOCK_Allocate>
    d5c4:	7c 01       	movw	r14, r24

		// Min Pack Voltage, byte 4-5
		raw_short = substr(cmd, 13, 4,spnew);
    d5c6:	9c 01       	movw	r18, r24
    d5c8:	44 e0       	ldi	r20, 0x04	; 4
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	6d e0       	ldi	r22, 0x0D	; 13
    d5ce:	70 e0       	ldi	r23, 0x00	; 0
    d5d0:	80 91 50 02 	lds	r24, 0x0250
    d5d4:	90 91 51 02 	lds	r25, 0x0251
    d5d8:	0e 94 0c 6a 	call	0xd418	; 0xd418 <substr>
    d5dc:	8c 01       	movw	r16, r24
		MEM_FREE(spnew);
    d5de:	c7 01       	movw	r24, r14
    d5e0:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
		value = xstrtoi(raw_short);
    d5e4:	c8 01       	movw	r24, r16
    d5e6:	0e 94 07 6a 	call	0xd40e	; 0xd40e <xstrtoi>
		LCD_UpdateMinVolt(value);
    d5ea:	0e 94 cb 6e 	call	0xdd96	; 0xdd96 <LCD_UpdateMinVolt>
		
		// Small status line for each frame received. Since ID 630 should
		// be transmitted once per second, there should be small but visible
		// blinking of few pixels in one of the corners of the display. 		
		if (la == 0)
    d5ee:	80 91 35 02 	lds	r24, 0x0235
    d5f2:	90 91 36 02 	lds	r25, 0x0236
    d5f6:	89 2b       	or	r24, r25
    d5f8:	69 f4       	brne	.+26     	; 0xd614 <recv_input+0x1d2>
		{
				LCD_ClrLine(1,63,2,63);
    d5fa:	2f e3       	ldi	r18, 0x3F	; 63
    d5fc:	42 e0       	ldi	r20, 0x02	; 2
    d5fe:	62 2f       	mov	r22, r18
    d600:	81 e0       	ldi	r24, 0x01	; 1
    d602:	0e 94 de 70 	call	0xe1bc	; 0xe1bc <LCD_ClrLine>
				la = 1;
    d606:	81 e0       	ldi	r24, 0x01	; 1
    d608:	90 e0       	ldi	r25, 0x00	; 0
    d60a:	90 93 36 02 	sts	0x0236, r25
    d60e:	80 93 35 02 	sts	0x0235, r24
    d612:	0a c0       	rjmp	.+20     	; 0xd628 <recv_input+0x1e6>
		} else {
				LCD_SetLine(1,63,2,63);
    d614:	2f e3       	ldi	r18, 0x3F	; 63
    d616:	42 e0       	ldi	r20, 0x02	; 2
    d618:	62 2f       	mov	r22, r18
    d61a:	81 e0       	ldi	r24, 0x01	; 1
    d61c:	0e 94 76 70 	call	0xe0ec	; 0xe0ec <LCD_SetLine>
				la = 0;
    d620:	d0 92 36 02 	sts	0x0236, r13
    d624:	c0 92 35 02 	sts	0x0235, r12
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d628:	10 92 4f 02 	sts	0x024F, r1
    d62c:	10 c0       	rjmp	.+32     	; 0xd64e <recv_input+0x20c>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d62e:	80 91 4f 02 	lds	r24, 0x024F
    d632:	e8 2f       	mov	r30, r24
    d634:	ff 27       	eor	r31, r31
    d636:	e3 56       	subi	r30, 0x63	; 99
    d638:	fd 4f       	sbci	r31, 0xFD	; 253
    d63a:	90 83       	st	Z, r25
    d63c:	8f 5f       	subi	r24, 0xFF	; 255
    d63e:	80 93 4f 02 	sts	0x024F, r24
    if (idx == CMD_BUF_LEN) {
    d642:	80 38       	cpi	r24, 0x80	; 128
    d644:	21 f4       	brne	.+8      	; 0xd64e <recv_input+0x20c>
      idx = 0;
    d646:	10 92 4f 02 	sts	0x024F, r1
      recv_input_cmdbuf[idx] = 0;
    d64a:	10 92 9d 02 	sts	0x029D, r1
    d64e:	df 91       	pop	r29
    d650:	cf 91       	pop	r28
    d652:	1f 91       	pop	r17
    d654:	0f 91       	pop	r16
    d656:	ff 90       	pop	r15
    d658:	ef 90       	pop	r14
    d65a:	df 90       	pop	r13
    d65c:	cf 90       	pop	r12
    d65e:	08 95       	ret

0000d660 <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d660:	cf ef       	ldi	r28, 0xFF	; 255
    d662:	d1 e2       	ldi	r29, 0x21	; 33
    d664:	de bf       	out	0x3e, r29	; 62
    d666:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);

	LCD_UpdateSOC(1);
    d668:	81 e0       	ldi	r24, 0x01	; 1
    d66a:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	stdout = &mystdout;
    d66e:	81 e4       	ldi	r24, 0x41	; 65
    d670:	92 e0       	ldi	r25, 0x02	; 2
    d672:	90 93 c4 18 	sts	0x18C4, r25
    d676:	80 93 c3 18 	sts	0x18C3, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d67a:	54 9a       	sbi	0x0a, 4	; 10
    d67c:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d67e:	0e 94 c9 69 	call	0xd392	; 0xd392 <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d682:	82 e0       	ldi	r24, 0x02	; 2
    d684:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d688:	0e 94 d1 6b 	call	0xd7a2	; 0xd7a2 <InitMemory>

	LCD_UpdateSOC(3);
    d68c:	83 e0       	ldi	r24, 0x03	; 3
    d68e:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	LCD_Init();
    d692:	0e 94 c5 6c 	call	0xd98a	; 0xd98a <LCD_Init>

	LCD_UpdateSOC(4);
    d696:	84 e0       	ldi	r24, 0x04	; 4
    d698:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	TIMING_Init();
    d69c:	0e 94 8b 75 	call	0xeb16	; 0xeb16 <TIMING_Init>

	LCD_UpdateSOC(5);
    d6a0:	85 e0       	ldi	r24, 0x05	; 5
    d6a2:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	RTC_Init();
    d6a6:	0e 94 54 75 	call	0xeaa8	; 0xeaa8 <RTC_Init>

	LCD_UpdateSOC(6);
    d6aa:	86 e0       	ldi	r24, 0x06	; 6
    d6ac:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d6b0:	8c e2       	ldi	r24, 0x2C	; 44
    d6b2:	96 e7       	ldi	r25, 0x76	; 118
    d6b4:	0e 94 83 75 	call	0xeb06	; 0xeb06 <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d6b8:	87 e0       	ldi	r24, 0x07	; 7
    d6ba:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d6be:	62 e3       	ldi	r22, 0x32	; 50
    d6c0:	84 e6       	ldi	r24, 0x64	; 100
    d6c2:	0e 94 82 71 	call	0xe304	; 0xe304 <JOYSTICK_Init>

	//USART_Init();

//	CAL_enable_interrupt();

	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d6c6:	08 e7       	ldi	r16, 0x78	; 120
    d6c8:	12 e0       	ldi	r17, 0x02	; 2
    d6ca:	21 e9       	ldi	r18, 0x91	; 145
    d6cc:	31 e7       	ldi	r19, 0x71	; 113
    d6ce:	41 e0       	ldi	r20, 0x01	; 1
    d6d0:	50 e0       	ldi	r21, 0x00	; 0
    d6d2:	60 e0       	ldi	r22, 0x00	; 0
    d6d4:	70 e0       	ldi	r23, 0x00	; 0
    d6d6:	8f ef       	ldi	r24, 0xFF	; 255
    d6d8:	0e 94 93 77 	call	0xef26	; 0xef26 <TIMING_AddRepCallbackEvent>

	// happy startup sound
	LCD_UpdateSOC(8);
    d6dc:	88 e0       	ldi	r24, 0x08	; 8
    d6de:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;

	// interrupt enable
	SREG |= 1<<7;
    d6e2:	8f b7       	in	r24, 0x3f	; 63
    d6e4:	80 68       	ori	r24, 0x80	; 128
    d6e6:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d6e8:	89 e0       	ldi	r24, 0x09	; 9
    d6ea:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/

	LCD_UpdateSOC(10);
    d6ee:	8a e0       	ldi	r24, 0x0A	; 10
    d6f0:	0e 94 45 70 	call	0xe08a	; 0xe08a <LCD_UpdateSOC>

	PlaySound(11);
    d6f4:	8b e0       	ldi	r24, 0x0B	; 11
    d6f6:	90 e0       	ldi	r25, 0x00	; 0
    d6f8:	0e 94 19 6c 	call	0xd832	; 0xd832 <PlaySound>
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
//	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );

	// init backlight
	BACKLIGHT_Init();
    d6fc:	0e 94 0a 72 	call	0xe414	; 0xe414 <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d700:	6b e9       	ldi	r22, 0x9B	; 155
    d702:	79 e6       	ldi	r23, 0x69	; 105
    d704:	88 e0       	ldi	r24, 0x08	; 8
    d706:	90 e0       	ldi	r25, 0x00	; 0
    d708:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d70c:	90 93 3a 02 	sts	0x023A, r25
    d710:	80 93 39 02 	sts	0x0239, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d714:	6b e9       	ldi	r22, 0x9B	; 155
    d716:	79 e6       	ldi	r23, 0x69	; 105
    d718:	8a e0       	ldi	r24, 0x0A	; 10
    d71a:	90 e0       	ldi	r25, 0x00	; 0
    d71c:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d720:	90 93 40 02 	sts	0x0240, r25
    d724:	80 93 3f 02 	sts	0x023F, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d728:	6b e9       	ldi	r22, 0x9B	; 155
    d72a:	79 e6       	ldi	r23, 0x69	; 105
    d72c:	8c e0       	ldi	r24, 0x0C	; 12
    d72e:	90 e0       	ldi	r25, 0x00	; 0
    d730:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d734:	90 93 3e 02 	sts	0x023E, r25
    d738:	80 93 3d 02 	sts	0x023D, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d73c:	6b e9       	ldi	r22, 0x9B	; 155
    d73e:	79 e6       	ldi	r23, 0x69	; 105
    d740:	8e e0       	ldi	r24, 0x0E	; 14
    d742:	90 e0       	ldi	r25, 0x00	; 0
    d744:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d748:	90 93 3c 02 	sts	0x023C, r25
    d74c:	80 93 3b 02 	sts	0x023B, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d750:	6b e9       	ldi	r22, 0x9B	; 155
    d752:	79 e6       	ldi	r23, 0x69	; 105
    d754:	80 e1       	ldi	r24, 0x10	; 16
    d756:	90 e0       	ldi	r25, 0x00	; 0
    d758:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d75c:	90 93 38 02 	sts	0x0238, r25
    d760:	80 93 37 02 	sts	0x0237, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d764:	40 91 3b 02 	lds	r20, 0x023B
    d768:	60 91 3d 02 	lds	r22, 0x023D
    d76c:	80 91 3f 02 	lds	r24, 0x023F
    d770:	0e 94 62 72 	call	0xe4c4	; 0xe4c4 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d774:	80 91 37 02 	lds	r24, 0x0237
    d778:	0e 94 2e 72 	call	0xe45c	; 0xe45c <BACKLIGHT_SetIntensity>
	TIMING_RemoveEvent( splashScreenEvent );
	MEM_FREE( splashScreenEvent );

	DELAY_MS(500);
*/
	LCD_ClrBox(0,0,128,64);
    d77c:	20 e4       	ldi	r18, 0x40	; 64
    d77e:	40 e8       	ldi	r20, 0x80	; 128
    d780:	60 e0       	ldi	r22, 0x00	; 0
    d782:	86 2f       	mov	r24, r22
    d784:	0e 94 97 6d 	call	0xdb2e	; 0xdb2e <LCD_ClrBox>
//	LcdContrast();
//}

	while (1)
 	{
		if (urx_recv) 
    d788:	80 91 88 02 	lds	r24, 0x0288
    d78c:	88 23       	and	r24, r24
    d78e:	e1 f3       	breq	.-8      	; 0xd788 <main+0x128>
		{	
			cli();
    d790:	f8 94       	cli
            urx_recv = 0;
    d792:	10 92 88 02 	sts	0x0288, r1
            ch = urx;
    d796:	80 91 87 02 	lds	r24, 0x0287
            sei();
    d79a:	78 94       	sei
            /* build a command line and execute commands when complete */
            recv_input(ch);
    d79c:	0e 94 21 6a 	call	0xd442	; 0xd442 <recv_input>
    d7a0:	f3 cf       	rjmp	.-26     	; 0xd788 <main+0x128>

0000d7a2 <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d7a2:	66 e2       	ldi	r22, 0x26	; 38
    d7a4:	78 e1       	ldi	r23, 0x18	; 24
    d7a6:	84 e0       	ldi	r24, 0x04	; 4
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	0e 94 6d 73 	call	0xe6da	; 0xe6da <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d7ae:	2d e1       	ldi	r18, 0x1D	; 29
    d7b0:	33 e0       	ldi	r19, 0x03	; 3
    d7b2:	40 e1       	ldi	r20, 0x10	; 16
    d7b4:	50 e0       	ldi	r21, 0x00	; 0
    d7b6:	ba 01       	movw	r22, r20
    d7b8:	80 e0       	ldi	r24, 0x00	; 0
    d7ba:	90 e0       	ldi	r25, 0x00	; 0
    d7bc:	0e 94 76 73 	call	0xe6ec	; 0xe6ec <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d7c0:	2f e1       	ldi	r18, 0x1F	; 31
    d7c2:	34 e0       	ldi	r19, 0x04	; 4
    d7c4:	40 e2       	ldi	r20, 0x20	; 32
    d7c6:	50 e0       	ldi	r21, 0x00	; 0
    d7c8:	ba 01       	movw	r22, r20
    d7ca:	81 e0       	ldi	r24, 0x01	; 1
    d7cc:	90 e0       	ldi	r25, 0x00	; 0
    d7ce:	0e 94 76 73 	call	0xe6ec	; 0xe6ec <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d7d2:	23 e2       	ldi	r18, 0x23	; 35
    d7d4:	38 e0       	ldi	r19, 0x08	; 8
    d7d6:	40 e1       	ldi	r20, 0x10	; 16
    d7d8:	50 e0       	ldi	r21, 0x00	; 0
    d7da:	60 e4       	ldi	r22, 0x40	; 64
    d7dc:	70 e0       	ldi	r23, 0x00	; 0
    d7de:	82 e0       	ldi	r24, 0x02	; 2
    d7e0:	90 e0       	ldi	r25, 0x00	; 0
    d7e2:	0e 94 76 73 	call	0xe6ec	; 0xe6ec <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d7e6:	25 e2       	ldi	r18, 0x25	; 37
    d7e8:	3c e0       	ldi	r19, 0x0C	; 12
    d7ea:	43 e0       	ldi	r20, 0x03	; 3
    d7ec:	50 e0       	ldi	r21, 0x00	; 0
    d7ee:	60 e0       	ldi	r22, 0x00	; 0
    d7f0:	74 e0       	ldi	r23, 0x04	; 4
    d7f2:	ca 01       	movw	r24, r20
    d7f4:	0e 94 76 73 	call	0xe6ec	; 0xe6ec <MEMBLOCK_InitBag>
    d7f8:	08 95       	ret

0000d7fa <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d7fa:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d7fc:	e8 2f       	mov	r30, r24
    d7fe:	ff 27       	eor	r31, r31
    d800:	ee 0f       	add	r30, r30
    d802:	ff 1f       	adc	r31, r31
    d804:	e4 58       	subi	r30, 0x84	; 132
    d806:	f8 43       	sbci	r31, 0x38	; 56
    d808:	85 91       	lpm	r24, Z+
    d80a:	94 91       	lpm	r25, Z+
    d80c:	bc 01       	movw	r22, r24
    d80e:	c9 01       	movw	r24, r18
    d810:	0e 94 f6 78 	call	0xf1ec	; 0xf1ec <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d814:	8d ec       	ldi	r24, 0xCD	; 205
    d816:	97 e0       	ldi	r25, 0x07	; 7
    d818:	a7 e0       	ldi	r26, 0x07	; 7
    d81a:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d81c:	01 97       	sbiw	r24, 0x01	; 1
    d81e:	a1 09       	sbc	r26, r1
    d820:	b1 09       	sbc	r27, r1
    d822:	00 00       	nop
    d824:	01 f0       	breq	.+0      	; 0xd826 <SONG_PlayTune+0x2c>
    d826:	d1 f7       	brne	.-12     	; 0xd81c <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d828:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d82a:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d82c:	0e 94 e7 78 	call	0xf1ce	; 0xf1ce <SONG_StopTune>
    d830:	08 95       	ret

0000d832 <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d832:	cf 92       	push	r12
    d834:	df 92       	push	r13
    d836:	ef 92       	push	r14
    d838:	ff 92       	push	r15
    d83a:	0f 93       	push	r16
    d83c:	1f 93       	push	r17
    d83e:	cf 93       	push	r28
    d840:	df 93       	push	r29
    d842:	cd b7       	in	r28, 0x3d	; 61
    d844:	de b7       	in	r29, 0x3e	; 62
    d846:	2e 97       	sbiw	r28, 0x0e	; 14
    d848:	0f b6       	in	r0, 0x3f	; 63
    d84a:	f8 94       	cli
    d84c:	de bf       	out	0x3e, r29	; 62
    d84e:	0f be       	out	0x3f, r0	; 63
    d850:	cd bf       	out	0x3d, r28	; 61
    d852:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d854:	88 e2       	ldi	r24, 0x28	; 40
    d856:	90 e0       	ldi	r25, 0x00	; 0
    d858:	0e 94 b9 73 	call	0xe772	; 0xe772 <MEMBLOCK_Allocate>
    d85c:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d85e:	80 e3       	ldi	r24, 0x30	; 48
    d860:	90 e0       	ldi	r25, 0x00	; 0
    d862:	0e 94 b9 73 	call	0xe772	; 0xe772 <MEMBLOCK_Allocate>
    d866:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d868:	48 e2       	ldi	r20, 0x28	; 40
    d86a:	b7 01       	movw	r22, r14
    d86c:	ce 01       	movw	r24, r28
    d86e:	01 96       	adiw	r24, 0x01	; 1
    d870:	0e 94 08 73 	call	0xe610	; 0xe610 <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d874:	be 01       	movw	r22, r28
    d876:	6f 5f       	subi	r22, 0xFF	; 255
    d878:	7f 4f       	sbci	r23, 0xFF	; 255
    d87a:	80 2f       	mov	r24, r16
    d87c:	0e 94 fd 6b 	call	0xd7fa	; 0xd7fa <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d880:	c7 01       	movw	r24, r14
    d882:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d886:	c6 01       	movw	r24, r12
    d888:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <MEMBLOCK_Free>
    d88c:	2e 96       	adiw	r28, 0x0e	; 14
    d88e:	0f b6       	in	r0, 0x3f	; 63
    d890:	f8 94       	cli
    d892:	de bf       	out	0x3e, r29	; 62
    d894:	0f be       	out	0x3f, r0	; 63
    d896:	cd bf       	out	0x3d, r28	; 61
    d898:	df 91       	pop	r29
    d89a:	cf 91       	pop	r28
    d89c:	1f 91       	pop	r17
    d89e:	0f 91       	pop	r16
    d8a0:	ff 90       	pop	r15
    d8a2:	ef 90       	pop	r14
    d8a4:	df 90       	pop	r13
    d8a6:	cf 90       	pop	r12
    d8a8:	08 95       	ret

0000d8aa <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d8aa:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d8ac:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d8ae:	85 ef       	ldi	r24, 0xF5	; 245
    d8b0:	97 e6       	ldi	r25, 0x67	; 103
    d8b2:	a1 e0       	ldi	r26, 0x01	; 1
    d8b4:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d8b6:	01 97       	sbiw	r24, 0x01	; 1
    d8b8:	a1 09       	sbc	r26, r1
    d8ba:	b1 09       	sbc	r27, r1
    d8bc:	00 00       	nop
    d8be:	01 f0       	breq	.+0      	; 0xd8c0 <S6B1713_HardReset+0x16>
    d8c0:	d1 f7       	brne	.-12     	; 0xd8b6 <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d8c2:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d8c4:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d8c6:	41 9a       	sbi	0x08, 1	; 8
    d8c8:	08 95       	ret

0000d8ca <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d8ca:	0e 94 55 6c 	call	0xd8aa	; 0xd8aa <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d8ce:	87 e8       	ldi	r24, 0x87	; 135
    d8d0:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d8d4:	80 e8       	ldi	r24, 0x80	; 128
    d8d6:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d8da:	38 9a       	sbi	0x07, 0	; 7
    d8dc:	08 95       	ret

0000d8de <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d8de:	40 98       	cbi	0x08, 0	; 8
    d8e0:	8f ea       	ldi	r24, 0xAF	; 175
    d8e2:	80 93 00 80 	sts	0x8000, r24
    d8e6:	08 95       	ret

0000d8e8 <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d8e8:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d8ea:	40 98       	cbi	0x08, 0	; 8
    d8ec:	80 64       	ori	r24, 0x40	; 64
    d8ee:	80 93 00 80 	sts	0x8000, r24
    d8f2:	08 95       	ret

0000d8f4 <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d8f4:	98 2f       	mov	r25, r24
    d8f6:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d8f8:	40 98       	cbi	0x08, 0	; 8
    d8fa:	81 e8       	ldi	r24, 0x81	; 129
    d8fc:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d900:	40 98       	cbi	0x08, 0	; 8
    d902:	90 93 00 80 	sts	0x8000, r25
    d906:	08 95       	ret

0000d908 <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d908:	40 98       	cbi	0x08, 0	; 8
    d90a:	80 ea       	ldi	r24, 0xA0	; 160
    d90c:	80 93 00 80 	sts	0x8000, r24
    d910:	08 95       	ret

0000d912 <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d912:	40 98       	cbi	0x08, 0	; 8
    d914:	83 ea       	ldi	r24, 0xA3	; 163
    d916:	80 93 00 80 	sts	0x8000, r24
    d91a:	08 95       	ret

0000d91c <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d91c:	40 98       	cbi	0x08, 0	; 8
    d91e:	80 ec       	ldi	r24, 0xC0	; 192
    d920:	80 93 00 80 	sts	0x8000, r24
    d924:	08 95       	ret

0000d926 <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d926:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d928:	40 98       	cbi	0x08, 0	; 8
    d92a:	88 62       	ori	r24, 0x28	; 40
    d92c:	80 93 00 80 	sts	0x8000, r24
    d930:	08 95       	ret

0000d932 <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d932:	40 98       	cbi	0x08, 0	; 8
    d934:	87 70       	andi	r24, 0x07	; 7
    d936:	80 62       	ori	r24, 0x20	; 32
    d938:	80 93 00 80 	sts	0x8000, r24
    d93c:	08 95       	ret

0000d93e <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d93e:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d940:	90 e0       	ldi	r25, 0x00	; 0
    d942:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d944:	89 2f       	mov	r24, r25
    d946:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d948:	40 98       	cbi	0x08, 0	; 8
    d94a:	80 6b       	ori	r24, 0xB0	; 176
    d94c:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d950:	40 98       	cbi	0x08, 0	; 8
    d952:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d956:	40 98       	cbi	0x08, 0	; 8
    d958:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d95c:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d95e:	40 9a       	sbi	0x08, 0	; 8
    d960:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d964:	81 50       	subi	r24, 0x01	; 1
    d966:	d9 f7       	brne	.-10     	; 0xd95e <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d968:	9f 5f       	subi	r25, 0xFF	; 255
    d96a:	98 30       	cpi	r25, 0x08	; 8
    d96c:	58 f3       	brcs	.-42     	; 0xd944 <LCD_SetScreen+0x6>
    d96e:	08 95       	ret

0000d970 <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d970:	1f 93       	push	r17
    d972:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    d974:	87 70       	andi	r24, 0x07	; 7
    d976:	88 0f       	add	r24, r24
    d978:	88 0f       	add	r24, r24
    d97a:	88 0f       	add	r24, r24
    d97c:	86 0f       	add	r24, r22
    d97e:	0e 94 74 6c 	call	0xd8e8	; 0xd8e8 <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    d982:	10 93 52 02 	sts	0x0252, r17
    d986:	1f 91       	pop	r17
    d988:	08 95       	ret

0000d98a <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    d98a:	ef 92       	push	r14
    d98c:	ff 92       	push	r15
    d98e:	0f 93       	push	r16
    d990:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    d992:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    d996:	84 e0       	ldi	r24, 0x04	; 4
    d998:	0e 94 93 6c 	call	0xd926	; 0xd926 <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    d99c:	85 e6       	ldi	r24, 0x65	; 101
    d99e:	e8 2e       	mov	r14, r24
    d9a0:	8e e0       	ldi	r24, 0x0E	; 14
    d9a2:	f8 2e       	mov	r15, r24
    d9a4:	01 2d       	mov	r16, r1
    d9a6:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d9a8:	c7 01       	movw	r24, r14
    d9aa:	01 97       	sbiw	r24, 0x01	; 1
    d9ac:	f1 f7       	brne	.-4      	; 0xd9aa <LCD_Init+0x20>
    d9ae:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d9b0:	00 c0       	rjmp	.+0      	; 0xd9b2 <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    d9b2:	86 e0       	ldi	r24, 0x06	; 6
    d9b4:	0e 94 93 6c 	call	0xd926	; 0xd926 <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d9b8:	c7 01       	movw	r24, r14
    d9ba:	01 97       	sbiw	r24, 0x01	; 1
    d9bc:	f1 f7       	brne	.-4      	; 0xd9ba <LCD_Init+0x30>
    d9be:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d9c0:	00 c0       	rjmp	.+0      	; 0xd9c2 <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    d9c2:	87 e0       	ldi	r24, 0x07	; 7
    d9c4:	0e 94 93 6c 	call	0xd926	; 0xd926 <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    d9c8:	86 e0       	ldi	r24, 0x06	; 6
    d9ca:	90 e0       	ldi	r25, 0x00	; 0
    d9cc:	0e 94 99 6c 	call	0xd932	; 0xd932 <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    d9d0:	84 e0       	ldi	r24, 0x04	; 4
    d9d2:	0e 94 7a 6c 	call	0xd8f4	; 0xd8f4 <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d9d6:	c7 01       	movw	r24, r14
    d9d8:	01 97       	sbiw	r24, 0x01	; 1
    d9da:	f1 f7       	brne	.-4      	; 0xd9d8 <LCD_Init+0x4e>
    d9dc:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d9de:	00 c0       	rjmp	.+0      	; 0xd9e0 <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    d9e0:	0e 94 89 6c 	call	0xd912	; 0xd912 <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    d9e4:	0e 94 84 6c 	call	0xd908	; 0xd908 <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    d9e8:	0e 94 8e 6c 	call	0xd91c	; 0xd91c <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    d9ec:	60 e0       	ldi	r22, 0x00	; 0
    d9ee:	86 2f       	mov	r24, r22
    d9f0:	0e 94 b8 6c 	call	0xd970	; 0xd970 <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    d9f4:	80 e0       	ldi	r24, 0x00	; 0
    d9f6:	0e 94 9f 6c 	call	0xd93e	; 0xd93e <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    d9fa:	0e 94 6f 6c 	call	0xd8de	; 0xd8de <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    d9fe:	85 e5       	ldi	r24, 0x55	; 85
    da00:	0e 94 9f 6c 	call	0xd93e	; 0xd93e <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    da04:	80 e0       	ldi	r24, 0x00	; 0
    da06:	0e 94 9f 6c 	call	0xd93e	; 0xd93e <LCD_SetScreen>
    da0a:	1f 91       	pop	r17
    da0c:	0f 91       	pop	r16
    da0e:	ff 90       	pop	r15
    da10:	ef 90       	pop	r14
    da12:	08 95       	ret

0000da14 <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    da14:	cf 93       	push	r28
    da16:	df 93       	push	r29
    da18:	cd b7       	in	r28, 0x3d	; 61
    da1a:	de b7       	in	r29, 0x3e	; 62
    da1c:	21 97       	sbiw	r28, 0x01	; 1
    da1e:	0f b6       	in	r0, 0x3f	; 63
    da20:	f8 94       	cli
    da22:	de bf       	out	0x3e, r29	; 62
    da24:	0f be       	out	0x3f, r0	; 63
    da26:	cd bf       	out	0x3d, r28	; 61
    da28:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    da2a:	40 98       	cbi	0x08, 0	; 8
    da2c:	80 ee       	ldi	r24, 0xE0	; 224
    da2e:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    da32:	86 2f       	mov	r24, r22
    da34:	86 95       	lsr	r24
    da36:	86 95       	lsr	r24
    da38:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da3a:	40 98       	cbi	0x08, 0	; 8
    da3c:	80 6b       	ori	r24, 0xB0	; 176
    da3e:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da42:	82 2f       	mov	r24, r18
    da44:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da46:	40 98       	cbi	0x08, 0	; 8
    da48:	99 27       	eor	r25, r25
    da4a:	44 e0       	ldi	r20, 0x04	; 4
    da4c:	96 95       	lsr	r25
    da4e:	87 95       	ror	r24
    da50:	4a 95       	dec	r20
    da52:	e1 f7       	brne	.-8      	; 0xda4c <LCD_SetPixel+0x38>
    da54:	80 61       	ori	r24, 0x10	; 16
    da56:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    da5a:	40 98       	cbi	0x08, 0	; 8
    da5c:	2f 70       	andi	r18, 0x0F	; 15
    da5e:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    da62:	40 9a       	sbi	0x08, 0	; 8
    da64:	80 91 00 81 	lds	r24, 0x8100
    da68:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    da6a:	40 9a       	sbi	0x08, 0	; 8
    da6c:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    da70:	40 9a       	sbi	0x08, 0	; 8
    da72:	26 2f       	mov	r18, r22
    da74:	33 27       	eor	r19, r19
    da76:	27 70       	andi	r18, 0x07	; 7
    da78:	30 70       	andi	r19, 0x00	; 0
    da7a:	81 e0       	ldi	r24, 0x01	; 1
    da7c:	90 e0       	ldi	r25, 0x00	; 0
    da7e:	02 c0       	rjmp	.+4      	; 0xda84 <LCD_SetPixel+0x70>
    da80:	88 0f       	add	r24, r24
    da82:	99 1f       	adc	r25, r25
    da84:	2a 95       	dec	r18
    da86:	e2 f7       	brpl	.-8      	; 0xda80 <LCD_SetPixel+0x6c>
    da88:	48 2b       	or	r20, r24
    da8a:	40 93 00 81 	sts	0x8100, r20
    da8e:	21 96       	adiw	r28, 0x01	; 1
    da90:	0f b6       	in	r0, 0x3f	; 63
    da92:	f8 94       	cli
    da94:	de bf       	out	0x3e, r29	; 62
    da96:	0f be       	out	0x3f, r0	; 63
    da98:	cd bf       	out	0x3d, r28	; 61
    da9a:	df 91       	pop	r29
    da9c:	cf 91       	pop	r28
    da9e:	08 95       	ret

0000daa0 <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    daa0:	cf 93       	push	r28
    daa2:	df 93       	push	r29
    daa4:	cd b7       	in	r28, 0x3d	; 61
    daa6:	de b7       	in	r29, 0x3e	; 62
    daa8:	21 97       	sbiw	r28, 0x01	; 1
    daaa:	0f b6       	in	r0, 0x3f	; 63
    daac:	f8 94       	cli
    daae:	de bf       	out	0x3e, r29	; 62
    dab0:	0f be       	out	0x3f, r0	; 63
    dab2:	cd bf       	out	0x3d, r28	; 61
    dab4:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dab6:	40 98       	cbi	0x08, 0	; 8
    dab8:	80 ee       	ldi	r24, 0xE0	; 224
    daba:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dabe:	86 2f       	mov	r24, r22
    dac0:	86 95       	lsr	r24
    dac2:	86 95       	lsr	r24
    dac4:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dac6:	40 98       	cbi	0x08, 0	; 8
    dac8:	80 6b       	ori	r24, 0xB0	; 176
    daca:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dace:	82 2f       	mov	r24, r18
    dad0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dad2:	40 98       	cbi	0x08, 0	; 8
    dad4:	99 27       	eor	r25, r25
    dad6:	54 e0       	ldi	r21, 0x04	; 4
    dad8:	96 95       	lsr	r25
    dada:	87 95       	ror	r24
    dadc:	5a 95       	dec	r21
    dade:	e1 f7       	brne	.-8      	; 0xdad8 <LCD_ClrPixel+0x38>
    dae0:	80 61       	ori	r24, 0x10	; 16
    dae2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dae6:	40 98       	cbi	0x08, 0	; 8
    dae8:	2f 70       	andi	r18, 0x0F	; 15
    daea:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    daee:	40 9a       	sbi	0x08, 0	; 8
    daf0:	80 91 00 81 	lds	r24, 0x8100
    daf4:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    daf6:	40 9a       	sbi	0x08, 0	; 8
    daf8:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    dafc:	40 9a       	sbi	0x08, 0	; 8
    dafe:	26 2f       	mov	r18, r22
    db00:	33 27       	eor	r19, r19
    db02:	27 70       	andi	r18, 0x07	; 7
    db04:	30 70       	andi	r19, 0x00	; 0
    db06:	81 e0       	ldi	r24, 0x01	; 1
    db08:	90 e0       	ldi	r25, 0x00	; 0
    db0a:	02 c0       	rjmp	.+4      	; 0xdb10 <LCD_ClrPixel+0x70>
    db0c:	88 0f       	add	r24, r24
    db0e:	99 1f       	adc	r25, r25
    db10:	2a 95       	dec	r18
    db12:	e2 f7       	brpl	.-8      	; 0xdb0c <LCD_ClrPixel+0x6c>
    db14:	80 95       	com	r24
    db16:	48 23       	and	r20, r24
    db18:	40 93 00 81 	sts	0x8100, r20
    db1c:	21 96       	adiw	r28, 0x01	; 1
    db1e:	0f b6       	in	r0, 0x3f	; 63
    db20:	f8 94       	cli
    db22:	de bf       	out	0x3e, r29	; 62
    db24:	0f be       	out	0x3f, r0	; 63
    db26:	cd bf       	out	0x3d, r28	; 61
    db28:	df 91       	pop	r29
    db2a:	cf 91       	pop	r28
    db2c:	08 95       	ret

0000db2e <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    db2e:	cf 93       	push	r28
    db30:	df 93       	push	r29
    db32:	cd b7       	in	r28, 0x3d	; 61
    db34:	de b7       	in	r29, 0x3e	; 62
    db36:	21 97       	sbiw	r28, 0x01	; 1
    db38:	0f b6       	in	r0, 0x3f	; 63
    db3a:	f8 94       	cli
    db3c:	de bf       	out	0x3e, r29	; 62
    db3e:	0f be       	out	0x3f, r0	; 63
    db40:	cd bf       	out	0x3d, r28	; 61
    db42:	e8 2f       	mov	r30, r24
    db44:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    db46:	48 17       	cp	r20, r24
    db48:	10 f4       	brcc	.+4      	; 0xdb4e <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    db4a:	e4 2f       	mov	r30, r20
		x2 = temp;
    db4c:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    db4e:	56 17       	cp	r21, r22
    db50:	18 f4       	brcc	.+6      	; 0xdb58 <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    db52:	86 2f       	mov	r24, r22
		y1 = y2;
    db54:	65 2f       	mov	r22, r21
		y2 = temp;
    db56:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    db58:	f6 2f       	mov	r31, r22
    db5a:	f6 95       	lsr	r31
    db5c:	f6 95       	lsr	r31
    db5e:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    db60:	75 2f       	mov	r23, r21
    db62:	76 95       	lsr	r23
    db64:	76 95       	lsr	r23
    db66:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    db68:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    db6a:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    db6c:	2f ef       	ldi	r18, 0xFF	; 255
    db6e:	30 e0       	ldi	r19, 0x00	; 0
    db70:	c9 01       	movw	r24, r18
    db72:	02 c0       	rjmp	.+4      	; 0xdb78 <LCD_ClrBox+0x4a>
    db74:	88 0f       	add	r24, r24
    db76:	99 1f       	adc	r25, r25
    db78:	6a 95       	dec	r22
    db7a:	e2 f7       	brpl	.-8      	; 0xdb74 <LCD_ClrBox+0x46>
    db7c:	68 2f       	mov	r22, r24
    db7e:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    db80:	87 e0       	ldi	r24, 0x07	; 7
    db82:	90 e0       	ldi	r25, 0x00	; 0
    db84:	85 1b       	sub	r24, r21
    db86:	91 09       	sbc	r25, r1
    db88:	02 c0       	rjmp	.+4      	; 0xdb8e <LCD_ClrBox+0x60>
    db8a:	35 95       	asr	r19
    db8c:	27 95       	ror	r18
    db8e:	8a 95       	dec	r24
    db90:	e2 f7       	brpl	.-8      	; 0xdb8a <LCD_ClrBox+0x5c>
    db92:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    db94:	4e 1b       	sub	r20, r30
    db96:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    db98:	40 98       	cbi	0x08, 0	; 8
    db9a:	80 ee       	ldi	r24, 0xE0	; 224
    db9c:	80 93 00 80 	sts	0x8000, r24
    dba0:	ae 2f       	mov	r26, r30
    dba2:	af 77       	andi	r26, 0x7F	; 127
    dba4:	be 2f       	mov	r27, r30
    dba6:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dba8:	f7 17       	cp	r31, r23
    dbaa:	11 f5       	brne	.+68     	; 0xdbf0 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    dbac:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dbae:	40 98       	cbi	0x08, 0	; 8
    dbb0:	70 6b       	ori	r23, 0xB0	; 176
    dbb2:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dbb6:	40 98       	cbi	0x08, 0	; 8
    dbb8:	8a 2f       	mov	r24, r26
    dbba:	99 27       	eor	r25, r25
    dbbc:	54 e0       	ldi	r21, 0x04	; 4
    dbbe:	96 95       	lsr	r25
    dbc0:	87 95       	ror	r24
    dbc2:	5a 95       	dec	r21
    dbc4:	e1 f7       	brne	.-8      	; 0xdbbe <LCD_ClrBox+0x90>
    dbc6:	80 61       	ori	r24, 0x10	; 16
    dbc8:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dbcc:	40 98       	cbi	0x08, 0	; 8
    dbce:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dbd2:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dbd4:	40 9a       	sbi	0x08, 0	; 8
    dbd6:	80 91 00 81 	lds	r24, 0x8100
    dbda:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    dbdc:	40 9a       	sbi	0x08, 0	; 8
    dbde:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    dbe2:	40 9a       	sbi	0x08, 0	; 8
    dbe4:	82 23       	and	r24, r18
    dbe6:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    dbea:	31 50       	subi	r19, 0x01	; 1
    dbec:	99 f7       	brne	.-26     	; 0xdbd4 <LCD_ClrBox+0xa6>
    dbee:	6b c0       	rjmp	.+214    	; 0xdcc6 <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    dbf0:	57 2f       	mov	r21, r23
    dbf2:	5f 1b       	sub	r21, r31
    dbf4:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dbf6:	40 98       	cbi	0x08, 0	; 8
    dbf8:	8f 2f       	mov	r24, r31
    dbfa:	80 6b       	ori	r24, 0xB0	; 176
    dbfc:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc00:	40 98       	cbi	0x08, 0	; 8
    dc02:	8a 2f       	mov	r24, r26
    dc04:	99 27       	eor	r25, r25
    dc06:	34 e0       	ldi	r19, 0x04	; 4
    dc08:	96 95       	lsr	r25
    dc0a:	87 95       	ror	r24
    dc0c:	3a 95       	dec	r19
    dc0e:	e1 f7       	brne	.-8      	; 0xdc08 <LCD_ClrBox+0xda>
    dc10:	80 61       	ori	r24, 0x10	; 16
    dc12:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc16:	40 98       	cbi	0x08, 0	; 8
    dc18:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dc1c:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dc1e:	40 9a       	sbi	0x08, 0	; 8
    dc20:	80 91 00 81 	lds	r24, 0x8100
    dc24:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    dc26:	40 9a       	sbi	0x08, 0	; 8
    dc28:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    dc2c:	40 9a       	sbi	0x08, 0	; 8
    dc2e:	86 23       	and	r24, r22
    dc30:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    dc34:	31 50       	subi	r19, 0x01	; 1
    dc36:	99 f7       	brne	.-26     	; 0xdc1e <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    dc38:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    dc3a:	85 2f       	mov	r24, r21
    dc3c:	51 50       	subi	r21, 0x01	; 1
    dc3e:	18 16       	cp	r1, r24
    dc40:	04 f5       	brge	.+64     	; 0xdc82 <LCD_ClrBox+0x154>
    dc42:	8a 2f       	mov	r24, r26
    dc44:	99 27       	eor	r25, r25
    dc46:	64 e0       	ldi	r22, 0x04	; 4
    dc48:	96 95       	lsr	r25
    dc4a:	87 95       	ror	r24
    dc4c:	6a 95       	dec	r22
    dc4e:	e1 f7       	brne	.-8      	; 0xdc48 <LCD_ClrBox+0x11a>
    dc50:	98 2f       	mov	r25, r24
    dc52:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dc54:	8f 2f       	mov	r24, r31
    dc56:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dc58:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc5a:	40 98       	cbi	0x08, 0	; 8
    dc5c:	80 6b       	ori	r24, 0xB0	; 176
    dc5e:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc62:	40 98       	cbi	0x08, 0	; 8
    dc64:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc68:	40 98       	cbi	0x08, 0	; 8
    dc6a:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    dc6e:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    dc70:	40 9a       	sbi	0x08, 0	; 8
    dc72:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    dc76:	31 50       	subi	r19, 0x01	; 1
    dc78:	d9 f7       	brne	.-10     	; 0xdc70 <LCD_ClrBox+0x142>
    dc7a:	85 2f       	mov	r24, r21
    dc7c:	51 50       	subi	r21, 0x01	; 1
    dc7e:	18 16       	cp	r1, r24
    dc80:	4c f3       	brlt	.-46     	; 0xdc54 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc82:	40 98       	cbi	0x08, 0	; 8
    dc84:	70 6b       	ori	r23, 0xB0	; 176
    dc86:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dc8a:	8e 2f       	mov	r24, r30
    dc8c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc8e:	40 98       	cbi	0x08, 0	; 8
    dc90:	99 27       	eor	r25, r25
    dc92:	54 e0       	ldi	r21, 0x04	; 4
    dc94:	96 95       	lsr	r25
    dc96:	87 95       	ror	r24
    dc98:	5a 95       	dec	r21
    dc9a:	e1 f7       	brne	.-8      	; 0xdc94 <LCD_ClrBox+0x166>
    dc9c:	80 61       	ori	r24, 0x10	; 16
    dc9e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dca2:	40 98       	cbi	0x08, 0	; 8
    dca4:	ef 70       	andi	r30, 0x0F	; 15
    dca6:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dcaa:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dcac:	40 9a       	sbi	0x08, 0	; 8
    dcae:	80 91 00 81 	lds	r24, 0x8100
    dcb2:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    dcb4:	40 9a       	sbi	0x08, 0	; 8
    dcb6:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    dcba:	40 9a       	sbi	0x08, 0	; 8
    dcbc:	82 23       	and	r24, r18
    dcbe:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    dcc2:	31 50       	subi	r19, 0x01	; 1
    dcc4:	99 f7       	brne	.-26     	; 0xdcac <LCD_ClrBox+0x17e>
    dcc6:	21 96       	adiw	r28, 0x01	; 1
    dcc8:	0f b6       	in	r0, 0x3f	; 63
    dcca:	f8 94       	cli
    dccc:	de bf       	out	0x3e, r29	; 62
    dcce:	0f be       	out	0x3f, r0	; 63
    dcd0:	cd bf       	out	0x3d, r28	; 61
    dcd2:	df 91       	pop	r29
    dcd4:	cf 91       	pop	r28
    dcd6:	08 95       	ret

0000dcd8 <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    dcd8:	cf 93       	push	r28
    dcda:	df 93       	push	r29
    dcdc:	cd b7       	in	r28, 0x3d	; 61
    dcde:	de b7       	in	r29, 0x3e	; 62
    dce0:	21 97       	sbiw	r28, 0x01	; 1
    dce2:	0f b6       	in	r0, 0x3f	; 63
    dce4:	f8 94       	cli
    dce6:	de bf       	out	0x3e, r29	; 62
    dce8:	0f be       	out	0x3f, r0	; 63
    dcea:	cd bf       	out	0x3d, r28	; 61
    dcec:	36 2f       	mov	r19, r22
    dcee:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dcf0:	40 98       	cbi	0x08, 0	; 8
    dcf2:	90 ee       	ldi	r25, 0xE0	; 224
    dcf4:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dcf8:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dcfa:	40 98       	cbi	0x08, 0	; 8
    dcfc:	30 6b       	ori	r19, 0xB0	; 176
    dcfe:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dd02:	94 2f       	mov	r25, r20
    dd04:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd06:	40 98       	cbi	0x08, 0	; 8
    dd08:	29 2f       	mov	r18, r25
    dd0a:	33 27       	eor	r19, r19
    dd0c:	e4 e0       	ldi	r30, 0x04	; 4
    dd0e:	36 95       	lsr	r19
    dd10:	27 95       	ror	r18
    dd12:	ea 95       	dec	r30
    dd14:	e1 f7       	brne	.-8      	; 0xdd0e <LCD_ClrPage+0x36>
    dd16:	92 2f       	mov	r25, r18
    dd18:	90 61       	ori	r25, 0x10	; 16
    dd1a:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd1e:	40 98       	cbi	0x08, 0	; 8
    dd20:	4f 70       	andi	r20, 0x0F	; 15
    dd22:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    dd26:	98 2f       	mov	r25, r24
    dd28:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    dd2a:	40 9a       	sbi	0x08, 0	; 8
    dd2c:	80 91 00 81 	lds	r24, 0x8100
    dd30:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    dd32:	40 9a       	sbi	0x08, 0	; 8
    dd34:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    dd38:	40 9a       	sbi	0x08, 0	; 8
    dd3a:	89 23       	and	r24, r25
    dd3c:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    dd40:	51 50       	subi	r21, 0x01	; 1
    dd42:	99 f7       	brne	.-26     	; 0xdd2a <LCD_ClrPage+0x52>
    dd44:	21 96       	adiw	r28, 0x01	; 1
    dd46:	0f b6       	in	r0, 0x3f	; 63
    dd48:	f8 94       	cli
    dd4a:	de bf       	out	0x3e, r29	; 62
    dd4c:	0f be       	out	0x3f, r0	; 63
    dd4e:	cd bf       	out	0x3d, r28	; 61
    dd50:	df 91       	pop	r29
    dd52:	cf 91       	pop	r28
    dd54:	08 95       	ret

0000dd56 <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    dd56:	fc 01       	movw	r30, r24
    dd58:	86 2f       	mov	r24, r22
    dd5a:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dd5c:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd5e:	40 98       	cbi	0x08, 0	; 8
    dd60:	80 6b       	ori	r24, 0xB0	; 176
    dd62:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dd66:	84 2f       	mov	r24, r20
    dd68:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd6a:	40 98       	cbi	0x08, 0	; 8
    dd6c:	99 27       	eor	r25, r25
    dd6e:	44 e0       	ldi	r20, 0x04	; 4
    dd70:	96 95       	lsr	r25
    dd72:	87 95       	ror	r24
    dd74:	4a 95       	dec	r20
    dd76:	e1 f7       	brne	.-8      	; 0xdd70 <LCD_WritePage_F+0x1a>
    dd78:	80 61       	ori	r24, 0x10	; 16
    dd7a:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd7e:	40 98       	cbi	0x08, 0	; 8
    dd80:	3f 70       	andi	r19, 0x0F	; 15
    dd82:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    dd86:	40 9a       	sbi	0x08, 0	; 8
    dd88:	84 91       	lpm	r24, Z+
    dd8a:	80 93 00 81 	sts	0x8100, r24
		data++;
    dd8e:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    dd90:	21 50       	subi	r18, 0x01	; 1
    dd92:	c9 f7       	brne	.-14     	; 0xdd86 <LCD_WritePage_F+0x30>
    dd94:	08 95       	ret

0000dd96 <LCD_UpdateMinVolt>:
	LCD_UpdateBigNumbers(soc);
	
}

void LCD_UpdateMinVolt(uint16_t volt)
{
    dd96:	0f 93       	push	r16
    dd98:	1f 93       	push	r17
    dd9a:	cf 93       	push	r28
    dd9c:	df 93       	push	r29
    dd9e:	cd b7       	in	r28, 0x3d	; 61
    dda0:	de b7       	in	r29, 0x3e	; 62
    dda2:	61 97       	sbiw	r28, 0x11	; 17
    dda4:	0f b6       	in	r0, 0x3f	; 63
    dda6:	f8 94       	cli
    dda8:	de bf       	out	0x3e, r29	; 62
    ddaa:	0f be       	out	0x3f, r0	; 63
    ddac:	cd bf       	out	0x3d, r28	; 61
    ddae:	8c 01       	movw	r16, r24
	// x = pixels ?
	char buffer [sizeof(uint16_t)*8+1];
	int charw=6;
	int startpos=60;
	
	TERMFONT_DisplayString("Min Volt:", 7, 0);
    ddb0:	40 e0       	ldi	r20, 0x00	; 0
    ddb2:	50 e0       	ldi	r21, 0x00	; 0
    ddb4:	67 e0       	ldi	r22, 0x07	; 7
    ddb6:	70 e0       	ldi	r23, 0x00	; 0
    ddb8:	88 e1       	ldi	r24, 0x18	; 24
    ddba:	92 e0       	ldi	r25, 0x02	; 2
    ddbc:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>
	
	// convert to ascii
    itoa(volt,buffer,10);
    ddc0:	4a e0       	ldi	r20, 0x0A	; 10
    ddc2:	50 e0       	ldi	r21, 0x00	; 0
    ddc4:	be 01       	movw	r22, r28
    ddc6:	6f 5f       	subi	r22, 0xFF	; 255
    ddc8:	7f 4f       	sbci	r23, 0xFF	; 255
    ddca:	c8 01       	movw	r24, r16
    ddcc:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <itoa>

	//TERMFONT_DisplayChar(buffer[0], 7, startpos );
	
	if (volt<10)
    ddd0:	0a 30       	cpi	r16, 0x0A	; 10
    ddd2:	11 05       	cpc	r17, r1
    ddd4:	a0 f4       	brcc	.+40     	; 0xddfe <LCD_UpdateMinVolt+0x68>
	{
		// leading zero
		TERMFONT_DisplayChar('0', 7, startpos );
    ddd6:	4c e3       	ldi	r20, 0x3C	; 60
    ddd8:	50 e0       	ldi	r21, 0x00	; 0
    ddda:	67 e0       	ldi	r22, 0x07	; 7
    dddc:	70 e0       	ldi	r23, 0x00	; 0
    ddde:	80 e3       	ldi	r24, 0x30	; 48
    dde0:	90 e0       	ldi	r25, 0x00	; 0
    dde2:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    dde6:	42 e4       	ldi	r20, 0x42	; 66
    dde8:	50 e0       	ldi	r21, 0x00	; 0
    ddea:	67 e0       	ldi	r22, 0x07	; 7
    ddec:	70 e0       	ldi	r23, 0x00	; 0
    ddee:	8e e2       	ldi	r24, 0x2E	; 46
    ddf0:	90 e0       	ldi	r25, 0x00	; 0
    ddf2:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[0], 7, startpos+2*charw );
    ddf6:	89 81       	ldd	r24, Y+1	; 0x01
    ddf8:	48 e4       	ldi	r20, 0x48	; 72
    ddfa:	50 e0       	ldi	r21, 0x00	; 0
    ddfc:	1b c0       	rjmp	.+54     	; 0xde34 <LCD_UpdateMinVolt+0x9e>
	} else {
		TERMFONT_DisplayChar(buffer[0], 7, startpos );
    ddfe:	89 81       	ldd	r24, Y+1	; 0x01
    de00:	4c e3       	ldi	r20, 0x3C	; 60
    de02:	50 e0       	ldi	r21, 0x00	; 0
    de04:	67 e0       	ldi	r22, 0x07	; 7
    de06:	70 e0       	ldi	r23, 0x00	; 0
    de08:	99 27       	eor	r25, r25
    de0a:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    de0e:	42 e4       	ldi	r20, 0x42	; 66
    de10:	50 e0       	ldi	r21, 0x00	; 0
    de12:	67 e0       	ldi	r22, 0x07	; 7
    de14:	70 e0       	ldi	r23, 0x00	; 0
    de16:	8e e2       	ldi	r24, 0x2E	; 46
    de18:	90 e0       	ldi	r25, 0x00	; 0
    de1a:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[1], 7, startpos+2*charw );
    de1e:	8a 81       	ldd	r24, Y+2	; 0x02
    de20:	48 e4       	ldi	r20, 0x48	; 72
    de22:	50 e0       	ldi	r21, 0x00	; 0
    de24:	67 e0       	ldi	r22, 0x07	; 7
    de26:	70 e0       	ldi	r23, 0x00	; 0
    de28:	99 27       	eor	r25, r25
    de2a:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[2], 7, startpos+3*charw );
    de2e:	8b 81       	ldd	r24, Y+3	; 0x03
    de30:	4e e4       	ldi	r20, 0x4E	; 78
    de32:	50 e0       	ldi	r21, 0x00	; 0
    de34:	67 e0       	ldi	r22, 0x07	; 7
    de36:	70 e0       	ldi	r23, 0x00	; 0
    de38:	99 27       	eor	r25, r25
    de3a:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
	}

	TERMFONT_DisplayString("V" , 7, startpos+4*charw );
    de3e:	44 e5       	ldi	r20, 0x54	; 84
    de40:	50 e0       	ldi	r21, 0x00	; 0
    de42:	67 e0       	ldi	r22, 0x07	; 7
    de44:	70 e0       	ldi	r23, 0x00	; 0
    de46:	82 e2       	ldi	r24, 0x22	; 34
    de48:	92 e0       	ldi	r25, 0x02	; 2
    de4a:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>
    de4e:	61 96       	adiw	r28, 0x11	; 17
    de50:	0f b6       	in	r0, 0x3f	; 63
    de52:	f8 94       	cli
    de54:	de bf       	out	0x3e, r29	; 62
    de56:	0f be       	out	0x3f, r0	; 63
    de58:	cd bf       	out	0x3d, r28	; 61
    de5a:	df 91       	pop	r29
    de5c:	cf 91       	pop	r28
    de5e:	1f 91       	pop	r17
    de60:	0f 91       	pop	r16
    de62:	08 95       	ret

0000de64 <LCD_UpdateMaxTemp>:

}

void LCD_UpdateMaxTemp(uint8_t temp)
{
    de64:	1f 93       	push	r17
    de66:	cf 93       	push	r28
    de68:	df 93       	push	r29
    de6a:	cd b7       	in	r28, 0x3d	; 61
    de6c:	de b7       	in	r29, 0x3e	; 62
    de6e:	29 97       	sbiw	r28, 0x09	; 9
    de70:	0f b6       	in	r0, 0x3f	; 63
    de72:	f8 94       	cli
    de74:	de bf       	out	0x3e, r29	; 62
    de76:	0f be       	out	0x3f, r0	; 63
    de78:	cd bf       	out	0x3d, r28	; 61
    de7a:	18 2f       	mov	r17, r24
	char buffer [sizeof(uint8_t)*8+1];
    itoa(temp,buffer,10);
    de7c:	4a e0       	ldi	r20, 0x0A	; 10
    de7e:	50 e0       	ldi	r21, 0x00	; 0
    de80:	be 01       	movw	r22, r28
    de82:	6f 5f       	subi	r22, 0xFF	; 255
    de84:	7f 4f       	sbci	r23, 0xFF	; 255
    de86:	99 27       	eor	r25, r25
    de88:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <itoa>
	
	TERMFONT_DisplayString( "Max Temp:", 5, 0 );
    de8c:	40 e0       	ldi	r20, 0x00	; 0
    de8e:	50 e0       	ldi	r21, 0x00	; 0
    de90:	65 e0       	ldi	r22, 0x05	; 5
    de92:	70 e0       	ldi	r23, 0x00	; 0
    de94:	84 e2       	ldi	r24, 0x24	; 36
    de96:	92 e0       	ldi	r25, 0x02	; 2
    de98:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>

	if (temp<10)
    de9c:	1a 30       	cpi	r17, 0x0A	; 10
    de9e:	40 f4       	brcc	.+16     	; 0xdeb0 <LCD_UpdateMaxTemp+0x4c>
	{
		// erase old content
		TERMFONT_DisplayString("    ",5,66);
    dea0:	42 e4       	ldi	r20, 0x42	; 66
    dea2:	50 e0       	ldi	r21, 0x00	; 0
    dea4:	65 e0       	ldi	r22, 0x05	; 5
    dea6:	70 e0       	ldi	r23, 0x00	; 0
    dea8:	8e e2       	ldi	r24, 0x2E	; 46
    deaa:	92 e0       	ldi	r25, 0x02	; 2
    deac:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>
		TERMFONT_DisplayString(buffer,5,66);
	} else {
		TERMFONT_DisplayString( buffer, 5, 66 );
    deb0:	42 e4       	ldi	r20, 0x42	; 66
    deb2:	50 e0       	ldi	r21, 0x00	; 0
    deb4:	65 e0       	ldi	r22, 0x05	; 5
    deb6:	70 e0       	ldi	r23, 0x00	; 0
    deb8:	ce 01       	movw	r24, r28
    deba:	01 96       	adiw	r24, 0x01	; 1
    debc:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>
	}
	
	TERMFONT_DisplayString( "C", 5, 84 );
    dec0:	44 e5       	ldi	r20, 0x54	; 84
    dec2:	50 e0       	ldi	r21, 0x00	; 0
    dec4:	65 e0       	ldi	r22, 0x05	; 5
    dec6:	70 e0       	ldi	r23, 0x00	; 0
    dec8:	83 e3       	ldi	r24, 0x33	; 51
    deca:	92 e0       	ldi	r25, 0x02	; 2
    decc:	0e 94 d6 77 	call	0xefac	; 0xefac <TERMFONT_DisplayString>
    ded0:	29 96       	adiw	r28, 0x09	; 9
    ded2:	0f b6       	in	r0, 0x3f	; 63
    ded4:	f8 94       	cli
    ded6:	de bf       	out	0x3e, r29	; 62
    ded8:	0f be       	out	0x3f, r0	; 63
    deda:	cd bf       	out	0x3d, r28	; 61
    dedc:	df 91       	pop	r29
    dede:	cf 91       	pop	r28
    dee0:	1f 91       	pop	r17
    dee2:	08 95       	ret

0000dee4 <LCD_UpdateBigNumbers>:

}

void LCD_UpdateBigNumbers(uint8_t value)
{
    dee4:	6f 92       	push	r6
    dee6:	7f 92       	push	r7
    dee8:	8f 92       	push	r8
    deea:	9f 92       	push	r9
    deec:	af 92       	push	r10
    deee:	bf 92       	push	r11
    def0:	cf 92       	push	r12
    def2:	df 92       	push	r13
    def4:	ef 92       	push	r14
    def6:	ff 92       	push	r15
    def8:	0f 93       	push	r16
    defa:	1f 93       	push	r17
    defc:	cf 93       	push	r28
    defe:	df 93       	push	r29
    df00:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    df02:	66 24       	eor	r6, r6
    df04:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    df06:	8f 3f       	cpi	r24, 0xFF	; 255
    df08:	09 f4       	brne	.+2      	; 0xdf0c <LCD_UpdateBigNumbers+0x28>
		value = 254;
    df0a:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    df0c:	20 e2       	ldi	r18, 0x20	; 32
    df0e:	40 e6       	ldi	r20, 0x60	; 96
    df10:	60 e0       	ldi	r22, 0x00	; 0
    df12:	86 2f       	mov	r24, r22
    df14:	0e 94 97 6d 	call	0xdb2e	; 0xdb2e <LCD_ClrBox>

	if (value < 10)
    df18:	ca 30       	cpi	r28, 0x0A	; 10
    df1a:	80 f4       	brcc	.+32     	; 0xdf3c <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    df1c:	ec 2f       	mov	r30, r28
    df1e:	ff 27       	eor	r31, r31
    df20:	ee 0f       	add	r30, r30
    df22:	ff 1f       	adc	r31, r31
    df24:	e6 59       	subi	r30, 0x96	; 150
    df26:	f0 43       	sbci	r31, 0x30	; 48
    df28:	85 91       	lpm	r24, Z+
    df2a:	94 91       	lpm	r25, Z+
    df2c:	f4 e0       	ldi	r31, 0x04	; 4
    df2e:	af 2e       	mov	r10, r31
    df30:	b1 2c       	mov	r11, r1
    df32:	e0 e2       	ldi	r30, 0x20	; 32
    df34:	ce 2e       	mov	r12, r30
    df36:	d1 2c       	mov	r13, r1
    df38:	73 01       	movw	r14, r6
    df3a:	34 c0       	rjmp	.+104    	; 0xdfa4 <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    df3c:	8c 2f       	mov	r24, r28
    df3e:	8a 50       	subi	r24, 0x0A	; 10
    df40:	8c 2e       	mov	r8, r28
    df42:	99 24       	eor	r9, r9
    df44:	8a 35       	cpi	r24, 0x5A	; 90
    df46:	08 f0       	brcs	.+2      	; 0xdf4a <LCD_UpdateBigNumbers+0x66>
    df48:	3b c0       	rjmp	.+118    	; 0xdfc0 <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    df4a:	8c 2f       	mov	r24, r28
    df4c:	6a e0       	ldi	r22, 0x0A	; 10
    df4e:	0e 94 24 79 	call	0xf248	; 0xf248 <__udivmodqi4>
    df52:	c8 2f       	mov	r28, r24
    df54:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    df56:	fe 01       	movw	r30, r28
    df58:	ec 0f       	add	r30, r28
    df5a:	fd 1f       	adc	r31, r29
    df5c:	e6 59       	subi	r30, 0x96	; 150
    df5e:	f0 43       	sbci	r31, 0x30	; 48
    df60:	85 91       	lpm	r24, Z+
    df62:	94 91       	lpm	r25, Z+
    df64:	74 e0       	ldi	r23, 0x04	; 4
    df66:	a7 2e       	mov	r10, r23
    df68:	b1 2c       	mov	r11, r1
    df6a:	60 e2       	ldi	r22, 0x20	; 32
    df6c:	c6 2e       	mov	r12, r22
    df6e:	d1 2c       	mov	r13, r1
    df70:	73 01       	movw	r14, r6
    df72:	83 01       	movw	r16, r6
    df74:	93 01       	movw	r18, r6
    df76:	a3 01       	movw	r20, r6
    df78:	b6 01       	movw	r22, r12
    df7a:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    df7e:	ce 01       	movw	r24, r28
    df80:	53 e0       	ldi	r21, 0x03	; 3
    df82:	88 0f       	add	r24, r24
    df84:	99 1f       	adc	r25, r25
    df86:	5a 95       	dec	r21
    df88:	e1 f7       	brne	.-8      	; 0xdf82 <LCD_UpdateBigNumbers+0x9e>
    df8a:	8c 0f       	add	r24, r28
    df8c:	9d 1f       	adc	r25, r29
    df8e:	8c 0f       	add	r24, r28
    df90:	9d 1f       	adc	r25, r29
    df92:	f4 01       	movw	r30, r8
    df94:	e8 1b       	sub	r30, r24
    df96:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    df98:	ee 0f       	add	r30, r30
    df9a:	ff 1f       	adc	r31, r31
    df9c:	e6 59       	subi	r30, 0x96	; 150
    df9e:	f0 43       	sbci	r31, 0x30	; 48
    dfa0:	85 91       	lpm	r24, Z+
    dfa2:	94 91       	lpm	r25, Z+
    dfa4:	86 01       	movw	r16, r12
    dfa6:	93 01       	movw	r18, r6
    dfa8:	a3 01       	movw	r20, r6
    dfaa:	b6 01       	movw	r22, r12
    dfac:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    dfb0:	00 e4       	ldi	r16, 0x40	; 64
    dfb2:	10 e0       	ldi	r17, 0x00	; 0
    dfb4:	93 01       	movw	r18, r6
    dfb6:	a3 01       	movw	r20, r6
    dfb8:	b6 01       	movw	r22, r12
    dfba:	8c e7       	ldi	r24, 0x7C	; 124
    dfbc:	98 e9       	ldi	r25, 0x98	; 152
    dfbe:	54 c0       	rjmp	.+168    	; 0xe068 <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    dfc0:	8c 2f       	mov	r24, r28
    dfc2:	64 e6       	ldi	r22, 0x64	; 100
    dfc4:	0e 94 24 79 	call	0xf248	; 0xf248 <__udivmodqi4>
    dfc8:	c8 2f       	mov	r28, r24
    dfca:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    dfcc:	84 e6       	ldi	r24, 0x64	; 100
    dfce:	90 e0       	ldi	r25, 0x00	; 0
    dfd0:	c8 9f       	mul	r28, r24
    dfd2:	90 01       	movw	r18, r0
    dfd4:	c9 9f       	mul	r28, r25
    dfd6:	30 0d       	add	r19, r0
    dfd8:	d8 9f       	mul	r29, r24
    dfda:	30 0d       	add	r19, r0
    dfdc:	11 24       	eor	r1, r1
    dfde:	c9 01       	movw	r24, r18
    dfe0:	94 01       	movw	r18, r8
    dfe2:	28 1b       	sub	r18, r24
    dfe4:	39 0b       	sbc	r19, r25
    dfe6:	c9 01       	movw	r24, r18
    dfe8:	6a e0       	ldi	r22, 0x0A	; 10
    dfea:	70 e0       	ldi	r23, 0x00	; 0
    dfec:	0e 94 44 79 	call	0xf288	; 0xf288 <__divmodhi4>
    dff0:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    dff2:	cb 01       	movw	r24, r22
    dff4:	43 e0       	ldi	r20, 0x03	; 3
    dff6:	88 0f       	add	r24, r24
    dff8:	99 1f       	adc	r25, r25
    dffa:	4a 95       	dec	r20
    dffc:	e1 f7       	brne	.-8      	; 0xdff6 <LCD_UpdateBigNumbers+0x112>
    dffe:	86 0f       	add	r24, r22
    e000:	97 1f       	adc	r25, r23
    e002:	86 0f       	add	r24, r22
    e004:	97 1f       	adc	r25, r23
    e006:	39 01       	movw	r6, r18
    e008:	68 1a       	sub	r6, r24
    e00a:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e00c:	fe 01       	movw	r30, r28
    e00e:	ec 0f       	add	r30, r28
    e010:	fd 1f       	adc	r31, r29
    e012:	e6 59       	subi	r30, 0x96	; 150
    e014:	f0 43       	sbci	r31, 0x30	; 48
    e016:	85 91       	lpm	r24, Z+
    e018:	94 91       	lpm	r25, Z+
    e01a:	34 e0       	ldi	r19, 0x04	; 4
    e01c:	a3 2e       	mov	r10, r19
    e01e:	b1 2c       	mov	r11, r1
    e020:	20 e2       	ldi	r18, 0x20	; 32
    e022:	c2 2e       	mov	r12, r18
    e024:	d1 2c       	mov	r13, r1
    e026:	ee 24       	eor	r14, r14
    e028:	ff 24       	eor	r15, r15
    e02a:	87 01       	movw	r16, r14
    e02c:	97 01       	movw	r18, r14
    e02e:	a7 01       	movw	r20, r14
    e030:	b6 01       	movw	r22, r12
    e032:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e036:	f4 01       	movw	r30, r8
    e038:	e8 0d       	add	r30, r8
    e03a:	f9 1d       	adc	r31, r9
    e03c:	e6 59       	subi	r30, 0x96	; 150
    e03e:	f0 43       	sbci	r31, 0x30	; 48
    e040:	85 91       	lpm	r24, Z+
    e042:	94 91       	lpm	r25, Z+
    e044:	86 01       	movw	r16, r12
    e046:	97 01       	movw	r18, r14
    e048:	a7 01       	movw	r20, r14
    e04a:	b6 01       	movw	r22, r12
    e04c:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    e050:	f3 01       	movw	r30, r6
    e052:	e6 0d       	add	r30, r6
    e054:	f7 1d       	adc	r31, r7
    e056:	e6 59       	subi	r30, 0x96	; 150
    e058:	f0 43       	sbci	r31, 0x30	; 48
    e05a:	85 91       	lpm	r24, Z+
    e05c:	94 91       	lpm	r25, Z+
    e05e:	00 e4       	ldi	r16, 0x40	; 64
    e060:	10 e0       	ldi	r17, 0x00	; 0
    e062:	97 01       	movw	r18, r14
    e064:	a7 01       	movw	r20, r14
    e066:	b6 01       	movw	r22, r12
    e068:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>
    e06c:	df 91       	pop	r29
    e06e:	cf 91       	pop	r28
    e070:	1f 91       	pop	r17
    e072:	0f 91       	pop	r16
    e074:	ff 90       	pop	r15
    e076:	ef 90       	pop	r14
    e078:	df 90       	pop	r13
    e07a:	cf 90       	pop	r12
    e07c:	bf 90       	pop	r11
    e07e:	af 90       	pop	r10
    e080:	9f 90       	pop	r9
    e082:	8f 90       	pop	r8
    e084:	7f 90       	pop	r7
    e086:	6f 90       	pop	r6
    e088:	08 95       	ret

0000e08a <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    e08a:	af 92       	push	r10
    e08c:	bf 92       	push	r11
    e08e:	cf 92       	push	r12
    e090:	df 92       	push	r13
    e092:	ef 92       	push	r14
    e094:	ff 92       	push	r15
    e096:	0f 93       	push	r16
    e098:	1f 93       	push	r17
    e09a:	cf 93       	push	r28
    e09c:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e09e:	85 36       	cpi	r24, 0x65	; 101
    e0a0:	08 f0       	brcs	.+2      	; 0xe0a4 <LCD_UpdateSOC+0x1a>
		soc = 100;
    e0a2:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e0a4:	ec 2f       	mov	r30, r28
    e0a6:	ff 27       	eor	r31, r31
    e0a8:	ee 0f       	add	r30, r30
    e0aa:	ff 1f       	adc	r31, r31
    e0ac:	ea 57       	subi	r30, 0x7A	; 122
    e0ae:	f0 43       	sbci	r31, 0x30	; 48
    e0b0:	85 91       	lpm	r24, Z+
    e0b2:	94 91       	lpm	r25, Z+
    e0b4:	b8 e0       	ldi	r27, 0x08	; 8
    e0b6:	ab 2e       	mov	r10, r27
    e0b8:	b1 2c       	mov	r11, r1
    e0ba:	a0 e2       	ldi	r26, 0x20	; 32
    e0bc:	ca 2e       	mov	r12, r26
    e0be:	d1 2c       	mov	r13, r1
    e0c0:	ee 24       	eor	r14, r14
    e0c2:	ff 24       	eor	r15, r15
    e0c4:	00 e6       	ldi	r16, 0x60	; 96
    e0c6:	10 e0       	ldi	r17, 0x00	; 0
    e0c8:	97 01       	movw	r18, r14
    e0ca:	a7 01       	movw	r20, r14
    e0cc:	b6 01       	movw	r22, r12
    e0ce:	0e 94 b8 74 	call	0xe970	; 0xe970 <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e0d2:	8c 2f       	mov	r24, r28
    e0d4:	0e 94 72 6f 	call	0xdee4	; 0xdee4 <LCD_UpdateBigNumbers>
    e0d8:	cf 91       	pop	r28
    e0da:	1f 91       	pop	r17
    e0dc:	0f 91       	pop	r16
    e0de:	ff 90       	pop	r15
    e0e0:	ef 90       	pop	r14
    e0e2:	df 90       	pop	r13
    e0e4:	cf 90       	pop	r12
    e0e6:	bf 90       	pop	r11
    e0e8:	af 90       	pop	r10
    e0ea:	08 95       	ret

0000e0ec <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e0ec:	9f 92       	push	r9
    e0ee:	af 92       	push	r10
    e0f0:	bf 92       	push	r11
    e0f2:	cf 92       	push	r12
    e0f4:	df 92       	push	r13
    e0f6:	ef 92       	push	r14
    e0f8:	ff 92       	push	r15
    e0fa:	0f 93       	push	r16
    e0fc:	1f 93       	push	r17
    e0fe:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e100:	48 17       	cp	r20, r24
    e102:	30 f4       	brcc	.+12     	; 0xe110 <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e104:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e106:	84 2f       	mov	r24, r20
        Xend = dx;
    e108:	40 2f       	mov	r20, r16
        dy = Ystart;
    e10a:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e10c:	62 2f       	mov	r22, r18
        Yend = dy;
    e10e:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e110:	04 2f       	mov	r16, r20
    e112:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e114:	12 2f       	mov	r17, r18
    e116:	16 1b       	sub	r17, r22

    x = Xstart;
    e118:	b8 2e       	mov	r11, r24
    y = Ystart;
    e11a:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e11c:	07 ff       	sbrs	r16, 7
    e11e:	04 c0       	rjmp	.+8      	; 0xe128 <LCD_SetLine+0x3c>
        xinc = -1;
    e120:	2f ef       	ldi	r18, 0xFF	; 255
    e122:	92 2e       	mov	r9, r18
        dx = -dx;
    e124:	01 95       	neg	r16
    e126:	02 c0       	rjmp	.+4      	; 0xe12c <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e128:	91 e0       	ldi	r25, 0x01	; 1
    e12a:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e12c:	17 ff       	sbrs	r17, 7
    e12e:	04 c0       	rjmp	.+8      	; 0xe138 <LCD_SetLine+0x4c>
        yinc = -1;
    e130:	8f ef       	ldi	r24, 0xFF	; 255
    e132:	a8 2e       	mov	r10, r24
        dy = -dy;
    e134:	11 95       	neg	r17
    e136:	02 c0       	rjmp	.+4      	; 0xe13c <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e138:	c1 e0       	ldi	r28, 0x01	; 1
    e13a:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e13c:	10 17       	cp	r17, r16
    e13e:	d4 f4       	brge	.+52     	; 0xe174 <LCD_SetLine+0x88>
        e = dy - dx;
    e140:	c1 2f       	mov	r28, r17
    e142:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e144:	dd 24       	eor	r13, r13
    e146:	e0 2e       	mov	r14, r16
    e148:	ff 24       	eor	r15, r15
    e14a:	e7 fc       	sbrc	r14, 7
    e14c:	f0 94       	com	r15
    e14e:	f7 fc       	sbrc	r15, 7
    e150:	2a c0       	rjmp	.+84     	; 0xe1a6 <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e152:	6c 2d       	mov	r22, r12
    e154:	8b 2d       	mov	r24, r11
    e156:	0e 94 0a 6d 	call	0xda14	; 0xda14 <LCD_SetPixel>
            if (e >= 0){
    e15a:	c7 fd       	sbrc	r28, 7
    e15c:	02 c0       	rjmp	.+4      	; 0xe162 <LCD_SetLine+0x76>
                e -= dx;
    e15e:	c0 1b       	sub	r28, r16
                y += yinc;
    e160:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e162:	c1 0f       	add	r28, r17
            x += xinc;
    e164:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e166:	d3 94       	inc	r13
    e168:	8d 2d       	mov	r24, r13
    e16a:	99 27       	eor	r25, r25
    e16c:	e8 16       	cp	r14, r24
    e16e:	f9 06       	cpc	r15, r25
    e170:	84 f7       	brge	.-32     	; 0xe152 <LCD_SetLine+0x66>
    e172:	19 c0       	rjmp	.+50     	; 0xe1a6 <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e174:	c0 2f       	mov	r28, r16
    e176:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e178:	dd 24       	eor	r13, r13
    e17a:	e1 2e       	mov	r14, r17
    e17c:	ff 24       	eor	r15, r15
    e17e:	e7 fc       	sbrc	r14, 7
    e180:	f0 94       	com	r15
    e182:	f7 fc       	sbrc	r15, 7
    e184:	10 c0       	rjmp	.+32     	; 0xe1a6 <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e186:	6c 2d       	mov	r22, r12
    e188:	8b 2d       	mov	r24, r11
    e18a:	0e 94 0a 6d 	call	0xda14	; 0xda14 <LCD_SetPixel>
    
            if (e >= 0){
    e18e:	c7 fd       	sbrc	r28, 7
    e190:	02 c0       	rjmp	.+4      	; 0xe196 <LCD_SetLine+0xaa>
                e -= dy;
    e192:	c1 1b       	sub	r28, r17
                x += xinc;
    e194:	b9 0c       	add	r11, r9
            }
            e += dx;
    e196:	c0 0f       	add	r28, r16
            y += yinc;
    e198:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e19a:	d3 94       	inc	r13
    e19c:	8d 2d       	mov	r24, r13
    e19e:	99 27       	eor	r25, r25
    e1a0:	e8 16       	cp	r14, r24
    e1a2:	f9 06       	cpc	r15, r25
    e1a4:	84 f7       	brge	.-32     	; 0xe186 <LCD_SetLine+0x9a>
    e1a6:	cf 91       	pop	r28
    e1a8:	1f 91       	pop	r17
    e1aa:	0f 91       	pop	r16
    e1ac:	ff 90       	pop	r15
    e1ae:	ef 90       	pop	r14
    e1b0:	df 90       	pop	r13
    e1b2:	cf 90       	pop	r12
    e1b4:	bf 90       	pop	r11
    e1b6:	af 90       	pop	r10
    e1b8:	9f 90       	pop	r9
    e1ba:	08 95       	ret

0000e1bc <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e1bc:	9f 92       	push	r9
    e1be:	af 92       	push	r10
    e1c0:	bf 92       	push	r11
    e1c2:	cf 92       	push	r12
    e1c4:	df 92       	push	r13
    e1c6:	ef 92       	push	r14
    e1c8:	ff 92       	push	r15
    e1ca:	0f 93       	push	r16
    e1cc:	1f 93       	push	r17
    e1ce:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e1d0:	48 17       	cp	r20, r24
    e1d2:	30 f4       	brcc	.+12     	; 0xe1e0 <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e1d4:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e1d6:	84 2f       	mov	r24, r20
        Xend = dx;
    e1d8:	40 2f       	mov	r20, r16
        dy = Ystart;
    e1da:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e1dc:	62 2f       	mov	r22, r18
        Yend = dy;
    e1de:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e1e0:	04 2f       	mov	r16, r20
    e1e2:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e1e4:	12 2f       	mov	r17, r18
    e1e6:	16 1b       	sub	r17, r22

    x = Xstart;
    e1e8:	b8 2e       	mov	r11, r24
    y = Ystart;
    e1ea:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e1ec:	07 ff       	sbrs	r16, 7
    e1ee:	04 c0       	rjmp	.+8      	; 0xe1f8 <LCD_ClrLine+0x3c>
        xinc = -1;
    e1f0:	6f ef       	ldi	r22, 0xFF	; 255
    e1f2:	96 2e       	mov	r9, r22
        dx = -dx;
    e1f4:	01 95       	neg	r16
    e1f6:	02 c0       	rjmp	.+4      	; 0xe1fc <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e1f8:	51 e0       	ldi	r21, 0x01	; 1
    e1fa:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e1fc:	17 ff       	sbrs	r17, 7
    e1fe:	04 c0       	rjmp	.+8      	; 0xe208 <LCD_ClrLine+0x4c>
        yinc = -1;
    e200:	4f ef       	ldi	r20, 0xFF	; 255
    e202:	a4 2e       	mov	r10, r20
        dy = -dy;
    e204:	11 95       	neg	r17
    e206:	02 c0       	rjmp	.+4      	; 0xe20c <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e208:	31 e0       	ldi	r19, 0x01	; 1
    e20a:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e20c:	10 17       	cp	r17, r16
    e20e:	d4 f4       	brge	.+52     	; 0xe244 <LCD_ClrLine+0x88>
        e = dy - dx;
    e210:	c1 2f       	mov	r28, r17
    e212:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e214:	dd 24       	eor	r13, r13
    e216:	e0 2e       	mov	r14, r16
    e218:	ff 24       	eor	r15, r15
    e21a:	e7 fc       	sbrc	r14, 7
    e21c:	f0 94       	com	r15
    e21e:	f7 fc       	sbrc	r15, 7
    e220:	2a c0       	rjmp	.+84     	; 0xe276 <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e222:	6c 2d       	mov	r22, r12
    e224:	8b 2d       	mov	r24, r11
    e226:	0e 94 50 6d 	call	0xdaa0	; 0xdaa0 <LCD_ClrPixel>
            if (e >= 0){
    e22a:	c7 fd       	sbrc	r28, 7
    e22c:	02 c0       	rjmp	.+4      	; 0xe232 <LCD_ClrLine+0x76>
                e -= dx;
    e22e:	c0 1b       	sub	r28, r16
                y += yinc;
    e230:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e232:	c1 0f       	add	r28, r17
            x += xinc;
    e234:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e236:	d3 94       	inc	r13
    e238:	8d 2d       	mov	r24, r13
    e23a:	99 27       	eor	r25, r25
    e23c:	e8 16       	cp	r14, r24
    e23e:	f9 06       	cpc	r15, r25
    e240:	84 f7       	brge	.-32     	; 0xe222 <LCD_ClrLine+0x66>
    e242:	19 c0       	rjmp	.+50     	; 0xe276 <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e244:	c0 2f       	mov	r28, r16
    e246:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e248:	dd 24       	eor	r13, r13
    e24a:	e1 2e       	mov	r14, r17
    e24c:	ff 24       	eor	r15, r15
    e24e:	e7 fc       	sbrc	r14, 7
    e250:	f0 94       	com	r15
    e252:	f7 fc       	sbrc	r15, 7
    e254:	10 c0       	rjmp	.+32     	; 0xe276 <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e256:	6c 2d       	mov	r22, r12
    e258:	8b 2d       	mov	r24, r11
    e25a:	0e 94 50 6d 	call	0xdaa0	; 0xdaa0 <LCD_ClrPixel>
    
            if (e >= 0){
    e25e:	c7 fd       	sbrc	r28, 7
    e260:	02 c0       	rjmp	.+4      	; 0xe266 <LCD_ClrLine+0xaa>
                e -= dy;
    e262:	c1 1b       	sub	r28, r17
                x += xinc;
    e264:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e266:	c0 0f       	add	r28, r16
            y += yinc;
    e268:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e26a:	d3 94       	inc	r13
    e26c:	8d 2d       	mov	r24, r13
    e26e:	99 27       	eor	r25, r25
    e270:	e8 16       	cp	r14, r24
    e272:	f9 06       	cpc	r15, r25
    e274:	84 f7       	brge	.-32     	; 0xe256 <LCD_ClrLine+0x9a>
    e276:	cf 91       	pop	r28
    e278:	1f 91       	pop	r17
    e27a:	0f 91       	pop	r16
    e27c:	ff 90       	pop	r15
    e27e:	ef 90       	pop	r14
    e280:	df 90       	pop	r13
    e282:	cf 90       	pop	r12
    e284:	bf 90       	pop	r11
    e286:	af 90       	pop	r10
    e288:	9f 90       	pop	r9
    e28a:	08 95       	ret

0000e28c <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e28c:	87 b1       	in	r24, 0x07	; 7
    e28e:	87 70       	andi	r24, 0x07	; 7
    e290:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e292:	88 b1       	in	r24, 0x08	; 8
    e294:	88 6f       	ori	r24, 0xF8	; 248
    e296:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e298:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e29a:	24 9a       	sbi	0x04, 4	; 4
    e29c:	08 95       	ret

0000e29e <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e29e:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e2a0:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e2a2:	90 91 6b 00 	lds	r25, 0x006B
    e2a6:	9f 7e       	andi	r25, 0xEF	; 239
    e2a8:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e2ac:	91 e0       	ldi	r25, 0x01	; 1
    e2ae:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e2b0:	8f bf       	out	0x3f, r24	; 63
    e2b2:	08 95       	ret

0000e2b4 <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e2b4:	1f 92       	push	r1
    e2b6:	0f 92       	push	r0
    e2b8:	0f b6       	in	r0, 0x3f	; 63
    e2ba:	0f 92       	push	r0
    e2bc:	11 24       	eor	r1, r1
    e2be:	2f 93       	push	r18
    e2c0:	3f 93       	push	r19
    e2c2:	4f 93       	push	r20
    e2c4:	5f 93       	push	r21
    e2c6:	6f 93       	push	r22
    e2c8:	7f 93       	push	r23
    e2ca:	8f 93       	push	r24
    e2cc:	9f 93       	push	r25
    e2ce:	af 93       	push	r26
    e2d0:	bf 93       	push	r27
    e2d2:	ef 93       	push	r30
    e2d4:	ff 93       	push	r31
	POWER_WakeupCallback();
    e2d6:	0e 94 06 72 	call	0xe40c	; 0xe40c <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e2da:	0e 94 46 71 	call	0xe28c	; 0xe28c <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e2de:	0e 94 4f 71 	call	0xe29e	; 0xe29e <JOYSTICK_DisableWakeupInterrupt>
    e2e2:	ff 91       	pop	r31
    e2e4:	ef 91       	pop	r30
    e2e6:	bf 91       	pop	r27
    e2e8:	af 91       	pop	r26
    e2ea:	9f 91       	pop	r25
    e2ec:	8f 91       	pop	r24
    e2ee:	7f 91       	pop	r23
    e2f0:	6f 91       	pop	r22
    e2f2:	5f 91       	pop	r21
    e2f4:	4f 91       	pop	r20
    e2f6:	3f 91       	pop	r19
    e2f8:	2f 91       	pop	r18
    e2fa:	0f 90       	pop	r0
    e2fc:	0f be       	out	0x3f, r0	; 63
    e2fe:	0f 90       	pop	r0
    e300:	1f 90       	pop	r1
    e302:	18 95       	reti

0000e304 <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e304:	0f 93       	push	r16
    e306:	1f 93       	push	r17
    e308:	18 2f       	mov	r17, r24
    e30a:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e30c:	0e 94 46 71 	call	0xe28c	; 0xe28c <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e310:	0e 94 4f 71 	call	0xe29e	; 0xe29e <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e314:	10 93 56 02 	sts	0x0256, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e318:	00 93 55 02 	sts	0x0255, r16
    e31c:	1f 91       	pop	r17
    e31e:	0f 91       	pop	r16
    e320:	08 95       	ret

0000e322 <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e322:	0f 93       	push	r16
    e324:	1f 93       	push	r17
    e326:	cf 93       	push	r28
    e328:	df 93       	push	r29
    e32a:	cd b7       	in	r28, 0x3d	; 61
    e32c:	de b7       	in	r29, 0x3e	; 62
    e32e:	25 97       	sbiw	r28, 0x05	; 5
    e330:	0f b6       	in	r0, 0x3f	; 63
    e332:	f8 94       	cli
    e334:	de bf       	out	0x3e, r29	; 62
    e336:	0f be       	out	0x3f, r0	; 63
    e338:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e33a:	36 b1       	in	r19, 0x06	; 6
    e33c:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e33e:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e340:	80 91 59 02 	lds	r24, 0x0259
    e344:	38 17       	cp	r19, r24
    e346:	19 f0       	breq	.+6      	; 0xe34e <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e348:	30 93 59 02 	sts	0x0259, r19
    e34c:	54 c0       	rjmp	.+168    	; 0xe3f6 <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e34e:	20 91 58 02 	lds	r18, 0x0258
    e352:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e354:	02 2f       	mov	r16, r18
    e356:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e358:	50 91 58 02 	lds	r21, 0x0258
    e35c:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e35e:	92 2f       	mov	r25, r18
    e360:	90 95       	com	r25
    e362:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e364:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e366:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e368:	41 e0       	ldi	r20, 0x01	; 1
    e36a:	aa e5       	ldi	r26, 0x5A	; 90
    e36c:	b2 e0       	ldi	r27, 0x02	; 2
    e36e:	e2 e6       	ldi	r30, 0x62	; 98
    e370:	f2 e0       	ldi	r31, 0x02	; 2
    e372:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e374:	80 81       	ld	r24, Z
    e376:	88 23       	and	r24, r24
    e378:	11 f0       	breq	.+4      	; 0xe37e <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e37a:	81 50       	subi	r24, 0x01	; 1
    e37c:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e37e:	80 2f       	mov	r24, r16
    e380:	84 23       	and	r24, r20
    e382:	49 f0       	breq	.+18     	; 0xe396 <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e384:	80 91 56 02 	lds	r24, 0x0256
    e388:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e38a:	80 81       	ld	r24, Z
    e38c:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e38e:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e390:	80 91 55 02 	lds	r24, 0x0255
    e394:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e396:	89 2f       	mov	r24, r25
    e398:	84 23       	and	r24, r20
    e39a:	41 f0       	breq	.+16     	; 0xe3ac <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e39c:	8c 91       	ld	r24, X
    e39e:	88 23       	and	r24, r24
    e3a0:	29 f0       	breq	.+10     	; 0xe3ac <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e3a2:	81 50       	subi	r24, 0x01	; 1
    e3a4:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e3a6:	88 23       	and	r24, r24
    e3a8:	09 f4       	brne	.+2      	; 0xe3ac <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e3aa:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e3ac:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e3ae:	61 50       	subi	r22, 0x01	; 1
    e3b0:	31 96       	adiw	r30, 0x01	; 1
    e3b2:	11 96       	adiw	r26, 0x01	; 1
    e3b4:	67 ff       	sbrs	r22, 7
    e3b6:	de cf       	rjmp	.-68     	; 0xe374 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e3b8:	80 91 57 02 	lds	r24, 0x0257
    e3bc:	87 2b       	or	r24, r23
    e3be:	80 93 57 02 	sts	0x0257, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e3c2:	95 2f       	mov	r25, r21
    e3c4:	90 95       	com	r25
    e3c6:	80 91 57 02 	lds	r24, 0x0257
    e3ca:	89 23       	and	r24, r25
    e3cc:	80 93 57 02 	sts	0x0257, r24
		JOYSTICK_currentState = newState;
    e3d0:	30 93 58 02 	sts	0x0258, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e3d4:	e0 91 53 02 	lds	r30, 0x0253
    e3d8:	f0 91 54 02 	lds	r31, 0x0254
    e3dc:	30 97       	sbiw	r30, 0x00	; 0
    e3de:	59 f0       	breq	.+22     	; 0xe3f6 <JOYSTICK_PollingHandler+0xd4>
    e3e0:	27 2b       	or	r18, r23
    e3e2:	21 2b       	or	r18, r17
    e3e4:	41 f0       	breq	.+16     	; 0xe3f6 <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e3e6:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e3e8:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e3ea:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e3ec:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e3ee:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e3f0:	ce 01       	movw	r24, r28
    e3f2:	01 96       	adiw	r24, 0x01	; 1
    e3f4:	09 95       	icall
    e3f6:	25 96       	adiw	r28, 0x05	; 5
    e3f8:	0f b6       	in	r0, 0x3f	; 63
    e3fa:	f8 94       	cli
    e3fc:	de bf       	out	0x3e, r29	; 62
    e3fe:	0f be       	out	0x3f, r0	; 63
    e400:	cd bf       	out	0x3d, r28	; 61
    e402:	df 91       	pop	r29
    e404:	cf 91       	pop	r28
    e406:	1f 91       	pop	r17
    e408:	0f 91       	pop	r16
    e40a:	08 95       	ret

0000e40c <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e40c:	81 e0       	ldi	r24, 0x01	; 1
    e40e:	80 93 6a 02 	sts	0x026A, r24
    e412:	08 95       	ret

0000e414 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e414:	80 91 65 00 	lds	r24, 0x0065
    e418:	87 7f       	andi	r24, 0xF7	; 247
    e41a:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e41e:	8d b1       	in	r24, 0x0d	; 13
    e420:	88 63       	ori	r24, 0x38	; 56
    e422:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e424:	80 91 6e 02 	lds	r24, 0x026E
    e428:	99 27       	eor	r25, r25
    e42a:	90 93 99 00 	sts	0x0099, r25
    e42e:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e432:	80 91 6d 02 	lds	r24, 0x026D
    e436:	99 27       	eor	r25, r25
    e438:	90 93 9b 00 	sts	0x009B, r25
    e43c:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e440:	80 91 6c 02 	lds	r24, 0x026C
    e444:	99 27       	eor	r25, r25
    e446:	90 93 9d 00 	sts	0x009D, r25
    e44a:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e44e:	89 ea       	ldi	r24, 0xA9	; 169
    e450:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e454:	81 e0       	ldi	r24, 0x01	; 1
    e456:	80 93 91 00 	sts	0x0091, r24
    e45a:	08 95       	ret

0000e45c <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e45c:	cf 93       	push	r28
    e45e:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e460:	e0 91 6e 02 	lds	r30, 0x026E
    green = BACKLIGHT_green;
    e464:	f0 91 6d 02 	lds	r31, 0x026D
    blue = BACKLIGHT_blue;
    e468:	c0 91 6c 02 	lds	r28, 0x026C
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e46c:	2f ef       	ldi	r18, 0xFF	; 255
    e46e:	30 e0       	ldi	r19, 0x00	; 0
    e470:	e8 9f       	mul	r30, r24
    e472:	c0 01       	movw	r24, r0
    e474:	11 24       	eor	r1, r1
    e476:	b9 01       	movw	r22, r18
    e478:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e47c:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e47e:	f4 9f       	mul	r31, r20
    e480:	c0 01       	movw	r24, r0
    e482:	11 24       	eor	r1, r1
    e484:	b9 01       	movw	r22, r18
    e486:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e48a:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e48c:	c4 9f       	mul	r28, r20
    e48e:	c0 01       	movw	r24, r0
    e490:	11 24       	eor	r1, r1
    e492:	b9 01       	movw	r22, r18
    e494:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e498:	40 93 6b 02 	sts	0x026B, r20
    OCR_RED = red;
    e49c:	8e 2f       	mov	r24, r30
    e49e:	99 27       	eor	r25, r25
    e4a0:	90 93 99 00 	sts	0x0099, r25
    e4a4:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e4a8:	8f 2f       	mov	r24, r31
    e4aa:	99 27       	eor	r25, r25
    e4ac:	90 93 9b 00 	sts	0x009B, r25
    e4b0:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e4b4:	86 2f       	mov	r24, r22
    e4b6:	99 27       	eor	r25, r25
    e4b8:	90 93 9d 00 	sts	0x009D, r25
    e4bc:	80 93 9c 00 	sts	0x009C, r24
    e4c0:	cf 91       	pop	r28
    e4c2:	08 95       	ret

0000e4c4 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e4c4:	38 2f       	mov	r19, r24
    e4c6:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e4c8:	80 93 6e 02 	sts	0x026E, r24
    BACKLIGHT_green = green;
    e4cc:	60 93 6d 02 	sts	0x026D, r22
    BACKLIGHT_blue = blue;
    e4d0:	40 93 6c 02 	sts	0x026C, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e4d4:	20 91 6b 02 	lds	r18, 0x026B
    e4d8:	2f 3f       	cpi	r18, 0xFF	; 255
    e4da:	c1 f0       	breq	.+48     	; 0xe50c <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e4dc:	82 9f       	mul	r24, r18
    e4de:	c0 01       	movw	r24, r0
    e4e0:	11 24       	eor	r1, r1
    e4e2:	6f ef       	ldi	r22, 0xFF	; 255
    e4e4:	70 e0       	ldi	r23, 0x00	; 0
    e4e6:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e4ea:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e4ec:	e2 9f       	mul	r30, r18
    e4ee:	c0 01       	movw	r24, r0
    e4f0:	11 24       	eor	r1, r1
    e4f2:	6f ef       	ldi	r22, 0xFF	; 255
    e4f4:	70 e0       	ldi	r23, 0x00	; 0
    e4f6:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e4fa:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e4fc:	42 9f       	mul	r20, r18
    e4fe:	c0 01       	movw	r24, r0
    e500:	11 24       	eor	r1, r1
    e502:	6f ef       	ldi	r22, 0xFF	; 255
    e504:	70 e0       	ldi	r23, 0x00	; 0
    e506:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e50a:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    e50c:	83 2f       	mov	r24, r19
    e50e:	99 27       	eor	r25, r25
    e510:	90 93 99 00 	sts	0x0099, r25
    e514:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e518:	8e 2f       	mov	r24, r30
    e51a:	99 27       	eor	r25, r25
    e51c:	90 93 9b 00 	sts	0x009B, r25
    e520:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e524:	84 2f       	mov	r24, r20
    e526:	99 27       	eor	r25, r25
    e528:	90 93 9d 00 	sts	0x009D, r25
    e52c:	80 93 9c 00 	sts	0x009C, r24
    e530:	08 95       	ret

0000e532 <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    e532:	cf 93       	push	r28
    e534:	df 93       	push	r29
    e536:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    e538:	ed 01       	movw	r28, r26
    e53a:	88 85       	ldd	r24, Y+8	; 0x08
    e53c:	88 23       	and	r24, r24
    e53e:	e1 f3       	breq	.-8      	; 0xe538 <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    e540:	ec 81       	ldd	r30, Y+4	; 0x04
    e542:	fd 81       	ldd	r31, Y+5	; 0x05
    e544:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e546:	2a 81       	ldd	r18, Y+2	; 0x02
    e548:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    e54a:	8c 81       	ldd	r24, Y+4	; 0x04
    e54c:	9d 81       	ldd	r25, Y+5	; 0x05
    e54e:	82 17       	cp	r24, r18
    e550:	93 07       	cpc	r25, r19
    e552:	31 f4       	brne	.+12     	; 0xe560 <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    e554:	8d 91       	ld	r24, X+
    e556:	9c 91       	ld	r25, X
    e558:	11 97       	sbiw	r26, 0x01	; 1
    e55a:	9d 83       	std	Y+5, r25	; 0x05
    e55c:	8c 83       	std	Y+4, r24	; 0x04
    e55e:	06 c0       	rjmp	.+12     	; 0xe56c <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    e560:	fd 01       	movw	r30, r26
    e562:	84 81       	ldd	r24, Z+4	; 0x04
    e564:	95 81       	ldd	r25, Z+5	; 0x05
    e566:	01 96       	adiw	r24, 0x01	; 1
    e568:	95 83       	std	Z+5, r25	; 0x05
    e56a:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    e56c:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e56e:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e570:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    e572:	ed 01       	movw	r28, r26
    e574:	89 85       	ldd	r24, Y+9	; 0x09
    e576:	88 23       	and	r24, r24
    e578:	09 f4       	brne	.+2      	; 0xe57c <FIFO_InternalPutData+0x4a>
    e57a:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    e57c:	fd 01       	movw	r30, r26
    e57e:	80 85       	ldd	r24, Z+8	; 0x08
    e580:	81 50       	subi	r24, 0x01	; 1
    e582:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    e584:	81 85       	ldd	r24, Z+9	; 0x09
    e586:	8f 5f       	subi	r24, 0xFF	; 255
    e588:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    e58a:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e58c:	22 23       	and	r18, r18
    e58e:	49 f0       	breq	.+18     	; 0xe5a2 <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e590:	84 85       	ldd	r24, Z+12	; 0x0c
    e592:	95 85       	ldd	r25, Z+13	; 0x0d
    e594:	89 2b       	or	r24, r25
    e596:	29 f0       	breq	.+10     	; 0xe5a2 <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e598:	04 84       	ldd	r0, Z+12	; 0x0c
    e59a:	f5 85       	ldd	r31, Z+13	; 0x0d
    e59c:	e0 2d       	mov	r30, r0
    e59e:	cd 01       	movw	r24, r26
    e5a0:	09 95       	icall
    e5a2:	df 91       	pop	r29
    e5a4:	cf 91       	pop	r28
    e5a6:	08 95       	ret

0000e5a8 <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e5a8:	cf 93       	push	r28
    e5aa:	df 93       	push	r29
    e5ac:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e5ae:	89 85       	ldd	r24, Y+9	; 0x09
    e5b0:	88 23       	and	r24, r24
    e5b2:	e9 f3       	breq	.-6      	; 0xe5ae <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e5b4:	2a 81       	ldd	r18, Y+2	; 0x02
    e5b6:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e5b8:	8e 81       	ldd	r24, Y+6	; 0x06
    e5ba:	9f 81       	ldd	r25, Y+7	; 0x07
    e5bc:	82 17       	cp	r24, r18
    e5be:	93 07       	cpc	r25, r19
    e5c0:	19 f4       	brne	.+6      	; 0xe5c8 <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e5c2:	88 81       	ld	r24, Y
    e5c4:	99 81       	ldd	r25, Y+1	; 0x01
    e5c6:	03 c0       	rjmp	.+6      	; 0xe5ce <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e5c8:	8e 81       	ldd	r24, Y+6	; 0x06
    e5ca:	9f 81       	ldd	r25, Y+7	; 0x07
    e5cc:	01 96       	adiw	r24, 0x01	; 1
    e5ce:	9f 83       	std	Y+7, r25	; 0x07
    e5d0:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e5d2:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e5d4:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e5d6:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e5d8:	88 85       	ldd	r24, Y+8	; 0x08
    e5da:	88 23       	and	r24, r24
    e5dc:	09 f4       	brne	.+2      	; 0xe5e0 <FIFO_InternalGetData+0x38>
    e5de:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e5e0:	88 85       	ldd	r24, Y+8	; 0x08
    e5e2:	8f 5f       	subi	r24, 0xFF	; 255
    e5e4:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e5e6:	89 85       	ldd	r24, Y+9	; 0x09
    e5e8:	81 50       	subi	r24, 0x01	; 1
    e5ea:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e5ec:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e5ee:	22 23       	and	r18, r18
    e5f0:	41 f0       	breq	.+16     	; 0xe602 <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e5f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    e5f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    e5f6:	89 2b       	or	r24, r25
    e5f8:	21 f0       	breq	.+8      	; 0xe602 <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e5fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    e5fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    e5fe:	ce 01       	movw	r24, r28
    e600:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e602:	ee 81       	ldd	r30, Y+6	; 0x06
    e604:	ff 81       	ldd	r31, Y+7	; 0x07
    e606:	80 81       	ld	r24, Z
}
    e608:	99 27       	eor	r25, r25
    e60a:	df 91       	pop	r29
    e60c:	cf 91       	pop	r28
    e60e:	08 95       	ret

0000e610 <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e610:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e612:	71 83       	std	Z+1, r23	; 0x01
    e614:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e616:	cb 01       	movw	r24, r22
    e618:	84 0f       	add	r24, r20
    e61a:	91 1d       	adc	r25, r1
    e61c:	01 97       	sbiw	r24, 0x01	; 1
    e61e:	93 83       	std	Z+3, r25	; 0x03
    e620:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e622:	75 83       	std	Z+5, r23	; 0x05
    e624:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e626:	97 83       	std	Z+7, r25	; 0x07
    e628:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e62a:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e62c:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e62e:	13 86       	std	Z+11, r1	; 0x0b
    e630:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e632:	15 86       	std	Z+13, r1	; 0x0d
    e634:	14 86       	std	Z+12, r1	; 0x0c
    e636:	08 95       	ret

0000e638 <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e638:	0e 94 d4 72 	call	0xe5a8	; 0xe5a8 <FIFO_InternalGetData>
	
	return data;
}
    e63c:	99 27       	eor	r25, r25
    e63e:	08 95       	ret

0000e640 <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e640:	0f 93       	push	r16
    e642:	1f 93       	push	r17
    e644:	cf 93       	push	r28
    e646:	df 93       	push	r29
    e648:	cd b7       	in	r28, 0x3d	; 61
    e64a:	de b7       	in	r29, 0x3e	; 62
    e64c:	21 97       	sbiw	r28, 0x01	; 1
    e64e:	0f b6       	in	r0, 0x3f	; 63
    e650:	f8 94       	cli
    e652:	de bf       	out	0x3e, r29	; 62
    e654:	0f be       	out	0x3f, r0	; 63
    e656:	cd bf       	out	0x3d, r28	; 61
    e658:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e65a:	fc 01       	movw	r30, r24
    e65c:	81 85       	ldd	r24, Z+9	; 0x09
    e65e:	88 23       	and	r24, r24
    e660:	41 f0       	breq	.+16     	; 0xe672 <FIFO_Flush+0x32>
    e662:	c8 01       	movw	r24, r16
    e664:	0e 94 1c 73 	call	0xe638	; 0xe638 <FIFO_GetUint8>
    e668:	89 83       	std	Y+1, r24	; 0x01
    e66a:	f8 01       	movw	r30, r16
    e66c:	81 85       	ldd	r24, Z+9	; 0x09
    e66e:	88 23       	and	r24, r24
    e670:	c1 f7       	brne	.-16     	; 0xe662 <FIFO_Flush+0x22>
    e672:	21 96       	adiw	r28, 0x01	; 1
    e674:	0f b6       	in	r0, 0x3f	; 63
    e676:	f8 94       	cli
    e678:	de bf       	out	0x3e, r29	; 62
    e67a:	0f be       	out	0x3f, r0	; 63
    e67c:	cd bf       	out	0x3d, r28	; 61
    e67e:	df 91       	pop	r29
    e680:	cf 91       	pop	r28
    e682:	1f 91       	pop	r17
    e684:	0f 91       	pop	r16
    e686:	08 95       	ret

0000e688 <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e688:	ef 92       	push	r14
    e68a:	ff 92       	push	r15
    e68c:	0f 93       	push	r16
    e68e:	1f 93       	push	r17
    e690:	7c 01       	movw	r14, r24
    e692:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    e694:	0e 94 99 72 	call	0xe532	; 0xe532 <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    e698:	81 2f       	mov	r24, r17
    e69a:	99 27       	eor	r25, r25
    e69c:	68 2f       	mov	r22, r24
    e69e:	c7 01       	movw	r24, r14
    e6a0:	0e 94 99 72 	call	0xe532	; 0xe532 <FIFO_InternalPutData>
    e6a4:	1f 91       	pop	r17
    e6a6:	0f 91       	pop	r16
    e6a8:	ff 90       	pop	r15
    e6aa:	ef 90       	pop	r14
    e6ac:	08 95       	ret

0000e6ae <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    e6ae:	ef 92       	push	r14
    e6b0:	ff 92       	push	r15
    e6b2:	0f 93       	push	r16
    e6b4:	1f 93       	push	r17
    e6b6:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    e6b8:	0e 94 d4 72 	call	0xe5a8	; 0xe5a8 <FIFO_InternalGetData>
    e6bc:	e8 2e       	mov	r14, r24
    e6be:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    e6c0:	c8 01       	movw	r24, r16
    e6c2:	0e 94 d4 72 	call	0xe5a8	; 0xe5a8 <FIFO_InternalGetData>
    e6c6:	99 27       	eor	r25, r25
    e6c8:	98 2f       	mov	r25, r24
    e6ca:	88 27       	eor	r24, r24
	
	return data;
}
    e6cc:	8e 29       	or	r24, r14
    e6ce:	9f 29       	or	r25, r15
    e6d0:	1f 91       	pop	r17
    e6d2:	0f 91       	pop	r16
    e6d4:	ff 90       	pop	r15
    e6d6:	ef 90       	pop	r14
    e6d8:	08 95       	ret

0000e6da <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    e6da:	90 93 70 02 	sts	0x0270, r25
    e6de:	80 93 6f 02 	sts	0x026F, r24
	MEMBLOCK_manager.bags = workspace;
    e6e2:	70 93 72 02 	sts	0x0272, r23
    e6e6:	60 93 71 02 	sts	0x0271, r22
    e6ea:	08 95       	ret

0000e6ec <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    e6ec:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    e6ee:	28 e1       	ldi	r18, 0x18	; 24
    e6f0:	30 e0       	ldi	r19, 0x00	; 0
    e6f2:	82 9f       	mul	r24, r18
    e6f4:	f0 01       	movw	r30, r0
    e6f6:	83 9f       	mul	r24, r19
    e6f8:	f0 0d       	add	r31, r0
    e6fa:	92 9f       	mul	r25, r18
    e6fc:	f0 0d       	add	r31, r0
    e6fe:	11 24       	eor	r1, r1
    e700:	cf 01       	movw	r24, r30
    e702:	e0 91 71 02 	lds	r30, 0x0271
    e706:	f0 91 72 02 	lds	r31, 0x0272
    e70a:	e8 0f       	add	r30, r24
    e70c:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    e70e:	71 83       	std	Z+1, r23	; 0x01
    e710:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    e712:	53 83       	std	Z+3, r21	; 0x03
    e714:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    e716:	55 83       	std	Z+5, r21	; 0x05
    e718:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    e71a:	13 86       	std	Z+11, r1	; 0x0b
    e71c:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    e71e:	75 87       	std	Z+13, r23	; 0x0d
    e720:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    e722:	17 86       	std	Z+15, r1	; 0x0f
    e724:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    e726:	10 8a       	std	Z+16, r1	; 0x10
    e728:	11 8a       	std	Z+17, r1	; 0x11
    e72a:	12 8a       	std	Z+18, r1	; 0x12
    e72c:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    e72e:	14 8a       	std	Z+20, r1	; 0x14
    e730:	15 8a       	std	Z+21, r1	; 0x15
    e732:	16 8a       	std	Z+22, r1	; 0x16
    e734:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    e736:	b7 83       	std	Z+7, r27	; 0x07
    e738:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    e73a:	64 9f       	mul	r22, r20
    e73c:	c0 01       	movw	r24, r0
    e73e:	65 9f       	mul	r22, r21
    e740:	90 0d       	add	r25, r0
    e742:	74 9f       	mul	r23, r20
    e744:	90 0d       	add	r25, r0
    e746:	11 24       	eor	r1, r1
    e748:	8a 0f       	add	r24, r26
    e74a:	9b 1f       	adc	r25, r27
    e74c:	91 87       	std	Z+9, r25	; 0x09
    e74e:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    e750:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    e752:	49 5f       	subi	r20, 0xF9	; 249
    e754:	5f 4f       	sbci	r21, 0xFF	; 255
    e756:	83 e0       	ldi	r24, 0x03	; 3
    e758:	56 95       	lsr	r21
    e75a:	47 95       	ror	r20
    e75c:	8a 95       	dec	r24
    e75e:	e1 f7       	brne	.-8      	; 0xe758 <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    e760:	41 15       	cp	r20, r1
    e762:	51 05       	cpc	r21, r1
    e764:	29 f0       	breq	.+10     	; 0xe770 <MEMBLOCK_InitBag+0x84>
    e766:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    e768:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    e76a:	41 50       	subi	r20, 0x01	; 1
    e76c:	50 40       	sbci	r21, 0x00	; 0
    e76e:	e1 f7       	brne	.-8      	; 0xe768 <MEMBLOCK_InitBag+0x7c>
    e770:	08 95       	ret

0000e772 <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    e772:	af 92       	push	r10
    e774:	bf 92       	push	r11
    e776:	cf 92       	push	r12
    e778:	df 92       	push	r13
    e77a:	ff 92       	push	r15
    e77c:	0f 93       	push	r16
    e77e:	1f 93       	push	r17
    e780:	cf 93       	push	r28
    e782:	df 93       	push	r29
    e784:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    e786:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    e788:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e78a:	c0 91 71 02 	lds	r28, 0x0271
    e78e:	d0 91 72 02 	lds	r29, 0x0272
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e792:	20 91 6f 02 	lds	r18, 0x026F
    e796:	30 91 70 02 	lds	r19, 0x0270

	bool found = false;
    e79a:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e79c:	21 15       	cp	r18, r1
    e79e:	31 05       	cpc	r19, r1
    e7a0:	09 f4       	brne	.+2      	; 0xe7a4 <MEMBLOCK_Allocate+0x32>
    e7a2:	81 c0       	rjmp	.+258    	; 0xe8a6 <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    e7a4:	88 81       	ld	r24, Y
    e7a6:	99 81       	ldd	r25, Y+1	; 0x01
    e7a8:	86 17       	cp	r24, r22
    e7aa:	97 07       	cpc	r25, r23
    e7ac:	30 f0       	brcs	.+12     	; 0xe7ba <MEMBLOCK_Allocate+0x48>
    e7ae:	8c 81       	ldd	r24, Y+4	; 0x04
    e7b0:	9d 81       	ldd	r25, Y+5	; 0x05
    e7b2:	89 2b       	or	r24, r25
    e7b4:	11 f0       	breq	.+4      	; 0xe7ba <MEMBLOCK_Allocate+0x48>
			found = true;
    e7b6:	41 e0       	ldi	r20, 0x01	; 1
    e7b8:	03 c0       	rjmp	.+6      	; 0xe7c0 <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    e7ba:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e7bc:	21 50       	subi	r18, 0x01	; 1
    e7be:	30 40       	sbci	r19, 0x00	; 0
    e7c0:	21 15       	cp	r18, r1
    e7c2:	31 05       	cpc	r19, r1
    e7c4:	11 f0       	breq	.+4      	; 0xe7ca <MEMBLOCK_Allocate+0x58>
    e7c6:	44 23       	and	r20, r20
    e7c8:	69 f3       	breq	.-38     	; 0xe7a4 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    e7ca:	44 23       	and	r20, r20
    e7cc:	09 f4       	brne	.+2      	; 0xe7d0 <MEMBLOCK_Allocate+0x5e>
    e7ce:	6b c0       	rjmp	.+214    	; 0xe8a6 <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    e7d0:	e8 85       	ldd	r30, Y+8	; 0x08
    e7d2:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    e7d4:	20 e0       	ldi	r18, 0x00	; 0
    e7d6:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    e7d8:	80 81       	ld	r24, Z
    e7da:	88 23       	and	r24, r24
    e7dc:	21 f4       	brne	.+8      	; 0xe7e6 <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    e7de:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    e7e0:	28 5f       	subi	r18, 0xF8	; 248
    e7e2:	3f 4f       	sbci	r19, 0xFF	; 255
    e7e4:	f9 cf       	rjmp	.-14     	; 0xe7d8 <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    e7e6:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    e7e8:	90 81       	ld	r25, Z
    e7ea:	97 fd       	sbrc	r25, 7
    e7ec:	06 c0       	rjmp	.+12     	; 0xe7fa <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    e7ee:	46 95       	lsr	r20
		++blockIndex;
    e7f0:	2f 5f       	subi	r18, 0xFF	; 255
    e7f2:	3f 4f       	sbci	r19, 0xFF	; 255
    e7f4:	89 2f       	mov	r24, r25
    e7f6:	84 23       	and	r24, r20
    e7f8:	d1 f3       	breq	.-12     	; 0xe7ee <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    e7fa:	40 95       	com	r20
    e7fc:	94 23       	and	r25, r20
    e7fe:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    e800:	8c 81       	ldd	r24, Y+4	; 0x04
    e802:	9d 81       	ldd	r25, Y+5	; 0x05
    e804:	01 97       	sbiw	r24, 0x01	; 1
    e806:	9d 83       	std	Y+5, r25	; 0x05
    e808:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    e80a:	48 81       	ld	r20, Y
    e80c:	59 81       	ldd	r21, Y+1	; 0x01
    e80e:	24 9f       	mul	r18, r20
    e810:	50 01       	movw	r10, r0
    e812:	25 9f       	mul	r18, r21
    e814:	b0 0c       	add	r11, r0
    e816:	34 9f       	mul	r19, r20
    e818:	b0 0c       	add	r11, r0
    e81a:	11 24       	eor	r1, r1
    e81c:	0e 81       	ldd	r16, Y+6	; 0x06
    e81e:	1f 81       	ldd	r17, Y+7	; 0x07
    e820:	0a 0d       	add	r16, r10
    e822:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    e824:	2a 81       	ldd	r18, Y+2	; 0x02
    e826:	3b 81       	ldd	r19, Y+3	; 0x03
    e828:	28 1b       	sub	r18, r24
    e82a:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    e82c:	8a 85       	ldd	r24, Y+10	; 0x0a
    e82e:	9b 85       	ldd	r25, Y+11	; 0x0b
    e830:	82 17       	cp	r24, r18
    e832:	93 07       	cpc	r25, r19
    e834:	10 f4       	brcc	.+4      	; 0xe83a <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    e836:	3b 87       	std	Y+11, r19	; 0x0b
    e838:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    e83a:	8e 85       	ldd	r24, Y+14	; 0x0e
    e83c:	9f 85       	ldd	r25, Y+15	; 0x0f
    e83e:	86 17       	cp	r24, r22
    e840:	97 07       	cpc	r25, r23
    e842:	10 f4       	brcc	.+4      	; 0xe848 <MEMBLOCK_Allocate+0xd6>
    e844:	7f 87       	std	Y+15, r23	; 0x0f
    e846:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    e848:	8c 85       	ldd	r24, Y+12	; 0x0c
    e84a:	9d 85       	ldd	r25, Y+13	; 0x0d
    e84c:	68 17       	cp	r22, r24
    e84e:	79 07       	cpc	r23, r25
    e850:	10 f4       	brcc	.+4      	; 0xe856 <MEMBLOCK_Allocate+0xe4>
    e852:	7d 87       	std	Y+13, r23	; 0x0d
    e854:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    e856:	88 89       	ldd	r24, Y+16	; 0x10
    e858:	99 89       	ldd	r25, Y+17	; 0x11
    e85a:	aa 89       	ldd	r26, Y+18	; 0x12
    e85c:	bb 89       	ldd	r27, Y+19	; 0x13
    e85e:	01 96       	adiw	r24, 0x01	; 1
    e860:	a1 1d       	adc	r26, r1
    e862:	b1 1d       	adc	r27, r1
    e864:	88 8b       	std	Y+16, r24	; 0x10
    e866:	99 8b       	std	Y+17, r25	; 0x11
    e868:	aa 8b       	std	Y+18, r26	; 0x12
    e86a:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    e86c:	cb 01       	movw	r24, r22
    e86e:	aa 27       	eor	r26, r26
    e870:	bb 27       	eor	r27, r27
    e872:	ba 2f       	mov	r27, r26
    e874:	a9 2f       	mov	r26, r25
    e876:	98 2f       	mov	r25, r24
    e878:	88 27       	eor	r24, r24
    e87a:	5a 01       	movw	r10, r20
    e87c:	cc 24       	eor	r12, r12
    e87e:	dd 24       	eor	r13, r13
    e880:	a6 01       	movw	r20, r12
    e882:	95 01       	movw	r18, r10
    e884:	bc 01       	movw	r22, r24
    e886:	cd 01       	movw	r24, r26
    e888:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <__udivmodsi4>
		bag->allocationUtilization += utilization;
    e88c:	8c 89       	ldd	r24, Y+20	; 0x14
    e88e:	9d 89       	ldd	r25, Y+21	; 0x15
    e890:	ae 89       	ldd	r26, Y+22	; 0x16
    e892:	bf 89       	ldd	r27, Y+23	; 0x17
    e894:	82 0f       	add	r24, r18
    e896:	93 1f       	adc	r25, r19
    e898:	a4 1f       	adc	r26, r20
    e89a:	b5 1f       	adc	r27, r21
    e89c:	8c 8b       	std	Y+20, r24	; 0x14
    e89e:	9d 8b       	std	Y+21, r25	; 0x15
    e8a0:	ae 8b       	std	Y+22, r26	; 0x16
    e8a2:	bf 8b       	std	Y+23, r27	; 0x17
    e8a4:	02 c0       	rjmp	.+4      	; 0xe8aa <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    e8a6:	00 e0       	ldi	r16, 0x00	; 0
    e8a8:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    e8aa:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    e8ac:	c8 01       	movw	r24, r16
    e8ae:	df 91       	pop	r29
    e8b0:	cf 91       	pop	r28
    e8b2:	1f 91       	pop	r17
    e8b4:	0f 91       	pop	r16
    e8b6:	ff 90       	pop	r15
    e8b8:	df 90       	pop	r13
    e8ba:	cf 90       	pop	r12
    e8bc:	bf 90       	pop	r11
    e8be:	af 90       	pop	r10
    e8c0:	08 95       	ret

0000e8c2 <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    e8c2:	cf 93       	push	r28
    e8c4:	df 93       	push	r29
    e8c6:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    e8c8:	89 2b       	or	r24, r25
    e8ca:	09 f4       	brne	.+2      	; 0xe8ce <MEMBLOCK_Free+0xc>
    e8cc:	4e c0       	rjmp	.+156    	; 0xe96a <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e8ce:	c0 91 71 02 	lds	r28, 0x0271
    e8d2:	d0 91 72 02 	lds	r29, 0x0272
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e8d6:	20 91 6f 02 	lds	r18, 0x026F
    e8da:	30 91 70 02 	lds	r19, 0x0270

	bool found = false;
    e8de:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e8e0:	21 15       	cp	r18, r1
    e8e2:	31 05       	cpc	r19, r1
    e8e4:	e9 f1       	breq	.+122    	; 0xe960 <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    e8e6:	8e 81       	ldd	r24, Y+6	; 0x06
    e8e8:	9f 81       	ldd	r25, Y+7	; 0x07
    e8ea:	48 17       	cp	r20, r24
    e8ec:	59 07       	cpc	r21, r25
    e8ee:	38 f0       	brcs	.+14     	; 0xe8fe <MEMBLOCK_Free+0x3c>
    e8f0:	88 85       	ldd	r24, Y+8	; 0x08
    e8f2:	99 85       	ldd	r25, Y+9	; 0x09
    e8f4:	48 17       	cp	r20, r24
    e8f6:	59 07       	cpc	r21, r25
    e8f8:	10 f4       	brcc	.+4      	; 0xe8fe <MEMBLOCK_Free+0x3c>
			found = true;
    e8fa:	61 e0       	ldi	r22, 0x01	; 1
    e8fc:	03 c0       	rjmp	.+6      	; 0xe904 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    e8fe:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e900:	21 50       	subi	r18, 0x01	; 1
    e902:	30 40       	sbci	r19, 0x00	; 0
    e904:	21 15       	cp	r18, r1
    e906:	31 05       	cpc	r19, r1
    e908:	11 f0       	breq	.+4      	; 0xe90e <MEMBLOCK_Free+0x4c>
    e90a:	66 23       	and	r22, r22
    e90c:	61 f3       	breq	.-40     	; 0xe8e6 <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    e90e:	66 23       	and	r22, r22
    e910:	39 f1       	breq	.+78     	; 0xe960 <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    e912:	8e 81       	ldd	r24, Y+6	; 0x06
    e914:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    e916:	28 81       	ld	r18, Y
    e918:	39 81       	ldd	r19, Y+1	; 0x01
    e91a:	48 1b       	sub	r20, r24
    e91c:	59 0b       	sbc	r21, r25
    e91e:	ca 01       	movw	r24, r20
    e920:	b9 01       	movw	r22, r18
    e922:	0e 94 30 79 	call	0xf260	; 0xf260 <__udivmodhi4>
    e926:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    e928:	cb 01       	movw	r24, r22
    e92a:	43 e0       	ldi	r20, 0x03	; 3
    e92c:	96 95       	lsr	r25
    e92e:	87 95       	ror	r24
    e930:	4a 95       	dec	r20
    e932:	e1 f7       	brne	.-8      	; 0xe92c <MEMBLOCK_Free+0x6a>
    e934:	e8 85       	ldd	r30, Y+8	; 0x08
    e936:	f9 85       	ldd	r31, Y+9	; 0x09
    e938:	e8 0f       	add	r30, r24
    e93a:	f9 1f       	adc	r31, r25
    e93c:	27 70       	andi	r18, 0x07	; 7
    e93e:	30 70       	andi	r19, 0x00	; 0
    e940:	80 e8       	ldi	r24, 0x80	; 128
    e942:	90 e0       	ldi	r25, 0x00	; 0
    e944:	02 c0       	rjmp	.+4      	; 0xe94a <MEMBLOCK_Free+0x88>
    e946:	95 95       	asr	r25
    e948:	87 95       	ror	r24
    e94a:	2a 95       	dec	r18
    e94c:	e2 f7       	brpl	.-8      	; 0xe946 <MEMBLOCK_Free+0x84>
    e94e:	20 81       	ld	r18, Z
    e950:	28 2b       	or	r18, r24
    e952:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    e954:	8c 81       	ldd	r24, Y+4	; 0x04
    e956:	9d 81       	ldd	r25, Y+5	; 0x05
    e958:	01 96       	adiw	r24, 0x01	; 1
    e95a:	9d 83       	std	Y+5, r25	; 0x05
    e95c:	8c 83       	std	Y+4, r24	; 0x04
    e95e:	05 c0       	rjmp	.+10     	; 0xe96a <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    e960:	80 91 73 02 	lds	r24, 0x0273
    e964:	8f 5f       	subi	r24, 0xFF	; 255
    e966:	80 93 73 02 	sts	0x0273, r24
    e96a:	df 91       	pop	r29
    e96c:	cf 91       	pop	r28
    e96e:	08 95       	ret

0000e970 <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    e970:	8f 92       	push	r8
    e972:	9f 92       	push	r9
    e974:	af 92       	push	r10
    e976:	cf 92       	push	r12
    e978:	ef 92       	push	r14
    e97a:	0f 93       	push	r16
    e97c:	1f 93       	push	r17
    e97e:	cf 93       	push	r28
    e980:	df 93       	push	r29
    e982:	4b 01       	movw	r8, r22
    e984:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    e986:	33 27       	eor	r19, r19
    e988:	62 9f       	mul	r22, r18
    e98a:	e0 01       	movw	r28, r0
    e98c:	63 9f       	mul	r22, r19
    e98e:	d0 0d       	add	r29, r0
    e990:	72 9f       	mul	r23, r18
    e992:	d0 0d       	add	r29, r0
    e994:	11 24       	eor	r1, r1
    e996:	c4 0f       	add	r28, r20
    e998:	d5 1f       	adc	r29, r21
    e99a:	c8 0f       	add	r28, r24
    e99c:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    e99e:	11 50       	subi	r17, 0x01	; 1
    e9a0:	1f 3f       	cpi	r17, 0xFF	; 255
    e9a2:	59 f0       	breq	.+22     	; 0xe9ba <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    e9a4:	2c 2d       	mov	r18, r12
    e9a6:	40 2f       	mov	r20, r16
    e9a8:	6e 2d       	mov	r22, r14
    e9aa:	ce 01       	movw	r24, r28
    e9ac:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    e9b0:	c8 0d       	add	r28, r8
    e9b2:	d9 1d       	adc	r29, r9
    destPage++;
    e9b4:	e3 94       	inc	r14
    e9b6:	11 50       	subi	r17, 0x01	; 1
    e9b8:	a8 f7       	brcc	.-22     	; 0xe9a4 <PICTURE_CopyFlashToLcd+0x34>
    e9ba:	df 91       	pop	r29
    e9bc:	cf 91       	pop	r28
    e9be:	1f 91       	pop	r17
    e9c0:	0f 91       	pop	r16
    e9c2:	ef 90       	pop	r14
    e9c4:	cf 90       	pop	r12
    e9c6:	af 90       	pop	r10
    e9c8:	9f 90       	pop	r9
    e9ca:	8f 90       	pop	r8
    e9cc:	08 95       	ret

0000e9ce <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    e9ce:	1f 92       	push	r1
    e9d0:	0f 92       	push	r0
    e9d2:	0f b6       	in	r0, 0x3f	; 63
    e9d4:	0f 92       	push	r0
    e9d6:	11 24       	eor	r1, r1
    e9d8:	2f 93       	push	r18
    e9da:	3f 93       	push	r19
    e9dc:	4f 93       	push	r20
    e9de:	5f 93       	push	r21
    e9e0:	6f 93       	push	r22
    e9e2:	7f 93       	push	r23
    e9e4:	8f 93       	push	r24
    e9e6:	9f 93       	push	r25
    e9e8:	af 93       	push	r26
    e9ea:	bf 93       	push	r27
    e9ec:	ef 93       	push	r30
    e9ee:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    e9f0:	80 91 8b 18 	lds	r24, 0x188B
    e9f4:	90 91 8c 18 	lds	r25, 0x188C
    e9f8:	89 2b       	or	r24, r25
    e9fa:	29 f0       	breq	.+10     	; 0xea06 <__vector_15+0x38>
		RTC_TickHandler();
    e9fc:	e0 91 8b 18 	lds	r30, 0x188B
    ea00:	f0 91 8c 18 	lds	r31, 0x188C
    ea04:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    ea06:	80 91 8a 18 	lds	r24, 0x188A
    ea0a:	8f 37       	cpi	r24, 0x7F	; 127
    ea0c:	30 f4       	brcc	.+12     	; 0xea1a <__vector_15+0x4c>
		++RTC_ticks;
    ea0e:	80 91 8a 18 	lds	r24, 0x188A
    ea12:	8f 5f       	subi	r24, 0xFF	; 255
    ea14:	80 93 8a 18 	sts	0x188A, r24
    ea18:	36 c0       	rjmp	.+108    	; 0xea86 <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    ea1a:	10 92 8a 18 	sts	0x188A, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    ea1e:	80 91 89 18 	lds	r24, 0x1889
    ea22:	8b 33       	cpi	r24, 0x3B	; 59
    ea24:	30 f4       	brcc	.+12     	; 0xea32 <__vector_15+0x64>
			++RTC_seconds;
    ea26:	80 91 89 18 	lds	r24, 0x1889
    ea2a:	8f 5f       	subi	r24, 0xFF	; 255
    ea2c:	80 93 89 18 	sts	0x1889, r24
    ea30:	2a c0       	rjmp	.+84     	; 0xea86 <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    ea32:	10 92 89 18 	sts	0x1889, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    ea36:	80 91 88 18 	lds	r24, 0x1888
    ea3a:	8b 33       	cpi	r24, 0x3B	; 59
    ea3c:	30 f4       	brcc	.+12     	; 0xea4a <__vector_15+0x7c>
				++RTC_minutes;
    ea3e:	80 91 88 18 	lds	r24, 0x1888
    ea42:	8f 5f       	subi	r24, 0xFF	; 255
    ea44:	80 93 88 18 	sts	0x1888, r24
    ea48:	1e c0       	rjmp	.+60     	; 0xea86 <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    ea4a:	10 92 88 18 	sts	0x1888, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    ea4e:	80 91 87 18 	lds	r24, 0x1887
    ea52:	87 31       	cpi	r24, 0x17	; 23
    ea54:	30 f4       	brcc	.+12     	; 0xea62 <__vector_15+0x94>
					++RTC_hours;
    ea56:	80 91 87 18 	lds	r24, 0x1887
    ea5a:	8f 5f       	subi	r24, 0xFF	; 255
    ea5c:	80 93 87 18 	sts	0x1887, r24
    ea60:	12 c0       	rjmp	.+36     	; 0xea86 <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    ea62:	10 92 87 18 	sts	0x1887, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    ea66:	80 91 86 18 	lds	r24, 0x1886
    ea6a:	8f 5f       	subi	r24, 0xFF	; 255
    ea6c:	80 93 86 18 	sts	0x1886, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    ea70:	80 91 8d 18 	lds	r24, 0x188D
    ea74:	90 91 8e 18 	lds	r25, 0x188E
    ea78:	89 2b       	or	r24, r25
    ea7a:	29 f0       	breq	.+10     	; 0xea86 <__vector_15+0xb8>
						RTC_DayHandler();
    ea7c:	e0 91 8d 18 	lds	r30, 0x188D
    ea80:	f0 91 8e 18 	lds	r31, 0x188E
    ea84:	09 95       	icall
    ea86:	ff 91       	pop	r31
    ea88:	ef 91       	pop	r30
    ea8a:	bf 91       	pop	r27
    ea8c:	af 91       	pop	r26
    ea8e:	9f 91       	pop	r25
    ea90:	8f 91       	pop	r24
    ea92:	7f 91       	pop	r23
    ea94:	6f 91       	pop	r22
    ea96:	5f 91       	pop	r21
    ea98:	4f 91       	pop	r20
    ea9a:	3f 91       	pop	r19
    ea9c:	2f 91       	pop	r18
    ea9e:	0f 90       	pop	r0
    eaa0:	0f be       	out	0x3f, r0	; 63
    eaa2:	0f 90       	pop	r0
    eaa4:	1f 90       	pop	r1
    eaa6:	18 95       	reti

0000eaa8 <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    eaa8:	10 92 8c 18 	sts	0x188C, r1
    eaac:	10 92 8b 18 	sts	0x188B, r1
	RTC_DayHandler = NULL;
    eab0:	10 92 8e 18 	sts	0x188E, r1
    eab4:	10 92 8d 18 	sts	0x188D, r1
	RTC_ticks = 0;
    eab8:	10 92 8a 18 	sts	0x188A, r1
	RTC_seconds = 0;
    eabc:	10 92 89 18 	sts	0x1889, r1
	RTC_minutes = 0;
    eac0:	10 92 88 18 	sts	0x1888, r1
	RTC_hours = 0;
    eac4:	10 92 87 18 	sts	0x1887, r1
	RTC_days = 0;
    eac8:	10 92 86 18 	sts	0x1886, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    eacc:	80 91 64 00 	lds	r24, 0x0064
    ead0:	8f 7b       	andi	r24, 0xBF	; 191
    ead2:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    ead6:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    eada:	80 e2       	ldi	r24, 0x20	; 32
    eadc:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    eae0:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    eae4:	81 e0       	ldi	r24, 0x01	; 1
    eae6:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    eaea:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    eaee:	80 91 b6 00 	lds	r24, 0x00B6
    eaf2:	99 27       	eor	r25, r25
    eaf4:	8f 71       	andi	r24, 0x1F	; 31
    eaf6:	90 70       	andi	r25, 0x00	; 0
    eaf8:	89 2b       	or	r24, r25
    eafa:	c9 f7       	brne	.-14     	; 0xeaee <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    eafc:	81 e0       	ldi	r24, 0x01	; 1
    eafe:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    eb00:	80 93 70 00 	sts	0x0070, r24
    eb04:	08 95       	ret

0000eb06 <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    eb06:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    eb08:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    eb0a:	90 93 8c 18 	sts	0x188C, r25
    eb0e:	80 93 8b 18 	sts	0x188B, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    eb12:	2f bf       	out	0x3f, r18	; 63
    eb14:	08 95       	ret

0000eb16 <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    eb16:	10 92 90 18 	sts	0x1890, r1
    eb1a:	10 92 8f 18 	sts	0x188F, r1
	TIMING_currentTime = 0;
    eb1e:	10 92 93 18 	sts	0x1893, r1
    eb22:	10 92 94 18 	sts	0x1894, r1
    eb26:	10 92 95 18 	sts	0x1895, r1
    eb2a:	10 92 96 18 	sts	0x1896, r1
    eb2e:	08 95       	ret

0000eb30 <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    eb30:	6f 92       	push	r6
    eb32:	7f 92       	push	r7
    eb34:	9f 92       	push	r9
    eb36:	af 92       	push	r10
    eb38:	bf 92       	push	r11
    eb3a:	cf 92       	push	r12
    eb3c:	df 92       	push	r13
    eb3e:	ef 92       	push	r14
    eb40:	ff 92       	push	r15
    eb42:	0f 93       	push	r16
    eb44:	1f 93       	push	r17
    eb46:	cf 93       	push	r28
    eb48:	df 93       	push	r29
    eb4a:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    eb4c:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    eb4e:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    eb50:	60 91 8f 18 	lds	r22, 0x188F
    eb54:	70 91 90 18 	lds	r23, 0x1890
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    eb58:	e0 91 91 18 	lds	r30, 0x1891
    eb5c:	f0 91 92 18 	lds	r31, 0x1892
    eb60:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    eb62:	cc 24       	eor	r12, r12
    eb64:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    eb66:	dc 01       	movw	r26, r24
    eb68:	ed 90       	ld	r14, X+
    eb6a:	fd 90       	ld	r15, X+
    eb6c:	0d 91       	ld	r16, X+
    eb6e:	1c 91       	ld	r17, X
    eb70:	80 91 93 18 	lds	r24, 0x1893
    eb74:	90 91 94 18 	lds	r25, 0x1894
    eb78:	a0 91 95 18 	lds	r26, 0x1895
    eb7c:	b0 91 96 18 	lds	r27, 0x1896
    eb80:	8e 15       	cp	r24, r14
    eb82:	9f 05       	cpc	r25, r15
    eb84:	a0 07       	cpc	r26, r16
    eb86:	b1 07       	cpc	r27, r17
    eb88:	58 f1       	brcs	.+86     	; 0xebe0 <TIMING_AddEvent+0xb0>
    eb8a:	09 c0       	rjmp	.+18     	; 0xeb9e <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    eb8c:	61 15       	cp	r22, r1
    eb8e:	71 05       	cpc	r23, r1
    eb90:	39 f1       	breq	.+78     	; 0xebe0 <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    eb92:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    eb94:	05 84       	ldd	r0, Z+13	; 0x0d
    eb96:	f6 85       	ldd	r31, Z+14	; 0x0e
    eb98:	e0 2d       	mov	r30, r0
			--eventsLeft;
    eb9a:	61 50       	subi	r22, 0x01	; 1
    eb9c:	70 40       	sbci	r23, 0x00	; 0
    eb9e:	20 81       	ld	r18, Z
    eba0:	31 81       	ldd	r19, Z+1	; 0x01
    eba2:	42 81       	ldd	r20, Z+2	; 0x02
    eba4:	53 81       	ldd	r21, Z+3	; 0x03
    eba6:	80 91 93 18 	lds	r24, 0x1893
    ebaa:	90 91 94 18 	lds	r25, 0x1894
    ebae:	a0 91 95 18 	lds	r26, 0x1895
    ebb2:	b0 91 96 18 	lds	r27, 0x1896
    ebb6:	28 17       	cp	r18, r24
    ebb8:	39 07       	cpc	r19, r25
    ebba:	4a 07       	cpc	r20, r26
    ebbc:	5b 07       	cpc	r21, r27
    ebbe:	30 f7       	brcc	.-52     	; 0xeb8c <TIMING_AddEvent+0x5c>
    ebc0:	0f c0       	rjmp	.+30     	; 0xebe0 <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    ebc2:	80 81       	ld	r24, Z
    ebc4:	91 81       	ldd	r25, Z+1	; 0x01
    ebc6:	a2 81       	ldd	r26, Z+2	; 0x02
    ebc8:	b3 81       	ldd	r27, Z+3	; 0x03
    ebca:	8e 15       	cp	r24, r14
    ebcc:	9f 05       	cpc	r25, r15
    ebce:	a0 07       	cpc	r26, r16
    ebd0:	b1 07       	cpc	r27, r17
    ebd2:	48 f4       	brcc	.+18     	; 0xebe6 <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    ebd4:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    ebd6:	05 84       	ldd	r0, Z+13	; 0x0d
    ebd8:	f6 85       	ldd	r31, Z+14	; 0x0e
    ebda:	e0 2d       	mov	r30, r0
		--eventsLeft;
    ebdc:	61 50       	subi	r22, 0x01	; 1
    ebde:	70 40       	sbci	r23, 0x00	; 0
    ebe0:	61 15       	cp	r22, r1
    ebe2:	71 05       	cpc	r23, r1
    ebe4:	71 f7       	brne	.-36     	; 0xebc2 <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    ebe6:	80 91 8f 18 	lds	r24, 0x188F
    ebea:	90 91 90 18 	lds	r25, 0x1890
    ebee:	68 17       	cp	r22, r24
    ebf0:	79 07       	cpc	r23, r25
    ebf2:	a1 f4       	brne	.+40     	; 0xec1c <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    ebf4:	e3 01       	movw	r28, r6
    ebf6:	be 86       	std	Y+14, r11	; 0x0e
    ebf8:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    ebfa:	70 92 92 18 	sts	0x1892, r7
    ebfe:	60 92 91 18 	sts	0x1891, r6
		TIMING_nextEventTime = event->triggerTime;
    ec02:	88 81       	ld	r24, Y
    ec04:	99 81       	ldd	r25, Y+1	; 0x01
    ec06:	aa 81       	ldd	r26, Y+2	; 0x02
    ec08:	bb 81       	ldd	r27, Y+3	; 0x03
    ec0a:	80 93 97 18 	sts	0x1897, r24
    ec0e:	90 93 98 18 	sts	0x1898, r25
    ec12:	a0 93 99 18 	sts	0x1899, r26
    ec16:	b0 93 9a 18 	sts	0x189A, r27
    ec1a:	06 c0       	rjmp	.+12     	; 0xec28 <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    ec1c:	e3 01       	movw	r28, r6
    ec1e:	fe 87       	std	Y+14, r31	; 0x0e
    ec20:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    ec22:	f6 01       	movw	r30, r12
    ec24:	76 86       	std	Z+14, r7	; 0x0e
    ec26:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    ec28:	80 91 8f 18 	lds	r24, 0x188F
    ec2c:	90 91 90 18 	lds	r25, 0x1890
    ec30:	01 96       	adiw	r24, 0x01	; 1
    ec32:	90 93 90 18 	sts	0x1890, r25
    ec36:	80 93 8f 18 	sts	0x188F, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    ec3a:	9f be       	out	0x3f, r9	; 63
    ec3c:	df 91       	pop	r29
    ec3e:	cf 91       	pop	r28
    ec40:	1f 91       	pop	r17
    ec42:	0f 91       	pop	r16
    ec44:	ff 90       	pop	r15
    ec46:	ef 90       	pop	r14
    ec48:	df 90       	pop	r13
    ec4a:	cf 90       	pop	r12
    ec4c:	bf 90       	pop	r11
    ec4e:	af 90       	pop	r10
    ec50:	9f 90       	pop	r9
    ec52:	7f 90       	pop	r7
    ec54:	6f 90       	pop	r6
    ec56:	08 95       	ret

0000ec58 <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    ec58:	0f 93       	push	r16
    ec5a:	1f 93       	push	r17
    ec5c:	cf 93       	push	r28
    ec5e:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    ec60:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    ec62:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    ec64:	80 91 93 18 	lds	r24, 0x1893
    ec68:	90 91 94 18 	lds	r25, 0x1894
    ec6c:	a0 91 95 18 	lds	r26, 0x1895
    ec70:	b0 91 96 18 	lds	r27, 0x1896
    ec74:	01 96       	adiw	r24, 0x01	; 1
    ec76:	a1 1d       	adc	r26, r1
    ec78:	b1 1d       	adc	r27, r1
    ec7a:	80 93 93 18 	sts	0x1893, r24
    ec7e:	90 93 94 18 	sts	0x1894, r25
    ec82:	a0 93 95 18 	sts	0x1895, r26
    ec86:	b0 93 96 18 	sts	0x1896, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    ec8a:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    ec8c:	80 91 8f 18 	lds	r24, 0x188F
    ec90:	90 91 90 18 	lds	r25, 0x1890
    ec94:	89 2b       	or	r24, r25
    ec96:	09 f4       	brne	.+2      	; 0xec9a <TIMING_TickHandler+0x42>
    ec98:	70 c0       	rjmp	.+224    	; 0xed7a <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    ec9a:	20 91 97 18 	lds	r18, 0x1897
    ec9e:	30 91 98 18 	lds	r19, 0x1898
    eca2:	40 91 99 18 	lds	r20, 0x1899
    eca6:	50 91 9a 18 	lds	r21, 0x189A
		if (TIMING_currentTime != next_event) {
    ecaa:	80 91 93 18 	lds	r24, 0x1893
    ecae:	90 91 94 18 	lds	r25, 0x1894
    ecb2:	a0 91 95 18 	lds	r26, 0x1895
    ecb6:	b0 91 96 18 	lds	r27, 0x1896
    ecba:	82 17       	cp	r24, r18
    ecbc:	93 07       	cpc	r25, r19
    ecbe:	a4 07       	cpc	r26, r20
    ecc0:	b5 07       	cpc	r27, r21
    ecc2:	11 f0       	breq	.+4      	; 0xecc8 <TIMING_TickHandler+0x70>
			goon = 0;
    ecc4:	00 e0       	ldi	r16, 0x00	; 0
    ecc6:	50 c0       	rjmp	.+160    	; 0xed68 <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    ecc8:	c0 91 91 18 	lds	r28, 0x1891
    eccc:	d0 91 92 18 	lds	r29, 0x1892
			TIMING_firstEvent = event->next;
    ecd0:	ed 85       	ldd	r30, Y+13	; 0x0d
    ecd2:	fe 85       	ldd	r31, Y+14	; 0x0e
    ecd4:	f0 93 92 18 	sts	0x1892, r31
    ecd8:	e0 93 91 18 	sts	0x1891, r30
			--TIMING_queueSize;
    ecdc:	80 91 8f 18 	lds	r24, 0x188F
    ece0:	90 91 90 18 	lds	r25, 0x1890
    ece4:	01 97       	sbiw	r24, 0x01	; 1
    ece6:	90 93 90 18 	sts	0x1890, r25
    ecea:	80 93 8f 18 	sts	0x188F, r24
			if (TIMING_queueSize > 0) {
    ecee:	80 91 8f 18 	lds	r24, 0x188F
    ecf2:	90 91 90 18 	lds	r25, 0x1890
    ecf6:	89 2b       	or	r24, r25
    ecf8:	61 f0       	breq	.+24     	; 0xed12 <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    ecfa:	80 81       	ld	r24, Z
    ecfc:	91 81       	ldd	r25, Z+1	; 0x01
    ecfe:	a2 81       	ldd	r26, Z+2	; 0x02
    ed00:	b3 81       	ldd	r27, Z+3	; 0x03
    ed02:	80 93 97 18 	sts	0x1897, r24
    ed06:	90 93 98 18 	sts	0x1898, r25
    ed0a:	a0 93 99 18 	sts	0x1899, r26
    ed0e:	b0 93 9a 18 	sts	0x189A, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    ed12:	89 85       	ldd	r24, Y+9	; 0x09
    ed14:	9a 85       	ldd	r25, Y+10	; 0x0a
    ed16:	00 97       	sbiw	r24, 0x00	; 0
    ed18:	19 f0       	breq	.+6      	; 0xed20 <TIMING_TickHandler+0xc8>
    ed1a:	01 97       	sbiw	r24, 0x01	; 1
    ed1c:	39 f0       	breq	.+14     	; 0xed2c <TIMING_TickHandler+0xd4>
    ed1e:	09 c0       	rjmp	.+18     	; 0xed32 <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    ed20:	eb 85       	ldd	r30, Y+11	; 0x0b
    ed22:	fc 85       	ldd	r31, Y+12	; 0x0c
    ed24:	80 81       	ld	r24, Z
    ed26:	8f 5f       	subi	r24, 0xFF	; 255
    ed28:	80 83       	st	Z, r24
		break;
    ed2a:	03 c0       	rjmp	.+6      	; 0xed32 <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    ed2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ed2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ed30:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    ed32:	88 85       	ldd	r24, Y+8	; 0x08
    ed34:	8f 3f       	cpi	r24, 0xFF	; 255
    ed36:	11 f0       	breq	.+4      	; 0xed3c <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    ed38:	81 50       	subi	r24, 0x01	; 1
    ed3a:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    ed3c:	88 85       	ldd	r24, Y+8	; 0x08
    ed3e:	88 23       	and	r24, r24
    ed40:	99 f0       	breq	.+38     	; 0xed68 <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    ed42:	88 81       	ld	r24, Y
    ed44:	99 81       	ldd	r25, Y+1	; 0x01
    ed46:	aa 81       	ldd	r26, Y+2	; 0x02
    ed48:	bb 81       	ldd	r27, Y+3	; 0x03
    ed4a:	2c 81       	ldd	r18, Y+4	; 0x04
    ed4c:	3d 81       	ldd	r19, Y+5	; 0x05
    ed4e:	4e 81       	ldd	r20, Y+6	; 0x06
    ed50:	5f 81       	ldd	r21, Y+7	; 0x07
    ed52:	82 0f       	add	r24, r18
    ed54:	93 1f       	adc	r25, r19
    ed56:	a4 1f       	adc	r26, r20
    ed58:	b5 1f       	adc	r27, r21
    ed5a:	88 83       	st	Y, r24
    ed5c:	99 83       	std	Y+1, r25	; 0x01
    ed5e:	aa 83       	std	Y+2, r26	; 0x02
    ed60:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    ed62:	ce 01       	movw	r24, r28
    ed64:	0e 94 98 75 	call	0xeb30	; 0xeb30 <TIMING_AddEvent>
    ed68:	80 91 8f 18 	lds	r24, 0x188F
    ed6c:	90 91 90 18 	lds	r25, 0x1890
    ed70:	89 2b       	or	r24, r25
    ed72:	19 f0       	breq	.+6      	; 0xed7a <TIMING_TickHandler+0x122>
    ed74:	00 23       	and	r16, r16
    ed76:	09 f0       	breq	.+2      	; 0xed7a <TIMING_TickHandler+0x122>
    ed78:	90 cf       	rjmp	.-224    	; 0xec9a <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    ed7a:	1f bf       	out	0x3f, r17	; 63
    ed7c:	df 91       	pop	r29
    ed7e:	cf 91       	pop	r28
    ed80:	1f 91       	pop	r17
    ed82:	0f 91       	pop	r16
    ed84:	08 95       	ret

0000ed86 <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    ed86:	cf 93       	push	r28
    ed88:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    ed8a:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    ed8c:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    ed8e:	40 91 8f 18 	lds	r20, 0x188F
    ed92:	50 91 90 18 	lds	r21, 0x1890
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    ed96:	e0 91 91 18 	lds	r30, 0x1891
    ed9a:	f0 91 92 18 	lds	r31, 0x1892
	TIMING_event_t * lastEvent = 0;
    ed9e:	a0 e0       	ldi	r26, 0x00	; 0
    eda0:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    eda2:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    eda4:	41 15       	cp	r20, r1
    eda6:	51 05       	cpc	r21, r1
    eda8:	81 f0       	breq	.+32     	; 0xedca <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    edaa:	e8 17       	cp	r30, r24
    edac:	f9 07       	cpc	r31, r25
    edae:	11 f4       	brne	.+4      	; 0xedb4 <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    edb0:	21 e0       	ldi	r18, 0x01	; 1
    edb2:	06 c0       	rjmp	.+12     	; 0xedc0 <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    edb4:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    edb6:	05 84       	ldd	r0, Z+13	; 0x0d
    edb8:	f6 85       	ldd	r31, Z+14	; 0x0e
    edba:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    edbc:	41 50       	subi	r20, 0x01	; 1
    edbe:	50 40       	sbci	r21, 0x00	; 0
    edc0:	41 15       	cp	r20, r1
    edc2:	51 05       	cpc	r21, r1
    edc4:	11 f0       	breq	.+4      	; 0xedca <TIMING_RemoveEvent+0x44>
    edc6:	22 23       	and	r18, r18
    edc8:	81 f3       	breq	.-32     	; 0xedaa <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    edca:	22 23       	and	r18, r18
    edcc:	d1 f0       	breq	.+52     	; 0xee02 <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    edce:	80 91 8f 18 	lds	r24, 0x188F
    edd2:	90 91 90 18 	lds	r25, 0x1890
    edd6:	25 85       	ldd	r18, Z+13	; 0x0d
    edd8:	36 85       	ldd	r19, Z+14	; 0x0e
    edda:	48 17       	cp	r20, r24
    eddc:	59 07       	cpc	r21, r25
    edde:	29 f4       	brne	.+10     	; 0xedea <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    ede0:	30 93 92 18 	sts	0x1892, r19
    ede4:	20 93 91 18 	sts	0x1891, r18
    ede8:	03 c0       	rjmp	.+6      	; 0xedf0 <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    edea:	ed 01       	movw	r28, r26
    edec:	3e 87       	std	Y+14, r19	; 0x0e
    edee:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    edf0:	80 91 8f 18 	lds	r24, 0x188F
    edf4:	90 91 90 18 	lds	r25, 0x1890
    edf8:	01 97       	sbiw	r24, 0x01	; 1
    edfa:	90 93 90 18 	sts	0x1890, r25
    edfe:	80 93 8f 18 	sts	0x188F, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    ee02:	6f bf       	out	0x3f, r22	; 63
    ee04:	df 91       	pop	r29
    ee06:	cf 91       	pop	r28
    ee08:	08 95       	ret

0000ee0a <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    ee0a:	cf 92       	push	r12
    ee0c:	df 92       	push	r13
    ee0e:	ef 92       	push	r14
    ee10:	ff 92       	push	r15
    ee12:	0f 93       	push	r16
    ee14:	1f 93       	push	r17
    ee16:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    ee18:	44 23       	and	r20, r20
    ee1a:	91 f0       	breq	.+36     	; 0xee40 <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    ee1c:	60 83       	st	Z, r22
    ee1e:	71 83       	std	Z+1, r23	; 0x01
    ee20:	82 83       	std	Z+2, r24	; 0x02
    ee22:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    ee24:	04 83       	std	Z+4, r16	; 0x04
    ee26:	15 83       	std	Z+5, r17	; 0x05
    ee28:	26 83       	std	Z+6, r18	; 0x06
    ee2a:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    ee2c:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    ee2e:	81 e0       	ldi	r24, 0x01	; 1
    ee30:	90 e0       	ldi	r25, 0x00	; 0
    ee32:	92 87       	std	Z+10, r25	; 0x0a
    ee34:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    ee36:	f4 86       	std	Z+12, r15	; 0x0c
    ee38:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    ee3a:	c6 01       	movw	r24, r12
    ee3c:	0e 94 98 75 	call	0xeb30	; 0xeb30 <TIMING_AddEvent>
    ee40:	1f 91       	pop	r17
    ee42:	0f 91       	pop	r16
    ee44:	ff 90       	pop	r15
    ee46:	ef 90       	pop	r14
    ee48:	df 90       	pop	r13
    ee4a:	cf 90       	pop	r12
    ee4c:	08 95       	ret

0000ee4e <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    ee4e:	8f 92       	push	r8
    ee50:	9f 92       	push	r9
    ee52:	af 92       	push	r10
    ee54:	bf 92       	push	r11
    ee56:	cf 92       	push	r12
    ee58:	df 92       	push	r13
    ee5a:	ef 92       	push	r14
    ee5c:	ff 92       	push	r15
    ee5e:	0f 93       	push	r16
    ee60:	1f 93       	push	r17
    ee62:	4b 01       	movw	r8, r22
    ee64:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    ee66:	69 01       	movw	r12, r18
    ee68:	7a 01       	movw	r14, r20
    ee6a:	00 e0       	ldi	r16, 0x00	; 0
    ee6c:	10 e0       	ldi	r17, 0x00	; 0
    ee6e:	20 e0       	ldi	r18, 0x00	; 0
    ee70:	30 e0       	ldi	r19, 0x00	; 0
    ee72:	41 e0       	ldi	r20, 0x01	; 1
    ee74:	c5 01       	movw	r24, r10
    ee76:	b4 01       	movw	r22, r8
    ee78:	0e 94 05 77 	call	0xee0a	; 0xee0a <TIMING_AddRepCallbackEventAt>
    ee7c:	1f 91       	pop	r17
    ee7e:	0f 91       	pop	r16
    ee80:	ff 90       	pop	r15
    ee82:	ef 90       	pop	r14
    ee84:	df 90       	pop	r13
    ee86:	cf 90       	pop	r12
    ee88:	bf 90       	pop	r11
    ee8a:	af 90       	pop	r10
    ee8c:	9f 90       	pop	r9
    ee8e:	8f 90       	pop	r8
    ee90:	08 95       	ret

0000ee92 <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    ee92:	ef 92       	push	r14
    ee94:	ff 92       	push	r15
    ee96:	0f 93       	push	r16
    ee98:	1f 93       	push	r17
    ee9a:	7b 01       	movw	r14, r22
    ee9c:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    ee9e:	80 91 93 18 	lds	r24, 0x1893
    eea2:	90 91 94 18 	lds	r25, 0x1894
    eea6:	a0 91 95 18 	lds	r26, 0x1895
    eeaa:	b0 91 96 18 	lds	r27, 0x1896
    eeae:	8e 0d       	add	r24, r14
    eeb0:	9f 1d       	adc	r25, r15
    eeb2:	a0 1f       	adc	r26, r16
    eeb4:	b1 1f       	adc	r27, r17
    eeb6:	bc 01       	movw	r22, r24
    eeb8:	cd 01       	movw	r24, r26
    eeba:	0e 94 27 77 	call	0xee4e	; 0xee4e <TIMING_AddCallbackEventAt>
    eebe:	1f 91       	pop	r17
    eec0:	0f 91       	pop	r16
    eec2:	ff 90       	pop	r15
    eec4:	ef 90       	pop	r14
    eec6:	08 95       	ret

0000eec8 <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    eec8:	7f 92       	push	r7
    eeca:	8f 92       	push	r8
    eecc:	9f 92       	push	r9
    eece:	af 92       	push	r10
    eed0:	bf 92       	push	r11
    eed2:	cf 92       	push	r12
    eed4:	df 92       	push	r13
    eed6:	ef 92       	push	r14
    eed8:	ff 92       	push	r15
    eeda:	0f 93       	push	r16
    eedc:	1f 93       	push	r17
    eede:	4b 01       	movw	r8, r22
    eee0:	5c 01       	movw	r10, r24
    eee2:	74 2e       	mov	r7, r20
    eee4:	b9 01       	movw	r22, r18
    eee6:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    eee8:	80 91 93 18 	lds	r24, 0x1893
    eeec:	90 91 94 18 	lds	r25, 0x1894
    eef0:	a0 91 95 18 	lds	r26, 0x1895
    eef4:	b0 91 96 18 	lds	r27, 0x1896
    eef8:	88 0d       	add	r24, r8
    eefa:	99 1d       	adc	r25, r9
    eefc:	aa 1d       	adc	r26, r10
    eefe:	bb 1d       	adc	r27, r11
    ef00:	8a 01       	movw	r16, r20
    ef02:	9b 01       	movw	r18, r22
    ef04:	47 2d       	mov	r20, r7
    ef06:	bc 01       	movw	r22, r24
    ef08:	cd 01       	movw	r24, r26
    ef0a:	0e 94 05 77 	call	0xee0a	; 0xee0a <TIMING_AddRepCallbackEventAt>
    ef0e:	1f 91       	pop	r17
    ef10:	0f 91       	pop	r16
    ef12:	ff 90       	pop	r15
    ef14:	ef 90       	pop	r14
    ef16:	df 90       	pop	r13
    ef18:	cf 90       	pop	r12
    ef1a:	bf 90       	pop	r11
    ef1c:	af 90       	pop	r10
    ef1e:	9f 90       	pop	r9
    ef20:	8f 90       	pop	r8
    ef22:	7f 90       	pop	r7
    ef24:	08 95       	ret

0000ef26 <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    ef26:	8f 92       	push	r8
    ef28:	9f 92       	push	r9
    ef2a:	af 92       	push	r10
    ef2c:	bf 92       	push	r11
    ef2e:	cf 92       	push	r12
    ef30:	df 92       	push	r13
    ef32:	ef 92       	push	r14
    ef34:	ff 92       	push	r15
    ef36:	0f 93       	push	r16
    ef38:	1f 93       	push	r17
    ef3a:	e8 2f       	mov	r30, r24
    ef3c:	4a 01       	movw	r8, r20
    ef3e:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    ef40:	68 01       	movw	r12, r16
    ef42:	79 01       	movw	r14, r18
    ef44:	8a 01       	movw	r16, r20
    ef46:	9b 01       	movw	r18, r22
    ef48:	4e 2f       	mov	r20, r30
    ef4a:	c5 01       	movw	r24, r10
    ef4c:	b4 01       	movw	r22, r8
    ef4e:	0e 94 64 77 	call	0xeec8	; 0xeec8 <TIMING_AddRepCallbackEventAfter>
    ef52:	1f 91       	pop	r17
    ef54:	0f 91       	pop	r16
    ef56:	ff 90       	pop	r15
    ef58:	ef 90       	pop	r14
    ef5a:	df 90       	pop	r13
    ef5c:	cf 90       	pop	r12
    ef5e:	bf 90       	pop	r11
    ef60:	af 90       	pop	r10
    ef62:	9f 90       	pop	r9
    ef64:	8f 90       	pop	r8
    ef66:	08 95       	ret

0000ef68 <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    ef68:	ef 92       	push	r14
    ef6a:	ff 92       	push	r15
    ef6c:	0f 93       	push	r16
    ef6e:	1f 93       	push	r17
    ef70:	cf 93       	push	r28
    ef72:	e6 2e       	mov	r14, r22
    ef74:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    ef76:	80 52       	subi	r24, 0x20	; 32
    ef78:	8f 35       	cpi	r24, 0x5F	; 95
    ef7a:	90 f4       	brcc	.+36     	; 0xefa0 <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    ef7c:	95 e0       	ldi	r25, 0x05	; 5
    ef7e:	f9 2e       	mov	r15, r25
    ef80:	8f 9d       	mul	r24, r15
    ef82:	80 01       	movw	r16, r0
    ef84:	11 24       	eor	r1, r1
    ef86:	0e 5a       	subi	r16, 0xAE	; 174
    ef88:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    ef8a:	21 e0       	ldi	r18, 0x01	; 1
    ef8c:	8f ef       	ldi	r24, 0xFF	; 255
    ef8e:	0e 94 6c 6e 	call	0xdcd8	; 0xdcd8 <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    ef92:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    ef94:	2f 2d       	mov	r18, r15
    ef96:	4c 2f       	mov	r20, r28
    ef98:	6e 2d       	mov	r22, r14
    ef9a:	c8 01       	movw	r24, r16
    ef9c:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <LCD_WritePage_F>
    efa0:	cf 91       	pop	r28
    efa2:	1f 91       	pop	r17
    efa4:	0f 91       	pop	r16
    efa6:	ff 90       	pop	r15
    efa8:	ef 90       	pop	r14
    efaa:	08 95       	ret

0000efac <TERMFONT_DisplayString>:
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
    efac:	0f 93       	push	r16
    efae:	1f 93       	push	r17
    efb0:	cf 93       	push	r28
    efb2:	df 93       	push	r29
    efb4:	ec 01       	movw	r28, r24
    efb6:	06 2f       	mov	r16, r22
    efb8:	14 2f       	mov	r17, r20
  
    if (pTextString == NULL) { return; }
    efba:	89 2b       	or	r24, r25
    efbc:	61 f0       	breq	.+24     	; 0xefd6 <TERMFONT_DisplayString+0x2a>
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
	column += TERMFONT_CHAR_WIDTH;
    efbe:	88 81       	ld	r24, Y
    efc0:	88 23       	and	r24, r24
    efc2:	49 f0       	breq	.+18     	; 0xefd6 <TERMFONT_DisplayString+0x2a>
  
    if (pTextString == NULL) { return; }
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
    efc4:	41 2f       	mov	r20, r17
    efc6:	60 2f       	mov	r22, r16
    efc8:	89 91       	ld	r24, Y+
    efca:	0e 94 b4 77 	call	0xef68	; 0xef68 <TERMFONT_DisplayChar>
	column += TERMFONT_CHAR_WIDTH;
    efce:	1a 5f       	subi	r17, 0xFA	; 250
    efd0:	88 81       	ld	r24, Y
    efd2:	88 23       	and	r24, r24
    efd4:	b9 f7       	brne	.-18     	; 0xefc4 <TERMFONT_DisplayString+0x18>
    efd6:	df 91       	pop	r29
    efd8:	cf 91       	pop	r28
    efda:	1f 91       	pop	r17
    efdc:	0f 91       	pop	r16
    efde:	08 95       	ret

0000efe0 <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    efe0:	20 91 64 00 	lds	r18, 0x0064
    efe4:	27 7f       	andi	r18, 0xF7	; 247
    efe6:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    efea:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    efec:	28 e0       	ldi	r18, 0x08	; 8
    efee:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    eff2:	20 e1       	ldi	r18, 0x10	; 16
    eff4:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    eff8:	20 91 81 00 	lds	r18, 0x0081
    effc:	21 60       	ori	r18, 0x01	; 1
    effe:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f002:	90 93 ab 18 	sts	0x18AB, r25
    f006:	80 93 aa 18 	sts	0x18AA, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f00a:	2b e9       	ldi	r18, 0x9B	; 155
    f00c:	38 e1       	ldi	r19, 0x18	; 24
    f00e:	40 e1       	ldi	r20, 0x10	; 16
    f010:	58 e7       	ldi	r21, 0x78	; 120
    f012:	6a e0       	ldi	r22, 0x0A	; 10
    f014:	70 e0       	ldi	r23, 0x00	; 0
    f016:	80 e0       	ldi	r24, 0x00	; 0
    f018:	90 e0       	ldi	r25, 0x00	; 0
    f01a:	0e 94 49 77 	call	0xee92	; 0xee92 <TIMING_AddCallbackEventAfter>
    f01e:	08 95       	ret

0000f020 <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f020:	ef 92       	push	r14
    f022:	ff 92       	push	r15
    f024:	0f 93       	push	r16
    f026:	1f 93       	push	r17
    f028:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f02a:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f02c:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f02e:	e0 91 aa 18 	lds	r30, 0x18AA
    f032:	f0 91 ab 18 	lds	r31, 0x18AB
    f036:	81 85       	ldd	r24, Z+9	; 0x09
    f038:	84 30       	cpi	r24, 0x04	; 4
    f03a:	b0 f1       	brcs	.+108    	; 0xf0a8 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f03c:	cf 01       	movw	r24, r30
    f03e:	0e 94 57 73 	call	0xe6ae	; 0xe6ae <FIFO_GetUint16>
    f042:	7c 01       	movw	r14, r24
    f044:	00 27       	eor	r16, r16
    f046:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f048:	80 91 aa 18 	lds	r24, 0x18AA
    f04c:	90 91 ab 18 	lds	r25, 0x18AB
    f050:	0e 94 57 73 	call	0xe6ae	; 0xe6ae <FIFO_GetUint16>
    f054:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f056:	01 97       	sbiw	r24, 0x01	; 1
    f058:	31 f4       	brne	.+12     	; 0xf066 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f05a:	10 92 74 02 	sts	0x0274, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f05e:	80 91 81 00 	lds	r24, 0x0081
    f062:	8e 7f       	andi	r24, 0xFE	; 254
    f064:	06 c0       	rjmp	.+12     	; 0xf072 <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f066:	81 e0       	ldi	r24, 0x01	; 1
    f068:	80 93 74 02 	sts	0x0274, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f06c:	80 91 81 00 	lds	r24, 0x0081
    f070:	81 60       	ori	r24, 0x01	; 1
    f072:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f076:	9a 01       	movw	r18, r20
    f078:	36 95       	lsr	r19
    f07a:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f07c:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f07e:	9a 01       	movw	r18, r20
    f080:	23 2f       	mov	r18, r19
    f082:	33 27       	eor	r19, r19
    f084:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f086:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f08a:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f08e:	25 2f       	mov	r18, r21
    f090:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f092:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f096:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f09a:	2b e9       	ldi	r18, 0x9B	; 155
    f09c:	38 e1       	ldi	r19, 0x18	; 24
    f09e:	40 e1       	ldi	r20, 0x10	; 16
    f0a0:	58 e7       	ldi	r21, 0x78	; 120
    f0a2:	c8 01       	movw	r24, r16
    f0a4:	b7 01       	movw	r22, r14
    f0a6:	0f c0       	rjmp	.+30     	; 0xf0c6 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f0a8:	10 92 74 02 	sts	0x0274, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f0ac:	80 91 81 00 	lds	r24, 0x0081
    f0b0:	8e 7f       	andi	r24, 0xFE	; 254
    f0b2:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f0b6:	2b e9       	ldi	r18, 0x9B	; 155
    f0b8:	38 e1       	ldi	r19, 0x18	; 24
    f0ba:	40 e1       	ldi	r20, 0x10	; 16
    f0bc:	58 e7       	ldi	r21, 0x78	; 120
    f0be:	6a e0       	ldi	r22, 0x0A	; 10
    f0c0:	70 e0       	ldi	r23, 0x00	; 0
    f0c2:	80 e0       	ldi	r24, 0x00	; 0
    f0c4:	90 e0       	ldi	r25, 0x00	; 0
    f0c6:	0e 94 49 77 	call	0xee92	; 0xee92 <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f0ca:	cf bf       	out	0x3f, r28	; 63
    f0cc:	cf 91       	pop	r28
    f0ce:	1f 91       	pop	r17
    f0d0:	0f 91       	pop	r16
    f0d2:	ff 90       	pop	r15
    f0d4:	ef 90       	pop	r14
    f0d6:	08 95       	ret

0000f0d8 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f0d8:	10 92 74 02 	sts	0x0274, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f0dc:	80 91 81 00 	lds	r24, 0x0081
    f0e0:	8e 7f       	andi	r24, 0xFE	; 254
    f0e2:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f0e6:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f0ea:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f0ee:	8b e9       	ldi	r24, 0x9B	; 155
    f0f0:	98 e1       	ldi	r25, 0x18	; 24
    f0f2:	0e 94 c3 76 	call	0xed86	; 0xed86 <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f0f6:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f0f8:	80 91 64 00 	lds	r24, 0x0064
    f0fc:	88 60       	ori	r24, 0x08	; 8
    f0fe:	80 93 64 00 	sts	0x0064, r24
    f102:	08 95       	ret

0000f104 <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f104:	80 91 74 02 	lds	r24, 0x0274
}
    f108:	99 27       	eor	r25, r25
    f10a:	08 95       	ret

0000f10c <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f10c:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f10e:	e0 91 ac 18 	lds	r30, 0x18AC
    f112:	f0 91 ad 18 	lds	r31, 0x18AD
    f116:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f118:	24 30       	cpi	r18, 0x04	; 4
    f11a:	08 f4       	brcc	.+2      	; 0xf11e <SONG_CallbackControlTask_F+0x12>
    f11c:	41 c0       	rjmp	.+130    	; 0xf1a0 <SONG_CallbackControlTask_F+0x94>
    f11e:	e0 91 bd 18 	lds	r30, 0x18BD
    f122:	f0 91 be 18 	lds	r31, 0x18BE
    f126:	85 91       	lpm	r24, Z+
    f128:	94 91       	lpm	r25, Z+
    f12a:	89 2b       	or	r24, r25
    f12c:	09 f4       	brne	.+2      	; 0xf130 <SONG_CallbackControlTask_F+0x24>
    f12e:	38 c0       	rjmp	.+112    	; 0xf1a0 <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f130:	80 91 bd 18 	lds	r24, 0x18BD
    f134:	90 91 be 18 	lds	r25, 0x18BE
    f138:	fc 01       	movw	r30, r24
    f13a:	65 91       	lpm	r22, Z+
    f13c:	74 91       	lpm	r23, Z+
    f13e:	c2 2f       	mov	r28, r18
    f140:	c4 50       	subi	r28, 0x04	; 4
    f142:	2f ef       	ldi	r18, 0xFF	; 255
    f144:	6f 3f       	cpi	r22, 0xFF	; 255
    f146:	72 07       	cpc	r23, r18
    f148:	49 f4       	brne	.+18     	; 0xf15c <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f14a:	80 91 bf 18 	lds	r24, 0x18BF
    f14e:	90 91 c0 18 	lds	r25, 0x18C0
    f152:	90 93 be 18 	sts	0x18BE, r25
    f156:	80 93 bd 18 	sts	0x18BD, r24
    f15a:	1e c0       	rjmp	.+60     	; 0xf198 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f15c:	02 96       	adiw	r24, 0x02	; 2
    f15e:	90 93 be 18 	sts	0x18BE, r25
    f162:	80 93 bd 18 	sts	0x18BD, r24
    f166:	80 91 ac 18 	lds	r24, 0x18AC
    f16a:	90 91 ad 18 	lds	r25, 0x18AD
    f16e:	0e 94 44 73 	call	0xe688	; 0xe688 <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f172:	80 91 bd 18 	lds	r24, 0x18BD
    f176:	90 91 be 18 	lds	r25, 0x18BE
    f17a:	fc 01       	movw	r30, r24
    f17c:	02 96       	adiw	r24, 0x02	; 2
    f17e:	90 93 be 18 	sts	0x18BE, r25
    f182:	80 93 bd 18 	sts	0x18BD, r24
    f186:	85 91       	lpm	r24, Z+
    f188:	94 91       	lpm	r25, Z+
    f18a:	bc 01       	movw	r22, r24
    f18c:	80 91 ac 18 	lds	r24, 0x18AC
    f190:	90 91 ad 18 	lds	r25, 0x18AD
    f194:	0e 94 44 73 	call	0xe688	; 0xe688 <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f198:	2c 2f       	mov	r18, r28
    f19a:	c4 30       	cpi	r28, 0x04	; 4
    f19c:	08 f0       	brcs	.+2      	; 0xf1a0 <SONG_CallbackControlTask_F+0x94>
    f19e:	bf cf       	rjmp	.-130    	; 0xf11e <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    f1a0:	e0 91 bd 18 	lds	r30, 0x18BD
    f1a4:	f0 91 be 18 	lds	r31, 0x18BE
    f1a8:	85 91       	lpm	r24, Z+
    f1aa:	94 91       	lpm	r25, Z+
    f1ac:	89 2b       	or	r24, r25
    f1ae:	69 f4       	brne	.+26     	; 0xf1ca <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    f1b0:	e0 91 ac 18 	lds	r30, 0x18AC
    f1b4:	f0 91 ad 18 	lds	r31, 0x18AD
    f1b8:	81 85       	ldd	r24, Z+9	; 0x09
    f1ba:	88 23       	and	r24, r24
    f1bc:	31 f4       	brne	.+12     	; 0xf1ca <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    f1be:	0e 94 82 78 	call	0xf104	; 0xf104 <SOUND_IsToneBusy>
    f1c2:	88 23       	and	r24, r24
    f1c4:	11 f4       	brne	.+4      	; 0xf1ca <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    f1c6:	0e 94 6c 78 	call	0xf0d8	; 0xf0d8 <SOUND_StopAudio>
    f1ca:	cf 91       	pop	r28
    f1cc:	08 95       	ret

0000f1ce <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    f1ce:	0e 94 6c 78 	call	0xf0d8	; 0xf0d8 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    f1d2:	8e ea       	ldi	r24, 0xAE	; 174
    f1d4:	98 e1       	ldi	r25, 0x18	; 24
    f1d6:	0e 94 c3 76 	call	0xed86	; 0xed86 <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    f1da:	80 91 ac 18 	lds	r24, 0x18AC
    f1de:	90 91 ad 18 	lds	r25, 0x18AD
    f1e2:	0e 94 20 73 	call	0xe640	; 0xe640 <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    f1e6:	10 92 75 02 	sts	0x0275, r1
    f1ea:	08 95       	ret

0000f1ec <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    f1ec:	0f 93       	push	r16
    f1ee:	1f 93       	push	r17
    f1f0:	cf 93       	push	r28
    f1f2:	df 93       	push	r29
    f1f4:	ec 01       	movw	r28, r24
    f1f6:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    f1f8:	80 91 75 02 	lds	r24, 0x0275
    f1fc:	81 30       	cpi	r24, 0x01	; 1
    f1fe:	11 f4       	brne	.+4      	; 0xf204 <SONG_StartTune_F+0x18>
		SONG_StopTune();
    f200:	0e 94 e7 78 	call	0xf1ce	; 0xf1ce <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    f204:	d0 93 ad 18 	sts	0x18AD, r29
    f208:	c0 93 ac 18 	sts	0x18AC, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    f20c:	81 e0       	ldi	r24, 0x01	; 1
    f20e:	80 93 75 02 	sts	0x0275, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    f212:	10 93 c0 18 	sts	0x18C0, r17
    f216:	00 93 bf 18 	sts	0x18BF, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    f21a:	10 93 be 18 	sts	0x18BE, r17
    f21e:	00 93 bd 18 	sts	0x18BD, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    f222:	0e ea       	ldi	r16, 0xAE	; 174
    f224:	18 e1       	ldi	r17, 0x18	; 24
    f226:	26 e8       	ldi	r18, 0x86	; 134
    f228:	38 e7       	ldi	r19, 0x78	; 120
    f22a:	49 e0       	ldi	r20, 0x09	; 9
    f22c:	50 e0       	ldi	r21, 0x00	; 0
    f22e:	60 e0       	ldi	r22, 0x00	; 0
    f230:	70 e0       	ldi	r23, 0x00	; 0
    f232:	8f ef       	ldi	r24, 0xFF	; 255
    f234:	0e 94 93 77 	call	0xef26	; 0xef26 <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    f238:	ce 01       	movw	r24, r28
    f23a:	0e 94 f0 77 	call	0xefe0	; 0xefe0 <SOUND_StartAudio>
    f23e:	df 91       	pop	r29
    f240:	cf 91       	pop	r28
    f242:	1f 91       	pop	r17
    f244:	0f 91       	pop	r16
    f246:	08 95       	ret

0000f248 <__udivmodqi4>:
    f248:	99 1b       	sub	r25, r25
    f24a:	79 e0       	ldi	r23, 0x09	; 9
    f24c:	04 c0       	rjmp	.+8      	; 0xf256 <__udivmodqi4_ep>

0000f24e <__udivmodqi4_loop>:
    f24e:	99 1f       	adc	r25, r25
    f250:	96 17       	cp	r25, r22
    f252:	08 f0       	brcs	.+2      	; 0xf256 <__udivmodqi4_ep>
    f254:	96 1b       	sub	r25, r22

0000f256 <__udivmodqi4_ep>:
    f256:	88 1f       	adc	r24, r24
    f258:	7a 95       	dec	r23
    f25a:	c9 f7       	brne	.-14     	; 0xf24e <__udivmodqi4_loop>
    f25c:	80 95       	com	r24
    f25e:	08 95       	ret

0000f260 <__udivmodhi4>:
    f260:	aa 1b       	sub	r26, r26
    f262:	bb 1b       	sub	r27, r27
    f264:	51 e1       	ldi	r21, 0x11	; 17
    f266:	07 c0       	rjmp	.+14     	; 0xf276 <__udivmodhi4_ep>

0000f268 <__udivmodhi4_loop>:
    f268:	aa 1f       	adc	r26, r26
    f26a:	bb 1f       	adc	r27, r27
    f26c:	a6 17       	cp	r26, r22
    f26e:	b7 07       	cpc	r27, r23
    f270:	10 f0       	brcs	.+4      	; 0xf276 <__udivmodhi4_ep>
    f272:	a6 1b       	sub	r26, r22
    f274:	b7 0b       	sbc	r27, r23

0000f276 <__udivmodhi4_ep>:
    f276:	88 1f       	adc	r24, r24
    f278:	99 1f       	adc	r25, r25
    f27a:	5a 95       	dec	r21
    f27c:	a9 f7       	brne	.-22     	; 0xf268 <__udivmodhi4_loop>
    f27e:	80 95       	com	r24
    f280:	90 95       	com	r25
    f282:	bc 01       	movw	r22, r24
    f284:	cd 01       	movw	r24, r26
    f286:	08 95       	ret

0000f288 <__divmodhi4>:
    f288:	97 fb       	bst	r25, 7
    f28a:	09 2e       	mov	r0, r25
    f28c:	07 26       	eor	r0, r23
    f28e:	0a d0       	rcall	.+20     	; 0xf2a4 <__divmodhi4_neg1>
    f290:	77 fd       	sbrc	r23, 7
    f292:	04 d0       	rcall	.+8      	; 0xf29c <__divmodhi4_neg2>
    f294:	e5 df       	rcall	.-54     	; 0xf260 <__udivmodhi4>
    f296:	06 d0       	rcall	.+12     	; 0xf2a4 <__divmodhi4_neg1>
    f298:	00 20       	and	r0, r0
    f29a:	1a f4       	brpl	.+6      	; 0xf2a2 <__divmodhi4_exit>

0000f29c <__divmodhi4_neg2>:
    f29c:	70 95       	com	r23
    f29e:	61 95       	neg	r22
    f2a0:	7f 4f       	sbci	r23, 0xFF	; 255

0000f2a2 <__divmodhi4_exit>:
    f2a2:	08 95       	ret

0000f2a4 <__divmodhi4_neg1>:
    f2a4:	f6 f7       	brtc	.-4      	; 0xf2a2 <__divmodhi4_exit>
    f2a6:	90 95       	com	r25
    f2a8:	81 95       	neg	r24
    f2aa:	9f 4f       	sbci	r25, 0xFF	; 255
    f2ac:	08 95       	ret

0000f2ae <__udivmodsi4>:
    f2ae:	a1 e2       	ldi	r26, 0x21	; 33
    f2b0:	1a 2e       	mov	r1, r26
    f2b2:	aa 1b       	sub	r26, r26
    f2b4:	bb 1b       	sub	r27, r27
    f2b6:	fd 01       	movw	r30, r26
    f2b8:	0d c0       	rjmp	.+26     	; 0xf2d4 <__udivmodsi4_ep>

0000f2ba <__udivmodsi4_loop>:
    f2ba:	aa 1f       	adc	r26, r26
    f2bc:	bb 1f       	adc	r27, r27
    f2be:	ee 1f       	adc	r30, r30
    f2c0:	ff 1f       	adc	r31, r31
    f2c2:	a2 17       	cp	r26, r18
    f2c4:	b3 07       	cpc	r27, r19
    f2c6:	e4 07       	cpc	r30, r20
    f2c8:	f5 07       	cpc	r31, r21
    f2ca:	20 f0       	brcs	.+8      	; 0xf2d4 <__udivmodsi4_ep>
    f2cc:	a2 1b       	sub	r26, r18
    f2ce:	b3 0b       	sbc	r27, r19
    f2d0:	e4 0b       	sbc	r30, r20
    f2d2:	f5 0b       	sbc	r31, r21

0000f2d4 <__udivmodsi4_ep>:
    f2d4:	66 1f       	adc	r22, r22
    f2d6:	77 1f       	adc	r23, r23
    f2d8:	88 1f       	adc	r24, r24
    f2da:	99 1f       	adc	r25, r25
    f2dc:	1a 94       	dec	r1
    f2de:	69 f7       	brne	.-38     	; 0xf2ba <__udivmodsi4_loop>
    f2e0:	60 95       	com	r22
    f2e2:	70 95       	com	r23
    f2e4:	80 95       	com	r24
    f2e6:	90 95       	com	r25
    f2e8:	9b 01       	movw	r18, r22
    f2ea:	ac 01       	movw	r20, r24
    f2ec:	bd 01       	movw	r22, r26
    f2ee:	cf 01       	movw	r24, r30
    f2f0:	08 95       	ret

0000f2f2 <_exit>:
    f2f2:	ff cf       	rjmp	.-2      	; 0xf2f2 <_exit>
