
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  0000fb6e  0000fc02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000fb6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  00800270  00800270  0000fc72  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  0000fc72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  00010532  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000132b1  00000000  00000000  00013223  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030fe  00000000  00000000  000264d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ae76  00000000  00000000  000295d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fff  00000000  00000000  00034448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  00039447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		"\"128 64 2 1\",\r\n"
		"\"   c #FFFFFF\",\r\n"
		"\".  c #000000\",\r\n";			

void SendChar( char ch )
{
       0:	0c 94 1b 69 	jmp	0xd236	; 0xd236 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_DrawProgressBar(uint8_t Xstart, uint8_t Ystart, uint8_t height, uint8_t lenght, uint8_t maxvalue, uint8_t currvalue, uint8_t peakvalue)
{
      10:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 * called POWER_WakeupCallback(void)
 * 
 * It enables the disabled modules and jtag again when doing a full wakeup
 */
void POWER_EnterPowerSaveMode( void )
{
      18:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 cd 73 	jmp	0xe79a	; 0xe79a <__vector_9>
/*!
 * \param  pPictureInRam  Pointer to picture in ram with same size as LCD
 */
void PICTURE_CopyFullscreenRamToLcd (const uint8_t * pPictureInRam)
{
  LCD_WriteFrameBuffer( pPictureInRam );
      28:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
		// Check if bottom of element is below bottom of visible area.
		if ((element->startPage + element->height) > (form->firstVisiblePage + LCD_PAGE_COUNT)) {
			visibility->lastPage = (form->firstVisiblePage + LCD_PAGE_COUNT - 1) -
					element->startPage;
		} else {
			visibility->lastPage = element->height - 1;
      2c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      30:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      34:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
 * \param  pTextString  Pointer to null-terminated string in flash
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString_F(char const CAL_PGM(* pTextString), uint8_t page, uint8_t column)
{
      38:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      3c:	0c 94 c7 78 	jmp	0xf18e	; 0xf18e <__vector_15>
      40:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      44:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      48:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      4c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      50:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      54:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      58:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      5c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      60:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      64:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      68:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      6c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      70:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      74:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      78:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      7c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      80:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      84:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      88:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      8c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      90:	0c 94 c2 69 	jmp	0xd384	; 0xd384 <__vector_36>
      94:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      98:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      9c:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      a8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      ac:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      b8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      bc:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c0:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c4:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>
      c8:	0c 94 3a 69 	jmp	0xd274	; 0xd274 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <FORMS_focusIndicator>:
    d052:	3e 1c 08 00                                         >...

0000d056 <TERMFONT_fontdata>:
    d056:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d066:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d076:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d086:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d096:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d6:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e6:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f6:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d106:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d116:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d126:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d136:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d146:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d156:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d166:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d176:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d186:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d196:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b6:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c6:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d206:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d216:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d226:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d236 <__ctors_end>:
    d236:	11 24       	eor	r1, r1
    d238:	1f be       	out	0x3f, r1	; 63
    d23a:	cf ef       	ldi	r28, 0xFF	; 255
    d23c:	d1 e2       	ldi	r29, 0x21	; 33
    d23e:	de bf       	out	0x3e, r29	; 62
    d240:	cd bf       	out	0x3d, r28	; 61

0000d242 <__do_copy_data>:
    d242:	12 e0       	ldi	r17, 0x02	; 2
    d244:	a0 e0       	ldi	r26, 0x00	; 0
    d246:	b2 e0       	ldi	r27, 0x02	; 2
    d248:	ee e6       	ldi	r30, 0x6E	; 110
    d24a:	fb ef       	ldi	r31, 0xFB	; 251
    d24c:	00 e0       	ldi	r16, 0x00	; 0
    d24e:	0b bf       	out	0x3b, r16	; 59
    d250:	02 c0       	rjmp	.+4      	; 0xd256 <__do_copy_data+0x14>
    d252:	07 90       	elpm	r0, Z+
    d254:	0d 92       	st	X+, r0
    d256:	a0 37       	cpi	r26, 0x70	; 112
    d258:	b1 07       	cpc	r27, r17
    d25a:	d9 f7       	brne	.-10     	; 0xd252 <__do_copy_data+0x10>

0000d25c <__do_clear_bss>:
    d25c:	18 e1       	ldi	r17, 0x18	; 24
    d25e:	a0 e7       	ldi	r26, 0x70	; 112
    d260:	b2 e0       	ldi	r27, 0x02	; 2
    d262:	01 c0       	rjmp	.+2      	; 0xd266 <.do_clear_bss_start>

0000d264 <.do_clear_bss_loop>:
    d264:	1d 92       	st	X+, r1

0000d266 <.do_clear_bss_start>:
    d266:	a1 3c       	cpi	r26, 0xC1	; 193
    d268:	b1 07       	cpc	r27, r17
    d26a:	e1 f7       	brne	.-8      	; 0xd264 <.do_clear_bss_loop>
    d26c:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <main>
    d270:	0c 94 b6 7d 	jmp	0xfb6c	; 0xfb6c <_exit>

0000d274 <__bad_interrupt>:
    d274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d278 <strcmp>:
    d278:	fb 01       	movw	r30, r22
    d27a:	dc 01       	movw	r26, r24
    d27c:	8d 91       	ld	r24, X+
    d27e:	01 90       	ld	r0, Z+
    d280:	80 19       	sub	r24, r0
    d282:	01 10       	cpse	r0, r1
    d284:	d9 f3       	breq	.-10     	; 0xd27c <strcmp+0x4>
    d286:	99 0b       	sbc	r25, r25
    d288:	08 95       	ret

0000d28a <strncpy>:
    d28a:	fb 01       	movw	r30, r22
    d28c:	dc 01       	movw	r26, r24
    d28e:	41 50       	subi	r20, 0x01	; 1
    d290:	50 40       	sbci	r21, 0x00	; 0
    d292:	48 f0       	brcs	.+18     	; 0xd2a6 <strncpy+0x1c>
    d294:	01 90       	ld	r0, Z+
    d296:	0d 92       	st	X+, r0
    d298:	00 20       	and	r0, r0
    d29a:	c9 f7       	brne	.-14     	; 0xd28e <strncpy+0x4>
    d29c:	01 c0       	rjmp	.+2      	; 0xd2a0 <strncpy+0x16>
    d29e:	1d 92       	st	X+, r1
    d2a0:	41 50       	subi	r20, 0x01	; 1
    d2a2:	50 40       	sbci	r21, 0x00	; 0
    d2a4:	e0 f7       	brcc	.-8      	; 0xd29e <strncpy+0x14>
    d2a6:	08 95       	ret

0000d2a8 <__eerd_word>:
    d2a8:	cf 92       	push	r12
    d2aa:	df 92       	push	r13
    d2ac:	ef 92       	push	r14
    d2ae:	ff 92       	push	r15
    d2b0:	0f 93       	push	r16
    d2b2:	1f 93       	push	r17
    d2b4:	7c 01       	movw	r14, r24
    d2b6:	6b 01       	movw	r12, r22
    d2b8:	fb 01       	movw	r30, r22
    d2ba:	09 95       	icall
    d2bc:	08 2f       	mov	r16, r24
    d2be:	c7 01       	movw	r24, r14
    d2c0:	01 96       	adiw	r24, 0x01	; 1
    d2c2:	f6 01       	movw	r30, r12
    d2c4:	09 95       	icall
    d2c6:	18 2f       	mov	r17, r24
    d2c8:	c8 01       	movw	r24, r16
    d2ca:	1f 91       	pop	r17
    d2cc:	0f 91       	pop	r16
    d2ce:	ff 90       	pop	r15
    d2d0:	ef 90       	pop	r14
    d2d2:	df 90       	pop	r13
    d2d4:	cf 90       	pop	r12
    d2d6:	08 95       	ret

0000d2d8 <itoa>:
    d2d8:	fb 01       	movw	r30, r22
    d2da:	9f 01       	movw	r18, r30
    d2dc:	e8 94       	clt
    d2de:	42 30       	cpi	r20, 0x02	; 2
    d2e0:	c4 f0       	brlt	.+48     	; 0xd312 <itoa+0x3a>
    d2e2:	45 32       	cpi	r20, 0x25	; 37
    d2e4:	b4 f4       	brge	.+44     	; 0xd312 <itoa+0x3a>
    d2e6:	4a 30       	cpi	r20, 0x0A	; 10
    d2e8:	29 f4       	brne	.+10     	; 0xd2f4 <itoa+0x1c>
    d2ea:	97 fb       	bst	r25, 7
    d2ec:	1e f4       	brtc	.+6      	; 0xd2f4 <itoa+0x1c>
    d2ee:	90 95       	com	r25
    d2f0:	81 95       	neg	r24
    d2f2:	9f 4f       	sbci	r25, 0xFF	; 255
    d2f4:	64 2f       	mov	r22, r20
    d2f6:	77 27       	eor	r23, r23
    d2f8:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    d2fc:	80 5d       	subi	r24, 0xD0	; 208
    d2fe:	8a 33       	cpi	r24, 0x3A	; 58
    d300:	0c f0       	brlt	.+2      	; 0xd304 <itoa+0x2c>
    d302:	89 5d       	subi	r24, 0xD9	; 217
    d304:	81 93       	st	Z+, r24
    d306:	cb 01       	movw	r24, r22
    d308:	00 97       	sbiw	r24, 0x00	; 0
    d30a:	a1 f7       	brne	.-24     	; 0xd2f4 <itoa+0x1c>
    d30c:	16 f4       	brtc	.+4      	; 0xd312 <itoa+0x3a>
    d30e:	5d e2       	ldi	r21, 0x2D	; 45
    d310:	51 93       	st	Z+, r21
    d312:	10 82       	st	Z, r1
    d314:	c9 01       	movw	r24, r18
    d316:	0c 94 8d 69 	jmp	0xd31a	; 0xd31a <strrev>

0000d31a <strrev>:
    d31a:	dc 01       	movw	r26, r24
    d31c:	fc 01       	movw	r30, r24
    d31e:	67 2f       	mov	r22, r23
    d320:	71 91       	ld	r23, Z+
    d322:	77 23       	and	r23, r23
    d324:	e1 f7       	brne	.-8      	; 0xd31e <strrev+0x4>
    d326:	32 97       	sbiw	r30, 0x02	; 2
    d328:	04 c0       	rjmp	.+8      	; 0xd332 <strrev+0x18>
    d32a:	7c 91       	ld	r23, X
    d32c:	6d 93       	st	X+, r22
    d32e:	70 83       	st	Z, r23
    d330:	62 91       	ld	r22, -Z
    d332:	ae 17       	cp	r26, r30
    d334:	bf 07       	cpc	r27, r31
    d336:	c8 f3       	brcs	.-14     	; 0xd32a <strrev+0x10>
    d338:	08 95       	ret

0000d33a <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d33a:	f9 99       	sbic	0x1f, 1	; 31
    d33c:	fe cf       	rjmp	.-4      	; 0xd33a <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d33e:	92 bd       	out	0x22, r25	; 34
    d340:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d342:	f8 9a       	sbi	0x1f, 0	; 31
    d344:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d346:	99 27       	eor	r25, r25
    d348:	08 95       	ret

0000d34a <UnknownError>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
    d34a:	0f 93       	push	r16
    d34c:	1f 93       	push	r17
	POPUP_MsgBox( 14, 1, 10, "Unknown error!", NULL );
    d34e:	00 e0       	ldi	r16, 0x00	; 0
    d350:	10 e0       	ldi	r17, 0x00	; 0
    d352:	20 e0       	ldi	r18, 0x00	; 0
    d354:	32 e0       	ldi	r19, 0x02	; 2
    d356:	4a e0       	ldi	r20, 0x0A	; 10
    d358:	61 e0       	ldi	r22, 0x01	; 1
    d35a:	8e e0       	ldi	r24, 0x0E	; 14
    d35c:	0e 94 cf 70 	call	0xe19e	; 0xe19e <POPUP_MsgBox>
	for (;;) {}
    d360:	ff cf       	rjmp	.-2      	; 0xd360 <UnknownError+0x16>

0000d362 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d362:	cf 93       	push	r28
    d364:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d366:	8a 30       	cpi	r24, 0x0A	; 10
    d368:	19 f4       	brne	.+6      	; 0xd370 <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d36a:	8d e0       	ldi	r24, 0x0D	; 13
    d36c:	0e 94 b1 69 	call	0xd362	; 0xd362 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d370:	80 91 c8 00 	lds	r24, 0x00C8
    d374:	85 ff       	sbrs	r24, 5
    d376:	fc cf       	rjmp	.-8      	; 0xd370 <uart_putchar+0xe>
      UDR1 = c;
    d378:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d37c:	80 e0       	ldi	r24, 0x00	; 0
    d37e:	90 e0       	ldi	r25, 0x00	; 0
    d380:	cf 91       	pop	r28
    d382:	08 95       	ret

0000d384 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d384:	1f 92       	push	r1
    d386:	0f 92       	push	r0
    d388:	0f b6       	in	r0, 0x3f	; 63
    d38a:	0f 92       	push	r0
    d38c:	11 24       	eor	r1, r1
    d38e:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d390:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d394:	80 91 ce 00 	lds	r24, 0x00CE
    d398:	80 93 81 02 	sts	0x0281, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d39c:	81 e0       	ldi	r24, 0x01	; 1
    d39e:	80 93 82 02 	sts	0x0282, r24
    d3a2:	8f 91       	pop	r24
    d3a4:	0f 90       	pop	r0
    d3a6:	0f be       	out	0x3f, r0	; 63
    d3a8:	0f 90       	pop	r0
    d3aa:	1f 90       	pop	r1
    d3ac:	18 95       	reti

0000d3ae <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d3ae:	88 e9       	ldi	r24, 0x98	; 152
    d3b0:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d3b4:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d3b8:	87 e0       	ldi	r24, 0x07	; 7
    d3ba:	80 93 cc 00 	sts	0x00CC, r24
    d3be:	08 95       	ret

0000d3c0 <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    d3c0:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    d3c2:	80 53       	subi	r24, 0x30	; 48
    d3c4:	8a 30       	cpi	r24, 0x0A	; 10
    d3c6:	10 f4       	brcc	.+4      	; 0xd3cc <xtod+0xc>
    d3c8:	99 27       	eor	r25, r25
    d3ca:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    d3cc:	89 2f       	mov	r24, r25
    d3ce:	81 54       	subi	r24, 0x41	; 65
    d3d0:	86 30       	cpi	r24, 0x06	; 6
    d3d2:	10 f4       	brcc	.+4      	; 0xd3d8 <xtod+0x18>
    d3d4:	97 53       	subi	r25, 0x37	; 55
    d3d6:	05 c0       	rjmp	.+10     	; 0xd3e2 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    d3d8:	89 2f       	mov	r24, r25
    d3da:	81 56       	subi	r24, 0x61	; 97
    d3dc:	86 30       	cpi	r24, 0x06	; 6
    d3de:	20 f4       	brcc	.+8      	; 0xd3e8 <xtod+0x28>
    d3e0:	97 55       	subi	r25, 0x57	; 87
    d3e2:	89 2f       	mov	r24, r25
    d3e4:	99 27       	eor	r25, r25
    d3e6:	08 95       	ret
 return c=0;        // not Hex digit
    d3e8:	80 e0       	ldi	r24, 0x00	; 0
    d3ea:	90 e0       	ldi	r25, 0x00	; 0
}
    d3ec:	08 95       	ret

0000d3ee <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    d3ee:	ef 92       	push	r14
    d3f0:	ff 92       	push	r15
    d3f2:	0f 93       	push	r16
    d3f4:	1f 93       	push	r17
    d3f6:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    d3f8:	80 81       	ld	r24, Z
    d3fa:	88 23       	and	r24, r24
    d3fc:	81 f0       	breq	.+32     	; 0xd41e <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    d3fe:	8f 01       	movw	r16, r30
    d400:	0f 5f       	subi	r16, 0xFF	; 255
    d402:	1f 4f       	sbci	r17, 0xFF	; 255
    d404:	7b 01       	movw	r14, r22
    d406:	94 e0       	ldi	r25, 0x04	; 4
    d408:	ee 0c       	add	r14, r14
    d40a:	ff 1c       	adc	r15, r15
    d40c:	9a 95       	dec	r25
    d40e:	e1 f7       	brne	.-8      	; 0xd408 <HextoDec+0x1a>
    d410:	0e 94 e0 69 	call	0xd3c0	; 0xd3c0 <xtod>
    d414:	f8 01       	movw	r30, r16
    d416:	b7 01       	movw	r22, r14
    d418:	68 0f       	add	r22, r24
    d41a:	71 1d       	adc	r23, r1
    d41c:	ed cf       	rjmp	.-38     	; 0xd3f8 <HextoDec+0xa>
}
    d41e:	cb 01       	movw	r24, r22
    d420:	1f 91       	pop	r17
    d422:	0f 91       	pop	r16
    d424:	ff 90       	pop	r15
    d426:	ef 90       	pop	r14
    d428:	08 95       	ret

0000d42a <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    d42a:	60 e0       	ldi	r22, 0x00	; 0
    d42c:	70 e0       	ldi	r23, 0x00	; 0
    d42e:	0e 94 f7 69 	call	0xd3ee	; 0xd3ee <HextoDec>
    d432:	08 95       	ret

0000d434 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    d434:	ef 92       	push	r14
    d436:	ff 92       	push	r15
    d438:	0f 93       	push	r16
    d43a:	1f 93       	push	r17
    d43c:	8a 01       	movw	r16, r20
    d43e:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    d440:	68 0f       	add	r22, r24
    d442:	79 1f       	adc	r23, r25
    d444:	c9 01       	movw	r24, r18
    d446:	0e 94 45 69 	call	0xd28a	; 0xd28a <strncpy>
	pnew[numchars] = '\0';
    d44a:	0e 0d       	add	r16, r14
    d44c:	1f 1d       	adc	r17, r15
    d44e:	f8 01       	movw	r30, r16
    d450:	10 82       	st	Z, r1
	return pnew;
}
    d452:	c7 01       	movw	r24, r14
    d454:	1f 91       	pop	r17
    d456:	0f 91       	pop	r16
    d458:	ff 90       	pop	r15
    d45a:	ef 90       	pop	r14
    d45c:	08 95       	ret

0000d45e <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    d45e:	cf 92       	push	r12
    d460:	df 92       	push	r13
    d462:	ef 92       	push	r14
    d464:	ff 92       	push	r15
    d466:	0f 93       	push	r16
    d468:	1f 93       	push	r17
    d46a:	cf 93       	push	r28
    d46c:	df 93       	push	r29
    d46e:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d470:	8d 30       	cpi	r24, 0x0D	; 13
    d472:	19 f0       	breq	.+6      	; 0xd47a <recv_input+0x1c>
    d474:	8a 30       	cpi	r24, 0x0A	; 10
    d476:	09 f0       	breq	.+2      	; 0xd47a <recv_input+0x1c>
    d478:	e8 c0       	rjmp	.+464    	; 0xd64a <recv_input+0x1ec>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d47a:	80 91 48 02 	lds	r24, 0x0248
    d47e:	e8 2f       	mov	r30, r24
    d480:	ff 27       	eor	r31, r31
    d482:	e9 56       	subi	r30, 0x69	; 105
    d484:	fd 4f       	sbci	r31, 0xFD	; 253
    d486:	10 82       	st	Z, r1
  int8_t rc;
  int16_t value=0;
  char * raw_byte;
  short * raw_short;

  if (s[0] == 0)
    d488:	80 91 97 02 	lds	r24, 0x0297
    d48c:	88 23       	and	r24, r24
    d48e:	09 f4       	brne	.+2      	; 0xd492 <recv_input+0x34>
    d490:	d9 c0       	rjmp	.+434    	; 0xd644 <recv_input+0x1e6>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d492:	e0 91 49 02 	lds	r30, 0x0249
    d496:	f0 91 4a 02 	lds	r31, 0x024A
    d49a:	10 82       	st	Z, r1
  index = 0;
    d49c:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d49e:	80 91 97 02 	lds	r24, 0x0297
    d4a2:	88 23       	and	r24, r24
    d4a4:	d1 f0       	breq	.+52     	; 0xd4da <recv_input+0x7c>
    d4a6:	8d 33       	cpi	r24, 0x3D	; 61
    d4a8:	c1 f0       	breq	.+48     	; 0xd4da <recv_input+0x7c>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d4aa:	e9 2f       	mov	r30, r25
    d4ac:	ff 27       	eor	r31, r31
    d4ae:	a0 91 49 02 	lds	r26, 0x0249
    d4b2:	b0 91 4a 02 	lds	r27, 0x024A
    d4b6:	ae 0f       	add	r26, r30
    d4b8:	bf 1f       	adc	r27, r31
    d4ba:	e9 56       	subi	r30, 0x69	; 105
    d4bc:	fd 4f       	sbci	r31, 0xFD	; 253
    d4be:	80 81       	ld	r24, Z
    d4c0:	8c 93       	st	X, r24
    index++;
    d4c2:	9f 5f       	subi	r25, 0xFF	; 255
    d4c4:	94 31       	cpi	r25, 0x14	; 20
    d4c6:	48 f4       	brcc	.+18     	; 0xd4da <recv_input+0x7c>
    d4c8:	e9 2f       	mov	r30, r25
    d4ca:	ff 27       	eor	r31, r31
    d4cc:	e9 56       	subi	r30, 0x69	; 105
    d4ce:	fd 4f       	sbci	r31, 0xFD	; 253
    d4d0:	e0 81       	ld	r30, Z
    d4d2:	ee 23       	and	r30, r30
    d4d4:	11 f0       	breq	.+4      	; 0xd4da <recv_input+0x7c>
    d4d6:	ed 33       	cpi	r30, 0x3D	; 61
    d4d8:	41 f7       	brne	.-48     	; 0xd4aa <recv_input+0x4c>
    d4da:	a0 91 49 02 	lds	r26, 0x0249
    d4de:	b0 91 4a 02 	lds	r27, 0x024A
  }
  if (index < sizeof(do_cmdbuf)) {
    d4e2:	94 31       	cpi	r25, 0x14	; 20
    d4e4:	68 f4       	brcc	.+26     	; 0xd500 <recv_input+0xa2>
    cmd[index] = 0;
    d4e6:	89 2f       	mov	r24, r25
    d4e8:	99 27       	eor	r25, r25
    d4ea:	a8 0f       	add	r26, r24
    d4ec:	b9 1f       	adc	r27, r25
    d4ee:	1c 92       	st	X, r1
    args = &s[index];
    d4f0:	fc 01       	movw	r30, r24
    d4f2:	e9 56       	subi	r30, 0x69	; 105
    d4f4:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d4f6:	80 81       	ld	r24, Z
    d4f8:	8d 33       	cpi	r24, 0x3D	; 61
    d4fa:	21 f4       	brne	.+8      	; 0xd504 <recv_input+0xa6>
    d4fc:	31 96       	adiw	r30, 0x01	; 1
    d4fe:	fb cf       	rjmp	.-10     	; 0xd4f6 <recv_input+0x98>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d500:	fd 01       	movw	r30, r26
    d502:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d504:	e0 91 49 02 	lds	r30, 0x0249
    d508:	f0 91 4a 02 	lds	r31, 0x024A
    d50c:	80 81       	ld	r24, Z
    d50e:	88 23       	and	r24, r24
    d510:	09 f4       	brne	.+2      	; 0xd514 <recv_input+0xb6>
    d512:	98 c0       	rjmp	.+304    	; 0xd644 <recv_input+0x1e6>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d514:	64 e7       	ldi	r22, 0x74	; 116
    d516:	70 e0       	ldi	r23, 0x00	; 0
    d518:	99 27       	eor	r25, r25
    d51a:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d51e:	89 2b       	or	r24, r25
    d520:	09 f0       	breq	.+2      	; 0xd524 <recv_input+0xc6>
    d522:	90 c0       	rjmp	.+288    	; 0xd644 <recv_input+0x1e6>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d524:	82 e0       	ldi	r24, 0x02	; 2
    d526:	90 e0       	ldi	r25, 0x00	; 0
    d528:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d52c:	8c 01       	movw	r16, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d52e:	9c 01       	movw	r18, r24
    d530:	43 e0       	ldi	r20, 0x03	; 3
    d532:	50 e0       	ldi	r21, 0x00	; 0
    d534:	61 e0       	ldi	r22, 0x01	; 1
    d536:	70 e0       	ldi	r23, 0x00	; 0
    d538:	80 91 49 02 	lds	r24, 0x0249
    d53c:	90 91 4a 02 	lds	r25, 0x024A
    d540:	0e 94 1a 6a 	call	0xd434	; 0xd434 <substr>
    d544:	90 93 71 02 	sts	0x0271, r25
    d548:	80 93 70 02 	sts	0x0270, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d54c:	c8 01       	movw	r24, r16
    d54e:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
	// 2	unsigned char	Pack State of Health				0.5%
	// 3	unsigned char	Max Pack Temperature				1 deg C
	// 4-5	short			Min Pack Voltage					1mV
	// 6-7	short			Max Pack Voltage					1mV
	 
	if (strcmp(can_addr, "630") == 0) {
    d552:	64 e1       	ldi	r22, 0x14	; 20
    d554:	72 e0       	ldi	r23, 0x02	; 2
    d556:	80 91 70 02 	lds	r24, 0x0270
    d55a:	90 91 71 02 	lds	r25, 0x0271
    d55e:	0e 94 3c 69 	call	0xd278	; 0xd278 <strcmp>
    d562:	6c 01       	movw	r12, r24
    d564:	89 2b       	or	r24, r25
    d566:	09 f0       	breq	.+2      	; 0xd56a <recv_input+0x10c>
    d568:	6d c0       	rjmp	.+218    	; 0xd644 <recv_input+0x1e6>
		wdt_reset();
    d56a:	a8 95       	wdr
		
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d56c:	82 e0       	ldi	r24, 0x02	; 2
    d56e:	90 e0       	ldi	r25, 0x00	; 0
    d570:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d574:	f8 01       	movw	r30, r16
    d576:	80 83       	st	Z, r24

		// SOC, byte 0
		raw_byte = substr(cmd, 5, 2,pnew);
    d578:	98 01       	movw	r18, r16
    d57a:	42 e0       	ldi	r20, 0x02	; 2
    d57c:	50 e0       	ldi	r21, 0x00	; 0
    d57e:	65 e0       	ldi	r22, 0x05	; 5
    d580:	70 e0       	ldi	r23, 0x00	; 0
    d582:	80 91 49 02 	lds	r24, 0x0249
    d586:	90 91 4a 02 	lds	r25, 0x024A
    d58a:	0e 94 1a 6a 	call	0xd434	; 0xd434 <substr>
    d58e:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d590:	c8 01       	movw	r24, r16
    d592:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d596:	ce 01       	movw	r24, r28
    d598:	0e 94 15 6a 	call	0xd42a	; 0xd42a <xstrtoi>
		value = value/2;	// 0.5 % per LSB
    d59c:	9c 01       	movw	r18, r24
    d59e:	97 ff       	sbrs	r25, 7
    d5a0:	02 c0       	rjmp	.+4      	; 0xd5a6 <recv_input+0x148>
    d5a2:	2f 5f       	subi	r18, 0xFF	; 255
    d5a4:	3f 4f       	sbci	r19, 0xFF	; 255
    d5a6:	35 95       	asr	r19
    d5a8:	27 95       	ror	r18
		LCD_UpdateSOC(value);
    d5aa:	82 2f       	mov	r24, r18
    d5ac:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>


		// Max Pack temp, byte 3
		raw_byte = substr(cmd, 11, 2,pnew);
    d5b0:	98 01       	movw	r18, r16
    d5b2:	42 e0       	ldi	r20, 0x02	; 2
    d5b4:	50 e0       	ldi	r21, 0x00	; 0
    d5b6:	6b e0       	ldi	r22, 0x0B	; 11
    d5b8:	70 e0       	ldi	r23, 0x00	; 0
    d5ba:	80 91 49 02 	lds	r24, 0x0249
    d5be:	90 91 4a 02 	lds	r25, 0x024A
    d5c2:	0e 94 1a 6a 	call	0xd434	; 0xd434 <substr>
    d5c6:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d5c8:	c8 01       	movw	r24, r16
    d5ca:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d5ce:	ce 01       	movw	r24, r28
    d5d0:	0e 94 15 6a 	call	0xd42a	; 0xd42a <xstrtoi>
		LCD_UpdateMaxTemp(value);
    d5d4:	0e 94 b2 71 	call	0xe364	; 0xe364 <LCD_UpdateMaxTemp>
		
		char *spnew = MEM_ALLOC(6);
    d5d8:	82 e0       	ldi	r24, 0x02	; 2
    d5da:	90 e0       	ldi	r25, 0x00	; 0
    d5dc:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d5e0:	7c 01       	movw	r14, r24

		// Min Pack Voltage, byte 4-5
		raw_short = substr(cmd, 11, 4,spnew);
    d5e2:	9c 01       	movw	r18, r24
    d5e4:	44 e0       	ldi	r20, 0x04	; 4
    d5e6:	50 e0       	ldi	r21, 0x00	; 0
    d5e8:	6b e0       	ldi	r22, 0x0B	; 11
    d5ea:	70 e0       	ldi	r23, 0x00	; 0
    d5ec:	80 91 49 02 	lds	r24, 0x0249
    d5f0:	90 91 4a 02 	lds	r25, 0x024A
    d5f4:	0e 94 1a 6a 	call	0xd434	; 0xd434 <substr>
    d5f8:	8c 01       	movw	r16, r24
		MEM_FREE(spnew);
    d5fa:	c7 01       	movw	r24, r14
    d5fc:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
		value = xstrtoi(raw_short);
    d600:	c8 01       	movw	r24, r16
    d602:	0e 94 15 6a 	call	0xd42a	; 0xd42a <xstrtoi>
		LCD_UpdateMinVolt(value);
    d606:	0e 94 82 71 	call	0xe304	; 0xe304 <LCD_UpdateMinVolt>
		
		// Small status line for each frame received. Since ID 630 should
		// be transmitted once per second, there should be small but visible
		// blinking of few pixels in one of the corners of the display. 		
		if (la == 0)
    d60a:	80 91 2e 02 	lds	r24, 0x022E
    d60e:	90 91 2f 02 	lds	r25, 0x022F
    d612:	89 2b       	or	r24, r25
    d614:	69 f4       	brne	.+26     	; 0xd630 <recv_input+0x1d2>
		{
				LCD_ClrLine(1,63,2,63);
    d616:	2f e3       	ldi	r18, 0x3F	; 63
    d618:	42 e0       	ldi	r20, 0x02	; 2
    d61a:	62 2f       	mov	r22, r18
    d61c:	81 e0       	ldi	r24, 0x01	; 1
    d61e:	0e 94 51 73 	call	0xe6a2	; 0xe6a2 <LCD_ClrLine>
				la = 1;
    d622:	81 e0       	ldi	r24, 0x01	; 1
    d624:	90 e0       	ldi	r25, 0x00	; 0
    d626:	90 93 2f 02 	sts	0x022F, r25
    d62a:	80 93 2e 02 	sts	0x022E, r24
    d62e:	0a c0       	rjmp	.+20     	; 0xd644 <recv_input+0x1e6>
		} else {
				LCD_SetLine(1,63,2,63);
    d630:	2f e3       	ldi	r18, 0x3F	; 63
    d632:	42 e0       	ldi	r20, 0x02	; 2
    d634:	62 2f       	mov	r22, r18
    d636:	81 e0       	ldi	r24, 0x01	; 1
    d638:	0e 94 e9 72 	call	0xe5d2	; 0xe5d2 <LCD_SetLine>
				la = 0;
    d63c:	d0 92 2f 02 	sts	0x022F, r13
    d640:	c0 92 2e 02 	sts	0x022E, r12
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d644:	10 92 48 02 	sts	0x0248, r1
    d648:	10 c0       	rjmp	.+32     	; 0xd66a <recv_input+0x20c>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d64a:	80 91 48 02 	lds	r24, 0x0248
    d64e:	e8 2f       	mov	r30, r24
    d650:	ff 27       	eor	r31, r31
    d652:	e9 56       	subi	r30, 0x69	; 105
    d654:	fd 4f       	sbci	r31, 0xFD	; 253
    d656:	90 83       	st	Z, r25
    d658:	8f 5f       	subi	r24, 0xFF	; 255
    d65a:	80 93 48 02 	sts	0x0248, r24
    if (idx == CMD_BUF_LEN) {
    d65e:	80 38       	cpi	r24, 0x80	; 128
    d660:	21 f4       	brne	.+8      	; 0xd66a <recv_input+0x20c>
      idx = 0;
    d662:	10 92 48 02 	sts	0x0248, r1
      recv_input_cmdbuf[idx] = 0;
    d666:	10 92 97 02 	sts	0x0297, r1
    d66a:	df 91       	pop	r29
    d66c:	cf 91       	pop	r28
    d66e:	1f 91       	pop	r17
    d670:	0f 91       	pop	r16
    d672:	ff 90       	pop	r15
    d674:	ef 90       	pop	r14
    d676:	df 90       	pop	r13
    d678:	cf 90       	pop	r12
    d67a:	08 95       	ret

0000d67c <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d67c:	ce ef       	ldi	r28, 0xFE	; 254
    d67e:	d1 e2       	ldi	r29, 0x21	; 33
    d680:	de bf       	out	0x3e, r29	; 62
    d682:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);

	LCD_UpdateSOC(1);
    d684:	81 e0       	ldi	r24, 0x01	; 1
    d686:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	stdout = &mystdout;
    d68a:	8a e3       	ldi	r24, 0x3A	; 58
    d68c:	92 e0       	ldi	r25, 0x02	; 2
    d68e:	90 93 be 18 	sts	0x18BE, r25
    d692:	80 93 bd 18 	sts	0x18BD, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d696:	54 9a       	sbi	0x0a, 4	; 10
    d698:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d69a:	0e 94 d7 69 	call	0xd3ae	; 0xd3ae <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d69e:	82 e0       	ldi	r24, 0x02	; 2
    d6a0:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d6a4:	0e 94 17 6c 	call	0xd82e	; 0xd82e <InitMemory>

	LCD_UpdateSOC(3);
    d6a8:	83 e0       	ldi	r24, 0x03	; 3
    d6aa:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	LCD_Init();
    d6ae:	0e 94 0b 6d 	call	0xda16	; 0xda16 <LCD_Init>

	LCD_UpdateSOC(4);
    d6b2:	84 e0       	ldi	r24, 0x04	; 4
    d6b4:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	TIMING_Init();
    d6b8:	0e 94 6b 79 	call	0xf2d6	; 0xf2d6 <TIMING_Init>

	LCD_UpdateSOC(5);
    d6bc:	85 e0       	ldi	r24, 0x05	; 5
    d6be:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	RTC_Init();
    d6c2:	0e 94 34 79 	call	0xf268	; 0xf268 <RTC_Init>

	LCD_UpdateSOC(6);
    d6c6:	86 e0       	ldi	r24, 0x06	; 6
    d6c8:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d6cc:	8c e0       	ldi	r24, 0x0C	; 12
    d6ce:	9a e7       	ldi	r25, 0x7A	; 122
    d6d0:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d6d4:	87 e0       	ldi	r24, 0x07	; 7
    d6d6:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d6da:	62 e3       	ldi	r22, 0x32	; 50
    d6dc:	84 e6       	ldi	r24, 0x64	; 100
    d6de:	0e 94 f5 73 	call	0xe7ea	; 0xe7ea <JOYSTICK_Init>

	//USART_Init();

//	CAL_enable_interrupt();

	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d6e2:	02 e7       	ldi	r16, 0x72	; 114
    d6e4:	12 e0       	ldi	r17, 0x02	; 2
    d6e6:	28 e0       	ldi	r18, 0x08	; 8
    d6e8:	34 e7       	ldi	r19, 0x74	; 116
    d6ea:	41 e0       	ldi	r20, 0x01	; 1
    d6ec:	50 e0       	ldi	r21, 0x00	; 0
    d6ee:	60 e0       	ldi	r22, 0x00	; 0
    d6f0:	70 e0       	ldi	r23, 0x00	; 0
    d6f2:	8f ef       	ldi	r24, 0xFF	; 255
    d6f4:	0e 94 d0 7b 	call	0xf7a0	; 0xf7a0 <TIMING_AddRepCallbackEvent>

	// happy startup sound
	LCD_UpdateSOC(8);
    d6f8:	88 e0       	ldi	r24, 0x08	; 8
    d6fa:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;

	// interrupt enable
	SREG |= 1<<7;
    d6fe:	8f b7       	in	r24, 0x3f	; 63
    d700:	80 68       	ori	r24, 0x80	; 128
    d702:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d704:	89 e0       	ldi	r24, 0x09	; 9
    d706:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/

	LCD_UpdateSOC(10);
    d70a:	8a e0       	ldi	r24, 0x0A	; 10
    d70c:	0e 94 b8 72 	call	0xe570	; 0xe570 <LCD_UpdateSOC>

	PlaySound(11);
    d710:	8b e0       	ldi	r24, 0x0B	; 11
    d712:	90 e0       	ldi	r25, 0x00	; 0
    d714:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <PlaySound>

	//1 POWER_EnterIdleSleepMode();

	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );
    d718:	8c e7       	ldi	r24, 0x7C	; 124
    d71a:	94 e9       	ldi	r25, 0x94	; 148
    d71c:	0e 94 34 77 	call	0xee68	; 0xee68 <PICTURE_CopyFullscreenFlashToLcd>

	// init backlight
	BACKLIGHT_Init();
    d720:	0e 94 86 74 	call	0xe90c	; 0xe90c <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d724:	6d e9       	ldi	r22, 0x9D	; 157
    d726:	79 e6       	ldi	r23, 0x69	; 105
    d728:	88 e0       	ldi	r24, 0x08	; 8
    d72a:	90 e0       	ldi	r25, 0x00	; 0
    d72c:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d730:	90 93 33 02 	sts	0x0233, r25
    d734:	80 93 32 02 	sts	0x0232, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d738:	6d e9       	ldi	r22, 0x9D	; 157
    d73a:	79 e6       	ldi	r23, 0x69	; 105
    d73c:	8a e0       	ldi	r24, 0x0A	; 10
    d73e:	90 e0       	ldi	r25, 0x00	; 0
    d740:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d744:	90 93 39 02 	sts	0x0239, r25
    d748:	80 93 38 02 	sts	0x0238, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d74c:	6d e9       	ldi	r22, 0x9D	; 157
    d74e:	79 e6       	ldi	r23, 0x69	; 105
    d750:	8c e0       	ldi	r24, 0x0C	; 12
    d752:	90 e0       	ldi	r25, 0x00	; 0
    d754:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d758:	90 93 37 02 	sts	0x0237, r25
    d75c:	80 93 36 02 	sts	0x0236, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d760:	6d e9       	ldi	r22, 0x9D	; 157
    d762:	79 e6       	ldi	r23, 0x69	; 105
    d764:	8e e0       	ldi	r24, 0x0E	; 14
    d766:	90 e0       	ldi	r25, 0x00	; 0
    d768:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d76c:	90 93 35 02 	sts	0x0235, r25
    d770:	80 93 34 02 	sts	0x0234, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d774:	6d e9       	ldi	r22, 0x9D	; 157
    d776:	79 e6       	ldi	r23, 0x69	; 105
    d778:	80 e1       	ldi	r24, 0x10	; 16
    d77a:	90 e0       	ldi	r25, 0x00	; 0
    d77c:	0e 94 54 69 	call	0xd2a8	; 0xd2a8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d780:	90 93 31 02 	sts	0x0231, r25
    d784:	80 93 30 02 	sts	0x0230, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d788:	40 91 34 02 	lds	r20, 0x0234
    d78c:	60 91 36 02 	lds	r22, 0x0236
    d790:	80 91 38 02 	lds	r24, 0x0238
    d794:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d798:	80 91 30 02 	lds	r24, 0x0230
    d79c:	0e 94 aa 74 	call	0xe954	; 0xe954 <BACKLIGHT_SetIntensity>

	TIMING_event_t * splashScreenEvent = MEM_ALLOC( TIMING_event_t );
    d7a0:	8f e0       	ldi	r24, 0x0F	; 15
    d7a2:	90 e0       	ldi	r25, 0x00	; 0
    d7a4:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d7a8:	8c 01       	movw	r16, r24
	if (splashScreenEvent == NULL) { UnknownError(); }
    d7aa:	89 2b       	or	r24, r25
    d7ac:	11 f4       	brne	.+4      	; 0xd7b2 <main+0x136>
    d7ae:	0e 94 a5 69 	call	0xd34a	; 0xd34a <UnknownError>
	TIMING_counter_t volatile splashCounter = 0;
    d7b2:	19 82       	std	Y+1, r1	; 0x01
	TIMING_AddCounterEventAfter( RTC_TICKS_PER_SECOND * SPLASH_SCREEN_SECONDS,
    d7b4:	98 01       	movw	r18, r16
    d7b6:	ae 01       	movw	r20, r28
    d7b8:	4f 5f       	subi	r20, 0xFF	; 255
    d7ba:	5f 4f       	sbci	r21, 0xFF	; 255
    d7bc:	60 e8       	ldi	r22, 0x80	; 128
    d7be:	71 e0       	ldi	r23, 0x01	; 1
    d7c0:	80 e0       	ldi	r24, 0x00	; 0
    d7c2:	90 e0       	ldi	r25, 0x00	; 0
    d7c4:	0e 94 27 7b 	call	0xf64e	; 0xf64e <TIMING_AddCounterEventAfter>
			&splashCounter, splashScreenEvent );
	bool exit = false;
    d7c8:	ff 24       	eor	r15, r15
	do {
		POWER_EnterIdleSleepMode();
    d7ca:	0e 94 81 74 	call	0xe902	; 0xe902 <POWER_EnterIdleSleepMode>
		if (JOYSTICK_GetState() != 0x00) { exit = true; };
    d7ce:	0e 94 04 74 	call	0xe808	; 0xe808 <JOYSTICK_GetState>
    d7d2:	88 23       	and	r24, r24
    d7d4:	11 f0       	breq	.+4      	; 0xd7da <main+0x15e>
    d7d6:	51 e0       	ldi	r21, 0x01	; 1
    d7d8:	f5 2e       	mov	r15, r21
		if (splashCounter != 0) { exit = true; }
    d7da:	89 81       	ldd	r24, Y+1	; 0x01
    d7dc:	88 23       	and	r24, r24
    d7de:	11 f4       	brne	.+4      	; 0xd7e4 <main+0x168>
	} while (exit == false);
    d7e0:	ff 20       	and	r15, r15
    d7e2:	99 f3       	breq	.-26     	; 0xd7ca <main+0x14e>


	TIMING_RemoveEvent( splashScreenEvent );
    d7e4:	c8 01       	movw	r24, r16
    d7e6:	0e 94 a3 7a 	call	0xf546	; 0xf546 <TIMING_RemoveEvent>
	MEM_FREE( splashScreenEvent );
    d7ea:	c8 01       	movw	r24, r16
    d7ec:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d7f0:	8d ec       	ldi	r24, 0xCD	; 205
    d7f2:	97 e0       	ldi	r25, 0x07	; 7
    d7f4:	a7 e0       	ldi	r26, 0x07	; 7
    d7f6:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d7f8:	01 97       	sbiw	r24, 0x01	; 1
    d7fa:	a1 09       	sbc	r26, r1
    d7fc:	b1 09       	sbc	r27, r1
    d7fe:	00 00       	nop
    d800:	01 f0       	breq	.+0      	; 0xd802 <main+0x186>
    d802:	d1 f7       	brne	.-12     	; 0xd7f8 <main+0x17c>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d804:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d806:	00 00       	nop

	DELAY_MS(500);

	LCD_ClrBox(0,0,128,64);
    d808:	20 e4       	ldi	r18, 0x40	; 64
    d80a:	40 e8       	ldi	r20, 0x80	; 128
    d80c:	60 e0       	ldi	r22, 0x00	; 0
    d80e:	86 2f       	mov	r24, r22
    d810:	0e 94 9b 6f 	call	0xdf36	; 0xdf36 <LCD_ClrBox>
//	LcdContrast();
//}

	while (1)
 	{
		if (urx_recv) 
    d814:	80 91 82 02 	lds	r24, 0x0282
    d818:	88 23       	and	r24, r24
    d81a:	e1 f3       	breq	.-8      	; 0xd814 <main+0x198>
		{	
			cli();
    d81c:	f8 94       	cli
            urx_recv = 0;
    d81e:	10 92 82 02 	sts	0x0282, r1
            ch = urx;
    d822:	80 91 81 02 	lds	r24, 0x0281
            sei();
    d826:	78 94       	sei
            /* build a command line and execute commands when complete */
            recv_input(ch);
    d828:	0e 94 2f 6a 	call	0xd45e	; 0xd45e <recv_input>
    d82c:	f3 cf       	rjmp	.-26     	; 0xd814 <main+0x198>

0000d82e <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d82e:	60 e2       	ldi	r22, 0x20	; 32
    d830:	78 e1       	ldi	r23, 0x18	; 24
    d832:	84 e0       	ldi	r24, 0x04	; 4
    d834:	90 e0       	ldi	r25, 0x00	; 0
    d836:	0e 94 e9 75 	call	0xebd2	; 0xebd2 <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d83a:	27 e1       	ldi	r18, 0x17	; 23
    d83c:	33 e0       	ldi	r19, 0x03	; 3
    d83e:	40 e1       	ldi	r20, 0x10	; 16
    d840:	50 e0       	ldi	r21, 0x00	; 0
    d842:	ba 01       	movw	r22, r20
    d844:	80 e0       	ldi	r24, 0x00	; 0
    d846:	90 e0       	ldi	r25, 0x00	; 0
    d848:	0e 94 f2 75 	call	0xebe4	; 0xebe4 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d84c:	29 e1       	ldi	r18, 0x19	; 25
    d84e:	34 e0       	ldi	r19, 0x04	; 4
    d850:	40 e2       	ldi	r20, 0x20	; 32
    d852:	50 e0       	ldi	r21, 0x00	; 0
    d854:	ba 01       	movw	r22, r20
    d856:	81 e0       	ldi	r24, 0x01	; 1
    d858:	90 e0       	ldi	r25, 0x00	; 0
    d85a:	0e 94 f2 75 	call	0xebe4	; 0xebe4 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d85e:	2d e1       	ldi	r18, 0x1D	; 29
    d860:	38 e0       	ldi	r19, 0x08	; 8
    d862:	40 e1       	ldi	r20, 0x10	; 16
    d864:	50 e0       	ldi	r21, 0x00	; 0
    d866:	60 e4       	ldi	r22, 0x40	; 64
    d868:	70 e0       	ldi	r23, 0x00	; 0
    d86a:	82 e0       	ldi	r24, 0x02	; 2
    d86c:	90 e0       	ldi	r25, 0x00	; 0
    d86e:	0e 94 f2 75 	call	0xebe4	; 0xebe4 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d872:	2f e1       	ldi	r18, 0x1F	; 31
    d874:	3c e0       	ldi	r19, 0x0C	; 12
    d876:	43 e0       	ldi	r20, 0x03	; 3
    d878:	50 e0       	ldi	r21, 0x00	; 0
    d87a:	60 e0       	ldi	r22, 0x00	; 0
    d87c:	74 e0       	ldi	r23, 0x04	; 4
    d87e:	ca 01       	movw	r24, r20
    d880:	0e 94 f2 75 	call	0xebe4	; 0xebe4 <MEMBLOCK_InitBag>
    d884:	08 95       	ret

0000d886 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d886:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d888:	e8 2f       	mov	r30, r24
    d88a:	ff 27       	eor	r31, r31
    d88c:	ee 0f       	add	r30, r30
    d88e:	ff 1f       	adc	r31, r31
    d890:	e4 58       	subi	r30, 0x84	; 132
    d892:	f8 43       	sbci	r31, 0x38	; 56
    d894:	85 91       	lpm	r24, Z+
    d896:	94 91       	lpm	r25, Z+
    d898:	bc 01       	movw	r22, r24
    d89a:	c9 01       	movw	r24, r18
    d89c:	0e 94 33 7d 	call	0xfa66	; 0xfa66 <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d8a0:	8d ec       	ldi	r24, 0xCD	; 205
    d8a2:	97 e0       	ldi	r25, 0x07	; 7
    d8a4:	a7 e0       	ldi	r26, 0x07	; 7
    d8a6:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d8a8:	01 97       	sbiw	r24, 0x01	; 1
    d8aa:	a1 09       	sbc	r26, r1
    d8ac:	b1 09       	sbc	r27, r1
    d8ae:	00 00       	nop
    d8b0:	01 f0       	breq	.+0      	; 0xd8b2 <SONG_PlayTune+0x2c>
    d8b2:	d1 f7       	brne	.-12     	; 0xd8a8 <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d8b4:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d8b6:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d8b8:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <SONG_StopTune>
    d8bc:	08 95       	ret

0000d8be <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d8be:	cf 92       	push	r12
    d8c0:	df 92       	push	r13
    d8c2:	ef 92       	push	r14
    d8c4:	ff 92       	push	r15
    d8c6:	0f 93       	push	r16
    d8c8:	1f 93       	push	r17
    d8ca:	cf 93       	push	r28
    d8cc:	df 93       	push	r29
    d8ce:	cd b7       	in	r28, 0x3d	; 61
    d8d0:	de b7       	in	r29, 0x3e	; 62
    d8d2:	2e 97       	sbiw	r28, 0x0e	; 14
    d8d4:	0f b6       	in	r0, 0x3f	; 63
    d8d6:	f8 94       	cli
    d8d8:	de bf       	out	0x3e, r29	; 62
    d8da:	0f be       	out	0x3f, r0	; 63
    d8dc:	cd bf       	out	0x3d, r28	; 61
    d8de:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d8e0:	88 e2       	ldi	r24, 0x28	; 40
    d8e2:	90 e0       	ldi	r25, 0x00	; 0
    d8e4:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d8e8:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d8ea:	80 e3       	ldi	r24, 0x30	; 48
    d8ec:	90 e0       	ldi	r25, 0x00	; 0
    d8ee:	0e 94 35 76 	call	0xec6a	; 0xec6a <MEMBLOCK_Allocate>
    d8f2:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d8f4:	48 e2       	ldi	r20, 0x28	; 40
    d8f6:	b7 01       	movw	r22, r14
    d8f8:	ce 01       	movw	r24, r28
    d8fa:	01 96       	adiw	r24, 0x01	; 1
    d8fc:	0e 94 84 75 	call	0xeb08	; 0xeb08 <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d900:	be 01       	movw	r22, r28
    d902:	6f 5f       	subi	r22, 0xFF	; 255
    d904:	7f 4f       	sbci	r23, 0xFF	; 255
    d906:	80 2f       	mov	r24, r16
    d908:	0e 94 43 6c 	call	0xd886	; 0xd886 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d90c:	c7 01       	movw	r24, r14
    d90e:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d912:	c6 01       	movw	r24, r12
    d914:	0e 94 dd 76 	call	0xedba	; 0xedba <MEMBLOCK_Free>
    d918:	2e 96       	adiw	r28, 0x0e	; 14
    d91a:	0f b6       	in	r0, 0x3f	; 63
    d91c:	f8 94       	cli
    d91e:	de bf       	out	0x3e, r29	; 62
    d920:	0f be       	out	0x3f, r0	; 63
    d922:	cd bf       	out	0x3d, r28	; 61
    d924:	df 91       	pop	r29
    d926:	cf 91       	pop	r28
    d928:	1f 91       	pop	r17
    d92a:	0f 91       	pop	r16
    d92c:	ff 90       	pop	r15
    d92e:	ef 90       	pop	r14
    d930:	df 90       	pop	r13
    d932:	cf 90       	pop	r12
    d934:	08 95       	ret

0000d936 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d936:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d938:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d93a:	85 ef       	ldi	r24, 0xF5	; 245
    d93c:	97 e6       	ldi	r25, 0x67	; 103
    d93e:	a1 e0       	ldi	r26, 0x01	; 1
    d940:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d942:	01 97       	sbiw	r24, 0x01	; 1
    d944:	a1 09       	sbc	r26, r1
    d946:	b1 09       	sbc	r27, r1
    d948:	00 00       	nop
    d94a:	01 f0       	breq	.+0      	; 0xd94c <S6B1713_HardReset+0x16>
    d94c:	d1 f7       	brne	.-12     	; 0xd942 <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d94e:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d950:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d952:	41 9a       	sbi	0x08, 1	; 8
    d954:	08 95       	ret

0000d956 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d956:	0e 94 9b 6c 	call	0xd936	; 0xd936 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d95a:	87 e8       	ldi	r24, 0x87	; 135
    d95c:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d960:	80 e8       	ldi	r24, 0x80	; 128
    d962:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d966:	38 9a       	sbi	0x07, 0	; 7
    d968:	08 95       	ret

0000d96a <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d96a:	40 98       	cbi	0x08, 0	; 8
    d96c:	8f ea       	ldi	r24, 0xAF	; 175
    d96e:	80 93 00 80 	sts	0x8000, r24
    d972:	08 95       	ret

0000d974 <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d974:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d976:	40 98       	cbi	0x08, 0	; 8
    d978:	80 64       	ori	r24, 0x40	; 64
    d97a:	80 93 00 80 	sts	0x8000, r24
    d97e:	08 95       	ret

0000d980 <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d980:	98 2f       	mov	r25, r24
    d982:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d984:	40 98       	cbi	0x08, 0	; 8
    d986:	81 e8       	ldi	r24, 0x81	; 129
    d988:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d98c:	40 98       	cbi	0x08, 0	; 8
    d98e:	90 93 00 80 	sts	0x8000, r25
    d992:	08 95       	ret

0000d994 <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d994:	40 98       	cbi	0x08, 0	; 8
    d996:	80 ea       	ldi	r24, 0xA0	; 160
    d998:	80 93 00 80 	sts	0x8000, r24
    d99c:	08 95       	ret

0000d99e <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d99e:	40 98       	cbi	0x08, 0	; 8
    d9a0:	83 ea       	ldi	r24, 0xA3	; 163
    d9a2:	80 93 00 80 	sts	0x8000, r24
    d9a6:	08 95       	ret

0000d9a8 <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d9a8:	40 98       	cbi	0x08, 0	; 8
    d9aa:	80 ec       	ldi	r24, 0xC0	; 192
    d9ac:	80 93 00 80 	sts	0x8000, r24
    d9b0:	08 95       	ret

0000d9b2 <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d9b2:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d9b4:	40 98       	cbi	0x08, 0	; 8
    d9b6:	88 62       	ori	r24, 0x28	; 40
    d9b8:	80 93 00 80 	sts	0x8000, r24
    d9bc:	08 95       	ret

0000d9be <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d9be:	40 98       	cbi	0x08, 0	; 8
    d9c0:	87 70       	andi	r24, 0x07	; 7
    d9c2:	80 62       	ori	r24, 0x20	; 32
    d9c4:	80 93 00 80 	sts	0x8000, r24
    d9c8:	08 95       	ret

0000d9ca <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d9ca:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d9cc:	90 e0       	ldi	r25, 0x00	; 0
    d9ce:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d9d0:	89 2f       	mov	r24, r25
    d9d2:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d9d4:	40 98       	cbi	0x08, 0	; 8
    d9d6:	80 6b       	ori	r24, 0xB0	; 176
    d9d8:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d9dc:	40 98       	cbi	0x08, 0	; 8
    d9de:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d9e2:	40 98       	cbi	0x08, 0	; 8
    d9e4:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d9e8:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d9ea:	40 9a       	sbi	0x08, 0	; 8
    d9ec:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d9f0:	81 50       	subi	r24, 0x01	; 1
    d9f2:	d9 f7       	brne	.-10     	; 0xd9ea <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d9f4:	9f 5f       	subi	r25, 0xFF	; 255
    d9f6:	98 30       	cpi	r25, 0x08	; 8
    d9f8:	58 f3       	brcs	.-42     	; 0xd9d0 <LCD_SetScreen+0x6>
    d9fa:	08 95       	ret

0000d9fc <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d9fc:	1f 93       	push	r17
    d9fe:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    da00:	87 70       	andi	r24, 0x07	; 7
    da02:	88 0f       	add	r24, r24
    da04:	88 0f       	add	r24, r24
    da06:	88 0f       	add	r24, r24
    da08:	86 0f       	add	r24, r22
    da0a:	0e 94 ba 6c 	call	0xd974	; 0xd974 <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    da0e:	10 93 4b 02 	sts	0x024B, r17
    da12:	1f 91       	pop	r17
    da14:	08 95       	ret

0000da16 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    da16:	ef 92       	push	r14
    da18:	ff 92       	push	r15
    da1a:	0f 93       	push	r16
    da1c:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    da1e:	0e 94 ab 6c 	call	0xd956	; 0xd956 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    da22:	84 e0       	ldi	r24, 0x04	; 4
    da24:	0e 94 d9 6c 	call	0xd9b2	; 0xd9b2 <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    da28:	85 e6       	ldi	r24, 0x65	; 101
    da2a:	e8 2e       	mov	r14, r24
    da2c:	8e e0       	ldi	r24, 0x0E	; 14
    da2e:	f8 2e       	mov	r15, r24
    da30:	01 2d       	mov	r16, r1
    da32:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    da34:	c7 01       	movw	r24, r14
    da36:	01 97       	sbiw	r24, 0x01	; 1
    da38:	f1 f7       	brne	.-4      	; 0xda36 <LCD_Init+0x20>
    da3a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    da3c:	00 c0       	rjmp	.+0      	; 0xda3e <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    da3e:	86 e0       	ldi	r24, 0x06	; 6
    da40:	0e 94 d9 6c 	call	0xd9b2	; 0xd9b2 <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    da44:	c7 01       	movw	r24, r14
    da46:	01 97       	sbiw	r24, 0x01	; 1
    da48:	f1 f7       	brne	.-4      	; 0xda46 <LCD_Init+0x30>
    da4a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    da4c:	00 c0       	rjmp	.+0      	; 0xda4e <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    da4e:	87 e0       	ldi	r24, 0x07	; 7
    da50:	0e 94 d9 6c 	call	0xd9b2	; 0xd9b2 <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    da54:	86 e0       	ldi	r24, 0x06	; 6
    da56:	90 e0       	ldi	r25, 0x00	; 0
    da58:	0e 94 df 6c 	call	0xd9be	; 0xd9be <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    da5c:	84 e0       	ldi	r24, 0x04	; 4
    da5e:	0e 94 c0 6c 	call	0xd980	; 0xd980 <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    da62:	c7 01       	movw	r24, r14
    da64:	01 97       	sbiw	r24, 0x01	; 1
    da66:	f1 f7       	brne	.-4      	; 0xda64 <LCD_Init+0x4e>
    da68:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    da6a:	00 c0       	rjmp	.+0      	; 0xda6c <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    da6c:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    da70:	0e 94 ca 6c 	call	0xd994	; 0xd994 <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    da74:	0e 94 d4 6c 	call	0xd9a8	; 0xd9a8 <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    da78:	60 e0       	ldi	r22, 0x00	; 0
    da7a:	86 2f       	mov	r24, r22
    da7c:	0e 94 fe 6c 	call	0xd9fc	; 0xd9fc <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    da80:	80 e0       	ldi	r24, 0x00	; 0
    da82:	0e 94 e5 6c 	call	0xd9ca	; 0xd9ca <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    da86:	0e 94 b5 6c 	call	0xd96a	; 0xd96a <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    da8a:	85 e5       	ldi	r24, 0x55	; 85
    da8c:	0e 94 e5 6c 	call	0xd9ca	; 0xd9ca <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    da90:	80 e0       	ldi	r24, 0x00	; 0
    da92:	0e 94 e5 6c 	call	0xd9ca	; 0xd9ca <LCD_SetScreen>
    da96:	1f 91       	pop	r17
    da98:	0f 91       	pop	r16
    da9a:	ff 90       	pop	r15
    da9c:	ef 90       	pop	r14
    da9e:	08 95       	ret

0000daa0 <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    daa0:	cf 93       	push	r28
    daa2:	df 93       	push	r29
    daa4:	cd b7       	in	r28, 0x3d	; 61
    daa6:	de b7       	in	r29, 0x3e	; 62
    daa8:	21 97       	sbiw	r28, 0x01	; 1
    daaa:	0f b6       	in	r0, 0x3f	; 63
    daac:	f8 94       	cli
    daae:	de bf       	out	0x3e, r29	; 62
    dab0:	0f be       	out	0x3f, r0	; 63
    dab2:	cd bf       	out	0x3d, r28	; 61
    dab4:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dab6:	40 98       	cbi	0x08, 0	; 8
    dab8:	80 ee       	ldi	r24, 0xE0	; 224
    daba:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dabe:	86 2f       	mov	r24, r22
    dac0:	86 95       	lsr	r24
    dac2:	86 95       	lsr	r24
    dac4:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dac6:	40 98       	cbi	0x08, 0	; 8
    dac8:	80 6b       	ori	r24, 0xB0	; 176
    daca:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dace:	82 2f       	mov	r24, r18
    dad0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dad2:	40 98       	cbi	0x08, 0	; 8
    dad4:	99 27       	eor	r25, r25
    dad6:	44 e0       	ldi	r20, 0x04	; 4
    dad8:	96 95       	lsr	r25
    dada:	87 95       	ror	r24
    dadc:	4a 95       	dec	r20
    dade:	e1 f7       	brne	.-8      	; 0xdad8 <LCD_SetPixel+0x38>
    dae0:	80 61       	ori	r24, 0x10	; 16
    dae2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dae6:	40 98       	cbi	0x08, 0	; 8
    dae8:	2f 70       	andi	r18, 0x0F	; 15
    daea:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    daee:	40 9a       	sbi	0x08, 0	; 8
    daf0:	80 91 00 81 	lds	r24, 0x8100
    daf4:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    daf6:	40 9a       	sbi	0x08, 0	; 8
    daf8:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    dafc:	40 9a       	sbi	0x08, 0	; 8
    dafe:	26 2f       	mov	r18, r22
    db00:	33 27       	eor	r19, r19
    db02:	27 70       	andi	r18, 0x07	; 7
    db04:	30 70       	andi	r19, 0x00	; 0
    db06:	81 e0       	ldi	r24, 0x01	; 1
    db08:	90 e0       	ldi	r25, 0x00	; 0
    db0a:	02 c0       	rjmp	.+4      	; 0xdb10 <LCD_SetPixel+0x70>
    db0c:	88 0f       	add	r24, r24
    db0e:	99 1f       	adc	r25, r25
    db10:	2a 95       	dec	r18
    db12:	e2 f7       	brpl	.-8      	; 0xdb0c <LCD_SetPixel+0x6c>
    db14:	48 2b       	or	r20, r24
    db16:	40 93 00 81 	sts	0x8100, r20
    db1a:	21 96       	adiw	r28, 0x01	; 1
    db1c:	0f b6       	in	r0, 0x3f	; 63
    db1e:	f8 94       	cli
    db20:	de bf       	out	0x3e, r29	; 62
    db22:	0f be       	out	0x3f, r0	; 63
    db24:	cd bf       	out	0x3d, r28	; 61
    db26:	df 91       	pop	r29
    db28:	cf 91       	pop	r28
    db2a:	08 95       	ret

0000db2c <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    db2c:	cf 93       	push	r28
    db2e:	df 93       	push	r29
    db30:	cd b7       	in	r28, 0x3d	; 61
    db32:	de b7       	in	r29, 0x3e	; 62
    db34:	21 97       	sbiw	r28, 0x01	; 1
    db36:	0f b6       	in	r0, 0x3f	; 63
    db38:	f8 94       	cli
    db3a:	de bf       	out	0x3e, r29	; 62
    db3c:	0f be       	out	0x3f, r0	; 63
    db3e:	cd bf       	out	0x3d, r28	; 61
    db40:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    db42:	40 98       	cbi	0x08, 0	; 8
    db44:	80 ee       	ldi	r24, 0xE0	; 224
    db46:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    db4a:	86 2f       	mov	r24, r22
    db4c:	86 95       	lsr	r24
    db4e:	86 95       	lsr	r24
    db50:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    db52:	40 98       	cbi	0x08, 0	; 8
    db54:	80 6b       	ori	r24, 0xB0	; 176
    db56:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    db5a:	82 2f       	mov	r24, r18
    db5c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    db5e:	40 98       	cbi	0x08, 0	; 8
    db60:	99 27       	eor	r25, r25
    db62:	54 e0       	ldi	r21, 0x04	; 4
    db64:	96 95       	lsr	r25
    db66:	87 95       	ror	r24
    db68:	5a 95       	dec	r21
    db6a:	e1 f7       	brne	.-8      	; 0xdb64 <LCD_ClrPixel+0x38>
    db6c:	80 61       	ori	r24, 0x10	; 16
    db6e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    db72:	40 98       	cbi	0x08, 0	; 8
    db74:	2f 70       	andi	r18, 0x0F	; 15
    db76:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    db7a:	40 9a       	sbi	0x08, 0	; 8
    db7c:	80 91 00 81 	lds	r24, 0x8100
    db80:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    db82:	40 9a       	sbi	0x08, 0	; 8
    db84:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    db88:	40 9a       	sbi	0x08, 0	; 8
    db8a:	26 2f       	mov	r18, r22
    db8c:	33 27       	eor	r19, r19
    db8e:	27 70       	andi	r18, 0x07	; 7
    db90:	30 70       	andi	r19, 0x00	; 0
    db92:	81 e0       	ldi	r24, 0x01	; 1
    db94:	90 e0       	ldi	r25, 0x00	; 0
    db96:	02 c0       	rjmp	.+4      	; 0xdb9c <LCD_ClrPixel+0x70>
    db98:	88 0f       	add	r24, r24
    db9a:	99 1f       	adc	r25, r25
    db9c:	2a 95       	dec	r18
    db9e:	e2 f7       	brpl	.-8      	; 0xdb98 <LCD_ClrPixel+0x6c>
    dba0:	80 95       	com	r24
    dba2:	48 23       	and	r20, r24
    dba4:	40 93 00 81 	sts	0x8100, r20
    dba8:	21 96       	adiw	r28, 0x01	; 1
    dbaa:	0f b6       	in	r0, 0x3f	; 63
    dbac:	f8 94       	cli
    dbae:	de bf       	out	0x3e, r29	; 62
    dbb0:	0f be       	out	0x3f, r0	; 63
    dbb2:	cd bf       	out	0x3d, r28	; 61
    dbb4:	df 91       	pop	r29
    dbb6:	cf 91       	pop	r28
    dbb8:	08 95       	ret

0000dbba <LCD_SetHLine>:
	return readback;
}


void LCD_SetHLine( uint8_t x1, uint8_t x2, uint8_t y )
{
    dbba:	cf 93       	push	r28
    dbbc:	df 93       	push	r29
    dbbe:	cd b7       	in	r28, 0x3d	; 61
    dbc0:	de b7       	in	r29, 0x3e	; 62
    dbc2:	21 97       	sbiw	r28, 0x01	; 1
    dbc4:	0f b6       	in	r0, 0x3f	; 63
    dbc6:	f8 94       	cli
    dbc8:	de bf       	out	0x3e, r29	; 62
    dbca:	0f be       	out	0x3f, r0	; 63
    dbcc:	cd bf       	out	0x3d, r28	; 61
    dbce:	58 2f       	mov	r21, r24
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    dbd0:	68 17       	cp	r22, r24
    dbd2:	10 f4       	brcc	.+4      	; 0xdbd8 <LCD_SetHLine+0x1e>
		uint8_t temp = x1;
		x1 = x2;
    dbd4:	56 2f       	mov	r21, r22
		x2 = temp;
    dbd6:	68 2f       	mov	r22, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dbd8:	40 98       	cbi	0x08, 0	; 8
    dbda:	80 ee       	ldi	r24, 0xE0	; 224
    dbdc:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dbe0:	84 2f       	mov	r24, r20
    dbe2:	86 95       	lsr	r24
    dbe4:	86 95       	lsr	r24
    dbe6:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dbe8:	40 98       	cbi	0x08, 0	; 8
    dbea:	80 6b       	ori	r24, 0xB0	; 176
    dbec:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dbf0:	85 2f       	mov	r24, r21
    dbf2:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dbf4:	40 98       	cbi	0x08, 0	; 8
    dbf6:	99 27       	eor	r25, r25
    dbf8:	e4 e0       	ldi	r30, 0x04	; 4
    dbfa:	96 95       	lsr	r25
    dbfc:	87 95       	ror	r24
    dbfe:	ea 95       	dec	r30
    dc00:	e1 f7       	brne	.-8      	; 0xdbfa <LCD_SetHLine+0x40>
    dc02:	80 61       	ori	r24, 0x10	; 16
    dc04:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc08:	40 98       	cbi	0x08, 0	; 8
    dc0a:	85 2f       	mov	r24, r21
    dc0c:	8f 70       	andi	r24, 0x0F	; 15
    dc0e:	80 93 00 80 	sts	0x8000, r24
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x1 );

	// Read 8-pixel high columns, modify correct pixel and write back.
	uint8_t width = x2 - x1 + 1;
    dc12:	65 1b       	sub	r22, r21
    dc14:	6f 5f       	subi	r22, 0xFF	; 255
	uint8_t pixelMask = 1 << (y & 0x07);
    dc16:	24 2f       	mov	r18, r20
    dc18:	33 27       	eor	r19, r19
    dc1a:	27 70       	andi	r18, 0x07	; 7
    dc1c:	30 70       	andi	r19, 0x00	; 0
    dc1e:	81 e0       	ldi	r24, 0x01	; 1
    dc20:	90 e0       	ldi	r25, 0x00	; 0
    dc22:	02 c0       	rjmp	.+4      	; 0xdc28 <LCD_SetHLine+0x6e>
    dc24:	88 0f       	add	r24, r24
    dc26:	99 1f       	adc	r25, r25
    dc28:	2a 95       	dec	r18
    dc2a:	e2 f7       	brpl	.-8      	; 0xdc24 <LCD_SetHLine+0x6a>
    dc2c:	98 2f       	mov	r25, r24
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    dc2e:	40 9a       	sbi	0x08, 0	; 8
    dc30:	80 91 00 81 	lds	r24, 0x8100
    dc34:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixel and write back.
	    uint8_t readback = S6B1713_ReadData(); 
    dc36:	40 9a       	sbi	0x08, 0	; 8
    dc38:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | pixelMask );
    dc3c:	40 9a       	sbi	0x08, 0	; 8
    dc3e:	89 2b       	or	r24, r25
    dc40:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    dc44:	61 50       	subi	r22, 0x01	; 1
    dc46:	99 f7       	brne	.-26     	; 0xdc2e <LCD_SetHLine+0x74>
    dc48:	21 96       	adiw	r28, 0x01	; 1
    dc4a:	0f b6       	in	r0, 0x3f	; 63
    dc4c:	f8 94       	cli
    dc4e:	de bf       	out	0x3e, r29	; 62
    dc50:	0f be       	out	0x3f, r0	; 63
    dc52:	cd bf       	out	0x3d, r28	; 61
    dc54:	df 91       	pop	r29
    dc56:	cf 91       	pop	r28
    dc58:	08 95       	ret

0000dc5a <LCD_SetVLine>:
	} while (--width > 0);
}


void LCD_SetVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    dc5a:	cf 93       	push	r28
    dc5c:	df 93       	push	r29
    dc5e:	cd b7       	in	r28, 0x3d	; 61
    dc60:	de b7       	in	r29, 0x3e	; 62
    dc62:	21 97       	sbiw	r28, 0x01	; 1
    dc64:	0f b6       	in	r0, 0x3f	; 63
    dc66:	f8 94       	cli
    dc68:	de bf       	out	0x3e, r29	; 62
    dc6a:	0f be       	out	0x3f, r0	; 63
    dc6c:	cd bf       	out	0x3d, r28	; 61
    dc6e:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dc70:	46 17       	cp	r20, r22
    dc72:	18 f4       	brcc	.+6      	; 0xdc7a <LCD_SetVLine+0x20>
		uint8_t temp = y1;
    dc74:	86 2f       	mov	r24, r22
		y1 = y2;
    dc76:	64 2f       	mov	r22, r20
		y2 = temp;
    dc78:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    dc7a:	76 2f       	mov	r23, r22
    dc7c:	76 95       	lsr	r23
    dc7e:	76 95       	lsr	r23
    dc80:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    dc82:	54 2f       	mov	r21, r20
    dc84:	56 95       	lsr	r21
    dc86:	56 95       	lsr	r21
    dc88:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    dc8a:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    dc8c:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = 0xff << y1Bit;
    dc8e:	8f ef       	ldi	r24, 0xFF	; 255
    dc90:	90 e0       	ldi	r25, 0x00	; 0
    dc92:	28 2f       	mov	r18, r24
    dc94:	01 c0       	rjmp	.+2      	; 0xdc98 <LCD_SetVLine+0x3e>
    dc96:	22 0f       	add	r18, r18
    dc98:	6a 95       	dec	r22
    dc9a:	ea f7       	brpl	.-6      	; 0xdc96 <LCD_SetVLine+0x3c>
    dc9c:	62 2f       	mov	r22, r18
	uint8_t y2PixelMask = 0xff >> (7 - y2Bit);
    dc9e:	27 e0       	ldi	r18, 0x07	; 7
    dca0:	30 e0       	ldi	r19, 0x00	; 0
    dca2:	24 1b       	sub	r18, r20
    dca4:	31 09       	sbc	r19, r1
    dca6:	02 c0       	rjmp	.+4      	; 0xdcac <LCD_SetVLine+0x52>
    dca8:	95 95       	asr	r25
    dcaa:	87 95       	ror	r24
    dcac:	2a 95       	dec	r18
    dcae:	e2 f7       	brpl	.-8      	; 0xdca8 <LCD_SetVLine+0x4e>
    dcb0:	f8 2f       	mov	r31, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dcb2:	40 98       	cbi	0x08, 0	; 8
    dcb4:	80 ee       	ldi	r24, 0xE0	; 224
    dcb6:	80 93 00 80 	sts	0x8000, r24
    dcba:	9e 2f       	mov	r25, r30
    dcbc:	9f 77       	andi	r25, 0x7F	; 127
    dcbe:	4e 2f       	mov	r20, r30
    dcc0:	4f 70       	andi	r20, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dcc2:	75 17       	cp	r23, r21
    dcc4:	e9 f4       	brne	.+58     	; 0xdd00 <LCD_SetVLine+0xa6>
		uint8_t pixelMask = y1PixelMask & y2PixelMask;
    dcc6:	6f 23       	and	r22, r31

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dcc8:	40 98       	cbi	0x08, 0	; 8
    dcca:	50 6b       	ori	r21, 0xB0	; 176
    dccc:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dcd0:	40 98       	cbi	0x08, 0	; 8
    dcd2:	89 2f       	mov	r24, r25
    dcd4:	99 27       	eor	r25, r25
    dcd6:	54 e0       	ldi	r21, 0x04	; 4
    dcd8:	96 95       	lsr	r25
    dcda:	87 95       	ror	r24
    dcdc:	5a 95       	dec	r21
    dcde:	e1 f7       	brne	.-8      	; 0xdcd8 <LCD_SetVLine+0x7e>
    dce0:	80 61       	ori	r24, 0x10	; 16
    dce2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dce6:	40 98       	cbi	0x08, 0	; 8
    dce8:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dcec:	40 9a       	sbi	0x08, 0	; 8
    dcee:	80 91 00 81 	lds	r24, 0x8100
    dcf2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dcf4:	40 9a       	sbi	0x08, 0	; 8
    dcf6:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | pixelMask );
    dcfa:	40 9a       	sbi	0x08, 0	; 8
    dcfc:	86 2b       	or	r24, r22
    dcfe:	5a c0       	rjmp	.+180    	; 0xddb4 <LCD_SetVLine+0x15a>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    dd00:	25 2f       	mov	r18, r21
    dd02:	27 1b       	sub	r18, r23
    dd04:	21 50       	subi	r18, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd06:	40 98       	cbi	0x08, 0	; 8
    dd08:	87 2f       	mov	r24, r23
    dd0a:	80 6b       	ori	r24, 0xB0	; 176
    dd0c:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd10:	40 98       	cbi	0x08, 0	; 8
    dd12:	89 2f       	mov	r24, r25
    dd14:	99 27       	eor	r25, r25
    dd16:	34 e0       	ldi	r19, 0x04	; 4
    dd18:	96 95       	lsr	r25
    dd1a:	87 95       	ror	r24
    dd1c:	3a 95       	dec	r19
    dd1e:	e1 f7       	brne	.-8      	; 0xdd18 <LCD_SetVLine+0xbe>
    dd20:	98 2f       	mov	r25, r24
    dd22:	90 61       	ori	r25, 0x10	; 16
    dd24:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd28:	40 98       	cbi	0x08, 0	; 8
    dd2a:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dd2e:	40 9a       	sbi	0x08, 0	; 8
    dd30:	80 91 00 81 	lds	r24, 0x8100
    dd34:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    dd36:	40 9a       	sbi	0x08, 0	; 8
    dd38:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | y1PixelMask );
    dd3c:	40 9a       	sbi	0x08, 0	; 8
    dd3e:	86 2b       	or	r24, r22
    dd40:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    dd44:	37 2f       	mov	r19, r23
    dd46:	3f 5f       	subi	r19, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Set all pixels.
			S6B1713_WriteData( 0xff );
    dd48:	82 2f       	mov	r24, r18
    dd4a:	21 50       	subi	r18, 0x01	; 1
    dd4c:	18 16       	cp	r1, r24
    dd4e:	ac f4       	brge	.+42     	; 0xdd7a <LCD_SetVLine+0x120>
    dd50:	6f ef       	ldi	r22, 0xFF	; 255
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dd52:	83 2f       	mov	r24, r19
    dd54:	3f 5f       	subi	r19, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dd56:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd58:	40 98       	cbi	0x08, 0	; 8
    dd5a:	80 6b       	ori	r24, 0xB0	; 176
    dd5c:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd60:	40 98       	cbi	0x08, 0	; 8
    dd62:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd66:	40 98       	cbi	0x08, 0	; 8
    dd68:	40 93 00 80 	sts	0x8000, r20
    dd6c:	40 9a       	sbi	0x08, 0	; 8
    dd6e:	60 93 00 81 	sts	0x8100, r22
    dd72:	82 2f       	mov	r24, r18
    dd74:	21 50       	subi	r18, 0x01	; 1
    dd76:	18 16       	cp	r1, r24
    dd78:	64 f3       	brlt	.-40     	; 0xdd52 <LCD_SetVLine+0xf8>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd7a:	40 98       	cbi	0x08, 0	; 8
    dd7c:	50 6b       	ori	r21, 0xB0	; 176
    dd7e:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dd82:	8e 2f       	mov	r24, r30
    dd84:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd86:	40 98       	cbi	0x08, 0	; 8
    dd88:	99 27       	eor	r25, r25
    dd8a:	b4 e0       	ldi	r27, 0x04	; 4
    dd8c:	96 95       	lsr	r25
    dd8e:	87 95       	ror	r24
    dd90:	ba 95       	dec	r27
    dd92:	e1 f7       	brne	.-8      	; 0xdd8c <LCD_SetVLine+0x132>
    dd94:	80 61       	ori	r24, 0x10	; 16
    dd96:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd9a:	40 98       	cbi	0x08, 0	; 8
    dd9c:	ef 70       	andi	r30, 0x0F	; 15
    dd9e:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    dda2:	40 9a       	sbi	0x08, 0	; 8
    dda4:	80 91 00 81 	lds	r24, 0x8100
    dda8:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    ddaa:	40 9a       	sbi	0x08, 0	; 8
    ddac:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | y2PixelMask );
    ddb0:	40 9a       	sbi	0x08, 0	; 8
    ddb2:	8f 2b       	or	r24, r31
    ddb4:	80 93 00 81 	sts	0x8100, r24
    ddb8:	21 96       	adiw	r28, 0x01	; 1
    ddba:	0f b6       	in	r0, 0x3f	; 63
    ddbc:	f8 94       	cli
    ddbe:	de bf       	out	0x3e, r29	; 62
    ddc0:	0f be       	out	0x3f, r0	; 63
    ddc2:	cd bf       	out	0x3d, r28	; 61
    ddc4:	df 91       	pop	r29
    ddc6:	cf 91       	pop	r28
    ddc8:	08 95       	ret

0000ddca <LCD_ClrVLine>:
	}
}


void LCD_ClrVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    ddca:	cf 93       	push	r28
    ddcc:	df 93       	push	r29
    ddce:	cd b7       	in	r28, 0x3d	; 61
    ddd0:	de b7       	in	r29, 0x3e	; 62
    ddd2:	21 97       	sbiw	r28, 0x01	; 1
    ddd4:	0f b6       	in	r0, 0x3f	; 63
    ddd6:	f8 94       	cli
    ddd8:	de bf       	out	0x3e, r29	; 62
    ddda:	0f be       	out	0x3f, r0	; 63
    dddc:	cd bf       	out	0x3d, r28	; 61
    ddde:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    dde0:	46 17       	cp	r20, r22
    dde2:	18 f4       	brcc	.+6      	; 0xddea <LCD_ClrVLine+0x20>
		uint8_t temp = y1;
    dde4:	86 2f       	mov	r24, r22
		y1 = y2;
    dde6:	64 2f       	mov	r22, r20
		y2 = temp;
    dde8:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    ddea:	76 2f       	mov	r23, r22
    ddec:	76 95       	lsr	r23
    ddee:	76 95       	lsr	r23
    ddf0:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    ddf2:	54 2f       	mov	r21, r20
    ddf4:	56 95       	lsr	r21
    ddf6:	56 95       	lsr	r21
    ddf8:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    ddfa:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    ddfc:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    ddfe:	2f ef       	ldi	r18, 0xFF	; 255
    de00:	30 e0       	ldi	r19, 0x00	; 0
    de02:	c9 01       	movw	r24, r18
    de04:	02 c0       	rjmp	.+4      	; 0xde0a <LCD_ClrVLine+0x40>
    de06:	88 0f       	add	r24, r24
    de08:	99 1f       	adc	r25, r25
    de0a:	6a 95       	dec	r22
    de0c:	e2 f7       	brpl	.-8      	; 0xde06 <LCD_ClrVLine+0x3c>
    de0e:	68 2f       	mov	r22, r24
    de10:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    de12:	87 e0       	ldi	r24, 0x07	; 7
    de14:	90 e0       	ldi	r25, 0x00	; 0
    de16:	84 1b       	sub	r24, r20
    de18:	91 09       	sbc	r25, r1
    de1a:	02 c0       	rjmp	.+4      	; 0xde20 <LCD_ClrVLine+0x56>
    de1c:	35 95       	asr	r19
    de1e:	27 95       	ror	r18
    de20:	8a 95       	dec	r24
    de22:	e2 f7       	brpl	.-8      	; 0xde1c <LCD_ClrVLine+0x52>
    de24:	20 95       	com	r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    de26:	40 98       	cbi	0x08, 0	; 8
    de28:	80 ee       	ldi	r24, 0xE0	; 224
    de2a:	80 93 00 80 	sts	0x8000, r24
    de2e:	9e 2f       	mov	r25, r30
    de30:	9f 77       	andi	r25, 0x7F	; 127
    de32:	fe 2f       	mov	r31, r30
    de34:	ff 70       	andi	r31, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    de36:	75 17       	cp	r23, r21
    de38:	e9 f4       	brne	.+58     	; 0xde74 <LCD_ClrVLine+0xaa>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    de3a:	62 2b       	or	r22, r18

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de3c:	40 98       	cbi	0x08, 0	; 8
    de3e:	50 6b       	ori	r21, 0xB0	; 176
    de40:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de44:	40 98       	cbi	0x08, 0	; 8
    de46:	89 2f       	mov	r24, r25
    de48:	99 27       	eor	r25, r25
    de4a:	b4 e0       	ldi	r27, 0x04	; 4
    de4c:	96 95       	lsr	r25
    de4e:	87 95       	ror	r24
    de50:	ba 95       	dec	r27
    de52:	e1 f7       	brne	.-8      	; 0xde4c <LCD_ClrVLine+0x82>
    de54:	80 61       	ori	r24, 0x10	; 16
    de56:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de5a:	40 98       	cbi	0x08, 0	; 8
    de5c:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    de60:	40 9a       	sbi	0x08, 0	; 8
    de62:	80 91 00 81 	lds	r24, 0x8100
    de66:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    de68:	40 9a       	sbi	0x08, 0	; 8
    de6a:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & pixelMask );
    de6e:	40 9a       	sbi	0x08, 0	; 8
    de70:	86 23       	and	r24, r22
    de72:	56 c0       	rjmp	.+172    	; 0xdf20 <LCD_ClrVLine+0x156>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    de74:	35 2f       	mov	r19, r21
    de76:	37 1b       	sub	r19, r23
    de78:	31 50       	subi	r19, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de7a:	40 98       	cbi	0x08, 0	; 8
    de7c:	87 2f       	mov	r24, r23
    de7e:	80 6b       	ori	r24, 0xB0	; 176
    de80:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de84:	40 98       	cbi	0x08, 0	; 8
    de86:	89 2f       	mov	r24, r25
    de88:	99 27       	eor	r25, r25
    de8a:	a4 e0       	ldi	r26, 0x04	; 4
    de8c:	96 95       	lsr	r25
    de8e:	87 95       	ror	r24
    de90:	aa 95       	dec	r26
    de92:	e1 f7       	brne	.-8      	; 0xde8c <LCD_ClrVLine+0xc2>
    de94:	98 2f       	mov	r25, r24
    de96:	90 61       	ori	r25, 0x10	; 16
    de98:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de9c:	40 98       	cbi	0x08, 0	; 8
    de9e:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    dea2:	40 9a       	sbi	0x08, 0	; 8
    dea4:	80 91 00 81 	lds	r24, 0x8100
    dea8:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    deaa:	40 9a       	sbi	0x08, 0	; 8
    deac:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & y1PixelMask );
    deb0:	40 9a       	sbi	0x08, 0	; 8
    deb2:	86 23       	and	r24, r22
    deb4:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    deb8:	47 2f       	mov	r20, r23
    deba:	4f 5f       	subi	r20, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Clear all pixels.
			S6B1713_WriteData( 0x00 );
    debc:	83 2f       	mov	r24, r19
    debe:	31 50       	subi	r19, 0x01	; 1
    dec0:	18 16       	cp	r1, r24
    dec2:	8c f4       	brge	.+34     	; 0xdee6 <LCD_ClrVLine+0x11c>
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dec4:	84 2f       	mov	r24, r20
    dec6:	4f 5f       	subi	r20, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dec8:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    deca:	40 98       	cbi	0x08, 0	; 8
    decc:	80 6b       	ori	r24, 0xB0	; 176
    dece:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    ded2:	40 98       	cbi	0x08, 0	; 8
    ded4:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    ded8:	40 98       	cbi	0x08, 0	; 8
    deda:	f0 93 00 80 	sts	0x8000, r31
    dede:	40 9a       	sbi	0x08, 0	; 8
    dee0:	10 92 00 81 	sts	0x8100, r1
    dee4:	eb cf       	rjmp	.-42     	; 0xdebc <LCD_ClrVLine+0xf2>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dee6:	40 98       	cbi	0x08, 0	; 8
    dee8:	50 6b       	ori	r21, 0xB0	; 176
    deea:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    deee:	8e 2f       	mov	r24, r30
    def0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    def2:	40 98       	cbi	0x08, 0	; 8
    def4:	99 27       	eor	r25, r25
    def6:	64 e0       	ldi	r22, 0x04	; 4
    def8:	96 95       	lsr	r25
    defa:	87 95       	ror	r24
    defc:	6a 95       	dec	r22
    defe:	e1 f7       	brne	.-8      	; 0xdef8 <LCD_ClrVLine+0x12e>
    df00:	80 61       	ori	r24, 0x10	; 16
    df02:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df06:	40 98       	cbi	0x08, 0	; 8
    df08:	ef 70       	andi	r30, 0x0F	; 15
    df0a:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    df0e:	40 9a       	sbi	0x08, 0	; 8
    df10:	80 91 00 81 	lds	r24, 0x8100
    df14:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    df16:	40 9a       	sbi	0x08, 0	; 8
    df18:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback & y2PixelMask );
    df1c:	40 9a       	sbi	0x08, 0	; 8
    df1e:	82 23       	and	r24, r18
    df20:	80 93 00 81 	sts	0x8100, r24
    df24:	21 96       	adiw	r28, 0x01	; 1
    df26:	0f b6       	in	r0, 0x3f	; 63
    df28:	f8 94       	cli
    df2a:	de bf       	out	0x3e, r29	; 62
    df2c:	0f be       	out	0x3f, r0	; 63
    df2e:	cd bf       	out	0x3d, r28	; 61
    df30:	df 91       	pop	r29
    df32:	cf 91       	pop	r28
    df34:	08 95       	ret

0000df36 <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    df36:	cf 93       	push	r28
    df38:	df 93       	push	r29
    df3a:	cd b7       	in	r28, 0x3d	; 61
    df3c:	de b7       	in	r29, 0x3e	; 62
    df3e:	21 97       	sbiw	r28, 0x01	; 1
    df40:	0f b6       	in	r0, 0x3f	; 63
    df42:	f8 94       	cli
    df44:	de bf       	out	0x3e, r29	; 62
    df46:	0f be       	out	0x3f, r0	; 63
    df48:	cd bf       	out	0x3d, r28	; 61
    df4a:	e8 2f       	mov	r30, r24
    df4c:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    df4e:	48 17       	cp	r20, r24
    df50:	10 f4       	brcc	.+4      	; 0xdf56 <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    df52:	e4 2f       	mov	r30, r20
		x2 = temp;
    df54:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    df56:	56 17       	cp	r21, r22
    df58:	18 f4       	brcc	.+6      	; 0xdf60 <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    df5a:	86 2f       	mov	r24, r22
		y1 = y2;
    df5c:	65 2f       	mov	r22, r21
		y2 = temp;
    df5e:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    df60:	f6 2f       	mov	r31, r22
    df62:	f6 95       	lsr	r31
    df64:	f6 95       	lsr	r31
    df66:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    df68:	75 2f       	mov	r23, r21
    df6a:	76 95       	lsr	r23
    df6c:	76 95       	lsr	r23
    df6e:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    df70:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    df72:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    df74:	2f ef       	ldi	r18, 0xFF	; 255
    df76:	30 e0       	ldi	r19, 0x00	; 0
    df78:	c9 01       	movw	r24, r18
    df7a:	02 c0       	rjmp	.+4      	; 0xdf80 <LCD_ClrBox+0x4a>
    df7c:	88 0f       	add	r24, r24
    df7e:	99 1f       	adc	r25, r25
    df80:	6a 95       	dec	r22
    df82:	e2 f7       	brpl	.-8      	; 0xdf7c <LCD_ClrBox+0x46>
    df84:	68 2f       	mov	r22, r24
    df86:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    df88:	87 e0       	ldi	r24, 0x07	; 7
    df8a:	90 e0       	ldi	r25, 0x00	; 0
    df8c:	85 1b       	sub	r24, r21
    df8e:	91 09       	sbc	r25, r1
    df90:	02 c0       	rjmp	.+4      	; 0xdf96 <LCD_ClrBox+0x60>
    df92:	35 95       	asr	r19
    df94:	27 95       	ror	r18
    df96:	8a 95       	dec	r24
    df98:	e2 f7       	brpl	.-8      	; 0xdf92 <LCD_ClrBox+0x5c>
    df9a:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    df9c:	4e 1b       	sub	r20, r30
    df9e:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dfa0:	40 98       	cbi	0x08, 0	; 8
    dfa2:	80 ee       	ldi	r24, 0xE0	; 224
    dfa4:	80 93 00 80 	sts	0x8000, r24
    dfa8:	ae 2f       	mov	r26, r30
    dfaa:	af 77       	andi	r26, 0x7F	; 127
    dfac:	be 2f       	mov	r27, r30
    dfae:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    dfb0:	f7 17       	cp	r31, r23
    dfb2:	11 f5       	brne	.+68     	; 0xdff8 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    dfb4:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dfb6:	40 98       	cbi	0x08, 0	; 8
    dfb8:	70 6b       	ori	r23, 0xB0	; 176
    dfba:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfbe:	40 98       	cbi	0x08, 0	; 8
    dfc0:	8a 2f       	mov	r24, r26
    dfc2:	99 27       	eor	r25, r25
    dfc4:	54 e0       	ldi	r21, 0x04	; 4
    dfc6:	96 95       	lsr	r25
    dfc8:	87 95       	ror	r24
    dfca:	5a 95       	dec	r21
    dfcc:	e1 f7       	brne	.-8      	; 0xdfc6 <LCD_ClrBox+0x90>
    dfce:	80 61       	ori	r24, 0x10	; 16
    dfd0:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfd4:	40 98       	cbi	0x08, 0	; 8
    dfd6:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dfda:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dfdc:	40 9a       	sbi	0x08, 0	; 8
    dfde:	80 91 00 81 	lds	r24, 0x8100
    dfe2:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    dfe4:	40 9a       	sbi	0x08, 0	; 8
    dfe6:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    dfea:	40 9a       	sbi	0x08, 0	; 8
    dfec:	82 23       	and	r24, r18
    dfee:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    dff2:	31 50       	subi	r19, 0x01	; 1
    dff4:	99 f7       	brne	.-26     	; 0xdfdc <LCD_ClrBox+0xa6>
    dff6:	6b c0       	rjmp	.+214    	; 0xe0ce <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    dff8:	57 2f       	mov	r21, r23
    dffa:	5f 1b       	sub	r21, r31
    dffc:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dffe:	40 98       	cbi	0x08, 0	; 8
    e000:	8f 2f       	mov	r24, r31
    e002:	80 6b       	ori	r24, 0xB0	; 176
    e004:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e008:	40 98       	cbi	0x08, 0	; 8
    e00a:	8a 2f       	mov	r24, r26
    e00c:	99 27       	eor	r25, r25
    e00e:	34 e0       	ldi	r19, 0x04	; 4
    e010:	96 95       	lsr	r25
    e012:	87 95       	ror	r24
    e014:	3a 95       	dec	r19
    e016:	e1 f7       	brne	.-8      	; 0xe010 <LCD_ClrBox+0xda>
    e018:	80 61       	ori	r24, 0x10	; 16
    e01a:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e01e:	40 98       	cbi	0x08, 0	; 8
    e020:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    e024:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    e026:	40 9a       	sbi	0x08, 0	; 8
    e028:	80 91 00 81 	lds	r24, 0x8100
    e02c:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    e02e:	40 9a       	sbi	0x08, 0	; 8
    e030:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    e034:	40 9a       	sbi	0x08, 0	; 8
    e036:	86 23       	and	r24, r22
    e038:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    e03c:	31 50       	subi	r19, 0x01	; 1
    e03e:	99 f7       	brne	.-26     	; 0xe026 <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    e040:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    e042:	85 2f       	mov	r24, r21
    e044:	51 50       	subi	r21, 0x01	; 1
    e046:	18 16       	cp	r1, r24
    e048:	04 f5       	brge	.+64     	; 0xe08a <LCD_ClrBox+0x154>
    e04a:	8a 2f       	mov	r24, r26
    e04c:	99 27       	eor	r25, r25
    e04e:	64 e0       	ldi	r22, 0x04	; 4
    e050:	96 95       	lsr	r25
    e052:	87 95       	ror	r24
    e054:	6a 95       	dec	r22
    e056:	e1 f7       	brne	.-8      	; 0xe050 <LCD_ClrBox+0x11a>
    e058:	98 2f       	mov	r25, r24
    e05a:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    e05c:	8f 2f       	mov	r24, r31
    e05e:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e060:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e062:	40 98       	cbi	0x08, 0	; 8
    e064:	80 6b       	ori	r24, 0xB0	; 176
    e066:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e06a:	40 98       	cbi	0x08, 0	; 8
    e06c:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e070:	40 98       	cbi	0x08, 0	; 8
    e072:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    e076:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    e078:	40 9a       	sbi	0x08, 0	; 8
    e07a:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    e07e:	31 50       	subi	r19, 0x01	; 1
    e080:	d9 f7       	brne	.-10     	; 0xe078 <LCD_ClrBox+0x142>
    e082:	85 2f       	mov	r24, r21
    e084:	51 50       	subi	r21, 0x01	; 1
    e086:	18 16       	cp	r1, r24
    e088:	4c f3       	brlt	.-46     	; 0xe05c <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e08a:	40 98       	cbi	0x08, 0	; 8
    e08c:	70 6b       	ori	r23, 0xB0	; 176
    e08e:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e092:	8e 2f       	mov	r24, r30
    e094:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e096:	40 98       	cbi	0x08, 0	; 8
    e098:	99 27       	eor	r25, r25
    e09a:	54 e0       	ldi	r21, 0x04	; 4
    e09c:	96 95       	lsr	r25
    e09e:	87 95       	ror	r24
    e0a0:	5a 95       	dec	r21
    e0a2:	e1 f7       	brne	.-8      	; 0xe09c <LCD_ClrBox+0x166>
    e0a4:	80 61       	ori	r24, 0x10	; 16
    e0a6:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e0aa:	40 98       	cbi	0x08, 0	; 8
    e0ac:	ef 70       	andi	r30, 0x0F	; 15
    e0ae:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    e0b2:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    e0b4:	40 9a       	sbi	0x08, 0	; 8
    e0b6:	80 91 00 81 	lds	r24, 0x8100
    e0ba:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    e0bc:	40 9a       	sbi	0x08, 0	; 8
    e0be:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    e0c2:	40 9a       	sbi	0x08, 0	; 8
    e0c4:	82 23       	and	r24, r18
    e0c6:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    e0ca:	31 50       	subi	r19, 0x01	; 1
    e0cc:	99 f7       	brne	.-26     	; 0xe0b4 <LCD_ClrBox+0x17e>
    e0ce:	21 96       	adiw	r28, 0x01	; 1
    e0d0:	0f b6       	in	r0, 0x3f	; 63
    e0d2:	f8 94       	cli
    e0d4:	de bf       	out	0x3e, r29	; 62
    e0d6:	0f be       	out	0x3f, r0	; 63
    e0d8:	cd bf       	out	0x3d, r28	; 61
    e0da:	df 91       	pop	r29
    e0dc:	cf 91       	pop	r28
    e0de:	08 95       	ret

0000e0e0 <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    e0e0:	cf 93       	push	r28
    e0e2:	df 93       	push	r29
    e0e4:	cd b7       	in	r28, 0x3d	; 61
    e0e6:	de b7       	in	r29, 0x3e	; 62
    e0e8:	21 97       	sbiw	r28, 0x01	; 1
    e0ea:	0f b6       	in	r0, 0x3f	; 63
    e0ec:	f8 94       	cli
    e0ee:	de bf       	out	0x3e, r29	; 62
    e0f0:	0f be       	out	0x3f, r0	; 63
    e0f2:	cd bf       	out	0x3d, r28	; 61
    e0f4:	36 2f       	mov	r19, r22
    e0f6:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    e0f8:	40 98       	cbi	0x08, 0	; 8
    e0fa:	90 ee       	ldi	r25, 0xE0	; 224
    e0fc:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e100:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e102:	40 98       	cbi	0x08, 0	; 8
    e104:	30 6b       	ori	r19, 0xB0	; 176
    e106:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e10a:	94 2f       	mov	r25, r20
    e10c:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e10e:	40 98       	cbi	0x08, 0	; 8
    e110:	29 2f       	mov	r18, r25
    e112:	33 27       	eor	r19, r19
    e114:	e4 e0       	ldi	r30, 0x04	; 4
    e116:	36 95       	lsr	r19
    e118:	27 95       	ror	r18
    e11a:	ea 95       	dec	r30
    e11c:	e1 f7       	brne	.-8      	; 0xe116 <LCD_ClrPage+0x36>
    e11e:	92 2f       	mov	r25, r18
    e120:	90 61       	ori	r25, 0x10	; 16
    e122:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e126:	40 98       	cbi	0x08, 0	; 8
    e128:	4f 70       	andi	r20, 0x0F	; 15
    e12a:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    e12e:	98 2f       	mov	r25, r24
    e130:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    e132:	40 9a       	sbi	0x08, 0	; 8
    e134:	80 91 00 81 	lds	r24, 0x8100
    e138:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    e13a:	40 9a       	sbi	0x08, 0	; 8
    e13c:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    e140:	40 9a       	sbi	0x08, 0	; 8
    e142:	89 23       	and	r24, r25
    e144:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    e148:	51 50       	subi	r21, 0x01	; 1
    e14a:	99 f7       	brne	.-26     	; 0xe132 <LCD_ClrPage+0x52>
    e14c:	21 96       	adiw	r28, 0x01	; 1
    e14e:	0f b6       	in	r0, 0x3f	; 63
    e150:	f8 94       	cli
    e152:	de bf       	out	0x3e, r29	; 62
    e154:	0f be       	out	0x3f, r0	; 63
    e156:	cd bf       	out	0x3d, r28	; 61
    e158:	df 91       	pop	r29
    e15a:	cf 91       	pop	r28
    e15c:	08 95       	ret

0000e15e <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    e15e:	fc 01       	movw	r30, r24
    e160:	86 2f       	mov	r24, r22
    e162:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    e164:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    e166:	40 98       	cbi	0x08, 0	; 8
    e168:	80 6b       	ori	r24, 0xB0	; 176
    e16a:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    e16e:	84 2f       	mov	r24, r20
    e170:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    e172:	40 98       	cbi	0x08, 0	; 8
    e174:	99 27       	eor	r25, r25
    e176:	44 e0       	ldi	r20, 0x04	; 4
    e178:	96 95       	lsr	r25
    e17a:	87 95       	ror	r24
    e17c:	4a 95       	dec	r20
    e17e:	e1 f7       	brne	.-8      	; 0xe178 <LCD_WritePage_F+0x1a>
    e180:	80 61       	ori	r24, 0x10	; 16
    e182:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    e186:	40 98       	cbi	0x08, 0	; 8
    e188:	3f 70       	andi	r19, 0x0F	; 15
    e18a:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    e18e:	40 9a       	sbi	0x08, 0	; 8
    e190:	84 91       	lpm	r24, Z+
    e192:	80 93 00 81 	sts	0x8100, r24
		data++;
    e196:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    e198:	21 50       	subi	r18, 0x01	; 1
    e19a:	c9 f7       	brne	.-14     	; 0xe18e <LCD_WritePage_F+0x30>
    e19c:	08 95       	ret

0000e19e <POPUP_MsgBox>:
 * \param  margin         Number of pixels between the text and the sides of the box
 * \param  str            Pointer to a null-terminated string. Supports LF and CR.
 * \param  parentForm     If specified, this form will be redrawn before the function returns
 */
void POPUP_MsgBox( uint8_t widthInChars, uint8_t heightInPages, uint8_t margin, char const * str, FORMS_form_t * parentForm )
{
    e19e:	4f 92       	push	r4
    e1a0:	5f 92       	push	r5
    e1a2:	6f 92       	push	r6
    e1a4:	7f 92       	push	r7
    e1a6:	8f 92       	push	r8
    e1a8:	9f 92       	push	r9
    e1aa:	af 92       	push	r10
    e1ac:	bf 92       	push	r11
    e1ae:	cf 92       	push	r12
    e1b0:	df 92       	push	r13
    e1b2:	ef 92       	push	r14
    e1b4:	ff 92       	push	r15
    e1b6:	0f 93       	push	r16
    e1b8:	1f 93       	push	r17
    e1ba:	cf 93       	push	r28
    e1bc:	c8 2f       	mov	r28, r24
    e1be:	d6 2e       	mov	r13, r22
    e1c0:	e4 2e       	mov	r14, r20
    e1c2:	49 01       	movw	r8, r18
    e1c4:	38 01       	movw	r6, r16
	// Reset any hardware LCD scrolling first.
	if (parentForm != NULL) {
    e1c6:	01 15       	cp	r16, r1
    e1c8:	11 05       	cpc	r17, r1
    e1ca:	19 f0       	breq	.+6      	; 0xe1d2 <POPUP_MsgBox+0x34>
		FORMS_NormalizeLCDScroll( parentForm );
    e1cc:	c8 01       	movw	r24, r16
    e1ce:	0e 94 ba 78 	call	0xf174	; 0xf174 <FORMS_NormalizeLCDScroll>
	}
	
	// Calculate some coordinates, with text centered in screen.
	uint8_t const widthInPixels = widthInChars * TERMFONT_CHAR_WIDTH;
    e1d2:	86 e0       	ldi	r24, 0x06	; 6
    e1d4:	c8 9f       	mul	r28, r24
    e1d6:	80 2d       	mov	r24, r0
    e1d8:	11 24       	eor	r1, r1
	uint8_t const startColumn = (LCD_WIDTH / 2) - (widthInPixels / 2);
    e1da:	86 95       	lsr	r24
    e1dc:	30 e4       	ldi	r19, 0x40	; 64
    e1de:	43 2e       	mov	r4, r19
    e1e0:	48 1a       	sub	r4, r24
	uint8_t const startX = startColumn - margin;
    e1e2:	b4 2c       	mov	r11, r4
    e1e4:	be 18       	sub	r11, r14
	uint8_t const endColumn = (LCD_WIDTH / 2) + (widthInPixels / 2);
    e1e6:	a8 2e       	mov	r10, r24
    e1e8:	80 e4       	ldi	r24, 0x40	; 64
    e1ea:	a8 0e       	add	r10, r24
	uint8_t const endX = endColumn + margin;
    e1ec:	ca 2d       	mov	r28, r10
    e1ee:	ce 0d       	add	r28, r14
	uint8_t const startPage = (LCD_HEIGHT / LCD_PAGE_HEIGHT / 2) - 1 - ((heightInPages - 1) / 2);
    e1f0:	2d 2d       	mov	r18, r13
    e1f2:	33 27       	eor	r19, r19
    e1f4:	c9 01       	movw	r24, r18
    e1f6:	01 97       	sbiw	r24, 0x01	; 1
    e1f8:	97 fd       	sbrc	r25, 7
    e1fa:	c9 01       	movw	r24, r18
    e1fc:	95 95       	asr	r25
    e1fe:	87 95       	ror	r24
    e200:	93 e0       	ldi	r25, 0x03	; 3
    e202:	f9 2e       	mov	r15, r25
    e204:	f8 1a       	sub	r15, r24
	uint8_t const startY = (startPage * LCD_PAGE_HEIGHT) - margin;
    e206:	0f 2d       	mov	r16, r15
    e208:	00 0f       	add	r16, r16
    e20a:	00 0f       	add	r16, r16
    e20c:	00 0f       	add	r16, r16
    e20e:	0e 19       	sub	r16, r14
	uint8_t const endPage = startPage + heightInPages;
    e210:	5f 2c       	mov	r5, r15
    e212:	5d 0c       	add	r5, r13
	uint8_t const endY = (endPage * LCD_PAGE_HEIGHT) + margin;
    e214:	15 2d       	mov	r17, r5
    e216:	11 0f       	add	r17, r17
    e218:	11 0f       	add	r17, r17
    e21a:	11 0f       	add	r17, r17
    e21c:	1e 0d       	add	r17, r14
	
	// Draw popup frame.
	LCD_SetHLine( startX, endX, startY );
    e21e:	40 2f       	mov	r20, r16
    e220:	6c 2f       	mov	r22, r28
    e222:	8b 2d       	mov	r24, r11
    e224:	0e 94 dd 6d 	call	0xdbba	; 0xdbba <LCD_SetHLine>
	LCD_SetHLine( startX, endX, endY );
    e228:	41 2f       	mov	r20, r17
    e22a:	6c 2f       	mov	r22, r28
    e22c:	8b 2d       	mov	r24, r11
    e22e:	0e 94 dd 6d 	call	0xdbba	; 0xdbba <LCD_SetHLine>
	LCD_SetHLine( startX + 1, endX + 1, endY + 1 );
    e232:	e1 2e       	mov	r14, r17
    e234:	e3 94       	inc	r14
    e236:	dc 2e       	mov	r13, r28
    e238:	d3 94       	inc	r13
    e23a:	cb 2c       	mov	r12, r11
    e23c:	c3 94       	inc	r12
    e23e:	4e 2d       	mov	r20, r14
    e240:	6d 2d       	mov	r22, r13
    e242:	8c 2d       	mov	r24, r12
    e244:	0e 94 dd 6d 	call	0xdbba	; 0xdbba <LCD_SetHLine>
	LCD_SetVLine( startX, startY, endY );
    e248:	41 2f       	mov	r20, r17
    e24a:	60 2f       	mov	r22, r16
    e24c:	8b 2d       	mov	r24, r11
    e24e:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
	LCD_SetVLine( endX, startY, endY );
    e252:	41 2f       	mov	r20, r17
    e254:	60 2f       	mov	r22, r16
    e256:	8c 2f       	mov	r24, r28
    e258:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
	LCD_SetVLine( endX + 1, startY + 1, endY + 1 );
    e25c:	0f 5f       	subi	r16, 0xFF	; 255
    e25e:	4e 2d       	mov	r20, r14
    e260:	60 2f       	mov	r22, r16
    e262:	8d 2d       	mov	r24, r13
    e264:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
	LCD_ClrBox( startX + 1, startY + 1, endX - 1, endY - 1 );
    e268:	11 50       	subi	r17, 0x01	; 1
    e26a:	c1 50       	subi	r28, 0x01	; 1
    e26c:	21 2f       	mov	r18, r17
    e26e:	4c 2f       	mov	r20, r28
    e270:	60 2f       	mov	r22, r16
    e272:	8c 2d       	mov	r24, r12
    e274:	0e 94 9b 6f 	call	0xdf36	; 0xdf36 <LCD_ClrBox>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
    e278:	c4 2d       	mov	r28, r4
				column = startColumn;
			}
			TERMFONT_DisplayChar( *str, page, column );
			column += TERMFONT_CHAR_WIDTH;
		}
		++str;
    e27a:	f4 01       	movw	r30, r8
    e27c:	80 81       	ld	r24, Z
    e27e:	88 23       	and	r24, r24
    e280:	c9 f0       	breq	.+50     	; 0xe2b4 <POPUP_MsgBox+0x116>
    e282:	f5 14       	cp	r15, r5
    e284:	b8 f4       	brcc	.+46     	; 0xe2b4 <POPUP_MsgBox+0x116>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
	uint8_t page = startPage;
	while ((*str != 0) && (page < endPage)) {
		if (*str == '\r') {
    e286:	8d 30       	cpi	r24, 0x0D	; 13
    e288:	11 f4       	brne	.+4      	; 0xe28e <POPUP_MsgBox+0xf0>
			column = startColumn;
    e28a:	c4 2d       	mov	r28, r4
    e28c:	0d c0       	rjmp	.+26     	; 0xe2a8 <POPUP_MsgBox+0x10a>
		}
		else if (*str == '\n') {
    e28e:	8a 30       	cpi	r24, 0x0A	; 10
    e290:	11 f4       	brne	.+4      	; 0xe296 <POPUP_MsgBox+0xf8>
			++page;
    e292:	f3 94       	inc	r15
    e294:	09 c0       	rjmp	.+18     	; 0xe2a8 <POPUP_MsgBox+0x10a>
		}
		else {
			if (column >= endColumn) {
    e296:	ca 15       	cp	r28, r10
    e298:	10 f0       	brcs	.+4      	; 0xe29e <POPUP_MsgBox+0x100>
				++page;
    e29a:	f3 94       	inc	r15
				column = startColumn;
    e29c:	c4 2d       	mov	r28, r4
			}
			TERMFONT_DisplayChar( *str, page, column );
    e29e:	4c 2f       	mov	r20, r28
    e2a0:	6f 2d       	mov	r22, r15
    e2a2:	0e 94 f1 7b 	call	0xf7e2	; 0xf7e2 <TERMFONT_DisplayChar>
			column += TERMFONT_CHAR_WIDTH;
    e2a6:	ca 5f       	subi	r28, 0xFA	; 250
		}
		++str;
    e2a8:	08 94       	sec
    e2aa:	81 1c       	adc	r8, r1
    e2ac:	91 1c       	adc	r9, r1
    e2ae:	e5 cf       	rjmp	.-54     	; 0xe27a <POPUP_MsgBox+0xdc>
	}
	
	// Wait until joystick is released (could still be held down after select a menu item).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e2b0:	0e 94 81 74 	call	0xe902	; 0xe902 <POWER_EnterIdleSleepMode>
    e2b4:	0e 94 04 74 	call	0xe808	; 0xe808 <JOYSTICK_GetState>
    e2b8:	88 23       	and	r24, r24
    e2ba:	d1 f7       	brne	.-12     	; 0xe2b0 <POPUP_MsgBox+0x112>
	// Wait until joystick is pressed (user wants to exit popup box).
	while (JOYSTICK_GetState() == 0x00) { POWER_EnterIdleSleepMode(); }
    e2bc:	02 c0       	rjmp	.+4      	; 0xe2c2 <POPUP_MsgBox+0x124>
    e2be:	0e 94 81 74 	call	0xe902	; 0xe902 <POWER_EnterIdleSleepMode>
    e2c2:	0e 94 04 74 	call	0xe808	; 0xe808 <JOYSTICK_GetState>
    e2c6:	88 23       	and	r24, r24
    e2c8:	d1 f3       	breq	.-12     	; 0xe2be <POPUP_MsgBox+0x120>
	// Wait until joystick is released again (in order not to give unwanted joystick events to the calling application).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    e2ca:	02 c0       	rjmp	.+4      	; 0xe2d0 <POPUP_MsgBox+0x132>
    e2cc:	0e 94 81 74 	call	0xe902	; 0xe902 <POWER_EnterIdleSleepMode>
    e2d0:	0e 94 04 74 	call	0xe808	; 0xe808 <JOYSTICK_GetState>
    e2d4:	88 23       	and	r24, r24
    e2d6:	d1 f7       	brne	.-12     	; 0xe2cc <POPUP_MsgBox+0x12e>

	// Redraw parent form if requested.
	if (parentForm != NULL) {
    e2d8:	61 14       	cp	r6, r1
    e2da:	71 04       	cpc	r7, r1
    e2dc:	19 f0       	breq	.+6      	; 0xe2e4 <POPUP_MsgBox+0x146>
		FORMS_Draw( parentForm );
    e2de:	c3 01       	movw	r24, r6
    e2e0:	0e 94 4b 78 	call	0xf096	; 0xf096 <FORMS_Draw>
    e2e4:	cf 91       	pop	r28
    e2e6:	1f 91       	pop	r17
    e2e8:	0f 91       	pop	r16
    e2ea:	ff 90       	pop	r15
    e2ec:	ef 90       	pop	r14
    e2ee:	df 90       	pop	r13
    e2f0:	cf 90       	pop	r12
    e2f2:	bf 90       	pop	r11
    e2f4:	af 90       	pop	r10
    e2f6:	9f 90       	pop	r9
    e2f8:	8f 90       	pop	r8
    e2fa:	7f 90       	pop	r7
    e2fc:	6f 90       	pop	r6
    e2fe:	5f 90       	pop	r5
    e300:	4f 90       	pop	r4
    e302:	08 95       	ret

0000e304 <LCD_UpdateMinVolt>:
	LCD_UpdateBigNumbers(soc);
	
}

void LCD_UpdateMinVolt(uint16_t volt)
{
    e304:	0f 93       	push	r16
    e306:	1f 93       	push	r17
    e308:	cf 93       	push	r28
    e30a:	df 93       	push	r29
    e30c:	cd b7       	in	r28, 0x3d	; 61
    e30e:	de b7       	in	r29, 0x3e	; 62
    e310:	61 97       	sbiw	r28, 0x11	; 17
    e312:	0f b6       	in	r0, 0x3f	; 63
    e314:	f8 94       	cli
    e316:	de bf       	out	0x3e, r29	; 62
    e318:	0f be       	out	0x3f, r0	; 63
    e31a:	cd bf       	out	0x3d, r28	; 61
    e31c:	8c 01       	movw	r16, r24
	// x = pixels ?
	char buffer [sizeof(uint16_t)*8+1];
	int charw=6;
	int startpos=60;
	
	TERMFONT_DisplayString("Min Volt:", 7, 0);
    e31e:	40 e0       	ldi	r20, 0x00	; 0
    e320:	50 e0       	ldi	r21, 0x00	; 0
    e322:	67 e0       	ldi	r22, 0x07	; 7
    e324:	70 e0       	ldi	r23, 0x00	; 0
    e326:	88 e1       	ldi	r24, 0x18	; 24
    e328:	92 e0       	ldi	r25, 0x02	; 2
    e32a:	0e 94 13 7c 	call	0xf826	; 0xf826 <TERMFONT_DisplayString>
	
	// convert to ascii
    itoa(volt,buffer,10);
    e32e:	4a e0       	ldi	r20, 0x0A	; 10
    e330:	50 e0       	ldi	r21, 0x00	; 0
    e332:	be 01       	movw	r22, r28
    e334:	6f 5f       	subi	r22, 0xFF	; 255
    e336:	7f 4f       	sbci	r23, 0xFF	; 255
    e338:	c8 01       	movw	r24, r16
    e33a:	0e 94 6c 69 	call	0xd2d8	; 0xd2d8 <itoa>

	TERMFONT_DisplayChar(buffer, 7, startpos );
    e33e:	4c e3       	ldi	r20, 0x3C	; 60
    e340:	50 e0       	ldi	r21, 0x00	; 0
    e342:	67 e0       	ldi	r22, 0x07	; 7
    e344:	70 e0       	ldi	r23, 0x00	; 0
    e346:	ce 01       	movw	r24, r28
    e348:	01 96       	adiw	r24, 0x01	; 1
    e34a:	0e 94 f1 7b 	call	0xf7e2	; 0xf7e2 <TERMFONT_DisplayChar>
    e34e:	61 96       	adiw	r28, 0x11	; 17
    e350:	0f b6       	in	r0, 0x3f	; 63
    e352:	f8 94       	cli
    e354:	de bf       	out	0x3e, r29	; 62
    e356:	0f be       	out	0x3f, r0	; 63
    e358:	cd bf       	out	0x3d, r28	; 61
    e35a:	df 91       	pop	r29
    e35c:	cf 91       	pop	r28
    e35e:	1f 91       	pop	r17
    e360:	0f 91       	pop	r16
    e362:	08 95       	ret

0000e364 <LCD_UpdateMaxTemp>:
	TERMFONT_DisplayString("V" , 7, startpos+5*charw );
*/
}

void LCD_UpdateMaxTemp(uint8_t temp)
{
    e364:	cf 93       	push	r28
    e366:	df 93       	push	r29
    e368:	cd b7       	in	r28, 0x3d	; 61
    e36a:	de b7       	in	r29, 0x3e	; 62
    e36c:	29 97       	sbiw	r28, 0x09	; 9
    e36e:	0f b6       	in	r0, 0x3f	; 63
    e370:	f8 94       	cli
    e372:	de bf       	out	0x3e, r29	; 62
    e374:	0f be       	out	0x3f, r0	; 63
    e376:	cd bf       	out	0x3d, r28	; 61
	char buffer [sizeof(uint8_t)*8+1];
    itoa(temp,buffer,10);
    e378:	4a e0       	ldi	r20, 0x0A	; 10
    e37a:	50 e0       	ldi	r21, 0x00	; 0
    e37c:	be 01       	movw	r22, r28
    e37e:	6f 5f       	subi	r22, 0xFF	; 255
    e380:	7f 4f       	sbci	r23, 0xFF	; 255
    e382:	99 27       	eor	r25, r25
    e384:	0e 94 6c 69 	call	0xd2d8	; 0xd2d8 <itoa>

	TERMFONT_DisplayString( "Max Temp:", 5, 0 );
    e388:	40 e0       	ldi	r20, 0x00	; 0
    e38a:	50 e0       	ldi	r21, 0x00	; 0
    e38c:	65 e0       	ldi	r22, 0x05	; 5
    e38e:	70 e0       	ldi	r23, 0x00	; 0
    e390:	82 e2       	ldi	r24, 0x22	; 34
    e392:	92 e0       	ldi	r25, 0x02	; 2
    e394:	0e 94 13 7c 	call	0xf826	; 0xf826 <TERMFONT_DisplayString>
	TERMFONT_DisplayString( buffer, 5, 60 );
    e398:	4c e3       	ldi	r20, 0x3C	; 60
    e39a:	50 e0       	ldi	r21, 0x00	; 0
    e39c:	65 e0       	ldi	r22, 0x05	; 5
    e39e:	70 e0       	ldi	r23, 0x00	; 0
    e3a0:	ce 01       	movw	r24, r28
    e3a2:	01 96       	adiw	r24, 0x01	; 1
    e3a4:	0e 94 13 7c 	call	0xf826	; 0xf826 <TERMFONT_DisplayString>
	TERMFONT_DisplayString( "C", 5, 84 );
    e3a8:	44 e5       	ldi	r20, 0x54	; 84
    e3aa:	50 e0       	ldi	r21, 0x00	; 0
    e3ac:	65 e0       	ldi	r22, 0x05	; 5
    e3ae:	70 e0       	ldi	r23, 0x00	; 0
    e3b0:	8c e2       	ldi	r24, 0x2C	; 44
    e3b2:	92 e0       	ldi	r25, 0x02	; 2
    e3b4:	0e 94 13 7c 	call	0xf826	; 0xf826 <TERMFONT_DisplayString>
    e3b8:	29 96       	adiw	r28, 0x09	; 9
    e3ba:	0f b6       	in	r0, 0x3f	; 63
    e3bc:	f8 94       	cli
    e3be:	de bf       	out	0x3e, r29	; 62
    e3c0:	0f be       	out	0x3f, r0	; 63
    e3c2:	cd bf       	out	0x3d, r28	; 61
    e3c4:	df 91       	pop	r29
    e3c6:	cf 91       	pop	r28
    e3c8:	08 95       	ret

0000e3ca <LCD_UpdateBigNumbers>:

}

void LCD_UpdateBigNumbers(uint8_t value)
{
    e3ca:	6f 92       	push	r6
    e3cc:	7f 92       	push	r7
    e3ce:	8f 92       	push	r8
    e3d0:	9f 92       	push	r9
    e3d2:	af 92       	push	r10
    e3d4:	bf 92       	push	r11
    e3d6:	cf 92       	push	r12
    e3d8:	df 92       	push	r13
    e3da:	ef 92       	push	r14
    e3dc:	ff 92       	push	r15
    e3de:	0f 93       	push	r16
    e3e0:	1f 93       	push	r17
    e3e2:	cf 93       	push	r28
    e3e4:	df 93       	push	r29
    e3e6:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    e3e8:	66 24       	eor	r6, r6
    e3ea:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    e3ec:	8f 3f       	cpi	r24, 0xFF	; 255
    e3ee:	09 f4       	brne	.+2      	; 0xe3f2 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    e3f0:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    e3f2:	20 e2       	ldi	r18, 0x20	; 32
    e3f4:	40 e6       	ldi	r20, 0x60	; 96
    e3f6:	60 e0       	ldi	r22, 0x00	; 0
    e3f8:	86 2f       	mov	r24, r22
    e3fa:	0e 94 9b 6f 	call	0xdf36	; 0xdf36 <LCD_ClrBox>

	if (value < 10)
    e3fe:	ca 30       	cpi	r28, 0x0A	; 10
    e400:	80 f4       	brcc	.+32     	; 0xe422 <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    e402:	ec 2f       	mov	r30, r28
    e404:	ff 27       	eor	r31, r31
    e406:	ee 0f       	add	r30, r30
    e408:	ff 1f       	adc	r31, r31
    e40a:	e6 59       	subi	r30, 0x96	; 150
    e40c:	f0 43       	sbci	r31, 0x30	; 48
    e40e:	85 91       	lpm	r24, Z+
    e410:	94 91       	lpm	r25, Z+
    e412:	f4 e0       	ldi	r31, 0x04	; 4
    e414:	af 2e       	mov	r10, r31
    e416:	b1 2c       	mov	r11, r1
    e418:	e0 e2       	ldi	r30, 0x20	; 32
    e41a:	ce 2e       	mov	r12, r30
    e41c:	d1 2c       	mov	r13, r1
    e41e:	73 01       	movw	r14, r6
    e420:	34 c0       	rjmp	.+104    	; 0xe48a <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    e422:	8c 2f       	mov	r24, r28
    e424:	8a 50       	subi	r24, 0x0A	; 10
    e426:	8c 2e       	mov	r8, r28
    e428:	99 24       	eor	r9, r9
    e42a:	8a 35       	cpi	r24, 0x5A	; 90
    e42c:	08 f0       	brcs	.+2      	; 0xe430 <LCD_UpdateBigNumbers+0x66>
    e42e:	3b c0       	rjmp	.+118    	; 0xe4a6 <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    e430:	8c 2f       	mov	r24, r28
    e432:	6a e0       	ldi	r22, 0x0A	; 10
    e434:	0e 94 61 7d 	call	0xfac2	; 0xfac2 <__udivmodqi4>
    e438:	c8 2f       	mov	r28, r24
    e43a:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e43c:	fe 01       	movw	r30, r28
    e43e:	ec 0f       	add	r30, r28
    e440:	fd 1f       	adc	r31, r29
    e442:	e6 59       	subi	r30, 0x96	; 150
    e444:	f0 43       	sbci	r31, 0x30	; 48
    e446:	85 91       	lpm	r24, Z+
    e448:	94 91       	lpm	r25, Z+
    e44a:	74 e0       	ldi	r23, 0x04	; 4
    e44c:	a7 2e       	mov	r10, r23
    e44e:	b1 2c       	mov	r11, r1
    e450:	60 e2       	ldi	r22, 0x20	; 32
    e452:	c6 2e       	mov	r12, r22
    e454:	d1 2c       	mov	r13, r1
    e456:	73 01       	movw	r14, r6
    e458:	83 01       	movw	r16, r6
    e45a:	93 01       	movw	r18, r6
    e45c:	a3 01       	movw	r20, r6
    e45e:	b6 01       	movw	r22, r12
    e460:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    e464:	ce 01       	movw	r24, r28
    e466:	53 e0       	ldi	r21, 0x03	; 3
    e468:	88 0f       	add	r24, r24
    e46a:	99 1f       	adc	r25, r25
    e46c:	5a 95       	dec	r21
    e46e:	e1 f7       	brne	.-8      	; 0xe468 <LCD_UpdateBigNumbers+0x9e>
    e470:	8c 0f       	add	r24, r28
    e472:	9d 1f       	adc	r25, r29
    e474:	8c 0f       	add	r24, r28
    e476:	9d 1f       	adc	r25, r29
    e478:	f4 01       	movw	r30, r8
    e47a:	e8 1b       	sub	r30, r24
    e47c:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e47e:	ee 0f       	add	r30, r30
    e480:	ff 1f       	adc	r31, r31
    e482:	e6 59       	subi	r30, 0x96	; 150
    e484:	f0 43       	sbci	r31, 0x30	; 48
    e486:	85 91       	lpm	r24, Z+
    e488:	94 91       	lpm	r25, Z+
    e48a:	86 01       	movw	r16, r12
    e48c:	93 01       	movw	r18, r6
    e48e:	a3 01       	movw	r20, r6
    e490:	b6 01       	movw	r22, r12
    e492:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    e496:	00 e4       	ldi	r16, 0x40	; 64
    e498:	10 e0       	ldi	r17, 0x00	; 0
    e49a:	93 01       	movw	r18, r6
    e49c:	a3 01       	movw	r20, r6
    e49e:	b6 01       	movw	r22, r12
    e4a0:	8c e7       	ldi	r24, 0x7C	; 124
    e4a2:	98 e9       	ldi	r25, 0x98	; 152
    e4a4:	54 c0       	rjmp	.+168    	; 0xe54e <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    e4a6:	8c 2f       	mov	r24, r28
    e4a8:	64 e6       	ldi	r22, 0x64	; 100
    e4aa:	0e 94 61 7d 	call	0xfac2	; 0xfac2 <__udivmodqi4>
    e4ae:	c8 2f       	mov	r28, r24
    e4b0:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    e4b2:	84 e6       	ldi	r24, 0x64	; 100
    e4b4:	90 e0       	ldi	r25, 0x00	; 0
    e4b6:	c8 9f       	mul	r28, r24
    e4b8:	90 01       	movw	r18, r0
    e4ba:	c9 9f       	mul	r28, r25
    e4bc:	30 0d       	add	r19, r0
    e4be:	d8 9f       	mul	r29, r24
    e4c0:	30 0d       	add	r19, r0
    e4c2:	11 24       	eor	r1, r1
    e4c4:	c9 01       	movw	r24, r18
    e4c6:	94 01       	movw	r18, r8
    e4c8:	28 1b       	sub	r18, r24
    e4ca:	39 0b       	sbc	r19, r25
    e4cc:	c9 01       	movw	r24, r18
    e4ce:	6a e0       	ldi	r22, 0x0A	; 10
    e4d0:	70 e0       	ldi	r23, 0x00	; 0
    e4d2:	0e 94 81 7d 	call	0xfb02	; 0xfb02 <__divmodhi4>
    e4d6:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    e4d8:	cb 01       	movw	r24, r22
    e4da:	43 e0       	ldi	r20, 0x03	; 3
    e4dc:	88 0f       	add	r24, r24
    e4de:	99 1f       	adc	r25, r25
    e4e0:	4a 95       	dec	r20
    e4e2:	e1 f7       	brne	.-8      	; 0xe4dc <LCD_UpdateBigNumbers+0x112>
    e4e4:	86 0f       	add	r24, r22
    e4e6:	97 1f       	adc	r25, r23
    e4e8:	86 0f       	add	r24, r22
    e4ea:	97 1f       	adc	r25, r23
    e4ec:	39 01       	movw	r6, r18
    e4ee:	68 1a       	sub	r6, r24
    e4f0:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e4f2:	fe 01       	movw	r30, r28
    e4f4:	ec 0f       	add	r30, r28
    e4f6:	fd 1f       	adc	r31, r29
    e4f8:	e6 59       	subi	r30, 0x96	; 150
    e4fa:	f0 43       	sbci	r31, 0x30	; 48
    e4fc:	85 91       	lpm	r24, Z+
    e4fe:	94 91       	lpm	r25, Z+
    e500:	34 e0       	ldi	r19, 0x04	; 4
    e502:	a3 2e       	mov	r10, r19
    e504:	b1 2c       	mov	r11, r1
    e506:	20 e2       	ldi	r18, 0x20	; 32
    e508:	c2 2e       	mov	r12, r18
    e50a:	d1 2c       	mov	r13, r1
    e50c:	ee 24       	eor	r14, r14
    e50e:	ff 24       	eor	r15, r15
    e510:	87 01       	movw	r16, r14
    e512:	97 01       	movw	r18, r14
    e514:	a7 01       	movw	r20, r14
    e516:	b6 01       	movw	r22, r12
    e518:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e51c:	f4 01       	movw	r30, r8
    e51e:	e8 0d       	add	r30, r8
    e520:	f9 1d       	adc	r31, r9
    e522:	e6 59       	subi	r30, 0x96	; 150
    e524:	f0 43       	sbci	r31, 0x30	; 48
    e526:	85 91       	lpm	r24, Z+
    e528:	94 91       	lpm	r25, Z+
    e52a:	86 01       	movw	r16, r12
    e52c:	97 01       	movw	r18, r14
    e52e:	a7 01       	movw	r20, r14
    e530:	b6 01       	movw	r22, r12
    e532:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    e536:	f3 01       	movw	r30, r6
    e538:	e6 0d       	add	r30, r6
    e53a:	f7 1d       	adc	r31, r7
    e53c:	e6 59       	subi	r30, 0x96	; 150
    e53e:	f0 43       	sbci	r31, 0x30	; 48
    e540:	85 91       	lpm	r24, Z+
    e542:	94 91       	lpm	r25, Z+
    e544:	00 e4       	ldi	r16, 0x40	; 64
    e546:	10 e0       	ldi	r17, 0x00	; 0
    e548:	97 01       	movw	r18, r14
    e54a:	a7 01       	movw	r20, r14
    e54c:	b6 01       	movw	r22, r12
    e54e:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>
    e552:	df 91       	pop	r29
    e554:	cf 91       	pop	r28
    e556:	1f 91       	pop	r17
    e558:	0f 91       	pop	r16
    e55a:	ff 90       	pop	r15
    e55c:	ef 90       	pop	r14
    e55e:	df 90       	pop	r13
    e560:	cf 90       	pop	r12
    e562:	bf 90       	pop	r11
    e564:	af 90       	pop	r10
    e566:	9f 90       	pop	r9
    e568:	8f 90       	pop	r8
    e56a:	7f 90       	pop	r7
    e56c:	6f 90       	pop	r6
    e56e:	08 95       	ret

0000e570 <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    e570:	af 92       	push	r10
    e572:	bf 92       	push	r11
    e574:	cf 92       	push	r12
    e576:	df 92       	push	r13
    e578:	ef 92       	push	r14
    e57a:	ff 92       	push	r15
    e57c:	0f 93       	push	r16
    e57e:	1f 93       	push	r17
    e580:	cf 93       	push	r28
    e582:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e584:	85 36       	cpi	r24, 0x65	; 101
    e586:	08 f0       	brcs	.+2      	; 0xe58a <LCD_UpdateSOC+0x1a>
		soc = 100;
    e588:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e58a:	ec 2f       	mov	r30, r28
    e58c:	ff 27       	eor	r31, r31
    e58e:	ee 0f       	add	r30, r30
    e590:	ff 1f       	adc	r31, r31
    e592:	ea 57       	subi	r30, 0x7A	; 122
    e594:	f0 43       	sbci	r31, 0x30	; 48
    e596:	85 91       	lpm	r24, Z+
    e598:	94 91       	lpm	r25, Z+
    e59a:	b8 e0       	ldi	r27, 0x08	; 8
    e59c:	ab 2e       	mov	r10, r27
    e59e:	b1 2c       	mov	r11, r1
    e5a0:	a0 e2       	ldi	r26, 0x20	; 32
    e5a2:	ca 2e       	mov	r12, r26
    e5a4:	d1 2c       	mov	r13, r1
    e5a6:	ee 24       	eor	r14, r14
    e5a8:	ff 24       	eor	r15, r15
    e5aa:	00 e6       	ldi	r16, 0x60	; 96
    e5ac:	10 e0       	ldi	r17, 0x00	; 0
    e5ae:	97 01       	movw	r18, r14
    e5b0:	a7 01       	movw	r20, r14
    e5b2:	b6 01       	movw	r22, r12
    e5b4:	0e 94 48 77 	call	0xee90	; 0xee90 <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e5b8:	8c 2f       	mov	r24, r28
    e5ba:	0e 94 e5 71 	call	0xe3ca	; 0xe3ca <LCD_UpdateBigNumbers>
    e5be:	cf 91       	pop	r28
    e5c0:	1f 91       	pop	r17
    e5c2:	0f 91       	pop	r16
    e5c4:	ff 90       	pop	r15
    e5c6:	ef 90       	pop	r14
    e5c8:	df 90       	pop	r13
    e5ca:	cf 90       	pop	r12
    e5cc:	bf 90       	pop	r11
    e5ce:	af 90       	pop	r10
    e5d0:	08 95       	ret

0000e5d2 <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e5d2:	9f 92       	push	r9
    e5d4:	af 92       	push	r10
    e5d6:	bf 92       	push	r11
    e5d8:	cf 92       	push	r12
    e5da:	df 92       	push	r13
    e5dc:	ef 92       	push	r14
    e5de:	ff 92       	push	r15
    e5e0:	0f 93       	push	r16
    e5e2:	1f 93       	push	r17
    e5e4:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e5e6:	48 17       	cp	r20, r24
    e5e8:	30 f4       	brcc	.+12     	; 0xe5f6 <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e5ea:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e5ec:	84 2f       	mov	r24, r20
        Xend = dx;
    e5ee:	40 2f       	mov	r20, r16
        dy = Ystart;
    e5f0:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e5f2:	62 2f       	mov	r22, r18
        Yend = dy;
    e5f4:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e5f6:	04 2f       	mov	r16, r20
    e5f8:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e5fa:	12 2f       	mov	r17, r18
    e5fc:	16 1b       	sub	r17, r22

    x = Xstart;
    e5fe:	b8 2e       	mov	r11, r24
    y = Ystart;
    e600:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e602:	07 ff       	sbrs	r16, 7
    e604:	04 c0       	rjmp	.+8      	; 0xe60e <LCD_SetLine+0x3c>
        xinc = -1;
    e606:	2f ef       	ldi	r18, 0xFF	; 255
    e608:	92 2e       	mov	r9, r18
        dx = -dx;
    e60a:	01 95       	neg	r16
    e60c:	02 c0       	rjmp	.+4      	; 0xe612 <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e60e:	91 e0       	ldi	r25, 0x01	; 1
    e610:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e612:	17 ff       	sbrs	r17, 7
    e614:	04 c0       	rjmp	.+8      	; 0xe61e <LCD_SetLine+0x4c>
        yinc = -1;
    e616:	8f ef       	ldi	r24, 0xFF	; 255
    e618:	a8 2e       	mov	r10, r24
        dy = -dy;
    e61a:	11 95       	neg	r17
    e61c:	02 c0       	rjmp	.+4      	; 0xe622 <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e61e:	c1 e0       	ldi	r28, 0x01	; 1
    e620:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e622:	10 17       	cp	r17, r16
    e624:	d4 f4       	brge	.+52     	; 0xe65a <LCD_SetLine+0x88>
        e = dy - dx;
    e626:	c1 2f       	mov	r28, r17
    e628:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e62a:	dd 24       	eor	r13, r13
    e62c:	e0 2e       	mov	r14, r16
    e62e:	ff 24       	eor	r15, r15
    e630:	e7 fc       	sbrc	r14, 7
    e632:	f0 94       	com	r15
    e634:	f7 fc       	sbrc	r15, 7
    e636:	2a c0       	rjmp	.+84     	; 0xe68c <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e638:	6c 2d       	mov	r22, r12
    e63a:	8b 2d       	mov	r24, r11
    e63c:	0e 94 50 6d 	call	0xdaa0	; 0xdaa0 <LCD_SetPixel>
            if (e >= 0){
    e640:	c7 fd       	sbrc	r28, 7
    e642:	02 c0       	rjmp	.+4      	; 0xe648 <LCD_SetLine+0x76>
                e -= dx;
    e644:	c0 1b       	sub	r28, r16
                y += yinc;
    e646:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e648:	c1 0f       	add	r28, r17
            x += xinc;
    e64a:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e64c:	d3 94       	inc	r13
    e64e:	8d 2d       	mov	r24, r13
    e650:	99 27       	eor	r25, r25
    e652:	e8 16       	cp	r14, r24
    e654:	f9 06       	cpc	r15, r25
    e656:	84 f7       	brge	.-32     	; 0xe638 <LCD_SetLine+0x66>
    e658:	19 c0       	rjmp	.+50     	; 0xe68c <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e65a:	c0 2f       	mov	r28, r16
    e65c:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e65e:	dd 24       	eor	r13, r13
    e660:	e1 2e       	mov	r14, r17
    e662:	ff 24       	eor	r15, r15
    e664:	e7 fc       	sbrc	r14, 7
    e666:	f0 94       	com	r15
    e668:	f7 fc       	sbrc	r15, 7
    e66a:	10 c0       	rjmp	.+32     	; 0xe68c <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e66c:	6c 2d       	mov	r22, r12
    e66e:	8b 2d       	mov	r24, r11
    e670:	0e 94 50 6d 	call	0xdaa0	; 0xdaa0 <LCD_SetPixel>
    
            if (e >= 0){
    e674:	c7 fd       	sbrc	r28, 7
    e676:	02 c0       	rjmp	.+4      	; 0xe67c <LCD_SetLine+0xaa>
                e -= dy;
    e678:	c1 1b       	sub	r28, r17
                x += xinc;
    e67a:	b9 0c       	add	r11, r9
            }
            e += dx;
    e67c:	c0 0f       	add	r28, r16
            y += yinc;
    e67e:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e680:	d3 94       	inc	r13
    e682:	8d 2d       	mov	r24, r13
    e684:	99 27       	eor	r25, r25
    e686:	e8 16       	cp	r14, r24
    e688:	f9 06       	cpc	r15, r25
    e68a:	84 f7       	brge	.-32     	; 0xe66c <LCD_SetLine+0x9a>
    e68c:	cf 91       	pop	r28
    e68e:	1f 91       	pop	r17
    e690:	0f 91       	pop	r16
    e692:	ff 90       	pop	r15
    e694:	ef 90       	pop	r14
    e696:	df 90       	pop	r13
    e698:	cf 90       	pop	r12
    e69a:	bf 90       	pop	r11
    e69c:	af 90       	pop	r10
    e69e:	9f 90       	pop	r9
    e6a0:	08 95       	ret

0000e6a2 <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e6a2:	9f 92       	push	r9
    e6a4:	af 92       	push	r10
    e6a6:	bf 92       	push	r11
    e6a8:	cf 92       	push	r12
    e6aa:	df 92       	push	r13
    e6ac:	ef 92       	push	r14
    e6ae:	ff 92       	push	r15
    e6b0:	0f 93       	push	r16
    e6b2:	1f 93       	push	r17
    e6b4:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e6b6:	48 17       	cp	r20, r24
    e6b8:	30 f4       	brcc	.+12     	; 0xe6c6 <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e6ba:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e6bc:	84 2f       	mov	r24, r20
        Xend = dx;
    e6be:	40 2f       	mov	r20, r16
        dy = Ystart;
    e6c0:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e6c2:	62 2f       	mov	r22, r18
        Yend = dy;
    e6c4:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e6c6:	04 2f       	mov	r16, r20
    e6c8:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e6ca:	12 2f       	mov	r17, r18
    e6cc:	16 1b       	sub	r17, r22

    x = Xstart;
    e6ce:	b8 2e       	mov	r11, r24
    y = Ystart;
    e6d0:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e6d2:	07 ff       	sbrs	r16, 7
    e6d4:	04 c0       	rjmp	.+8      	; 0xe6de <LCD_ClrLine+0x3c>
        xinc = -1;
    e6d6:	6f ef       	ldi	r22, 0xFF	; 255
    e6d8:	96 2e       	mov	r9, r22
        dx = -dx;
    e6da:	01 95       	neg	r16
    e6dc:	02 c0       	rjmp	.+4      	; 0xe6e2 <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e6de:	51 e0       	ldi	r21, 0x01	; 1
    e6e0:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e6e2:	17 ff       	sbrs	r17, 7
    e6e4:	04 c0       	rjmp	.+8      	; 0xe6ee <LCD_ClrLine+0x4c>
        yinc = -1;
    e6e6:	4f ef       	ldi	r20, 0xFF	; 255
    e6e8:	a4 2e       	mov	r10, r20
        dy = -dy;
    e6ea:	11 95       	neg	r17
    e6ec:	02 c0       	rjmp	.+4      	; 0xe6f2 <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e6ee:	31 e0       	ldi	r19, 0x01	; 1
    e6f0:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e6f2:	10 17       	cp	r17, r16
    e6f4:	d4 f4       	brge	.+52     	; 0xe72a <LCD_ClrLine+0x88>
        e = dy - dx;
    e6f6:	c1 2f       	mov	r28, r17
    e6f8:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e6fa:	dd 24       	eor	r13, r13
    e6fc:	e0 2e       	mov	r14, r16
    e6fe:	ff 24       	eor	r15, r15
    e700:	e7 fc       	sbrc	r14, 7
    e702:	f0 94       	com	r15
    e704:	f7 fc       	sbrc	r15, 7
    e706:	2a c0       	rjmp	.+84     	; 0xe75c <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e708:	6c 2d       	mov	r22, r12
    e70a:	8b 2d       	mov	r24, r11
    e70c:	0e 94 96 6d 	call	0xdb2c	; 0xdb2c <LCD_ClrPixel>
            if (e >= 0){
    e710:	c7 fd       	sbrc	r28, 7
    e712:	02 c0       	rjmp	.+4      	; 0xe718 <LCD_ClrLine+0x76>
                e -= dx;
    e714:	c0 1b       	sub	r28, r16
                y += yinc;
    e716:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e718:	c1 0f       	add	r28, r17
            x += xinc;
    e71a:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e71c:	d3 94       	inc	r13
    e71e:	8d 2d       	mov	r24, r13
    e720:	99 27       	eor	r25, r25
    e722:	e8 16       	cp	r14, r24
    e724:	f9 06       	cpc	r15, r25
    e726:	84 f7       	brge	.-32     	; 0xe708 <LCD_ClrLine+0x66>
    e728:	19 c0       	rjmp	.+50     	; 0xe75c <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e72a:	c0 2f       	mov	r28, r16
    e72c:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e72e:	dd 24       	eor	r13, r13
    e730:	e1 2e       	mov	r14, r17
    e732:	ff 24       	eor	r15, r15
    e734:	e7 fc       	sbrc	r14, 7
    e736:	f0 94       	com	r15
    e738:	f7 fc       	sbrc	r15, 7
    e73a:	10 c0       	rjmp	.+32     	; 0xe75c <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e73c:	6c 2d       	mov	r22, r12
    e73e:	8b 2d       	mov	r24, r11
    e740:	0e 94 96 6d 	call	0xdb2c	; 0xdb2c <LCD_ClrPixel>
    
            if (e >= 0){
    e744:	c7 fd       	sbrc	r28, 7
    e746:	02 c0       	rjmp	.+4      	; 0xe74c <LCD_ClrLine+0xaa>
                e -= dy;
    e748:	c1 1b       	sub	r28, r17
                x += xinc;
    e74a:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e74c:	c0 0f       	add	r28, r16
            y += yinc;
    e74e:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e750:	d3 94       	inc	r13
    e752:	8d 2d       	mov	r24, r13
    e754:	99 27       	eor	r25, r25
    e756:	e8 16       	cp	r14, r24
    e758:	f9 06       	cpc	r15, r25
    e75a:	84 f7       	brge	.-32     	; 0xe73c <LCD_ClrLine+0x9a>
    e75c:	cf 91       	pop	r28
    e75e:	1f 91       	pop	r17
    e760:	0f 91       	pop	r16
    e762:	ff 90       	pop	r15
    e764:	ef 90       	pop	r14
    e766:	df 90       	pop	r13
    e768:	cf 90       	pop	r12
    e76a:	bf 90       	pop	r11
    e76c:	af 90       	pop	r10
    e76e:	9f 90       	pop	r9
    e770:	08 95       	ret

0000e772 <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e772:	87 b1       	in	r24, 0x07	; 7
    e774:	87 70       	andi	r24, 0x07	; 7
    e776:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e778:	88 b1       	in	r24, 0x08	; 8
    e77a:	88 6f       	ori	r24, 0xF8	; 248
    e77c:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e77e:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e780:	24 9a       	sbi	0x04, 4	; 4
    e782:	08 95       	ret

0000e784 <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e784:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e786:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e788:	90 91 6b 00 	lds	r25, 0x006B
    e78c:	9f 7e       	andi	r25, 0xEF	; 239
    e78e:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e792:	91 e0       	ldi	r25, 0x01	; 1
    e794:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e796:	8f bf       	out	0x3f, r24	; 63
    e798:	08 95       	ret

0000e79a <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e79a:	1f 92       	push	r1
    e79c:	0f 92       	push	r0
    e79e:	0f b6       	in	r0, 0x3f	; 63
    e7a0:	0f 92       	push	r0
    e7a2:	11 24       	eor	r1, r1
    e7a4:	2f 93       	push	r18
    e7a6:	3f 93       	push	r19
    e7a8:	4f 93       	push	r20
    e7aa:	5f 93       	push	r21
    e7ac:	6f 93       	push	r22
    e7ae:	7f 93       	push	r23
    e7b0:	8f 93       	push	r24
    e7b2:	9f 93       	push	r25
    e7b4:	af 93       	push	r26
    e7b6:	bf 93       	push	r27
    e7b8:	ef 93       	push	r30
    e7ba:	ff 93       	push	r31
	POWER_WakeupCallback();
    e7bc:	0e 94 7d 74 	call	0xe8fa	; 0xe8fa <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e7c0:	0e 94 b9 73 	call	0xe772	; 0xe772 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e7c4:	0e 94 c2 73 	call	0xe784	; 0xe784 <JOYSTICK_DisableWakeupInterrupt>
    e7c8:	ff 91       	pop	r31
    e7ca:	ef 91       	pop	r30
    e7cc:	bf 91       	pop	r27
    e7ce:	af 91       	pop	r26
    e7d0:	9f 91       	pop	r25
    e7d2:	8f 91       	pop	r24
    e7d4:	7f 91       	pop	r23
    e7d6:	6f 91       	pop	r22
    e7d8:	5f 91       	pop	r21
    e7da:	4f 91       	pop	r20
    e7dc:	3f 91       	pop	r19
    e7de:	2f 91       	pop	r18
    e7e0:	0f 90       	pop	r0
    e7e2:	0f be       	out	0x3f, r0	; 63
    e7e4:	0f 90       	pop	r0
    e7e6:	1f 90       	pop	r1
    e7e8:	18 95       	reti

0000e7ea <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e7ea:	0f 93       	push	r16
    e7ec:	1f 93       	push	r17
    e7ee:	18 2f       	mov	r17, r24
    e7f0:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e7f2:	0e 94 b9 73 	call	0xe772	; 0xe772 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e7f6:	0e 94 c2 73 	call	0xe784	; 0xe784 <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e7fa:	10 93 4f 02 	sts	0x024F, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e7fe:	00 93 4e 02 	sts	0x024E, r16
    e802:	1f 91       	pop	r17
    e804:	0f 91       	pop	r16
    e806:	08 95       	ret

0000e808 <JOYSTICK_GetState>:
/*
 * \return  Current state of the joystick
 */
uint8_t JOYSTICK_GetState( void )
{
	return JOYSTICK_currentState;
    e808:	80 91 51 02 	lds	r24, 0x0251
}
    e80c:	99 27       	eor	r25, r25
    e80e:	08 95       	ret

0000e810 <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e810:	0f 93       	push	r16
    e812:	1f 93       	push	r17
    e814:	cf 93       	push	r28
    e816:	df 93       	push	r29
    e818:	cd b7       	in	r28, 0x3d	; 61
    e81a:	de b7       	in	r29, 0x3e	; 62
    e81c:	25 97       	sbiw	r28, 0x05	; 5
    e81e:	0f b6       	in	r0, 0x3f	; 63
    e820:	f8 94       	cli
    e822:	de bf       	out	0x3e, r29	; 62
    e824:	0f be       	out	0x3f, r0	; 63
    e826:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e828:	36 b1       	in	r19, 0x06	; 6
    e82a:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e82c:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e82e:	80 91 52 02 	lds	r24, 0x0252
    e832:	38 17       	cp	r19, r24
    e834:	19 f0       	breq	.+6      	; 0xe83c <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e836:	30 93 52 02 	sts	0x0252, r19
    e83a:	54 c0       	rjmp	.+168    	; 0xe8e4 <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e83c:	20 91 51 02 	lds	r18, 0x0251
    e840:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e842:	02 2f       	mov	r16, r18
    e844:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e846:	50 91 51 02 	lds	r21, 0x0251
    e84a:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e84c:	92 2f       	mov	r25, r18
    e84e:	90 95       	com	r25
    e850:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e852:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e854:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e856:	41 e0       	ldi	r20, 0x01	; 1
    e858:	a3 e5       	ldi	r26, 0x53	; 83
    e85a:	b2 e0       	ldi	r27, 0x02	; 2
    e85c:	eb e5       	ldi	r30, 0x5B	; 91
    e85e:	f2 e0       	ldi	r31, 0x02	; 2
    e860:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e862:	80 81       	ld	r24, Z
    e864:	88 23       	and	r24, r24
    e866:	11 f0       	breq	.+4      	; 0xe86c <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e868:	81 50       	subi	r24, 0x01	; 1
    e86a:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e86c:	80 2f       	mov	r24, r16
    e86e:	84 23       	and	r24, r20
    e870:	49 f0       	breq	.+18     	; 0xe884 <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e872:	80 91 4f 02 	lds	r24, 0x024F
    e876:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e878:	80 81       	ld	r24, Z
    e87a:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e87c:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e87e:	80 91 4e 02 	lds	r24, 0x024E
    e882:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e884:	89 2f       	mov	r24, r25
    e886:	84 23       	and	r24, r20
    e888:	41 f0       	breq	.+16     	; 0xe89a <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e88a:	8c 91       	ld	r24, X
    e88c:	88 23       	and	r24, r24
    e88e:	29 f0       	breq	.+10     	; 0xe89a <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e890:	81 50       	subi	r24, 0x01	; 1
    e892:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e894:	88 23       	and	r24, r24
    e896:	09 f4       	brne	.+2      	; 0xe89a <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e898:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e89a:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e89c:	61 50       	subi	r22, 0x01	; 1
    e89e:	31 96       	adiw	r30, 0x01	; 1
    e8a0:	11 96       	adiw	r26, 0x01	; 1
    e8a2:	67 ff       	sbrs	r22, 7
    e8a4:	de cf       	rjmp	.-68     	; 0xe862 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e8a6:	80 91 50 02 	lds	r24, 0x0250
    e8aa:	87 2b       	or	r24, r23
    e8ac:	80 93 50 02 	sts	0x0250, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e8b0:	95 2f       	mov	r25, r21
    e8b2:	90 95       	com	r25
    e8b4:	80 91 50 02 	lds	r24, 0x0250
    e8b8:	89 23       	and	r24, r25
    e8ba:	80 93 50 02 	sts	0x0250, r24
		JOYSTICK_currentState = newState;
    e8be:	30 93 51 02 	sts	0x0251, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e8c2:	e0 91 4c 02 	lds	r30, 0x024C
    e8c6:	f0 91 4d 02 	lds	r31, 0x024D
    e8ca:	30 97       	sbiw	r30, 0x00	; 0
    e8cc:	59 f0       	breq	.+22     	; 0xe8e4 <JOYSTICK_PollingHandler+0xd4>
    e8ce:	27 2b       	or	r18, r23
    e8d0:	21 2b       	or	r18, r17
    e8d2:	41 f0       	breq	.+16     	; 0xe8e4 <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e8d4:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e8d6:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e8d8:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e8da:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e8dc:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e8de:	ce 01       	movw	r24, r28
    e8e0:	01 96       	adiw	r24, 0x01	; 1
    e8e2:	09 95       	icall
    e8e4:	25 96       	adiw	r28, 0x05	; 5
    e8e6:	0f b6       	in	r0, 0x3f	; 63
    e8e8:	f8 94       	cli
    e8ea:	de bf       	out	0x3e, r29	; 62
    e8ec:	0f be       	out	0x3f, r0	; 63
    e8ee:	cd bf       	out	0x3d, r28	; 61
    e8f0:	df 91       	pop	r29
    e8f2:	cf 91       	pop	r28
    e8f4:	1f 91       	pop	r17
    e8f6:	0f 91       	pop	r16
    e8f8:	08 95       	ret

0000e8fa <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e8fa:	81 e0       	ldi	r24, 0x01	; 1
    e8fc:	80 93 63 02 	sts	0x0263, r24
    e900:	08 95       	ret

0000e902 <POWER_EnterIdleSleepMode>:
}

void POWER_EnterIdleSleepMode( void )
{
	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | (1 << SE);
    e902:	81 e0       	ldi	r24, 0x01	; 1
    e904:	83 bf       	out	0x33, r24	; 51
	CAL_sleep();
    e906:	88 95       	sleep
	SMCR = (0 << SE);
    e908:	13 be       	out	0x33, r1	; 51
    e90a:	08 95       	ret

0000e90c <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e90c:	80 91 65 00 	lds	r24, 0x0065
    e910:	87 7f       	andi	r24, 0xF7	; 247
    e912:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e916:	8d b1       	in	r24, 0x0d	; 13
    e918:	88 63       	ori	r24, 0x38	; 56
    e91a:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e91c:	80 91 67 02 	lds	r24, 0x0267
    e920:	99 27       	eor	r25, r25
    e922:	90 93 99 00 	sts	0x0099, r25
    e926:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e92a:	80 91 66 02 	lds	r24, 0x0266
    e92e:	99 27       	eor	r25, r25
    e930:	90 93 9b 00 	sts	0x009B, r25
    e934:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e938:	80 91 65 02 	lds	r24, 0x0265
    e93c:	99 27       	eor	r25, r25
    e93e:	90 93 9d 00 	sts	0x009D, r25
    e942:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e946:	89 ea       	ldi	r24, 0xA9	; 169
    e948:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e94c:	81 e0       	ldi	r24, 0x01	; 1
    e94e:	80 93 91 00 	sts	0x0091, r24
    e952:	08 95       	ret

0000e954 <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e954:	cf 93       	push	r28
    e956:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e958:	e0 91 67 02 	lds	r30, 0x0267
    green = BACKLIGHT_green;
    e95c:	f0 91 66 02 	lds	r31, 0x0266
    blue = BACKLIGHT_blue;
    e960:	c0 91 65 02 	lds	r28, 0x0265
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e964:	2f ef       	ldi	r18, 0xFF	; 255
    e966:	30 e0       	ldi	r19, 0x00	; 0
    e968:	e8 9f       	mul	r30, r24
    e96a:	c0 01       	movw	r24, r0
    e96c:	11 24       	eor	r1, r1
    e96e:	b9 01       	movw	r22, r18
    e970:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    e974:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e976:	f4 9f       	mul	r31, r20
    e978:	c0 01       	movw	r24, r0
    e97a:	11 24       	eor	r1, r1
    e97c:	b9 01       	movw	r22, r18
    e97e:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    e982:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e984:	c4 9f       	mul	r28, r20
    e986:	c0 01       	movw	r24, r0
    e988:	11 24       	eor	r1, r1
    e98a:	b9 01       	movw	r22, r18
    e98c:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e990:	40 93 64 02 	sts	0x0264, r20
    OCR_RED = red;
    e994:	8e 2f       	mov	r24, r30
    e996:	99 27       	eor	r25, r25
    e998:	90 93 99 00 	sts	0x0099, r25
    e99c:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e9a0:	8f 2f       	mov	r24, r31
    e9a2:	99 27       	eor	r25, r25
    e9a4:	90 93 9b 00 	sts	0x009B, r25
    e9a8:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e9ac:	86 2f       	mov	r24, r22
    e9ae:	99 27       	eor	r25, r25
    e9b0:	90 93 9d 00 	sts	0x009D, r25
    e9b4:	80 93 9c 00 	sts	0x009C, r24
    e9b8:	cf 91       	pop	r28
    e9ba:	08 95       	ret

0000e9bc <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e9bc:	38 2f       	mov	r19, r24
    e9be:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e9c0:	80 93 67 02 	sts	0x0267, r24
    BACKLIGHT_green = green;
    e9c4:	60 93 66 02 	sts	0x0266, r22
    BACKLIGHT_blue = blue;
    e9c8:	40 93 65 02 	sts	0x0265, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e9cc:	20 91 64 02 	lds	r18, 0x0264
    e9d0:	2f 3f       	cpi	r18, 0xFF	; 255
    e9d2:	c1 f0       	breq	.+48     	; 0xea04 <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e9d4:	82 9f       	mul	r24, r18
    e9d6:	c0 01       	movw	r24, r0
    e9d8:	11 24       	eor	r1, r1
    e9da:	6f ef       	ldi	r22, 0xFF	; 255
    e9dc:	70 e0       	ldi	r23, 0x00	; 0
    e9de:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    e9e2:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e9e4:	e2 9f       	mul	r30, r18
    e9e6:	c0 01       	movw	r24, r0
    e9e8:	11 24       	eor	r1, r1
    e9ea:	6f ef       	ldi	r22, 0xFF	; 255
    e9ec:	70 e0       	ldi	r23, 0x00	; 0
    e9ee:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    e9f2:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e9f4:	42 9f       	mul	r20, r18
    e9f6:	c0 01       	movw	r24, r0
    e9f8:	11 24       	eor	r1, r1
    e9fa:	6f ef       	ldi	r22, 0xFF	; 255
    e9fc:	70 e0       	ldi	r23, 0x00	; 0
    e9fe:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    ea02:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    ea04:	83 2f       	mov	r24, r19
    ea06:	99 27       	eor	r25, r25
    ea08:	90 93 99 00 	sts	0x0099, r25
    ea0c:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    ea10:	8e 2f       	mov	r24, r30
    ea12:	99 27       	eor	r25, r25
    ea14:	90 93 9b 00 	sts	0x009B, r25
    ea18:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    ea1c:	84 2f       	mov	r24, r20
    ea1e:	99 27       	eor	r25, r25
    ea20:	90 93 9d 00 	sts	0x009D, r25
    ea24:	80 93 9c 00 	sts	0x009C, r24
    ea28:	08 95       	ret

0000ea2a <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    ea2a:	cf 93       	push	r28
    ea2c:	df 93       	push	r29
    ea2e:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    ea30:	ed 01       	movw	r28, r26
    ea32:	88 85       	ldd	r24, Y+8	; 0x08
    ea34:	88 23       	and	r24, r24
    ea36:	e1 f3       	breq	.-8      	; 0xea30 <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    ea38:	ec 81       	ldd	r30, Y+4	; 0x04
    ea3a:	fd 81       	ldd	r31, Y+5	; 0x05
    ea3c:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    ea3e:	2a 81       	ldd	r18, Y+2	; 0x02
    ea40:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    ea42:	8c 81       	ldd	r24, Y+4	; 0x04
    ea44:	9d 81       	ldd	r25, Y+5	; 0x05
    ea46:	82 17       	cp	r24, r18
    ea48:	93 07       	cpc	r25, r19
    ea4a:	31 f4       	brne	.+12     	; 0xea58 <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    ea4c:	8d 91       	ld	r24, X+
    ea4e:	9c 91       	ld	r25, X
    ea50:	11 97       	sbiw	r26, 0x01	; 1
    ea52:	9d 83       	std	Y+5, r25	; 0x05
    ea54:	8c 83       	std	Y+4, r24	; 0x04
    ea56:	06 c0       	rjmp	.+12     	; 0xea64 <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    ea58:	fd 01       	movw	r30, r26
    ea5a:	84 81       	ldd	r24, Z+4	; 0x04
    ea5c:	95 81       	ldd	r25, Z+5	; 0x05
    ea5e:	01 96       	adiw	r24, 0x01	; 1
    ea60:	95 83       	std	Z+5, r25	; 0x05
    ea62:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    ea64:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    ea66:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    ea68:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    ea6a:	ed 01       	movw	r28, r26
    ea6c:	89 85       	ldd	r24, Y+9	; 0x09
    ea6e:	88 23       	and	r24, r24
    ea70:	09 f4       	brne	.+2      	; 0xea74 <FIFO_InternalPutData+0x4a>
    ea72:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    ea74:	fd 01       	movw	r30, r26
    ea76:	80 85       	ldd	r24, Z+8	; 0x08
    ea78:	81 50       	subi	r24, 0x01	; 1
    ea7a:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    ea7c:	81 85       	ldd	r24, Z+9	; 0x09
    ea7e:	8f 5f       	subi	r24, 0xFF	; 255
    ea80:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    ea82:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    ea84:	22 23       	and	r18, r18
    ea86:	49 f0       	breq	.+18     	; 0xea9a <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    ea88:	84 85       	ldd	r24, Z+12	; 0x0c
    ea8a:	95 85       	ldd	r25, Z+13	; 0x0d
    ea8c:	89 2b       	or	r24, r25
    ea8e:	29 f0       	breq	.+10     	; 0xea9a <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    ea90:	04 84       	ldd	r0, Z+12	; 0x0c
    ea92:	f5 85       	ldd	r31, Z+13	; 0x0d
    ea94:	e0 2d       	mov	r30, r0
    ea96:	cd 01       	movw	r24, r26
    ea98:	09 95       	icall
    ea9a:	df 91       	pop	r29
    ea9c:	cf 91       	pop	r28
    ea9e:	08 95       	ret

0000eaa0 <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    eaa0:	cf 93       	push	r28
    eaa2:	df 93       	push	r29
    eaa4:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    eaa6:	89 85       	ldd	r24, Y+9	; 0x09
    eaa8:	88 23       	and	r24, r24
    eaaa:	e9 f3       	breq	.-6      	; 0xeaa6 <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    eaac:	2a 81       	ldd	r18, Y+2	; 0x02
    eaae:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    eab0:	8e 81       	ldd	r24, Y+6	; 0x06
    eab2:	9f 81       	ldd	r25, Y+7	; 0x07
    eab4:	82 17       	cp	r24, r18
    eab6:	93 07       	cpc	r25, r19
    eab8:	19 f4       	brne	.+6      	; 0xeac0 <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    eaba:	88 81       	ld	r24, Y
    eabc:	99 81       	ldd	r25, Y+1	; 0x01
    eabe:	03 c0       	rjmp	.+6      	; 0xeac6 <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    eac0:	8e 81       	ldd	r24, Y+6	; 0x06
    eac2:	9f 81       	ldd	r25, Y+7	; 0x07
    eac4:	01 96       	adiw	r24, 0x01	; 1
    eac6:	9f 83       	std	Y+7, r25	; 0x07
    eac8:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    eaca:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    eacc:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    eace:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    ead0:	88 85       	ldd	r24, Y+8	; 0x08
    ead2:	88 23       	and	r24, r24
    ead4:	09 f4       	brne	.+2      	; 0xead8 <FIFO_InternalGetData+0x38>
    ead6:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    ead8:	88 85       	ldd	r24, Y+8	; 0x08
    eada:	8f 5f       	subi	r24, 0xFF	; 255
    eadc:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    eade:	89 85       	ldd	r24, Y+9	; 0x09
    eae0:	81 50       	subi	r24, 0x01	; 1
    eae2:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    eae4:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    eae6:	22 23       	and	r18, r18
    eae8:	41 f0       	breq	.+16     	; 0xeafa <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    eaea:	8a 85       	ldd	r24, Y+10	; 0x0a
    eaec:	9b 85       	ldd	r25, Y+11	; 0x0b
    eaee:	89 2b       	or	r24, r25
    eaf0:	21 f0       	breq	.+8      	; 0xeafa <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    eaf2:	ea 85       	ldd	r30, Y+10	; 0x0a
    eaf4:	fb 85       	ldd	r31, Y+11	; 0x0b
    eaf6:	ce 01       	movw	r24, r28
    eaf8:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    eafa:	ee 81       	ldd	r30, Y+6	; 0x06
    eafc:	ff 81       	ldd	r31, Y+7	; 0x07
    eafe:	80 81       	ld	r24, Z
}
    eb00:	99 27       	eor	r25, r25
    eb02:	df 91       	pop	r29
    eb04:	cf 91       	pop	r28
    eb06:	08 95       	ret

0000eb08 <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    eb08:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    eb0a:	71 83       	std	Z+1, r23	; 0x01
    eb0c:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    eb0e:	cb 01       	movw	r24, r22
    eb10:	84 0f       	add	r24, r20
    eb12:	91 1d       	adc	r25, r1
    eb14:	01 97       	sbiw	r24, 0x01	; 1
    eb16:	93 83       	std	Z+3, r25	; 0x03
    eb18:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    eb1a:	75 83       	std	Z+5, r23	; 0x05
    eb1c:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    eb1e:	97 83       	std	Z+7, r25	; 0x07
    eb20:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    eb22:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    eb24:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    eb26:	13 86       	std	Z+11, r1	; 0x0b
    eb28:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    eb2a:	15 86       	std	Z+13, r1	; 0x0d
    eb2c:	14 86       	std	Z+12, r1	; 0x0c
    eb2e:	08 95       	ret

0000eb30 <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    eb30:	0e 94 50 75 	call	0xeaa0	; 0xeaa0 <FIFO_InternalGetData>
	
	return data;
}
    eb34:	99 27       	eor	r25, r25
    eb36:	08 95       	ret

0000eb38 <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    eb38:	0f 93       	push	r16
    eb3a:	1f 93       	push	r17
    eb3c:	cf 93       	push	r28
    eb3e:	df 93       	push	r29
    eb40:	cd b7       	in	r28, 0x3d	; 61
    eb42:	de b7       	in	r29, 0x3e	; 62
    eb44:	21 97       	sbiw	r28, 0x01	; 1
    eb46:	0f b6       	in	r0, 0x3f	; 63
    eb48:	f8 94       	cli
    eb4a:	de bf       	out	0x3e, r29	; 62
    eb4c:	0f be       	out	0x3f, r0	; 63
    eb4e:	cd bf       	out	0x3d, r28	; 61
    eb50:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    eb52:	fc 01       	movw	r30, r24
    eb54:	81 85       	ldd	r24, Z+9	; 0x09
    eb56:	88 23       	and	r24, r24
    eb58:	41 f0       	breq	.+16     	; 0xeb6a <FIFO_Flush+0x32>
    eb5a:	c8 01       	movw	r24, r16
    eb5c:	0e 94 98 75 	call	0xeb30	; 0xeb30 <FIFO_GetUint8>
    eb60:	89 83       	std	Y+1, r24	; 0x01
    eb62:	f8 01       	movw	r30, r16
    eb64:	81 85       	ldd	r24, Z+9	; 0x09
    eb66:	88 23       	and	r24, r24
    eb68:	c1 f7       	brne	.-16     	; 0xeb5a <FIFO_Flush+0x22>
    eb6a:	21 96       	adiw	r28, 0x01	; 1
    eb6c:	0f b6       	in	r0, 0x3f	; 63
    eb6e:	f8 94       	cli
    eb70:	de bf       	out	0x3e, r29	; 62
    eb72:	0f be       	out	0x3f, r0	; 63
    eb74:	cd bf       	out	0x3d, r28	; 61
    eb76:	df 91       	pop	r29
    eb78:	cf 91       	pop	r28
    eb7a:	1f 91       	pop	r17
    eb7c:	0f 91       	pop	r16
    eb7e:	08 95       	ret

0000eb80 <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    eb80:	ef 92       	push	r14
    eb82:	ff 92       	push	r15
    eb84:	0f 93       	push	r16
    eb86:	1f 93       	push	r17
    eb88:	7c 01       	movw	r14, r24
    eb8a:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    eb8c:	0e 94 15 75 	call	0xea2a	; 0xea2a <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    eb90:	81 2f       	mov	r24, r17
    eb92:	99 27       	eor	r25, r25
    eb94:	68 2f       	mov	r22, r24
    eb96:	c7 01       	movw	r24, r14
    eb98:	0e 94 15 75 	call	0xea2a	; 0xea2a <FIFO_InternalPutData>
    eb9c:	1f 91       	pop	r17
    eb9e:	0f 91       	pop	r16
    eba0:	ff 90       	pop	r15
    eba2:	ef 90       	pop	r14
    eba4:	08 95       	ret

0000eba6 <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    eba6:	ef 92       	push	r14
    eba8:	ff 92       	push	r15
    ebaa:	0f 93       	push	r16
    ebac:	1f 93       	push	r17
    ebae:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    ebb0:	0e 94 50 75 	call	0xeaa0	; 0xeaa0 <FIFO_InternalGetData>
    ebb4:	e8 2e       	mov	r14, r24
    ebb6:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    ebb8:	c8 01       	movw	r24, r16
    ebba:	0e 94 50 75 	call	0xeaa0	; 0xeaa0 <FIFO_InternalGetData>
    ebbe:	99 27       	eor	r25, r25
    ebc0:	98 2f       	mov	r25, r24
    ebc2:	88 27       	eor	r24, r24
	
	return data;
}
    ebc4:	8e 29       	or	r24, r14
    ebc6:	9f 29       	or	r25, r15
    ebc8:	1f 91       	pop	r17
    ebca:	0f 91       	pop	r16
    ebcc:	ff 90       	pop	r15
    ebce:	ef 90       	pop	r14
    ebd0:	08 95       	ret

0000ebd2 <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    ebd2:	90 93 69 02 	sts	0x0269, r25
    ebd6:	80 93 68 02 	sts	0x0268, r24
	MEMBLOCK_manager.bags = workspace;
    ebda:	70 93 6b 02 	sts	0x026B, r23
    ebde:	60 93 6a 02 	sts	0x026A, r22
    ebe2:	08 95       	ret

0000ebe4 <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    ebe4:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    ebe6:	28 e1       	ldi	r18, 0x18	; 24
    ebe8:	30 e0       	ldi	r19, 0x00	; 0
    ebea:	82 9f       	mul	r24, r18
    ebec:	f0 01       	movw	r30, r0
    ebee:	83 9f       	mul	r24, r19
    ebf0:	f0 0d       	add	r31, r0
    ebf2:	92 9f       	mul	r25, r18
    ebf4:	f0 0d       	add	r31, r0
    ebf6:	11 24       	eor	r1, r1
    ebf8:	cf 01       	movw	r24, r30
    ebfa:	e0 91 6a 02 	lds	r30, 0x026A
    ebfe:	f0 91 6b 02 	lds	r31, 0x026B
    ec02:	e8 0f       	add	r30, r24
    ec04:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    ec06:	71 83       	std	Z+1, r23	; 0x01
    ec08:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    ec0a:	53 83       	std	Z+3, r21	; 0x03
    ec0c:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    ec0e:	55 83       	std	Z+5, r21	; 0x05
    ec10:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    ec12:	13 86       	std	Z+11, r1	; 0x0b
    ec14:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    ec16:	75 87       	std	Z+13, r23	; 0x0d
    ec18:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    ec1a:	17 86       	std	Z+15, r1	; 0x0f
    ec1c:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    ec1e:	10 8a       	std	Z+16, r1	; 0x10
    ec20:	11 8a       	std	Z+17, r1	; 0x11
    ec22:	12 8a       	std	Z+18, r1	; 0x12
    ec24:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    ec26:	14 8a       	std	Z+20, r1	; 0x14
    ec28:	15 8a       	std	Z+21, r1	; 0x15
    ec2a:	16 8a       	std	Z+22, r1	; 0x16
    ec2c:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    ec2e:	b7 83       	std	Z+7, r27	; 0x07
    ec30:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    ec32:	64 9f       	mul	r22, r20
    ec34:	c0 01       	movw	r24, r0
    ec36:	65 9f       	mul	r22, r21
    ec38:	90 0d       	add	r25, r0
    ec3a:	74 9f       	mul	r23, r20
    ec3c:	90 0d       	add	r25, r0
    ec3e:	11 24       	eor	r1, r1
    ec40:	8a 0f       	add	r24, r26
    ec42:	9b 1f       	adc	r25, r27
    ec44:	91 87       	std	Z+9, r25	; 0x09
    ec46:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    ec48:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    ec4a:	49 5f       	subi	r20, 0xF9	; 249
    ec4c:	5f 4f       	sbci	r21, 0xFF	; 255
    ec4e:	83 e0       	ldi	r24, 0x03	; 3
    ec50:	56 95       	lsr	r21
    ec52:	47 95       	ror	r20
    ec54:	8a 95       	dec	r24
    ec56:	e1 f7       	brne	.-8      	; 0xec50 <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    ec58:	41 15       	cp	r20, r1
    ec5a:	51 05       	cpc	r21, r1
    ec5c:	29 f0       	breq	.+10     	; 0xec68 <MEMBLOCK_InitBag+0x84>
    ec5e:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    ec60:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    ec62:	41 50       	subi	r20, 0x01	; 1
    ec64:	50 40       	sbci	r21, 0x00	; 0
    ec66:	e1 f7       	brne	.-8      	; 0xec60 <MEMBLOCK_InitBag+0x7c>
    ec68:	08 95       	ret

0000ec6a <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    ec6a:	af 92       	push	r10
    ec6c:	bf 92       	push	r11
    ec6e:	cf 92       	push	r12
    ec70:	df 92       	push	r13
    ec72:	ff 92       	push	r15
    ec74:	0f 93       	push	r16
    ec76:	1f 93       	push	r17
    ec78:	cf 93       	push	r28
    ec7a:	df 93       	push	r29
    ec7c:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    ec7e:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    ec80:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    ec82:	c0 91 6a 02 	lds	r28, 0x026A
    ec86:	d0 91 6b 02 	lds	r29, 0x026B
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    ec8a:	20 91 68 02 	lds	r18, 0x0268
    ec8e:	30 91 69 02 	lds	r19, 0x0269

	bool found = false;
    ec92:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    ec94:	21 15       	cp	r18, r1
    ec96:	31 05       	cpc	r19, r1
    ec98:	09 f4       	brne	.+2      	; 0xec9c <MEMBLOCK_Allocate+0x32>
    ec9a:	81 c0       	rjmp	.+258    	; 0xed9e <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    ec9c:	88 81       	ld	r24, Y
    ec9e:	99 81       	ldd	r25, Y+1	; 0x01
    eca0:	86 17       	cp	r24, r22
    eca2:	97 07       	cpc	r25, r23
    eca4:	30 f0       	brcs	.+12     	; 0xecb2 <MEMBLOCK_Allocate+0x48>
    eca6:	8c 81       	ldd	r24, Y+4	; 0x04
    eca8:	9d 81       	ldd	r25, Y+5	; 0x05
    ecaa:	89 2b       	or	r24, r25
    ecac:	11 f0       	breq	.+4      	; 0xecb2 <MEMBLOCK_Allocate+0x48>
			found = true;
    ecae:	41 e0       	ldi	r20, 0x01	; 1
    ecb0:	03 c0       	rjmp	.+6      	; 0xecb8 <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    ecb2:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    ecb4:	21 50       	subi	r18, 0x01	; 1
    ecb6:	30 40       	sbci	r19, 0x00	; 0
    ecb8:	21 15       	cp	r18, r1
    ecba:	31 05       	cpc	r19, r1
    ecbc:	11 f0       	breq	.+4      	; 0xecc2 <MEMBLOCK_Allocate+0x58>
    ecbe:	44 23       	and	r20, r20
    ecc0:	69 f3       	breq	.-38     	; 0xec9c <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    ecc2:	44 23       	and	r20, r20
    ecc4:	09 f4       	brne	.+2      	; 0xecc8 <MEMBLOCK_Allocate+0x5e>
    ecc6:	6b c0       	rjmp	.+214    	; 0xed9e <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    ecc8:	e8 85       	ldd	r30, Y+8	; 0x08
    ecca:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    eccc:	20 e0       	ldi	r18, 0x00	; 0
    ecce:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    ecd0:	80 81       	ld	r24, Z
    ecd2:	88 23       	and	r24, r24
    ecd4:	21 f4       	brne	.+8      	; 0xecde <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    ecd6:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    ecd8:	28 5f       	subi	r18, 0xF8	; 248
    ecda:	3f 4f       	sbci	r19, 0xFF	; 255
    ecdc:	f9 cf       	rjmp	.-14     	; 0xecd0 <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    ecde:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    ece0:	90 81       	ld	r25, Z
    ece2:	97 fd       	sbrc	r25, 7
    ece4:	06 c0       	rjmp	.+12     	; 0xecf2 <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    ece6:	46 95       	lsr	r20
		++blockIndex;
    ece8:	2f 5f       	subi	r18, 0xFF	; 255
    ecea:	3f 4f       	sbci	r19, 0xFF	; 255
    ecec:	89 2f       	mov	r24, r25
    ecee:	84 23       	and	r24, r20
    ecf0:	d1 f3       	breq	.-12     	; 0xece6 <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    ecf2:	40 95       	com	r20
    ecf4:	94 23       	and	r25, r20
    ecf6:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    ecf8:	8c 81       	ldd	r24, Y+4	; 0x04
    ecfa:	9d 81       	ldd	r25, Y+5	; 0x05
    ecfc:	01 97       	sbiw	r24, 0x01	; 1
    ecfe:	9d 83       	std	Y+5, r25	; 0x05
    ed00:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    ed02:	48 81       	ld	r20, Y
    ed04:	59 81       	ldd	r21, Y+1	; 0x01
    ed06:	24 9f       	mul	r18, r20
    ed08:	50 01       	movw	r10, r0
    ed0a:	25 9f       	mul	r18, r21
    ed0c:	b0 0c       	add	r11, r0
    ed0e:	34 9f       	mul	r19, r20
    ed10:	b0 0c       	add	r11, r0
    ed12:	11 24       	eor	r1, r1
    ed14:	0e 81       	ldd	r16, Y+6	; 0x06
    ed16:	1f 81       	ldd	r17, Y+7	; 0x07
    ed18:	0a 0d       	add	r16, r10
    ed1a:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    ed1c:	2a 81       	ldd	r18, Y+2	; 0x02
    ed1e:	3b 81       	ldd	r19, Y+3	; 0x03
    ed20:	28 1b       	sub	r18, r24
    ed22:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    ed24:	8a 85       	ldd	r24, Y+10	; 0x0a
    ed26:	9b 85       	ldd	r25, Y+11	; 0x0b
    ed28:	82 17       	cp	r24, r18
    ed2a:	93 07       	cpc	r25, r19
    ed2c:	10 f4       	brcc	.+4      	; 0xed32 <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    ed2e:	3b 87       	std	Y+11, r19	; 0x0b
    ed30:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    ed32:	8e 85       	ldd	r24, Y+14	; 0x0e
    ed34:	9f 85       	ldd	r25, Y+15	; 0x0f
    ed36:	86 17       	cp	r24, r22
    ed38:	97 07       	cpc	r25, r23
    ed3a:	10 f4       	brcc	.+4      	; 0xed40 <MEMBLOCK_Allocate+0xd6>
    ed3c:	7f 87       	std	Y+15, r23	; 0x0f
    ed3e:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    ed40:	8c 85       	ldd	r24, Y+12	; 0x0c
    ed42:	9d 85       	ldd	r25, Y+13	; 0x0d
    ed44:	68 17       	cp	r22, r24
    ed46:	79 07       	cpc	r23, r25
    ed48:	10 f4       	brcc	.+4      	; 0xed4e <MEMBLOCK_Allocate+0xe4>
    ed4a:	7d 87       	std	Y+13, r23	; 0x0d
    ed4c:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    ed4e:	88 89       	ldd	r24, Y+16	; 0x10
    ed50:	99 89       	ldd	r25, Y+17	; 0x11
    ed52:	aa 89       	ldd	r26, Y+18	; 0x12
    ed54:	bb 89       	ldd	r27, Y+19	; 0x13
    ed56:	01 96       	adiw	r24, 0x01	; 1
    ed58:	a1 1d       	adc	r26, r1
    ed5a:	b1 1d       	adc	r27, r1
    ed5c:	88 8b       	std	Y+16, r24	; 0x10
    ed5e:	99 8b       	std	Y+17, r25	; 0x11
    ed60:	aa 8b       	std	Y+18, r26	; 0x12
    ed62:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    ed64:	cb 01       	movw	r24, r22
    ed66:	aa 27       	eor	r26, r26
    ed68:	bb 27       	eor	r27, r27
    ed6a:	ba 2f       	mov	r27, r26
    ed6c:	a9 2f       	mov	r26, r25
    ed6e:	98 2f       	mov	r25, r24
    ed70:	88 27       	eor	r24, r24
    ed72:	5a 01       	movw	r10, r20
    ed74:	cc 24       	eor	r12, r12
    ed76:	dd 24       	eor	r13, r13
    ed78:	a6 01       	movw	r20, r12
    ed7a:	95 01       	movw	r18, r10
    ed7c:	bc 01       	movw	r22, r24
    ed7e:	cd 01       	movw	r24, r26
    ed80:	0e 94 94 7d 	call	0xfb28	; 0xfb28 <__udivmodsi4>
		bag->allocationUtilization += utilization;
    ed84:	8c 89       	ldd	r24, Y+20	; 0x14
    ed86:	9d 89       	ldd	r25, Y+21	; 0x15
    ed88:	ae 89       	ldd	r26, Y+22	; 0x16
    ed8a:	bf 89       	ldd	r27, Y+23	; 0x17
    ed8c:	82 0f       	add	r24, r18
    ed8e:	93 1f       	adc	r25, r19
    ed90:	a4 1f       	adc	r26, r20
    ed92:	b5 1f       	adc	r27, r21
    ed94:	8c 8b       	std	Y+20, r24	; 0x14
    ed96:	9d 8b       	std	Y+21, r25	; 0x15
    ed98:	ae 8b       	std	Y+22, r26	; 0x16
    ed9a:	bf 8b       	std	Y+23, r27	; 0x17
    ed9c:	02 c0       	rjmp	.+4      	; 0xeda2 <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    ed9e:	00 e0       	ldi	r16, 0x00	; 0
    eda0:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    eda2:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    eda4:	c8 01       	movw	r24, r16
    eda6:	df 91       	pop	r29
    eda8:	cf 91       	pop	r28
    edaa:	1f 91       	pop	r17
    edac:	0f 91       	pop	r16
    edae:	ff 90       	pop	r15
    edb0:	df 90       	pop	r13
    edb2:	cf 90       	pop	r12
    edb4:	bf 90       	pop	r11
    edb6:	af 90       	pop	r10
    edb8:	08 95       	ret

0000edba <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    edba:	cf 93       	push	r28
    edbc:	df 93       	push	r29
    edbe:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    edc0:	89 2b       	or	r24, r25
    edc2:	09 f4       	brne	.+2      	; 0xedc6 <MEMBLOCK_Free+0xc>
    edc4:	4e c0       	rjmp	.+156    	; 0xee62 <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    edc6:	c0 91 6a 02 	lds	r28, 0x026A
    edca:	d0 91 6b 02 	lds	r29, 0x026B
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    edce:	20 91 68 02 	lds	r18, 0x0268
    edd2:	30 91 69 02 	lds	r19, 0x0269

	bool found = false;
    edd6:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    edd8:	21 15       	cp	r18, r1
    edda:	31 05       	cpc	r19, r1
    eddc:	e9 f1       	breq	.+122    	; 0xee58 <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    edde:	8e 81       	ldd	r24, Y+6	; 0x06
    ede0:	9f 81       	ldd	r25, Y+7	; 0x07
    ede2:	48 17       	cp	r20, r24
    ede4:	59 07       	cpc	r21, r25
    ede6:	38 f0       	brcs	.+14     	; 0xedf6 <MEMBLOCK_Free+0x3c>
    ede8:	88 85       	ldd	r24, Y+8	; 0x08
    edea:	99 85       	ldd	r25, Y+9	; 0x09
    edec:	48 17       	cp	r20, r24
    edee:	59 07       	cpc	r21, r25
    edf0:	10 f4       	brcc	.+4      	; 0xedf6 <MEMBLOCK_Free+0x3c>
			found = true;
    edf2:	61 e0       	ldi	r22, 0x01	; 1
    edf4:	03 c0       	rjmp	.+6      	; 0xedfc <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    edf6:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    edf8:	21 50       	subi	r18, 0x01	; 1
    edfa:	30 40       	sbci	r19, 0x00	; 0
    edfc:	21 15       	cp	r18, r1
    edfe:	31 05       	cpc	r19, r1
    ee00:	11 f0       	breq	.+4      	; 0xee06 <MEMBLOCK_Free+0x4c>
    ee02:	66 23       	and	r22, r22
    ee04:	61 f3       	breq	.-40     	; 0xedde <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    ee06:	66 23       	and	r22, r22
    ee08:	39 f1       	breq	.+78     	; 0xee58 <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    ee0a:	8e 81       	ldd	r24, Y+6	; 0x06
    ee0c:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    ee0e:	28 81       	ld	r18, Y
    ee10:	39 81       	ldd	r19, Y+1	; 0x01
    ee12:	48 1b       	sub	r20, r24
    ee14:	59 0b       	sbc	r21, r25
    ee16:	ca 01       	movw	r24, r20
    ee18:	b9 01       	movw	r22, r18
    ee1a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    ee1e:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    ee20:	cb 01       	movw	r24, r22
    ee22:	43 e0       	ldi	r20, 0x03	; 3
    ee24:	96 95       	lsr	r25
    ee26:	87 95       	ror	r24
    ee28:	4a 95       	dec	r20
    ee2a:	e1 f7       	brne	.-8      	; 0xee24 <MEMBLOCK_Free+0x6a>
    ee2c:	e8 85       	ldd	r30, Y+8	; 0x08
    ee2e:	f9 85       	ldd	r31, Y+9	; 0x09
    ee30:	e8 0f       	add	r30, r24
    ee32:	f9 1f       	adc	r31, r25
    ee34:	27 70       	andi	r18, 0x07	; 7
    ee36:	30 70       	andi	r19, 0x00	; 0
    ee38:	80 e8       	ldi	r24, 0x80	; 128
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	02 c0       	rjmp	.+4      	; 0xee42 <MEMBLOCK_Free+0x88>
    ee3e:	95 95       	asr	r25
    ee40:	87 95       	ror	r24
    ee42:	2a 95       	dec	r18
    ee44:	e2 f7       	brpl	.-8      	; 0xee3e <MEMBLOCK_Free+0x84>
    ee46:	20 81       	ld	r18, Z
    ee48:	28 2b       	or	r18, r24
    ee4a:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    ee4c:	8c 81       	ldd	r24, Y+4	; 0x04
    ee4e:	9d 81       	ldd	r25, Y+5	; 0x05
    ee50:	01 96       	adiw	r24, 0x01	; 1
    ee52:	9d 83       	std	Y+5, r25	; 0x05
    ee54:	8c 83       	std	Y+4, r24	; 0x04
    ee56:	05 c0       	rjmp	.+10     	; 0xee62 <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    ee58:	80 91 6c 02 	lds	r24, 0x026C
    ee5c:	8f 5f       	subi	r24, 0xFF	; 255
    ee5e:	80 93 6c 02 	sts	0x026C, r24
    ee62:	df 91       	pop	r29
    ee64:	cf 91       	pop	r28
    ee66:	08 95       	ret

0000ee68 <PICTURE_CopyFullscreenFlashToLcd>:

/*!
 * \param  pPictureInFlash  Pointer to picture in flash with same size as LCD
 */
void PICTURE_CopyFullscreenFlashToLcd ( const uint8_t CAL_PGM(* pPictureInFlash))
{
    ee68:	1f 93       	push	r17
    ee6a:	cf 93       	push	r28
    ee6c:	df 93       	push	r29
    ee6e:	ec 01       	movw	r28, r24
  uint8_t page = 0;
    ee70:	10 e0       	ldi	r17, 0x00	; 0
  do{
    LCD_WritePage_F( pPictureInFlash, page, 0, LCD_WIDTH);  // Write full row with page height.
    ee72:	20 e8       	ldi	r18, 0x80	; 128
    ee74:	40 e0       	ldi	r20, 0x00	; 0
    ee76:	61 2f       	mov	r22, r17
    ee78:	ce 01       	movw	r24, r28
    ee7a:	0e 94 af 70 	call	0xe15e	; 0xe15e <LCD_WritePage_F>
    pPictureInFlash += LCD_WIDTH;
    ee7e:	c0 58       	subi	r28, 0x80	; 128
    ee80:	df 4f       	sbci	r29, 0xFF	; 255
    page++;
    ee82:	1f 5f       	subi	r17, 0xFF	; 255
  }while (page < LCD_PAGE_HEIGHT);
    ee84:	18 30       	cpi	r17, 0x08	; 8
    ee86:	a8 f3       	brcs	.-22     	; 0xee72 <PICTURE_CopyFullscreenFlashToLcd+0xa>
    ee88:	df 91       	pop	r29
    ee8a:	cf 91       	pop	r28
    ee8c:	1f 91       	pop	r17
    ee8e:	08 95       	ret

0000ee90 <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    ee90:	8f 92       	push	r8
    ee92:	9f 92       	push	r9
    ee94:	af 92       	push	r10
    ee96:	cf 92       	push	r12
    ee98:	ef 92       	push	r14
    ee9a:	0f 93       	push	r16
    ee9c:	1f 93       	push	r17
    ee9e:	cf 93       	push	r28
    eea0:	df 93       	push	r29
    eea2:	4b 01       	movw	r8, r22
    eea4:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    eea6:	33 27       	eor	r19, r19
    eea8:	62 9f       	mul	r22, r18
    eeaa:	e0 01       	movw	r28, r0
    eeac:	63 9f       	mul	r22, r19
    eeae:	d0 0d       	add	r29, r0
    eeb0:	72 9f       	mul	r23, r18
    eeb2:	d0 0d       	add	r29, r0
    eeb4:	11 24       	eor	r1, r1
    eeb6:	c4 0f       	add	r28, r20
    eeb8:	d5 1f       	adc	r29, r21
    eeba:	c8 0f       	add	r28, r24
    eebc:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    eebe:	11 50       	subi	r17, 0x01	; 1
    eec0:	1f 3f       	cpi	r17, 0xFF	; 255
    eec2:	59 f0       	breq	.+22     	; 0xeeda <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    eec4:	2c 2d       	mov	r18, r12
    eec6:	40 2f       	mov	r20, r16
    eec8:	6e 2d       	mov	r22, r14
    eeca:	ce 01       	movw	r24, r28
    eecc:	0e 94 af 70 	call	0xe15e	; 0xe15e <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    eed0:	c8 0d       	add	r28, r8
    eed2:	d9 1d       	adc	r29, r9
    destPage++;
    eed4:	e3 94       	inc	r14
    eed6:	11 50       	subi	r17, 0x01	; 1
    eed8:	a8 f7       	brcc	.-22     	; 0xeec4 <PICTURE_CopyFlashToLcd+0x34>
    eeda:	df 91       	pop	r29
    eedc:	cf 91       	pop	r28
    eede:	1f 91       	pop	r17
    eee0:	0f 91       	pop	r16
    eee2:	ef 90       	pop	r14
    eee4:	cf 90       	pop	r12
    eee6:	af 90       	pop	r10
    eee8:	9f 90       	pop	r9
    eeea:	8f 90       	pop	r8
    eeec:	08 95       	ret

0000eeee <FORMS_CalculateStartPages>:
 * been added or removed from the form.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_CalculateStartPages( FORMS_form_t * form )
{
    eeee:	cf 93       	push	r28
    eef0:	df 93       	push	r29
    eef2:	fc 01       	movw	r30, r24
	// Setup iteration variables.
	FORMS_element_t * element = form->firstElement;
    eef4:	a6 81       	ldd	r26, Z+6	; 0x06
    eef6:	b7 81       	ldd	r27, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    eef8:	95 81       	ldd	r25, Z+5	; 0x05
	FORMS_size_t currentHeight = 0;
    eefa:	40 e0       	ldi	r20, 0x00	; 0
	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
		currentHeight += element->height;
		element = element->next;
		--elementsLeft;
    eefc:	99 23       	and	r25, r25
    eefe:	41 f0       	breq	.+16     	; 0xef10 <FORMS_CalculateStartPages+0x22>
	FORMS_size_t elementsLeft = form->elementCount;
	FORMS_size_t currentHeight = 0;

	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
    ef00:	4c 93       	st	X, r20
		currentHeight += element->height;
    ef02:	ed 01       	movw	r28, r26
    ef04:	89 81       	ldd	r24, Y+1	; 0x01
    ef06:	48 0f       	add	r20, r24
		element = element->next;
    ef08:	ad 85       	ldd	r26, Y+13	; 0x0d
    ef0a:	be 85       	ldd	r27, Y+14	; 0x0e
		--elementsLeft;
    ef0c:	91 50       	subi	r25, 0x01	; 1
    ef0e:	f6 cf       	rjmp	.-20     	; 0xeefc <FORMS_CalculateStartPages+0xe>
	}

	// Now, we know the height of the entire form.
	form->height = currentHeight;
    ef10:	43 83       	std	Z+3, r20	; 0x03
	
	// Make sure form is not scrolled beyond bottom now when we have recalculated.
	if (form->height < LCD_PAGE_COUNT) {
    ef12:	48 30       	cpi	r20, 0x08	; 8
    ef14:	10 f4       	brcc	.+4      	; 0xef1a <FORMS_CalculateStartPages+0x2c>
		form->firstVisiblePage = 0;
    ef16:	12 82       	std	Z+2, r1	; 0x02
    ef18:	0a c0       	rjmp	.+20     	; 0xef2e <FORMS_CalculateStartPages+0x40>
	}
	else if ((form->firstVisiblePage + LCD_PAGE_COUNT) > form->height) {
    ef1a:	82 81       	ldd	r24, Z+2	; 0x02
    ef1c:	99 27       	eor	r25, r25
    ef1e:	08 96       	adiw	r24, 0x08	; 8
    ef20:	24 2f       	mov	r18, r20
    ef22:	33 27       	eor	r19, r19
    ef24:	28 17       	cp	r18, r24
    ef26:	39 07       	cpc	r19, r25
    ef28:	14 f4       	brge	.+4      	; 0xef2e <FORMS_CalculateStartPages+0x40>
		form->firstVisiblePage = currentHeight - LCD_PAGE_COUNT;
    ef2a:	48 50       	subi	r20, 0x08	; 8
    ef2c:	42 83       	std	Z+2, r20	; 0x02
	}
	
	// Indicate that we have recalculated start pages.
	form->needsRecalculation = false;
    ef2e:	84 81       	ldd	r24, Z+4	; 0x04
    ef30:	8d 7f       	andi	r24, 0xFD	; 253
    ef32:	84 83       	std	Z+4, r24	; 0x04
    ef34:	df 91       	pop	r29
    ef36:	cf 91       	pop	r28
    ef38:	08 95       	ret

0000ef3a <FORMS_DrawScrollbar>:
 * position indicator if required.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawScrollbar( FORMS_form_t const * form )
{
    ef3a:	ff 92       	push	r15
    ef3c:	0f 93       	push	r16
    ef3e:	1f 93       	push	r17
    ef40:	cf 93       	push	r28
    ef42:	df 93       	push	r29
    ef44:	8c 01       	movw	r16, r24
	// Draw vertical separator and clear old bar.
	LCD_SetVLine( LCD_WIDTH - 3, 0, LCD_HEIGHT - 1 );
    ef46:	4f e3       	ldi	r20, 0x3F	; 63
    ef48:	60 e0       	ldi	r22, 0x00	; 0
    ef4a:	8d e7       	ldi	r24, 0x7D	; 125
    ef4c:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
	LCD_ClrVLine( LCD_WIDTH - 2, 0, LCD_HEIGHT - 1 );
    ef50:	4f e3       	ldi	r20, 0x3F	; 63
    ef52:	60 e0       	ldi	r22, 0x00	; 0
    ef54:	8e e7       	ldi	r24, 0x7E	; 126
    ef56:	0e 94 e5 6e 	call	0xddca	; 0xddca <LCD_ClrVLine>
	LCD_ClrVLine( LCD_WIDTH - 1, 0, LCD_HEIGHT - 1 );
    ef5a:	4f e3       	ldi	r20, 0x3F	; 63
    ef5c:	60 e0       	ldi	r22, 0x00	; 0
    ef5e:	8f e7       	ldi	r24, 0x7F	; 127
    ef60:	0e 94 e5 6e 	call	0xddca	; 0xddca <LCD_ClrVLine>

	// Draw scroll position indicator if form is not empty.
	if (form->height > LCD_PAGE_COUNT) {
    ef64:	e8 01       	movw	r28, r16
    ef66:	fb 80       	ldd	r15, Y+3	; 0x03
    ef68:	e8 e0       	ldi	r30, 0x08	; 8
    ef6a:	ef 15       	cp	r30, r15
    ef6c:	08 f0       	brcs	.+2      	; 0xef70 <FORMS_DrawScrollbar+0x36>
    ef6e:	5d c0       	rjmp	.+186    	; 0xf02a <FORMS_DrawScrollbar+0xf0>
		// Indicator height shows the size of the visible parts
		// related to the entire form height.
		uint16_t heightOfBar = (uint16_t) LCD_HEIGHT * LCD_PAGE_COUNT / form->height;
    ef70:	2f 2d       	mov	r18, r15
    ef72:	33 27       	eor	r19, r19
    ef74:	80 e0       	ldi	r24, 0x00	; 0
    ef76:	92 e0       	ldi	r25, 0x02	; 2
    ef78:	b9 01       	movw	r22, r18
    ef7a:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    ef7e:	fb 01       	movw	r30, r22
		
		// Make sure the bar is not too small or too large.
		if (heightOfBar == 0) {
    ef80:	61 15       	cp	r22, r1
    ef82:	71 05       	cpc	r23, r1
    ef84:	19 f4       	brne	.+6      	; 0xef8c <FORMS_DrawScrollbar+0x52>
			heightOfBar = 1;
    ef86:	e1 e0       	ldi	r30, 0x01	; 1
    ef88:	f0 e0       	ldi	r31, 0x00	; 0
    ef8a:	05 c0       	rjmp	.+10     	; 0xef96 <FORMS_DrawScrollbar+0x5c>
		}
		else if (heightOfBar > LCD_HEIGHT) {
    ef8c:	61 34       	cpi	r22, 0x41	; 65
    ef8e:	71 05       	cpc	r23, r1
    ef90:	10 f0       	brcs	.+4      	; 0xef96 <FORMS_DrawScrollbar+0x5c>
			heightOfBar = LCD_HEIGHT;
    ef92:	e0 e4       	ldi	r30, 0x40	; 64
    ef94:	f0 e0       	ldi	r31, 0x00	; 0
		}

		// Position shows the relative position of the visible area within the entire form.
		uint16_t startOfBar = form->firstVisiblePage * (LCD_HEIGHT - heightOfBar) /
    ef96:	e8 01       	movw	r28, r16
    ef98:	8a 81       	ldd	r24, Y+2	; 0x02
    ef9a:	48 2f       	mov	r20, r24
    ef9c:	55 27       	eor	r21, r21
    ef9e:	80 e4       	ldi	r24, 0x40	; 64
    efa0:	90 e0       	ldi	r25, 0x00	; 0
    efa2:	8e 1b       	sub	r24, r30
    efa4:	9f 0b       	sbc	r25, r31
    efa6:	2f 2d       	mov	r18, r15
    efa8:	33 27       	eor	r19, r19
    efaa:	28 50       	subi	r18, 0x08	; 8
    efac:	30 40       	sbci	r19, 0x00	; 0
    efae:	48 9f       	mul	r20, r24
    efb0:	b0 01       	movw	r22, r0
    efb2:	49 9f       	mul	r20, r25
    efb4:	70 0d       	add	r23, r0
    efb6:	58 9f       	mul	r21, r24
    efb8:	70 0d       	add	r23, r0
    efba:	11 24       	eor	r1, r1
    efbc:	cb 01       	movw	r24, r22
    efbe:	b9 01       	movw	r22, r18
    efc0:	0e 94 6d 7d 	call	0xfada	; 0xfada <__udivmodhi4>
    efc4:	eb 01       	movw	r28, r22
		                      (form->height - LCD_PAGE_COUNT);

		// Adjust start according to LCD hardware scrolling.
		startOfBar = (startOfBar + (LCD_GetTopPage() * LCD_PAGE_HEIGHT)) % LCD_HEIGHT;
    efc6:	80 91 4b 02 	lds	r24, 0x024B
    efca:	99 27       	eor	r25, r25
    efcc:	23 e0       	ldi	r18, 0x03	; 3
    efce:	88 0f       	add	r24, r24
    efd0:	99 1f       	adc	r25, r25
    efd2:	2a 95       	dec	r18
    efd4:	e1 f7       	brne	.-8      	; 0xefce <FORMS_DrawScrollbar+0x94>
    efd6:	c8 0f       	add	r28, r24
    efd8:	d9 1f       	adc	r29, r25
    efda:	cf 73       	andi	r28, 0x3F	; 63
    efdc:	d0 70       	andi	r29, 0x00	; 0

		// If bar wraps from bottom to top after adjusting it, draw it in two steps.
		if ((startOfBar + heightOfBar) > LCD_HEIGHT) {
    efde:	ce 01       	movw	r24, r28
    efe0:	8e 0f       	add	r24, r30
    efe2:	9f 1f       	adc	r25, r31
    efe4:	1c 2f       	mov	r17, r28
    efe6:	1e 0f       	add	r17, r30
    efe8:	81 34       	cpi	r24, 0x41	; 65
    efea:	91 05       	cpc	r25, r1
    efec:	98 f0       	brcs	.+38     	; 0xf014 <FORMS_DrawScrollbar+0xda>
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, LCD_HEIGHT - 1 );
    efee:	4f e3       	ldi	r20, 0x3F	; 63
    eff0:	6c 2f       	mov	r22, r28
    eff2:	8e e7       	ldi	r24, 0x7E	; 126
    eff4:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, LCD_HEIGHT - 1 );
    eff8:	4f e3       	ldi	r20, 0x3F	; 63
    effa:	6c 2f       	mov	r22, r28
    effc:	8f e7       	ldi	r24, 0x7F	; 127
    effe:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 2, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    f002:	11 54       	subi	r17, 0x41	; 65
    f004:	41 2f       	mov	r20, r17
    f006:	60 e0       	ldi	r22, 0x00	; 0
    f008:	8e e7       	ldi	r24, 0x7E	; 126
    f00a:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    f00e:	41 2f       	mov	r20, r17
    f010:	60 e0       	ldi	r22, 0x00	; 0
    f012:	08 c0       	rjmp	.+16     	; 0xf024 <FORMS_DrawScrollbar+0xea>
		} else {
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, startOfBar + heightOfBar - 1 );
    f014:	11 50       	subi	r17, 0x01	; 1
    f016:	41 2f       	mov	r20, r17
    f018:	6c 2f       	mov	r22, r28
    f01a:	8e e7       	ldi	r24, 0x7E	; 126
    f01c:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, startOfBar + heightOfBar - 1 );
    f020:	41 2f       	mov	r20, r17
    f022:	6c 2f       	mov	r22, r28
    f024:	8f e7       	ldi	r24, 0x7F	; 127
    f026:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <LCD_SetVLine>
    f02a:	df 91       	pop	r29
    f02c:	cf 91       	pop	r28
    f02e:	1f 91       	pop	r17
    f030:	0f 91       	pop	r16
    f032:	ff 90       	pop	r15
    f034:	08 95       	ret

0000f036 <FORMS_DrawFocusIndicator>:
 * It draws the focus arrow next to the current focused page on screen.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
    f036:	0f 93       	push	r16
    f038:	1f 93       	push	r17
    f03a:	cf 93       	push	r28
    f03c:	df 93       	push	r29
    f03e:	8c 01       	movw	r16, r24
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    f040:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
    f042:	40 e4       	ldi	r20, 0x40	; 64
    f044:	60 e0       	ldi	r22, 0x00	; 0
    f046:	8c 2f       	mov	r24, r28
    f048:	0e 94 e5 6e 	call	0xddca	; 0xddca <LCD_ClrVLine>
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    f04c:	cf 5f       	subi	r28, 0xFF	; 255
    f04e:	c4 30       	cpi	r28, 0x04	; 4
    f050:	c0 f3       	brcs	.-16     	; 0xf042 <FORMS_DrawFocusIndicator+0xc>
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
	}

	// Check that focused element is within visible area.
	FORMS_size_t focusedPage = form->focusedElement->startPage +
    f052:	d8 01       	movw	r26, r16
    f054:	ed 91       	ld	r30, X+
    f056:	fc 91       	ld	r31, X
    f058:	60 81       	ld	r22, Z
    f05a:	82 81       	ldd	r24, Z+2	; 0x02
    f05c:	68 0f       	add	r22, r24
	                             form->focusedElement->focusedPage;
	if ((focusedPage >= form->firstVisiblePage) &&
    f05e:	e8 01       	movw	r28, r16
    f060:	ea 81       	ldd	r30, Y+2	; 0x02
    f062:	6e 17       	cp	r22, r30
    f064:	98 f0       	brcs	.+38     	; 0xf08c <FORMS_DrawFocusIndicator+0x56>
    f066:	26 2f       	mov	r18, r22
    f068:	33 27       	eor	r19, r19
    f06a:	8e 2f       	mov	r24, r30
    f06c:	99 27       	eor	r25, r25
    f06e:	08 96       	adiw	r24, 0x08	; 8
    f070:	28 17       	cp	r18, r24
    f072:	39 07       	cpc	r19, r25
    f074:	5c f4       	brge	.+22     	; 0xf08c <FORMS_DrawFocusIndicator+0x56>
	    (focusedPage < (form->firstVisiblePage + LCD_PAGE_COUNT))) {
		// Find start position for indicator, adjust for LCD hardware scrolling.
		uint8_t lcdPage = LCD_ROW2PAGE( focusedPage - form->firstVisiblePage );
    f076:	6e 1b       	sub	r22, r30
    f078:	80 91 4b 02 	lds	r24, 0x024B
    f07c:	68 0f       	add	r22, r24
    f07e:	67 70       	andi	r22, 0x07	; 7

		// Draw indicator.
		LCD_WritePage_F( FORMS_focusIndicator, lcdPage, 0, FORMS_FIRST_COLUMN );
    f080:	24 e0       	ldi	r18, 0x04	; 4
    f082:	40 e0       	ldi	r20, 0x00	; 0
    f084:	82 e5       	ldi	r24, 0x52	; 82
    f086:	90 ed       	ldi	r25, 0xD0	; 208
    f088:	0e 94 af 70 	call	0xe15e	; 0xe15e <LCD_WritePage_F>
    f08c:	df 91       	pop	r29
    f08e:	cf 91       	pop	r28
    f090:	1f 91       	pop	r17
    f092:	0f 91       	pop	r16
    f094:	08 95       	ret

0000f096 <FORMS_Draw>:
 * after displaying other graphics on top, for instance.
 *
 * \param  form  Pointer to form to draw.
 */
void FORMS_Draw( FORMS_form_t * form )
{
    f096:	cf 92       	push	r12
    f098:	df 92       	push	r13
    f09a:	ef 92       	push	r14
    f09c:	ff 92       	push	r15
    f09e:	0f 93       	push	r16
    f0a0:	1f 93       	push	r17
    f0a2:	cf 93       	push	r28
    f0a4:	df 93       	push	r29
    f0a6:	8c 01       	movw	r16, r24
	// Clear screen first.
	LCD_SetScreen( 0x00 );
    f0a8:	80 e0       	ldi	r24, 0x00	; 0
    f0aa:	0e 94 e5 6c 	call	0xd9ca	; 0xd9ca <LCD_SetScreen>
	
	// Exit if there is nothing to draw for some reason.
	if (form->elementCount == 0) {return; }
    f0ae:	f8 01       	movw	r30, r16
    f0b0:	85 81       	ldd	r24, Z+5	; 0x05
    f0b2:	88 23       	and	r24, r24
    f0b4:	09 f4       	brne	.+2      	; 0xf0b8 <FORMS_Draw+0x22>
    f0b6:	55 c0       	rjmp	.+170    	; 0xf162 <FORMS_Draw+0xcc>

	// Calculate start pages if required.
	if (form->needsRecalculation) {
    f0b8:	84 81       	ldd	r24, Z+4	; 0x04
    f0ba:	81 ff       	sbrs	r24, 1
    f0bc:	03 c0       	rjmp	.+6      	; 0xf0c4 <FORMS_Draw+0x2e>
		FORMS_CalculateStartPages( form );
    f0be:	c8 01       	movw	r24, r16
    f0c0:	0e 94 77 77 	call	0xeeee	; 0xeeee <FORMS_CalculateStartPages>
	}

	// Setup iteration variables.
	FORMS_element_t const * element = form->firstElement;
    f0c4:	f8 01       	movw	r30, r16
    f0c6:	c6 81       	ldd	r28, Z+6	; 0x06
    f0c8:	d7 81       	ldd	r29, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    f0ca:	e5 80       	ldd	r14, Z+5	; 0x05

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
		--elementsLeft;
    f0cc:	ee 20       	and	r14, r14
    f0ce:	b9 f0       	breq	.+46     	; 0xf0fe <FORMS_Draw+0x68>
    f0d0:	98 81       	ld	r25, Y
    f0d2:	89 81       	ldd	r24, Y+1	; 0x01
    f0d4:	89 0f       	add	r24, r25
    f0d6:	91 2d       	mov	r25, r1
    f0d8:	91 1d       	adc	r25, r1
    f0da:	01 97       	sbiw	r24, 0x01	; 1
    f0dc:	22 81       	ldd	r18, Z+2	; 0x02
    f0de:	33 27       	eor	r19, r19
    f0e0:	82 17       	cp	r24, r18
    f0e2:	93 07       	cpc	r25, r19
    f0e4:	64 f4       	brge	.+24     	; 0xf0fe <FORMS_Draw+0x68>
	FORMS_size_t elementsLeft = form->elementCount;

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
    f0e6:	0d 84       	ldd	r0, Y+13	; 0x0d
    f0e8:	de 85       	ldd	r29, Y+14	; 0x0e
    f0ea:	c0 2d       	mov	r28, r0
		--elementsLeft;
    f0ec:	ea 94       	dec	r14
    f0ee:	39 f0       	breq	.+14     	; 0xf0fe <FORMS_Draw+0x68>
    f0f0:	98 81       	ld	r25, Y
    f0f2:	89 81       	ldd	r24, Y+1	; 0x01
    f0f4:	89 0f       	add	r24, r25
    f0f6:	91 2d       	mov	r25, r1
    f0f8:	91 1d       	adc	r25, r1
    f0fa:	01 97       	sbiw	r24, 0x01	; 1
    f0fc:	f1 cf       	rjmp	.-30     	; 0xf0e0 <FORMS_Draw+0x4a>
	}

	// Find first page to draw within element.
	FORMS_size_t internalPage = form->firstVisiblePage - element->startPage;
    f0fe:	f8 01       	movw	r30, r16
    f100:	f2 80       	ldd	r15, Z+2	; 0x02
    f102:	88 81       	ld	r24, Y
    f104:	f8 1a       	sub	r15, r24

	// Draw nodes page by page until end of LCD reached or no more elements left.
	uint8_t lcdPage = LCD_GetTopPage();
    f106:	d0 90 4b 02 	lds	r13, 0x024B
	uint8_t lcdPagesLeft = LCD_PAGE_COUNT;
    f10a:	38 e0       	ldi	r19, 0x08	; 8
    f10c:	c3 2e       	mov	r12, r19
			}
			--lcdPagesLeft;
		}
		internalPage = 0;
		element = element->next;
		--elementsLeft;
    f10e:	ee 20       	and	r14, r14
    f110:	f1 f0       	breq	.+60     	; 0xf14e <FORMS_Draw+0xb8>
    f112:	14 c0       	rjmp	.+40     	; 0xf13c <FORMS_Draw+0xa6>
			++internalPage;
			++lcdPage;
			if (lcdPage >= LCD_PAGE_COUNT) {
				lcdPage = 0;
			}
			--lcdPagesLeft;
    f114:	89 81       	ldd	r24, Y+1	; 0x01
    f116:	f8 16       	cp	r15, r24
    f118:	98 f4       	brcc	.+38     	; 0xf140 <FORMS_Draw+0xaa>
	while ((lcdPagesLeft > 0) && (elementsLeft > 0)) {
		while ((lcdPagesLeft > 0) && (internalPage < element->height)) {

			///mt element->traits->DrawPage( element, internalPage, lcdPage );
			FORMS_DrawPageFunc_t drawPageFunc;
			drawPageFunc = (FORMS_DrawPageFunc_t)(CAL_pgm_read_pvoid(&(element->traits->DrawPage)));
    f11a:	ed 81       	ldd	r30, Y+5	; 0x05
    f11c:	fe 81       	ldd	r31, Y+6	; 0x06
    f11e:	38 96       	adiw	r30, 0x08	; 8
    f120:	25 91       	lpm	r18, Z+
    f122:	34 91       	lpm	r19, Z+
			drawPageFunc( element, internalPage, lcdPage );
    f124:	4d 2d       	mov	r20, r13
    f126:	6f 2d       	mov	r22, r15
    f128:	ce 01       	movw	r24, r28
    f12a:	f9 01       	movw	r30, r18
    f12c:	09 95       	icall

			++internalPage;
    f12e:	f3 94       	inc	r15
			++lcdPage;
    f130:	d3 94       	inc	r13
			if (lcdPage >= LCD_PAGE_COUNT) {
    f132:	f7 e0       	ldi	r31, 0x07	; 7
    f134:	fd 15       	cp	r31, r13
    f136:	08 f4       	brcc	.+2      	; 0xf13a <FORMS_Draw+0xa4>
				lcdPage = 0;
    f138:	dd 24       	eor	r13, r13
			}
			--lcdPagesLeft;
    f13a:	ca 94       	dec	r12
    f13c:	cc 20       	and	r12, r12
    f13e:	51 f7       	brne	.-44     	; 0xf114 <FORMS_Draw+0x7e>
		}
		internalPage = 0;
    f140:	ff 24       	eor	r15, r15
		element = element->next;
    f142:	0d 84       	ldd	r0, Y+13	; 0x0d
    f144:	de 85       	ldd	r29, Y+14	; 0x0e
    f146:	c0 2d       	mov	r28, r0
		--elementsLeft;
    f148:	ea 94       	dec	r14
    f14a:	cc 20       	and	r12, r12
    f14c:	01 f7       	brne	.-64     	; 0xf10e <FORMS_Draw+0x78>
	}	

	// Draw non-element form graphics.
	if (form->useScrollbar) {
    f14e:	f8 01       	movw	r30, r16
    f150:	84 81       	ldd	r24, Z+4	; 0x04
    f152:	80 ff       	sbrs	r24, 0
    f154:	03 c0       	rjmp	.+6      	; 0xf15c <FORMS_Draw+0xc6>
		FORMS_DrawScrollbar( form );
    f156:	c8 01       	movw	r24, r16
    f158:	0e 94 9d 77 	call	0xef3a	; 0xef3a <FORMS_DrawScrollbar>
	}
	FORMS_DrawFocusIndicator( form );
    f15c:	c8 01       	movw	r24, r16
    f15e:	0e 94 1b 78 	call	0xf036	; 0xf036 <FORMS_DrawFocusIndicator>
    f162:	df 91       	pop	r29
    f164:	cf 91       	pop	r28
    f166:	1f 91       	pop	r17
    f168:	0f 91       	pop	r16
    f16a:	ff 90       	pop	r15
    f16c:	ef 90       	pop	r14
    f16e:	df 90       	pop	r13
    f170:	cf 90       	pop	r12
    f172:	08 95       	ret

0000f174 <FORMS_NormalizeLCDScroll>:
 * a pop-up box, without having to compensate for hardware LCD scrolling.
 *
 * \param  form  Pointer to the form currently being on screen.
 */
void FORMS_NormalizeLCDScroll( FORMS_form_t * form )
{
    f174:	0f 93       	push	r16
    f176:	1f 93       	push	r17
    f178:	8c 01       	movw	r16, r24
	LCD_SetTopPage( 0, 0 );
    f17a:	60 e0       	ldi	r22, 0x00	; 0
    f17c:	86 2f       	mov	r24, r22
    f17e:	0e 94 fe 6c 	call	0xd9fc	; 0xd9fc <LCD_SetTopPage>
	FORMS_Draw( form );
    f182:	c8 01       	movw	r24, r16
    f184:	0e 94 4b 78 	call	0xf096	; 0xf096 <FORMS_Draw>
    f188:	1f 91       	pop	r17
    f18a:	0f 91       	pop	r16
    f18c:	08 95       	ret

0000f18e <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    f18e:	1f 92       	push	r1
    f190:	0f 92       	push	r0
    f192:	0f b6       	in	r0, 0x3f	; 63
    f194:	0f 92       	push	r0
    f196:	11 24       	eor	r1, r1
    f198:	2f 93       	push	r18
    f19a:	3f 93       	push	r19
    f19c:	4f 93       	push	r20
    f19e:	5f 93       	push	r21
    f1a0:	6f 93       	push	r22
    f1a2:	7f 93       	push	r23
    f1a4:	8f 93       	push	r24
    f1a6:	9f 93       	push	r25
    f1a8:	af 93       	push	r26
    f1aa:	bf 93       	push	r27
    f1ac:	ef 93       	push	r30
    f1ae:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    f1b0:	80 91 85 18 	lds	r24, 0x1885
    f1b4:	90 91 86 18 	lds	r25, 0x1886
    f1b8:	89 2b       	or	r24, r25
    f1ba:	29 f0       	breq	.+10     	; 0xf1c6 <__vector_15+0x38>
		RTC_TickHandler();
    f1bc:	e0 91 85 18 	lds	r30, 0x1885
    f1c0:	f0 91 86 18 	lds	r31, 0x1886
    f1c4:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    f1c6:	80 91 84 18 	lds	r24, 0x1884
    f1ca:	8f 37       	cpi	r24, 0x7F	; 127
    f1cc:	30 f4       	brcc	.+12     	; 0xf1da <__vector_15+0x4c>
		++RTC_ticks;
    f1ce:	80 91 84 18 	lds	r24, 0x1884
    f1d2:	8f 5f       	subi	r24, 0xFF	; 255
    f1d4:	80 93 84 18 	sts	0x1884, r24
    f1d8:	36 c0       	rjmp	.+108    	; 0xf246 <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    f1da:	10 92 84 18 	sts	0x1884, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    f1de:	80 91 83 18 	lds	r24, 0x1883
    f1e2:	8b 33       	cpi	r24, 0x3B	; 59
    f1e4:	30 f4       	brcc	.+12     	; 0xf1f2 <__vector_15+0x64>
			++RTC_seconds;
    f1e6:	80 91 83 18 	lds	r24, 0x1883
    f1ea:	8f 5f       	subi	r24, 0xFF	; 255
    f1ec:	80 93 83 18 	sts	0x1883, r24
    f1f0:	2a c0       	rjmp	.+84     	; 0xf246 <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    f1f2:	10 92 83 18 	sts	0x1883, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    f1f6:	80 91 82 18 	lds	r24, 0x1882
    f1fa:	8b 33       	cpi	r24, 0x3B	; 59
    f1fc:	30 f4       	brcc	.+12     	; 0xf20a <__vector_15+0x7c>
				++RTC_minutes;
    f1fe:	80 91 82 18 	lds	r24, 0x1882
    f202:	8f 5f       	subi	r24, 0xFF	; 255
    f204:	80 93 82 18 	sts	0x1882, r24
    f208:	1e c0       	rjmp	.+60     	; 0xf246 <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    f20a:	10 92 82 18 	sts	0x1882, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    f20e:	80 91 81 18 	lds	r24, 0x1881
    f212:	87 31       	cpi	r24, 0x17	; 23
    f214:	30 f4       	brcc	.+12     	; 0xf222 <__vector_15+0x94>
					++RTC_hours;
    f216:	80 91 81 18 	lds	r24, 0x1881
    f21a:	8f 5f       	subi	r24, 0xFF	; 255
    f21c:	80 93 81 18 	sts	0x1881, r24
    f220:	12 c0       	rjmp	.+36     	; 0xf246 <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    f222:	10 92 81 18 	sts	0x1881, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    f226:	80 91 80 18 	lds	r24, 0x1880
    f22a:	8f 5f       	subi	r24, 0xFF	; 255
    f22c:	80 93 80 18 	sts	0x1880, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    f230:	80 91 87 18 	lds	r24, 0x1887
    f234:	90 91 88 18 	lds	r25, 0x1888
    f238:	89 2b       	or	r24, r25
    f23a:	29 f0       	breq	.+10     	; 0xf246 <__vector_15+0xb8>
						RTC_DayHandler();
    f23c:	e0 91 87 18 	lds	r30, 0x1887
    f240:	f0 91 88 18 	lds	r31, 0x1888
    f244:	09 95       	icall
    f246:	ff 91       	pop	r31
    f248:	ef 91       	pop	r30
    f24a:	bf 91       	pop	r27
    f24c:	af 91       	pop	r26
    f24e:	9f 91       	pop	r25
    f250:	8f 91       	pop	r24
    f252:	7f 91       	pop	r23
    f254:	6f 91       	pop	r22
    f256:	5f 91       	pop	r21
    f258:	4f 91       	pop	r20
    f25a:	3f 91       	pop	r19
    f25c:	2f 91       	pop	r18
    f25e:	0f 90       	pop	r0
    f260:	0f be       	out	0x3f, r0	; 63
    f262:	0f 90       	pop	r0
    f264:	1f 90       	pop	r1
    f266:	18 95       	reti

0000f268 <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    f268:	10 92 86 18 	sts	0x1886, r1
    f26c:	10 92 85 18 	sts	0x1885, r1
	RTC_DayHandler = NULL;
    f270:	10 92 88 18 	sts	0x1888, r1
    f274:	10 92 87 18 	sts	0x1887, r1
	RTC_ticks = 0;
    f278:	10 92 84 18 	sts	0x1884, r1
	RTC_seconds = 0;
    f27c:	10 92 83 18 	sts	0x1883, r1
	RTC_minutes = 0;
    f280:	10 92 82 18 	sts	0x1882, r1
	RTC_hours = 0;
    f284:	10 92 81 18 	sts	0x1881, r1
	RTC_days = 0;
    f288:	10 92 80 18 	sts	0x1880, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    f28c:	80 91 64 00 	lds	r24, 0x0064
    f290:	8f 7b       	andi	r24, 0xBF	; 191
    f292:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    f296:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    f29a:	80 e2       	ldi	r24, 0x20	; 32
    f29c:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    f2a0:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    f2a4:	81 e0       	ldi	r24, 0x01	; 1
    f2a6:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    f2aa:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    f2ae:	80 91 b6 00 	lds	r24, 0x00B6
    f2b2:	99 27       	eor	r25, r25
    f2b4:	8f 71       	andi	r24, 0x1F	; 31
    f2b6:	90 70       	andi	r25, 0x00	; 0
    f2b8:	89 2b       	or	r24, r25
    f2ba:	c9 f7       	brne	.-14     	; 0xf2ae <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    f2bc:	81 e0       	ldi	r24, 0x01	; 1
    f2be:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    f2c0:	80 93 70 00 	sts	0x0070, r24
    f2c4:	08 95       	ret

0000f2c6 <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    f2c6:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    f2c8:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    f2ca:	90 93 86 18 	sts	0x1886, r25
    f2ce:	80 93 85 18 	sts	0x1885, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    f2d2:	2f bf       	out	0x3f, r18	; 63
    f2d4:	08 95       	ret

0000f2d6 <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    f2d6:	10 92 8a 18 	sts	0x188A, r1
    f2da:	10 92 89 18 	sts	0x1889, r1
	TIMING_currentTime = 0;
    f2de:	10 92 8d 18 	sts	0x188D, r1
    f2e2:	10 92 8e 18 	sts	0x188E, r1
    f2e6:	10 92 8f 18 	sts	0x188F, r1
    f2ea:	10 92 90 18 	sts	0x1890, r1
    f2ee:	08 95       	ret

0000f2f0 <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    f2f0:	6f 92       	push	r6
    f2f2:	7f 92       	push	r7
    f2f4:	9f 92       	push	r9
    f2f6:	af 92       	push	r10
    f2f8:	bf 92       	push	r11
    f2fa:	cf 92       	push	r12
    f2fc:	df 92       	push	r13
    f2fe:	ef 92       	push	r14
    f300:	ff 92       	push	r15
    f302:	0f 93       	push	r16
    f304:	1f 93       	push	r17
    f306:	cf 93       	push	r28
    f308:	df 93       	push	r29
    f30a:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f30c:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    f30e:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f310:	60 91 89 18 	lds	r22, 0x1889
    f314:	70 91 8a 18 	lds	r23, 0x188A
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f318:	e0 91 8b 18 	lds	r30, 0x188B
    f31c:	f0 91 8c 18 	lds	r31, 0x188C
    f320:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    f322:	cc 24       	eor	r12, r12
    f324:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    f326:	dc 01       	movw	r26, r24
    f328:	ed 90       	ld	r14, X+
    f32a:	fd 90       	ld	r15, X+
    f32c:	0d 91       	ld	r16, X+
    f32e:	1c 91       	ld	r17, X
    f330:	80 91 8d 18 	lds	r24, 0x188D
    f334:	90 91 8e 18 	lds	r25, 0x188E
    f338:	a0 91 8f 18 	lds	r26, 0x188F
    f33c:	b0 91 90 18 	lds	r27, 0x1890
    f340:	8e 15       	cp	r24, r14
    f342:	9f 05       	cpc	r25, r15
    f344:	a0 07       	cpc	r26, r16
    f346:	b1 07       	cpc	r27, r17
    f348:	58 f1       	brcs	.+86     	; 0xf3a0 <TIMING_AddEvent+0xb0>
    f34a:	09 c0       	rjmp	.+18     	; 0xf35e <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    f34c:	61 15       	cp	r22, r1
    f34e:	71 05       	cpc	r23, r1
    f350:	39 f1       	breq	.+78     	; 0xf3a0 <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    f352:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    f354:	05 84       	ldd	r0, Z+13	; 0x0d
    f356:	f6 85       	ldd	r31, Z+14	; 0x0e
    f358:	e0 2d       	mov	r30, r0
			--eventsLeft;
    f35a:	61 50       	subi	r22, 0x01	; 1
    f35c:	70 40       	sbci	r23, 0x00	; 0
    f35e:	20 81       	ld	r18, Z
    f360:	31 81       	ldd	r19, Z+1	; 0x01
    f362:	42 81       	ldd	r20, Z+2	; 0x02
    f364:	53 81       	ldd	r21, Z+3	; 0x03
    f366:	80 91 8d 18 	lds	r24, 0x188D
    f36a:	90 91 8e 18 	lds	r25, 0x188E
    f36e:	a0 91 8f 18 	lds	r26, 0x188F
    f372:	b0 91 90 18 	lds	r27, 0x1890
    f376:	28 17       	cp	r18, r24
    f378:	39 07       	cpc	r19, r25
    f37a:	4a 07       	cpc	r20, r26
    f37c:	5b 07       	cpc	r21, r27
    f37e:	30 f7       	brcc	.-52     	; 0xf34c <TIMING_AddEvent+0x5c>
    f380:	0f c0       	rjmp	.+30     	; 0xf3a0 <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    f382:	80 81       	ld	r24, Z
    f384:	91 81       	ldd	r25, Z+1	; 0x01
    f386:	a2 81       	ldd	r26, Z+2	; 0x02
    f388:	b3 81       	ldd	r27, Z+3	; 0x03
    f38a:	8e 15       	cp	r24, r14
    f38c:	9f 05       	cpc	r25, r15
    f38e:	a0 07       	cpc	r26, r16
    f390:	b1 07       	cpc	r27, r17
    f392:	48 f4       	brcc	.+18     	; 0xf3a6 <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    f394:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    f396:	05 84       	ldd	r0, Z+13	; 0x0d
    f398:	f6 85       	ldd	r31, Z+14	; 0x0e
    f39a:	e0 2d       	mov	r30, r0
		--eventsLeft;
    f39c:	61 50       	subi	r22, 0x01	; 1
    f39e:	70 40       	sbci	r23, 0x00	; 0
    f3a0:	61 15       	cp	r22, r1
    f3a2:	71 05       	cpc	r23, r1
    f3a4:	71 f7       	brne	.-36     	; 0xf382 <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    f3a6:	80 91 89 18 	lds	r24, 0x1889
    f3aa:	90 91 8a 18 	lds	r25, 0x188A
    f3ae:	68 17       	cp	r22, r24
    f3b0:	79 07       	cpc	r23, r25
    f3b2:	a1 f4       	brne	.+40     	; 0xf3dc <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    f3b4:	e3 01       	movw	r28, r6
    f3b6:	be 86       	std	Y+14, r11	; 0x0e
    f3b8:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    f3ba:	70 92 8c 18 	sts	0x188C, r7
    f3be:	60 92 8b 18 	sts	0x188B, r6
		TIMING_nextEventTime = event->triggerTime;
    f3c2:	88 81       	ld	r24, Y
    f3c4:	99 81       	ldd	r25, Y+1	; 0x01
    f3c6:	aa 81       	ldd	r26, Y+2	; 0x02
    f3c8:	bb 81       	ldd	r27, Y+3	; 0x03
    f3ca:	80 93 91 18 	sts	0x1891, r24
    f3ce:	90 93 92 18 	sts	0x1892, r25
    f3d2:	a0 93 93 18 	sts	0x1893, r26
    f3d6:	b0 93 94 18 	sts	0x1894, r27
    f3da:	06 c0       	rjmp	.+12     	; 0xf3e8 <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    f3dc:	e3 01       	movw	r28, r6
    f3de:	fe 87       	std	Y+14, r31	; 0x0e
    f3e0:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    f3e2:	f6 01       	movw	r30, r12
    f3e4:	76 86       	std	Z+14, r7	; 0x0e
    f3e6:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    f3e8:	80 91 89 18 	lds	r24, 0x1889
    f3ec:	90 91 8a 18 	lds	r25, 0x188A
    f3f0:	01 96       	adiw	r24, 0x01	; 1
    f3f2:	90 93 8a 18 	sts	0x188A, r25
    f3f6:	80 93 89 18 	sts	0x1889, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f3fa:	9f be       	out	0x3f, r9	; 63
    f3fc:	df 91       	pop	r29
    f3fe:	cf 91       	pop	r28
    f400:	1f 91       	pop	r17
    f402:	0f 91       	pop	r16
    f404:	ff 90       	pop	r15
    f406:	ef 90       	pop	r14
    f408:	df 90       	pop	r13
    f40a:	cf 90       	pop	r12
    f40c:	bf 90       	pop	r11
    f40e:	af 90       	pop	r10
    f410:	9f 90       	pop	r9
    f412:	7f 90       	pop	r7
    f414:	6f 90       	pop	r6
    f416:	08 95       	ret

0000f418 <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    f418:	0f 93       	push	r16
    f41a:	1f 93       	push	r17
    f41c:	cf 93       	push	r28
    f41e:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f420:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    f422:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    f424:	80 91 8d 18 	lds	r24, 0x188D
    f428:	90 91 8e 18 	lds	r25, 0x188E
    f42c:	a0 91 8f 18 	lds	r26, 0x188F
    f430:	b0 91 90 18 	lds	r27, 0x1890
    f434:	01 96       	adiw	r24, 0x01	; 1
    f436:	a1 1d       	adc	r26, r1
    f438:	b1 1d       	adc	r27, r1
    f43a:	80 93 8d 18 	sts	0x188D, r24
    f43e:	90 93 8e 18 	sts	0x188E, r25
    f442:	a0 93 8f 18 	sts	0x188F, r26
    f446:	b0 93 90 18 	sts	0x1890, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    f44a:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    f44c:	80 91 89 18 	lds	r24, 0x1889
    f450:	90 91 8a 18 	lds	r25, 0x188A
    f454:	89 2b       	or	r24, r25
    f456:	09 f4       	brne	.+2      	; 0xf45a <TIMING_TickHandler+0x42>
    f458:	70 c0       	rjmp	.+224    	; 0xf53a <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    f45a:	20 91 91 18 	lds	r18, 0x1891
    f45e:	30 91 92 18 	lds	r19, 0x1892
    f462:	40 91 93 18 	lds	r20, 0x1893
    f466:	50 91 94 18 	lds	r21, 0x1894
		if (TIMING_currentTime != next_event) {
    f46a:	80 91 8d 18 	lds	r24, 0x188D
    f46e:	90 91 8e 18 	lds	r25, 0x188E
    f472:	a0 91 8f 18 	lds	r26, 0x188F
    f476:	b0 91 90 18 	lds	r27, 0x1890
    f47a:	82 17       	cp	r24, r18
    f47c:	93 07       	cpc	r25, r19
    f47e:	a4 07       	cpc	r26, r20
    f480:	b5 07       	cpc	r27, r21
    f482:	11 f0       	breq	.+4      	; 0xf488 <TIMING_TickHandler+0x70>
			goon = 0;
    f484:	00 e0       	ldi	r16, 0x00	; 0
    f486:	50 c0       	rjmp	.+160    	; 0xf528 <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    f488:	c0 91 8b 18 	lds	r28, 0x188B
    f48c:	d0 91 8c 18 	lds	r29, 0x188C
			TIMING_firstEvent = event->next;
    f490:	ed 85       	ldd	r30, Y+13	; 0x0d
    f492:	fe 85       	ldd	r31, Y+14	; 0x0e
    f494:	f0 93 8c 18 	sts	0x188C, r31
    f498:	e0 93 8b 18 	sts	0x188B, r30
			--TIMING_queueSize;
    f49c:	80 91 89 18 	lds	r24, 0x1889
    f4a0:	90 91 8a 18 	lds	r25, 0x188A
    f4a4:	01 97       	sbiw	r24, 0x01	; 1
    f4a6:	90 93 8a 18 	sts	0x188A, r25
    f4aa:	80 93 89 18 	sts	0x1889, r24
			if (TIMING_queueSize > 0) {
    f4ae:	80 91 89 18 	lds	r24, 0x1889
    f4b2:	90 91 8a 18 	lds	r25, 0x188A
    f4b6:	89 2b       	or	r24, r25
    f4b8:	61 f0       	breq	.+24     	; 0xf4d2 <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    f4ba:	80 81       	ld	r24, Z
    f4bc:	91 81       	ldd	r25, Z+1	; 0x01
    f4be:	a2 81       	ldd	r26, Z+2	; 0x02
    f4c0:	b3 81       	ldd	r27, Z+3	; 0x03
    f4c2:	80 93 91 18 	sts	0x1891, r24
    f4c6:	90 93 92 18 	sts	0x1892, r25
    f4ca:	a0 93 93 18 	sts	0x1893, r26
    f4ce:	b0 93 94 18 	sts	0x1894, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    f4d2:	89 85       	ldd	r24, Y+9	; 0x09
    f4d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    f4d6:	00 97       	sbiw	r24, 0x00	; 0
    f4d8:	19 f0       	breq	.+6      	; 0xf4e0 <TIMING_TickHandler+0xc8>
    f4da:	01 97       	sbiw	r24, 0x01	; 1
    f4dc:	39 f0       	breq	.+14     	; 0xf4ec <TIMING_TickHandler+0xd4>
    f4de:	09 c0       	rjmp	.+18     	; 0xf4f2 <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    f4e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    f4e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    f4e4:	80 81       	ld	r24, Z
    f4e6:	8f 5f       	subi	r24, 0xFF	; 255
    f4e8:	80 83       	st	Z, r24
		break;
    f4ea:	03 c0       	rjmp	.+6      	; 0xf4f2 <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    f4ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    f4ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    f4f0:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    f4f2:	88 85       	ldd	r24, Y+8	; 0x08
    f4f4:	8f 3f       	cpi	r24, 0xFF	; 255
    f4f6:	11 f0       	breq	.+4      	; 0xf4fc <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    f4f8:	81 50       	subi	r24, 0x01	; 1
    f4fa:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    f4fc:	88 85       	ldd	r24, Y+8	; 0x08
    f4fe:	88 23       	and	r24, r24
    f500:	99 f0       	breq	.+38     	; 0xf528 <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    f502:	88 81       	ld	r24, Y
    f504:	99 81       	ldd	r25, Y+1	; 0x01
    f506:	aa 81       	ldd	r26, Y+2	; 0x02
    f508:	bb 81       	ldd	r27, Y+3	; 0x03
    f50a:	2c 81       	ldd	r18, Y+4	; 0x04
    f50c:	3d 81       	ldd	r19, Y+5	; 0x05
    f50e:	4e 81       	ldd	r20, Y+6	; 0x06
    f510:	5f 81       	ldd	r21, Y+7	; 0x07
    f512:	82 0f       	add	r24, r18
    f514:	93 1f       	adc	r25, r19
    f516:	a4 1f       	adc	r26, r20
    f518:	b5 1f       	adc	r27, r21
    f51a:	88 83       	st	Y, r24
    f51c:	99 83       	std	Y+1, r25	; 0x01
    f51e:	aa 83       	std	Y+2, r26	; 0x02
    f520:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    f522:	ce 01       	movw	r24, r28
    f524:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <TIMING_AddEvent>
    f528:	80 91 89 18 	lds	r24, 0x1889
    f52c:	90 91 8a 18 	lds	r25, 0x188A
    f530:	89 2b       	or	r24, r25
    f532:	19 f0       	breq	.+6      	; 0xf53a <TIMING_TickHandler+0x122>
    f534:	00 23       	and	r16, r16
    f536:	09 f0       	breq	.+2      	; 0xf53a <TIMING_TickHandler+0x122>
    f538:	90 cf       	rjmp	.-224    	; 0xf45a <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f53a:	1f bf       	out	0x3f, r17	; 63
    f53c:	df 91       	pop	r29
    f53e:	cf 91       	pop	r28
    f540:	1f 91       	pop	r17
    f542:	0f 91       	pop	r16
    f544:	08 95       	ret

0000f546 <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    f546:	cf 93       	push	r28
    f548:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    f54a:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    f54c:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    f54e:	40 91 89 18 	lds	r20, 0x1889
    f552:	50 91 8a 18 	lds	r21, 0x188A
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    f556:	e0 91 8b 18 	lds	r30, 0x188B
    f55a:	f0 91 8c 18 	lds	r31, 0x188C
	TIMING_event_t * lastEvent = 0;
    f55e:	a0 e0       	ldi	r26, 0x00	; 0
    f560:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    f562:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    f564:	41 15       	cp	r20, r1
    f566:	51 05       	cpc	r21, r1
    f568:	81 f0       	breq	.+32     	; 0xf58a <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    f56a:	e8 17       	cp	r30, r24
    f56c:	f9 07       	cpc	r31, r25
    f56e:	11 f4       	brne	.+4      	; 0xf574 <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    f570:	21 e0       	ldi	r18, 0x01	; 1
    f572:	06 c0       	rjmp	.+12     	; 0xf580 <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    f574:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    f576:	05 84       	ldd	r0, Z+13	; 0x0d
    f578:	f6 85       	ldd	r31, Z+14	; 0x0e
    f57a:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    f57c:	41 50       	subi	r20, 0x01	; 1
    f57e:	50 40       	sbci	r21, 0x00	; 0
    f580:	41 15       	cp	r20, r1
    f582:	51 05       	cpc	r21, r1
    f584:	11 f0       	breq	.+4      	; 0xf58a <TIMING_RemoveEvent+0x44>
    f586:	22 23       	and	r18, r18
    f588:	81 f3       	breq	.-32     	; 0xf56a <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    f58a:	22 23       	and	r18, r18
    f58c:	d1 f0       	breq	.+52     	; 0xf5c2 <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    f58e:	80 91 89 18 	lds	r24, 0x1889
    f592:	90 91 8a 18 	lds	r25, 0x188A
    f596:	25 85       	ldd	r18, Z+13	; 0x0d
    f598:	36 85       	ldd	r19, Z+14	; 0x0e
    f59a:	48 17       	cp	r20, r24
    f59c:	59 07       	cpc	r21, r25
    f59e:	29 f4       	brne	.+10     	; 0xf5aa <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    f5a0:	30 93 8c 18 	sts	0x188C, r19
    f5a4:	20 93 8b 18 	sts	0x188B, r18
    f5a8:	03 c0       	rjmp	.+6      	; 0xf5b0 <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    f5aa:	ed 01       	movw	r28, r26
    f5ac:	3e 87       	std	Y+14, r19	; 0x0e
    f5ae:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    f5b0:	80 91 89 18 	lds	r24, 0x1889
    f5b4:	90 91 8a 18 	lds	r25, 0x188A
    f5b8:	01 97       	sbiw	r24, 0x01	; 1
    f5ba:	90 93 8a 18 	sts	0x188A, r25
    f5be:	80 93 89 18 	sts	0x1889, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f5c2:	6f bf       	out	0x3f, r22	; 63
    f5c4:	df 91       	pop	r29
    f5c6:	cf 91       	pop	r28
    f5c8:	08 95       	ret

0000f5ca <TIMING_AddRepCounterEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  counterPtr      Pointer to counter variable to increment when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCounterEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f5ca:	cf 92       	push	r12
    f5cc:	df 92       	push	r13
    f5ce:	ef 92       	push	r14
    f5d0:	ff 92       	push	r15
    f5d2:	0f 93       	push	r16
    f5d4:	1f 93       	push	r17
    f5d6:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f5d8:	44 23       	and	r20, r20
    f5da:	81 f0       	breq	.+32     	; 0xf5fc <TIMING_AddRepCounterEventAt+0x32>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f5dc:	60 83       	st	Z, r22
    f5de:	71 83       	std	Z+1, r23	; 0x01
    f5e0:	82 83       	std	Z+2, r24	; 0x02
    f5e2:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f5e4:	04 83       	std	Z+4, r16	; 0x04
    f5e6:	15 83       	std	Z+5, r17	; 0x05
    f5e8:	26 83       	std	Z+6, r18	; 0x06
    f5ea:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f5ec:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_COUNTER_EVENT;
    f5ee:	12 86       	std	Z+10, r1	; 0x0a
    f5f0:	11 86       	std	Z+9, r1	; 0x09
		event->counterPtr = counterPtr;
    f5f2:	f4 86       	std	Z+12, r15	; 0x0c
    f5f4:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f5f6:	c6 01       	movw	r24, r12
    f5f8:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <TIMING_AddEvent>
    f5fc:	1f 91       	pop	r17
    f5fe:	0f 91       	pop	r16
    f600:	ff 90       	pop	r15
    f602:	ef 90       	pop	r14
    f604:	df 90       	pop	r13
    f606:	cf 90       	pop	r12
    f608:	08 95       	ret

0000f60a <TIMING_AddCounterEventAt>:
 *  \param  timestamp   Timestamp to trigger event.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAt( TIMING_time_t timestamp, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f60a:	8f 92       	push	r8
    f60c:	9f 92       	push	r9
    f60e:	af 92       	push	r10
    f610:	bf 92       	push	r11
    f612:	cf 92       	push	r12
    f614:	df 92       	push	r13
    f616:	ef 92       	push	r14
    f618:	ff 92       	push	r15
    f61a:	0f 93       	push	r16
    f61c:	1f 93       	push	r17
    f61e:	4b 01       	movw	r8, r22
    f620:	5c 01       	movw	r10, r24
	TIMING_AddRepCounterEventAt( timestamp, 1, 0, counterPtr, event );
    f622:	69 01       	movw	r12, r18
    f624:	7a 01       	movw	r14, r20
    f626:	00 e0       	ldi	r16, 0x00	; 0
    f628:	10 e0       	ldi	r17, 0x00	; 0
    f62a:	20 e0       	ldi	r18, 0x00	; 0
    f62c:	30 e0       	ldi	r19, 0x00	; 0
    f62e:	41 e0       	ldi	r20, 0x01	; 1
    f630:	c5 01       	movw	r24, r10
    f632:	b4 01       	movw	r22, r8
    f634:	0e 94 e5 7a 	call	0xf5ca	; 0xf5ca <TIMING_AddRepCounterEventAt>
    f638:	1f 91       	pop	r17
    f63a:	0f 91       	pop	r16
    f63c:	ff 90       	pop	r15
    f63e:	ef 90       	pop	r14
    f640:	df 90       	pop	r13
    f642:	cf 90       	pop	r12
    f644:	bf 90       	pop	r11
    f646:	af 90       	pop	r10
    f648:	9f 90       	pop	r9
    f64a:	8f 90       	pop	r8
    f64c:	08 95       	ret

0000f64e <TIMING_AddCounterEventAfter>:
 *  \param  delay       Delay in ticks until event triggers.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAfter( TIMING_time_t delay, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f64e:	ef 92       	push	r14
    f650:	ff 92       	push	r15
    f652:	0f 93       	push	r16
    f654:	1f 93       	push	r17
    f656:	7b 01       	movw	r14, r22
    f658:	8c 01       	movw	r16, r24
	TIMING_AddCounterEventAt( TIMING_currentTime + delay, counterPtr, event );
    f65a:	80 91 8d 18 	lds	r24, 0x188D
    f65e:	90 91 8e 18 	lds	r25, 0x188E
    f662:	a0 91 8f 18 	lds	r26, 0x188F
    f666:	b0 91 90 18 	lds	r27, 0x1890
    f66a:	8e 0d       	add	r24, r14
    f66c:	9f 1d       	adc	r25, r15
    f66e:	a0 1f       	adc	r26, r16
    f670:	b1 1f       	adc	r27, r17
    f672:	bc 01       	movw	r22, r24
    f674:	cd 01       	movw	r24, r26
    f676:	0e 94 05 7b 	call	0xf60a	; 0xf60a <TIMING_AddCounterEventAt>
    f67a:	1f 91       	pop	r17
    f67c:	0f 91       	pop	r16
    f67e:	ff 90       	pop	r15
    f680:	ef 90       	pop	r14
    f682:	08 95       	ret

0000f684 <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f684:	cf 92       	push	r12
    f686:	df 92       	push	r13
    f688:	ef 92       	push	r14
    f68a:	ff 92       	push	r15
    f68c:	0f 93       	push	r16
    f68e:	1f 93       	push	r17
    f690:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f692:	44 23       	and	r20, r20
    f694:	91 f0       	breq	.+36     	; 0xf6ba <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f696:	60 83       	st	Z, r22
    f698:	71 83       	std	Z+1, r23	; 0x01
    f69a:	82 83       	std	Z+2, r24	; 0x02
    f69c:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f69e:	04 83       	std	Z+4, r16	; 0x04
    f6a0:	15 83       	std	Z+5, r17	; 0x05
    f6a2:	26 83       	std	Z+6, r18	; 0x06
    f6a4:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f6a6:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    f6a8:	81 e0       	ldi	r24, 0x01	; 1
    f6aa:	90 e0       	ldi	r25, 0x00	; 0
    f6ac:	92 87       	std	Z+10, r25	; 0x0a
    f6ae:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    f6b0:	f4 86       	std	Z+12, r15	; 0x0c
    f6b2:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f6b4:	c6 01       	movw	r24, r12
    f6b6:	0e 94 78 79 	call	0xf2f0	; 0xf2f0 <TIMING_AddEvent>
    f6ba:	1f 91       	pop	r17
    f6bc:	0f 91       	pop	r16
    f6be:	ff 90       	pop	r15
    f6c0:	ef 90       	pop	r14
    f6c2:	df 90       	pop	r13
    f6c4:	cf 90       	pop	r12
    f6c6:	08 95       	ret

0000f6c8 <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f6c8:	8f 92       	push	r8
    f6ca:	9f 92       	push	r9
    f6cc:	af 92       	push	r10
    f6ce:	bf 92       	push	r11
    f6d0:	cf 92       	push	r12
    f6d2:	df 92       	push	r13
    f6d4:	ef 92       	push	r14
    f6d6:	ff 92       	push	r15
    f6d8:	0f 93       	push	r16
    f6da:	1f 93       	push	r17
    f6dc:	4b 01       	movw	r8, r22
    f6de:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    f6e0:	69 01       	movw	r12, r18
    f6e2:	7a 01       	movw	r14, r20
    f6e4:	00 e0       	ldi	r16, 0x00	; 0
    f6e6:	10 e0       	ldi	r17, 0x00	; 0
    f6e8:	20 e0       	ldi	r18, 0x00	; 0
    f6ea:	30 e0       	ldi	r19, 0x00	; 0
    f6ec:	41 e0       	ldi	r20, 0x01	; 1
    f6ee:	c5 01       	movw	r24, r10
    f6f0:	b4 01       	movw	r22, r8
    f6f2:	0e 94 42 7b 	call	0xf684	; 0xf684 <TIMING_AddRepCallbackEventAt>
    f6f6:	1f 91       	pop	r17
    f6f8:	0f 91       	pop	r16
    f6fa:	ff 90       	pop	r15
    f6fc:	ef 90       	pop	r14
    f6fe:	df 90       	pop	r13
    f700:	cf 90       	pop	r12
    f702:	bf 90       	pop	r11
    f704:	af 90       	pop	r10
    f706:	9f 90       	pop	r9
    f708:	8f 90       	pop	r8
    f70a:	08 95       	ret

0000f70c <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f70c:	ef 92       	push	r14
    f70e:	ff 92       	push	r15
    f710:	0f 93       	push	r16
    f712:	1f 93       	push	r17
    f714:	7b 01       	movw	r14, r22
    f716:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    f718:	80 91 8d 18 	lds	r24, 0x188D
    f71c:	90 91 8e 18 	lds	r25, 0x188E
    f720:	a0 91 8f 18 	lds	r26, 0x188F
    f724:	b0 91 90 18 	lds	r27, 0x1890
    f728:	8e 0d       	add	r24, r14
    f72a:	9f 1d       	adc	r25, r15
    f72c:	a0 1f       	adc	r26, r16
    f72e:	b1 1f       	adc	r27, r17
    f730:	bc 01       	movw	r22, r24
    f732:	cd 01       	movw	r24, r26
    f734:	0e 94 64 7b 	call	0xf6c8	; 0xf6c8 <TIMING_AddCallbackEventAt>
    f738:	1f 91       	pop	r17
    f73a:	0f 91       	pop	r16
    f73c:	ff 90       	pop	r15
    f73e:	ef 90       	pop	r14
    f740:	08 95       	ret

0000f742 <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f742:	7f 92       	push	r7
    f744:	8f 92       	push	r8
    f746:	9f 92       	push	r9
    f748:	af 92       	push	r10
    f74a:	bf 92       	push	r11
    f74c:	cf 92       	push	r12
    f74e:	df 92       	push	r13
    f750:	ef 92       	push	r14
    f752:	ff 92       	push	r15
    f754:	0f 93       	push	r16
    f756:	1f 93       	push	r17
    f758:	4b 01       	movw	r8, r22
    f75a:	5c 01       	movw	r10, r24
    f75c:	74 2e       	mov	r7, r20
    f75e:	b9 01       	movw	r22, r18
    f760:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    f762:	80 91 8d 18 	lds	r24, 0x188D
    f766:	90 91 8e 18 	lds	r25, 0x188E
    f76a:	a0 91 8f 18 	lds	r26, 0x188F
    f76e:	b0 91 90 18 	lds	r27, 0x1890
    f772:	88 0d       	add	r24, r8
    f774:	99 1d       	adc	r25, r9
    f776:	aa 1d       	adc	r26, r10
    f778:	bb 1d       	adc	r27, r11
    f77a:	8a 01       	movw	r16, r20
    f77c:	9b 01       	movw	r18, r22
    f77e:	47 2d       	mov	r20, r7
    f780:	bc 01       	movw	r22, r24
    f782:	cd 01       	movw	r24, r26
    f784:	0e 94 42 7b 	call	0xf684	; 0xf684 <TIMING_AddRepCallbackEventAt>
    f788:	1f 91       	pop	r17
    f78a:	0f 91       	pop	r16
    f78c:	ff 90       	pop	r15
    f78e:	ef 90       	pop	r14
    f790:	df 90       	pop	r13
    f792:	cf 90       	pop	r12
    f794:	bf 90       	pop	r11
    f796:	af 90       	pop	r10
    f798:	9f 90       	pop	r9
    f79a:	8f 90       	pop	r8
    f79c:	7f 90       	pop	r7
    f79e:	08 95       	ret

0000f7a0 <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f7a0:	8f 92       	push	r8
    f7a2:	9f 92       	push	r9
    f7a4:	af 92       	push	r10
    f7a6:	bf 92       	push	r11
    f7a8:	cf 92       	push	r12
    f7aa:	df 92       	push	r13
    f7ac:	ef 92       	push	r14
    f7ae:	ff 92       	push	r15
    f7b0:	0f 93       	push	r16
    f7b2:	1f 93       	push	r17
    f7b4:	e8 2f       	mov	r30, r24
    f7b6:	4a 01       	movw	r8, r20
    f7b8:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    f7ba:	68 01       	movw	r12, r16
    f7bc:	79 01       	movw	r14, r18
    f7be:	8a 01       	movw	r16, r20
    f7c0:	9b 01       	movw	r18, r22
    f7c2:	4e 2f       	mov	r20, r30
    f7c4:	c5 01       	movw	r24, r10
    f7c6:	b4 01       	movw	r22, r8
    f7c8:	0e 94 a1 7b 	call	0xf742	; 0xf742 <TIMING_AddRepCallbackEventAfter>
    f7cc:	1f 91       	pop	r17
    f7ce:	0f 91       	pop	r16
    f7d0:	ff 90       	pop	r15
    f7d2:	ef 90       	pop	r14
    f7d4:	df 90       	pop	r13
    f7d6:	cf 90       	pop	r12
    f7d8:	bf 90       	pop	r11
    f7da:	af 90       	pop	r10
    f7dc:	9f 90       	pop	r9
    f7de:	8f 90       	pop	r8
    f7e0:	08 95       	ret

0000f7e2 <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    f7e2:	ef 92       	push	r14
    f7e4:	ff 92       	push	r15
    f7e6:	0f 93       	push	r16
    f7e8:	1f 93       	push	r17
    f7ea:	cf 93       	push	r28
    f7ec:	e6 2e       	mov	r14, r22
    f7ee:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    f7f0:	80 52       	subi	r24, 0x20	; 32
    f7f2:	8f 35       	cpi	r24, 0x5F	; 95
    f7f4:	90 f4       	brcc	.+36     	; 0xf81a <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    f7f6:	95 e0       	ldi	r25, 0x05	; 5
    f7f8:	f9 2e       	mov	r15, r25
    f7fa:	8f 9d       	mul	r24, r15
    f7fc:	80 01       	movw	r16, r0
    f7fe:	11 24       	eor	r1, r1
    f800:	0a 5a       	subi	r16, 0xAA	; 170
    f802:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    f804:	21 e0       	ldi	r18, 0x01	; 1
    f806:	8f ef       	ldi	r24, 0xFF	; 255
    f808:	0e 94 70 70 	call	0xe0e0	; 0xe0e0 <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    f80c:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    f80e:	2f 2d       	mov	r18, r15
    f810:	4c 2f       	mov	r20, r28
    f812:	6e 2d       	mov	r22, r14
    f814:	c8 01       	movw	r24, r16
    f816:	0e 94 af 70 	call	0xe15e	; 0xe15e <LCD_WritePage_F>
    f81a:	cf 91       	pop	r28
    f81c:	1f 91       	pop	r17
    f81e:	0f 91       	pop	r16
    f820:	ff 90       	pop	r15
    f822:	ef 90       	pop	r14
    f824:	08 95       	ret

0000f826 <TERMFONT_DisplayString>:
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
    f826:	0f 93       	push	r16
    f828:	1f 93       	push	r17
    f82a:	cf 93       	push	r28
    f82c:	df 93       	push	r29
    f82e:	ec 01       	movw	r28, r24
    f830:	06 2f       	mov	r16, r22
    f832:	14 2f       	mov	r17, r20
  
    if (pTextString == NULL) { return; }
    f834:	89 2b       	or	r24, r25
    f836:	61 f0       	breq	.+24     	; 0xf850 <TERMFONT_DisplayString+0x2a>
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
	column += TERMFONT_CHAR_WIDTH;
    f838:	88 81       	ld	r24, Y
    f83a:	88 23       	and	r24, r24
    f83c:	49 f0       	breq	.+18     	; 0xf850 <TERMFONT_DisplayString+0x2a>
  
    if (pTextString == NULL) { return; }
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
    f83e:	41 2f       	mov	r20, r17
    f840:	60 2f       	mov	r22, r16
    f842:	89 91       	ld	r24, Y+
    f844:	0e 94 f1 7b 	call	0xf7e2	; 0xf7e2 <TERMFONT_DisplayChar>
	column += TERMFONT_CHAR_WIDTH;
    f848:	1a 5f       	subi	r17, 0xFA	; 250
    f84a:	88 81       	ld	r24, Y
    f84c:	88 23       	and	r24, r24
    f84e:	b9 f7       	brne	.-18     	; 0xf83e <TERMFONT_DisplayString+0x18>
    f850:	df 91       	pop	r29
    f852:	cf 91       	pop	r28
    f854:	1f 91       	pop	r17
    f856:	0f 91       	pop	r16
    f858:	08 95       	ret

0000f85a <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    f85a:	20 91 64 00 	lds	r18, 0x0064
    f85e:	27 7f       	andi	r18, 0xF7	; 247
    f860:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    f864:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    f866:	28 e0       	ldi	r18, 0x08	; 8
    f868:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    f86c:	20 e1       	ldi	r18, 0x10	; 16
    f86e:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    f872:	20 91 81 00 	lds	r18, 0x0081
    f876:	21 60       	ori	r18, 0x01	; 1
    f878:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f87c:	90 93 a5 18 	sts	0x18A5, r25
    f880:	80 93 a4 18 	sts	0x18A4, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f884:	25 e9       	ldi	r18, 0x95	; 149
    f886:	38 e1       	ldi	r19, 0x18	; 24
    f888:	4d e4       	ldi	r20, 0x4D	; 77
    f88a:	5c e7       	ldi	r21, 0x7C	; 124
    f88c:	6a e0       	ldi	r22, 0x0A	; 10
    f88e:	70 e0       	ldi	r23, 0x00	; 0
    f890:	80 e0       	ldi	r24, 0x00	; 0
    f892:	90 e0       	ldi	r25, 0x00	; 0
    f894:	0e 94 86 7b 	call	0xf70c	; 0xf70c <TIMING_AddCallbackEventAfter>
    f898:	08 95       	ret

0000f89a <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f89a:	ef 92       	push	r14
    f89c:	ff 92       	push	r15
    f89e:	0f 93       	push	r16
    f8a0:	1f 93       	push	r17
    f8a2:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f8a4:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f8a6:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f8a8:	e0 91 a4 18 	lds	r30, 0x18A4
    f8ac:	f0 91 a5 18 	lds	r31, 0x18A5
    f8b0:	81 85       	ldd	r24, Z+9	; 0x09
    f8b2:	84 30       	cpi	r24, 0x04	; 4
    f8b4:	b0 f1       	brcs	.+108    	; 0xf922 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f8b6:	cf 01       	movw	r24, r30
    f8b8:	0e 94 d3 75 	call	0xeba6	; 0xeba6 <FIFO_GetUint16>
    f8bc:	7c 01       	movw	r14, r24
    f8be:	00 27       	eor	r16, r16
    f8c0:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f8c2:	80 91 a4 18 	lds	r24, 0x18A4
    f8c6:	90 91 a5 18 	lds	r25, 0x18A5
    f8ca:	0e 94 d3 75 	call	0xeba6	; 0xeba6 <FIFO_GetUint16>
    f8ce:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f8d0:	01 97       	sbiw	r24, 0x01	; 1
    f8d2:	31 f4       	brne	.+12     	; 0xf8e0 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f8d4:	10 92 6d 02 	sts	0x026D, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f8d8:	80 91 81 00 	lds	r24, 0x0081
    f8dc:	8e 7f       	andi	r24, 0xFE	; 254
    f8de:	06 c0       	rjmp	.+12     	; 0xf8ec <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f8e0:	81 e0       	ldi	r24, 0x01	; 1
    f8e2:	80 93 6d 02 	sts	0x026D, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f8e6:	80 91 81 00 	lds	r24, 0x0081
    f8ea:	81 60       	ori	r24, 0x01	; 1
    f8ec:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f8f0:	9a 01       	movw	r18, r20
    f8f2:	36 95       	lsr	r19
    f8f4:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f8f6:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f8f8:	9a 01       	movw	r18, r20
    f8fa:	23 2f       	mov	r18, r19
    f8fc:	33 27       	eor	r19, r19
    f8fe:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f900:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f904:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f908:	25 2f       	mov	r18, r21
    f90a:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f90c:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f910:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f914:	25 e9       	ldi	r18, 0x95	; 149
    f916:	38 e1       	ldi	r19, 0x18	; 24
    f918:	4d e4       	ldi	r20, 0x4D	; 77
    f91a:	5c e7       	ldi	r21, 0x7C	; 124
    f91c:	c8 01       	movw	r24, r16
    f91e:	b7 01       	movw	r22, r14
    f920:	0f c0       	rjmp	.+30     	; 0xf940 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f922:	10 92 6d 02 	sts	0x026D, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f926:	80 91 81 00 	lds	r24, 0x0081
    f92a:	8e 7f       	andi	r24, 0xFE	; 254
    f92c:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f930:	25 e9       	ldi	r18, 0x95	; 149
    f932:	38 e1       	ldi	r19, 0x18	; 24
    f934:	4d e4       	ldi	r20, 0x4D	; 77
    f936:	5c e7       	ldi	r21, 0x7C	; 124
    f938:	6a e0       	ldi	r22, 0x0A	; 10
    f93a:	70 e0       	ldi	r23, 0x00	; 0
    f93c:	80 e0       	ldi	r24, 0x00	; 0
    f93e:	90 e0       	ldi	r25, 0x00	; 0
    f940:	0e 94 86 7b 	call	0xf70c	; 0xf70c <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f944:	cf bf       	out	0x3f, r28	; 63
    f946:	cf 91       	pop	r28
    f948:	1f 91       	pop	r17
    f94a:	0f 91       	pop	r16
    f94c:	ff 90       	pop	r15
    f94e:	ef 90       	pop	r14
    f950:	08 95       	ret

0000f952 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f952:	10 92 6d 02 	sts	0x026D, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f956:	80 91 81 00 	lds	r24, 0x0081
    f95a:	8e 7f       	andi	r24, 0xFE	; 254
    f95c:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f960:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f964:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f968:	85 e9       	ldi	r24, 0x95	; 149
    f96a:	98 e1       	ldi	r25, 0x18	; 24
    f96c:	0e 94 a3 7a 	call	0xf546	; 0xf546 <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f970:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f972:	80 91 64 00 	lds	r24, 0x0064
    f976:	88 60       	ori	r24, 0x08	; 8
    f978:	80 93 64 00 	sts	0x0064, r24
    f97c:	08 95       	ret

0000f97e <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f97e:	80 91 6d 02 	lds	r24, 0x026D
}
    f982:	99 27       	eor	r25, r25
    f984:	08 95       	ret

0000f986 <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f986:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f988:	e0 91 a6 18 	lds	r30, 0x18A6
    f98c:	f0 91 a7 18 	lds	r31, 0x18A7
    f990:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f992:	24 30       	cpi	r18, 0x04	; 4
    f994:	08 f4       	brcc	.+2      	; 0xf998 <SONG_CallbackControlTask_F+0x12>
    f996:	41 c0       	rjmp	.+130    	; 0xfa1a <SONG_CallbackControlTask_F+0x94>
    f998:	e0 91 b7 18 	lds	r30, 0x18B7
    f99c:	f0 91 b8 18 	lds	r31, 0x18B8
    f9a0:	85 91       	lpm	r24, Z+
    f9a2:	94 91       	lpm	r25, Z+
    f9a4:	89 2b       	or	r24, r25
    f9a6:	09 f4       	brne	.+2      	; 0xf9aa <SONG_CallbackControlTask_F+0x24>
    f9a8:	38 c0       	rjmp	.+112    	; 0xfa1a <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f9aa:	80 91 b7 18 	lds	r24, 0x18B7
    f9ae:	90 91 b8 18 	lds	r25, 0x18B8
    f9b2:	fc 01       	movw	r30, r24
    f9b4:	65 91       	lpm	r22, Z+
    f9b6:	74 91       	lpm	r23, Z+
    f9b8:	c2 2f       	mov	r28, r18
    f9ba:	c4 50       	subi	r28, 0x04	; 4
    f9bc:	2f ef       	ldi	r18, 0xFF	; 255
    f9be:	6f 3f       	cpi	r22, 0xFF	; 255
    f9c0:	72 07       	cpc	r23, r18
    f9c2:	49 f4       	brne	.+18     	; 0xf9d6 <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f9c4:	80 91 b9 18 	lds	r24, 0x18B9
    f9c8:	90 91 ba 18 	lds	r25, 0x18BA
    f9cc:	90 93 b8 18 	sts	0x18B8, r25
    f9d0:	80 93 b7 18 	sts	0x18B7, r24
    f9d4:	1e c0       	rjmp	.+60     	; 0xfa12 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f9d6:	02 96       	adiw	r24, 0x02	; 2
    f9d8:	90 93 b8 18 	sts	0x18B8, r25
    f9dc:	80 93 b7 18 	sts	0x18B7, r24
    f9e0:	80 91 a6 18 	lds	r24, 0x18A6
    f9e4:	90 91 a7 18 	lds	r25, 0x18A7
    f9e8:	0e 94 c0 75 	call	0xeb80	; 0xeb80 <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f9ec:	80 91 b7 18 	lds	r24, 0x18B7
    f9f0:	90 91 b8 18 	lds	r25, 0x18B8
    f9f4:	fc 01       	movw	r30, r24
    f9f6:	02 96       	adiw	r24, 0x02	; 2
    f9f8:	90 93 b8 18 	sts	0x18B8, r25
    f9fc:	80 93 b7 18 	sts	0x18B7, r24
    fa00:	85 91       	lpm	r24, Z+
    fa02:	94 91       	lpm	r25, Z+
    fa04:	bc 01       	movw	r22, r24
    fa06:	80 91 a6 18 	lds	r24, 0x18A6
    fa0a:	90 91 a7 18 	lds	r25, 0x18A7
    fa0e:	0e 94 c0 75 	call	0xeb80	; 0xeb80 <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    fa12:	2c 2f       	mov	r18, r28
    fa14:	c4 30       	cpi	r28, 0x04	; 4
    fa16:	08 f0       	brcs	.+2      	; 0xfa1a <SONG_CallbackControlTask_F+0x94>
    fa18:	bf cf       	rjmp	.-130    	; 0xf998 <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    fa1a:	e0 91 b7 18 	lds	r30, 0x18B7
    fa1e:	f0 91 b8 18 	lds	r31, 0x18B8
    fa22:	85 91       	lpm	r24, Z+
    fa24:	94 91       	lpm	r25, Z+
    fa26:	89 2b       	or	r24, r25
    fa28:	69 f4       	brne	.+26     	; 0xfa44 <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    fa2a:	e0 91 a6 18 	lds	r30, 0x18A6
    fa2e:	f0 91 a7 18 	lds	r31, 0x18A7
    fa32:	81 85       	ldd	r24, Z+9	; 0x09
    fa34:	88 23       	and	r24, r24
    fa36:	31 f4       	brne	.+12     	; 0xfa44 <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    fa38:	0e 94 bf 7c 	call	0xf97e	; 0xf97e <SOUND_IsToneBusy>
    fa3c:	88 23       	and	r24, r24
    fa3e:	11 f4       	brne	.+4      	; 0xfa44 <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    fa40:	0e 94 a9 7c 	call	0xf952	; 0xf952 <SOUND_StopAudio>
    fa44:	cf 91       	pop	r28
    fa46:	08 95       	ret

0000fa48 <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    fa48:	0e 94 a9 7c 	call	0xf952	; 0xf952 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    fa4c:	88 ea       	ldi	r24, 0xA8	; 168
    fa4e:	98 e1       	ldi	r25, 0x18	; 24
    fa50:	0e 94 a3 7a 	call	0xf546	; 0xf546 <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    fa54:	80 91 a6 18 	lds	r24, 0x18A6
    fa58:	90 91 a7 18 	lds	r25, 0x18A7
    fa5c:	0e 94 9c 75 	call	0xeb38	; 0xeb38 <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    fa60:	10 92 6e 02 	sts	0x026E, r1
    fa64:	08 95       	ret

0000fa66 <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    fa66:	0f 93       	push	r16
    fa68:	1f 93       	push	r17
    fa6a:	cf 93       	push	r28
    fa6c:	df 93       	push	r29
    fa6e:	ec 01       	movw	r28, r24
    fa70:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    fa72:	80 91 6e 02 	lds	r24, 0x026E
    fa76:	81 30       	cpi	r24, 0x01	; 1
    fa78:	11 f4       	brne	.+4      	; 0xfa7e <SONG_StartTune_F+0x18>
		SONG_StopTune();
    fa7a:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    fa7e:	d0 93 a7 18 	sts	0x18A7, r29
    fa82:	c0 93 a6 18 	sts	0x18A6, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    fa86:	81 e0       	ldi	r24, 0x01	; 1
    fa88:	80 93 6e 02 	sts	0x026E, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    fa8c:	10 93 ba 18 	sts	0x18BA, r17
    fa90:	00 93 b9 18 	sts	0x18B9, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    fa94:	10 93 b8 18 	sts	0x18B8, r17
    fa98:	00 93 b7 18 	sts	0x18B7, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    fa9c:	08 ea       	ldi	r16, 0xA8	; 168
    fa9e:	18 e1       	ldi	r17, 0x18	; 24
    faa0:	23 ec       	ldi	r18, 0xC3	; 195
    faa2:	3c e7       	ldi	r19, 0x7C	; 124
    faa4:	49 e0       	ldi	r20, 0x09	; 9
    faa6:	50 e0       	ldi	r21, 0x00	; 0
    faa8:	60 e0       	ldi	r22, 0x00	; 0
    faaa:	70 e0       	ldi	r23, 0x00	; 0
    faac:	8f ef       	ldi	r24, 0xFF	; 255
    faae:	0e 94 d0 7b 	call	0xf7a0	; 0xf7a0 <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    fab2:	ce 01       	movw	r24, r28
    fab4:	0e 94 2d 7c 	call	0xf85a	; 0xf85a <SOUND_StartAudio>
    fab8:	df 91       	pop	r29
    faba:	cf 91       	pop	r28
    fabc:	1f 91       	pop	r17
    fabe:	0f 91       	pop	r16
    fac0:	08 95       	ret

0000fac2 <__udivmodqi4>:
    fac2:	99 1b       	sub	r25, r25
    fac4:	79 e0       	ldi	r23, 0x09	; 9
    fac6:	04 c0       	rjmp	.+8      	; 0xfad0 <__udivmodqi4_ep>

0000fac8 <__udivmodqi4_loop>:
    fac8:	99 1f       	adc	r25, r25
    faca:	96 17       	cp	r25, r22
    facc:	08 f0       	brcs	.+2      	; 0xfad0 <__udivmodqi4_ep>
    face:	96 1b       	sub	r25, r22

0000fad0 <__udivmodqi4_ep>:
    fad0:	88 1f       	adc	r24, r24
    fad2:	7a 95       	dec	r23
    fad4:	c9 f7       	brne	.-14     	; 0xfac8 <__udivmodqi4_loop>
    fad6:	80 95       	com	r24
    fad8:	08 95       	ret

0000fada <__udivmodhi4>:
    fada:	aa 1b       	sub	r26, r26
    fadc:	bb 1b       	sub	r27, r27
    fade:	51 e1       	ldi	r21, 0x11	; 17
    fae0:	07 c0       	rjmp	.+14     	; 0xfaf0 <__udivmodhi4_ep>

0000fae2 <__udivmodhi4_loop>:
    fae2:	aa 1f       	adc	r26, r26
    fae4:	bb 1f       	adc	r27, r27
    fae6:	a6 17       	cp	r26, r22
    fae8:	b7 07       	cpc	r27, r23
    faea:	10 f0       	brcs	.+4      	; 0xfaf0 <__udivmodhi4_ep>
    faec:	a6 1b       	sub	r26, r22
    faee:	b7 0b       	sbc	r27, r23

0000faf0 <__udivmodhi4_ep>:
    faf0:	88 1f       	adc	r24, r24
    faf2:	99 1f       	adc	r25, r25
    faf4:	5a 95       	dec	r21
    faf6:	a9 f7       	brne	.-22     	; 0xfae2 <__udivmodhi4_loop>
    faf8:	80 95       	com	r24
    fafa:	90 95       	com	r25
    fafc:	bc 01       	movw	r22, r24
    fafe:	cd 01       	movw	r24, r26
    fb00:	08 95       	ret

0000fb02 <__divmodhi4>:
    fb02:	97 fb       	bst	r25, 7
    fb04:	09 2e       	mov	r0, r25
    fb06:	07 26       	eor	r0, r23
    fb08:	0a d0       	rcall	.+20     	; 0xfb1e <__divmodhi4_neg1>
    fb0a:	77 fd       	sbrc	r23, 7
    fb0c:	04 d0       	rcall	.+8      	; 0xfb16 <__divmodhi4_neg2>
    fb0e:	e5 df       	rcall	.-54     	; 0xfada <__udivmodhi4>
    fb10:	06 d0       	rcall	.+12     	; 0xfb1e <__divmodhi4_neg1>
    fb12:	00 20       	and	r0, r0
    fb14:	1a f4       	brpl	.+6      	; 0xfb1c <__divmodhi4_exit>

0000fb16 <__divmodhi4_neg2>:
    fb16:	70 95       	com	r23
    fb18:	61 95       	neg	r22
    fb1a:	7f 4f       	sbci	r23, 0xFF	; 255

0000fb1c <__divmodhi4_exit>:
    fb1c:	08 95       	ret

0000fb1e <__divmodhi4_neg1>:
    fb1e:	f6 f7       	brtc	.-4      	; 0xfb1c <__divmodhi4_exit>
    fb20:	90 95       	com	r25
    fb22:	81 95       	neg	r24
    fb24:	9f 4f       	sbci	r25, 0xFF	; 255
    fb26:	08 95       	ret

0000fb28 <__udivmodsi4>:
    fb28:	a1 e2       	ldi	r26, 0x21	; 33
    fb2a:	1a 2e       	mov	r1, r26
    fb2c:	aa 1b       	sub	r26, r26
    fb2e:	bb 1b       	sub	r27, r27
    fb30:	fd 01       	movw	r30, r26
    fb32:	0d c0       	rjmp	.+26     	; 0xfb4e <__udivmodsi4_ep>

0000fb34 <__udivmodsi4_loop>:
    fb34:	aa 1f       	adc	r26, r26
    fb36:	bb 1f       	adc	r27, r27
    fb38:	ee 1f       	adc	r30, r30
    fb3a:	ff 1f       	adc	r31, r31
    fb3c:	a2 17       	cp	r26, r18
    fb3e:	b3 07       	cpc	r27, r19
    fb40:	e4 07       	cpc	r30, r20
    fb42:	f5 07       	cpc	r31, r21
    fb44:	20 f0       	brcs	.+8      	; 0xfb4e <__udivmodsi4_ep>
    fb46:	a2 1b       	sub	r26, r18
    fb48:	b3 0b       	sbc	r27, r19
    fb4a:	e4 0b       	sbc	r30, r20
    fb4c:	f5 0b       	sbc	r31, r21

0000fb4e <__udivmodsi4_ep>:
    fb4e:	66 1f       	adc	r22, r22
    fb50:	77 1f       	adc	r23, r23
    fb52:	88 1f       	adc	r24, r24
    fb54:	99 1f       	adc	r25, r25
    fb56:	1a 94       	dec	r1
    fb58:	69 f7       	brne	.-38     	; 0xfb34 <__udivmodsi4_loop>
    fb5a:	60 95       	com	r22
    fb5c:	70 95       	com	r23
    fb5e:	80 95       	com	r24
    fb60:	90 95       	com	r25
    fb62:	9b 01       	movw	r18, r22
    fb64:	ac 01       	movw	r20, r24
    fb66:	bd 01       	movw	r22, r26
    fb68:	cf 01       	movw	r24, r30
    fb6a:	08 95       	ret

0000fb6c <_exit>:
    fb6c:	ff cf       	rjmp	.-2      	; 0xfb6c <_exit>
