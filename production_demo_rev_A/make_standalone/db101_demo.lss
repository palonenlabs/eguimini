
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800200  0000f550  0000f5e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  0080028e  0080028e  0000f672  2**0
                  ALLOC
  3 .debug_aranges 000008c4  00000000  00000000  0000f672  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  0000ff36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000133ea  00000000  00000000  00012c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000312b  00000000  00000000  00026011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000afc2  00000000  00000000  0002913c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fdf  00000000  00000000  000340fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  000390dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
       0:	0c 94 19 69 	jmp	0xd232	; 0xd232 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_DrawProgressBar(uint8_t Xstart, uint8_t Ystart, uint8_t height, uint8_t lenght, uint8_t maxvalue, uint8_t currvalue, uint8_t peakvalue)
{
      10:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
{
	POWER_wakeupRequested = true;
}

void POWER_EnterIdleSleepMode( void )
{
      18:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 88 72 	jmp	0xe510	; 0xe510 <__vector_9>
    while (colsLeft-- > 0) {
      *dest++ = *source++;
    }
    // Move to next page.
    source += sourceWidth - width;
    dest += destWidth - width;
      28:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      2c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      30:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  pTextString  Pointer to null-terminated string in flash
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString_F(char const CAL_PGM(* pTextString), uint8_t page, uint8_t column)
{
      34:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      38:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      3c:	0c 94 15 76 	jmp	0xec2a	; 0xec2a <__vector_15>
      40:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      44:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      48:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      4c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      50:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      54:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      58:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      5c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      60:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      64:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      68:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      6c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      70:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      74:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      78:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      7c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      80:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      84:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      88:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      8c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      90:	0c 94 d9 69 	jmp	0xd3b2	; 0xd3b2 <__vector_36>
      94:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      98:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      9c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      ac:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      bc:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <TERMFONT_fontdata>:
    d052:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d062:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d072:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d082:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d092:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a2:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b2:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c2:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d2:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e2:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f2:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d102:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d112:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d122:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d132:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d142:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d152:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d162:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d172:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d182:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d192:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a2:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b2:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c2:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d2:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e2:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f2:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d202:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d212:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d222:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d232 <__ctors_end>:
    d232:	11 24       	eor	r1, r1
    d234:	1f be       	out	0x3f, r1	; 63
    d236:	cf ef       	ldi	r28, 0xFF	; 255
    d238:	d1 e2       	ldi	r29, 0x21	; 33
    d23a:	de bf       	out	0x3e, r29	; 62
    d23c:	cd bf       	out	0x3d, r28	; 61

0000d23e <__do_copy_data>:
    d23e:	12 e0       	ldi	r17, 0x02	; 2
    d240:	a0 e0       	ldi	r26, 0x00	; 0
    d242:	b2 e0       	ldi	r27, 0x02	; 2
    d244:	e0 e5       	ldi	r30, 0x50	; 80
    d246:	f5 ef       	ldi	r31, 0xF5	; 245
    d248:	00 e0       	ldi	r16, 0x00	; 0
    d24a:	0b bf       	out	0x3b, r16	; 59
    d24c:	02 c0       	rjmp	.+4      	; 0xd252 <__do_copy_data+0x14>
    d24e:	07 90       	elpm	r0, Z+
    d250:	0d 92       	st	X+, r0
    d252:	ae 38       	cpi	r26, 0x8E	; 142
    d254:	b1 07       	cpc	r27, r17
    d256:	d9 f7       	brne	.-10     	; 0xd24e <__do_copy_data+0x10>

0000d258 <__do_clear_bss>:
    d258:	18 e1       	ldi	r17, 0x18	; 24
    d25a:	ae e8       	ldi	r26, 0x8E	; 142
    d25c:	b2 e0       	ldi	r27, 0x02	; 2
    d25e:	01 c0       	rjmp	.+2      	; 0xd262 <.do_clear_bss_start>

0000d260 <.do_clear_bss_loop>:
    d260:	1d 92       	st	X+, r1

0000d262 <.do_clear_bss_start>:
    d262:	af 3d       	cpi	r26, 0xDF	; 223
    d264:	b1 07       	cpc	r27, r17
    d266:	e1 f7       	brne	.-8      	; 0xd260 <.do_clear_bss_loop>
    d268:	0e 94 5e 6c 	call	0xd8bc	; 0xd8bc <main>
    d26c:	0c 94 a7 7a 	jmp	0xf54e	; 0xf54e <_exit>

0000d270 <__bad_interrupt>:
    d270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d274 <strcmp>:
    d274:	fb 01       	movw	r30, r22
    d276:	dc 01       	movw	r26, r24
    d278:	8d 91       	ld	r24, X+
    d27a:	01 90       	ld	r0, Z+
    d27c:	80 19       	sub	r24, r0
    d27e:	01 10       	cpse	r0, r1
    d280:	d9 f3       	breq	.-10     	; 0xd278 <strcmp+0x4>
    d282:	99 0b       	sbc	r25, r25
    d284:	08 95       	ret

0000d286 <strncpy>:
    d286:	fb 01       	movw	r30, r22
    d288:	dc 01       	movw	r26, r24
    d28a:	41 50       	subi	r20, 0x01	; 1
    d28c:	50 40       	sbci	r21, 0x00	; 0
    d28e:	48 f0       	brcs	.+18     	; 0xd2a2 <strncpy+0x1c>
    d290:	01 90       	ld	r0, Z+
    d292:	0d 92       	st	X+, r0
    d294:	00 20       	and	r0, r0
    d296:	c9 f7       	brne	.-14     	; 0xd28a <strncpy+0x4>
    d298:	01 c0       	rjmp	.+2      	; 0xd29c <strncpy+0x16>
    d29a:	1d 92       	st	X+, r1
    d29c:	41 50       	subi	r20, 0x01	; 1
    d29e:	50 40       	sbci	r21, 0x00	; 0
    d2a0:	e0 f7       	brcc	.-8      	; 0xd29a <strncpy+0x14>
    d2a2:	08 95       	ret

0000d2a4 <__eerd_word>:
    d2a4:	cf 92       	push	r12
    d2a6:	df 92       	push	r13
    d2a8:	ef 92       	push	r14
    d2aa:	ff 92       	push	r15
    d2ac:	0f 93       	push	r16
    d2ae:	1f 93       	push	r17
    d2b0:	7c 01       	movw	r14, r24
    d2b2:	6b 01       	movw	r12, r22
    d2b4:	fb 01       	movw	r30, r22
    d2b6:	09 95       	icall
    d2b8:	08 2f       	mov	r16, r24
    d2ba:	c7 01       	movw	r24, r14
    d2bc:	01 96       	adiw	r24, 0x01	; 1
    d2be:	f6 01       	movw	r30, r12
    d2c0:	09 95       	icall
    d2c2:	18 2f       	mov	r17, r24
    d2c4:	c8 01       	movw	r24, r16
    d2c6:	1f 91       	pop	r17
    d2c8:	0f 91       	pop	r16
    d2ca:	ff 90       	pop	r15
    d2cc:	ef 90       	pop	r14
    d2ce:	df 90       	pop	r13
    d2d0:	cf 90       	pop	r12
    d2d2:	08 95       	ret

0000d2d4 <__eewr_word>:
    d2d4:	cf 92       	push	r12
    d2d6:	df 92       	push	r13
    d2d8:	ef 92       	push	r14
    d2da:	ff 92       	push	r15
    d2dc:	0f 93       	push	r16
    d2de:	1f 93       	push	r17
    d2e0:	6c 01       	movw	r12, r24
    d2e2:	8b 01       	movw	r16, r22
    d2e4:	7a 01       	movw	r14, r20
    d2e6:	fa 01       	movw	r30, r20
    d2e8:	09 95       	icall
    d2ea:	81 2f       	mov	r24, r17
    d2ec:	99 27       	eor	r25, r25
    d2ee:	68 2f       	mov	r22, r24
    d2f0:	c6 01       	movw	r24, r12
    d2f2:	01 96       	adiw	r24, 0x01	; 1
    d2f4:	f7 01       	movw	r30, r14
    d2f6:	09 95       	icall
    d2f8:	1f 91       	pop	r17
    d2fa:	0f 91       	pop	r16
    d2fc:	ff 90       	pop	r15
    d2fe:	ef 90       	pop	r14
    d300:	df 90       	pop	r13
    d302:	cf 90       	pop	r12
    d304:	08 95       	ret

0000d306 <itoa>:
    d306:	fb 01       	movw	r30, r22
    d308:	9f 01       	movw	r18, r30
    d30a:	e8 94       	clt
    d30c:	42 30       	cpi	r20, 0x02	; 2
    d30e:	c4 f0       	brlt	.+48     	; 0xd340 <itoa+0x3a>
    d310:	45 32       	cpi	r20, 0x25	; 37
    d312:	b4 f4       	brge	.+44     	; 0xd340 <itoa+0x3a>
    d314:	4a 30       	cpi	r20, 0x0A	; 10
    d316:	29 f4       	brne	.+10     	; 0xd322 <itoa+0x1c>
    d318:	97 fb       	bst	r25, 7
    d31a:	1e f4       	brtc	.+6      	; 0xd322 <itoa+0x1c>
    d31c:	90 95       	com	r25
    d31e:	81 95       	neg	r24
    d320:	9f 4f       	sbci	r25, 0xFF	; 255
    d322:	64 2f       	mov	r22, r20
    d324:	77 27       	eor	r23, r23
    d326:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    d32a:	80 5d       	subi	r24, 0xD0	; 208
    d32c:	8a 33       	cpi	r24, 0x3A	; 58
    d32e:	0c f0       	brlt	.+2      	; 0xd332 <itoa+0x2c>
    d330:	89 5d       	subi	r24, 0xD9	; 217
    d332:	81 93       	st	Z+, r24
    d334:	cb 01       	movw	r24, r22
    d336:	00 97       	sbiw	r24, 0x00	; 0
    d338:	a1 f7       	brne	.-24     	; 0xd322 <itoa+0x1c>
    d33a:	16 f4       	brtc	.+4      	; 0xd340 <itoa+0x3a>
    d33c:	5d e2       	ldi	r21, 0x2D	; 45
    d33e:	51 93       	st	Z+, r21
    d340:	10 82       	st	Z, r1
    d342:	c9 01       	movw	r24, r18
    d344:	0c 94 a4 69 	jmp	0xd348	; 0xd348 <strrev>

0000d348 <strrev>:
    d348:	dc 01       	movw	r26, r24
    d34a:	fc 01       	movw	r30, r24
    d34c:	67 2f       	mov	r22, r23
    d34e:	71 91       	ld	r23, Z+
    d350:	77 23       	and	r23, r23
    d352:	e1 f7       	brne	.-8      	; 0xd34c <strrev+0x4>
    d354:	32 97       	sbiw	r30, 0x02	; 2
    d356:	04 c0       	rjmp	.+8      	; 0xd360 <strrev+0x18>
    d358:	7c 91       	ld	r23, X
    d35a:	6d 93       	st	X+, r22
    d35c:	70 83       	st	Z, r23
    d35e:	62 91       	ld	r22, -Z
    d360:	ae 17       	cp	r26, r30
    d362:	bf 07       	cpc	r27, r31
    d364:	c8 f3       	brcs	.-14     	; 0xd358 <strrev+0x10>
    d366:	08 95       	ret

0000d368 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d368:	f9 99       	sbic	0x1f, 1	; 31
    d36a:	fe cf       	rjmp	.-4      	; 0xd368 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d36c:	92 bd       	out	0x22, r25	; 34
    d36e:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d370:	f8 9a       	sbi	0x1f, 0	; 31
    d372:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d374:	99 27       	eor	r25, r25
    d376:	08 95       	ret

0000d378 <eeprom_write_byte>:
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
    d378:	f9 99       	sbic	0x1f, 1	; 31
    d37a:	fe cf       	rjmp	.-4      	; 0xd378 <eeprom_write_byte>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
    d37c:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d37e:	92 bd       	out	0x22, r25	; 34
    d380:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
    d382:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
    d384:	0f b6       	in	r0, 0x3f	; 63
    d386:	f8 94       	cli
    d388:	fa 9a       	sbi	0x1f, 2	; 31
    d38a:	f9 9a       	sbi	0x1f, 1	; 31
    d38c:	0f be       	out	0x3f, r0	; 63
    d38e:	08 95       	ret

0000d390 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d390:	cf 93       	push	r28
    d392:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d394:	8a 30       	cpi	r24, 0x0A	; 10
    d396:	19 f4       	brne	.+6      	; 0xd39e <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d398:	8d e0       	ldi	r24, 0x0D	; 13
    d39a:	0e 94 c8 69 	call	0xd390	; 0xd390 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d39e:	80 91 c8 00 	lds	r24, 0x00C8
    d3a2:	85 ff       	sbrs	r24, 5
    d3a4:	fc cf       	rjmp	.-8      	; 0xd39e <uart_putchar+0xe>
      UDR1 = c;
    d3a6:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d3aa:	80 e0       	ldi	r24, 0x00	; 0
    d3ac:	90 e0       	ldi	r25, 0x00	; 0
    d3ae:	cf 91       	pop	r28
    d3b0:	08 95       	ret

0000d3b2 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d3b2:	1f 92       	push	r1
    d3b4:	0f 92       	push	r0
    d3b6:	0f b6       	in	r0, 0x3f	; 63
    d3b8:	0f 92       	push	r0
    d3ba:	11 24       	eor	r1, r1
    d3bc:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d3be:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d3c2:	80 91 ce 00 	lds	r24, 0x00CE
    d3c6:	80 93 9f 02 	sts	0x029F, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d3ca:	81 e0       	ldi	r24, 0x01	; 1
    d3cc:	80 93 a0 02 	sts	0x02A0, r24
    d3d0:	8f 91       	pop	r24
    d3d2:	0f 90       	pop	r0
    d3d4:	0f be       	out	0x3f, r0	; 63
    d3d6:	0f 90       	pop	r0
    d3d8:	1f 90       	pop	r1
    d3da:	18 95       	reti

0000d3dc <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d3dc:	88 e9       	ldi	r24, 0x98	; 152
    d3de:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d3e2:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d3e6:	87 e0       	ldi	r24, 0x07	; 7
    d3e8:	80 93 cc 00 	sts	0x00CC, r24
    d3ec:	08 95       	ret

0000d3ee <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    d3ee:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    d3f0:	80 53       	subi	r24, 0x30	; 48
    d3f2:	8a 30       	cpi	r24, 0x0A	; 10
    d3f4:	10 f4       	brcc	.+4      	; 0xd3fa <xtod+0xc>
    d3f6:	99 27       	eor	r25, r25
    d3f8:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    d3fa:	89 2f       	mov	r24, r25
    d3fc:	81 54       	subi	r24, 0x41	; 65
    d3fe:	86 30       	cpi	r24, 0x06	; 6
    d400:	10 f4       	brcc	.+4      	; 0xd406 <xtod+0x18>
    d402:	97 53       	subi	r25, 0x37	; 55
    d404:	05 c0       	rjmp	.+10     	; 0xd410 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    d406:	89 2f       	mov	r24, r25
    d408:	81 56       	subi	r24, 0x61	; 97
    d40a:	86 30       	cpi	r24, 0x06	; 6
    d40c:	20 f4       	brcc	.+8      	; 0xd416 <xtod+0x28>
    d40e:	97 55       	subi	r25, 0x57	; 87
    d410:	89 2f       	mov	r24, r25
    d412:	99 27       	eor	r25, r25
    d414:	08 95       	ret
 return c=0;        // not Hex digit
    d416:	80 e0       	ldi	r24, 0x00	; 0
    d418:	90 e0       	ldi	r25, 0x00	; 0
}
    d41a:	08 95       	ret

0000d41c <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    d41c:	ef 92       	push	r14
    d41e:	ff 92       	push	r15
    d420:	0f 93       	push	r16
    d422:	1f 93       	push	r17
    d424:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    d426:	80 81       	ld	r24, Z
    d428:	88 23       	and	r24, r24
    d42a:	81 f0       	breq	.+32     	; 0xd44c <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    d42c:	8f 01       	movw	r16, r30
    d42e:	0f 5f       	subi	r16, 0xFF	; 255
    d430:	1f 4f       	sbci	r17, 0xFF	; 255
    d432:	7b 01       	movw	r14, r22
    d434:	94 e0       	ldi	r25, 0x04	; 4
    d436:	ee 0c       	add	r14, r14
    d438:	ff 1c       	adc	r15, r15
    d43a:	9a 95       	dec	r25
    d43c:	e1 f7       	brne	.-8      	; 0xd436 <HextoDec+0x1a>
    d43e:	0e 94 f7 69 	call	0xd3ee	; 0xd3ee <xtod>
    d442:	f8 01       	movw	r30, r16
    d444:	b7 01       	movw	r22, r14
    d446:	68 0f       	add	r22, r24
    d448:	71 1d       	adc	r23, r1
    d44a:	ed cf       	rjmp	.-38     	; 0xd426 <HextoDec+0xa>
}
    d44c:	cb 01       	movw	r24, r22
    d44e:	1f 91       	pop	r17
    d450:	0f 91       	pop	r16
    d452:	ff 90       	pop	r15
    d454:	ef 90       	pop	r14
    d456:	08 95       	ret

0000d458 <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    d458:	60 e0       	ldi	r22, 0x00	; 0
    d45a:	70 e0       	ldi	r23, 0x00	; 0
    d45c:	0e 94 0e 6a 	call	0xd41c	; 0xd41c <HextoDec>
    d460:	08 95       	ret

0000d462 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    d462:	ef 92       	push	r14
    d464:	ff 92       	push	r15
    d466:	0f 93       	push	r16
    d468:	1f 93       	push	r17
    d46a:	8a 01       	movw	r16, r20
    d46c:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    d46e:	68 0f       	add	r22, r24
    d470:	79 1f       	adc	r23, r25
    d472:	c9 01       	movw	r24, r18
    d474:	0e 94 43 69 	call	0xd286	; 0xd286 <strncpy>
	pnew[numchars] = '\0';
    d478:	0e 0d       	add	r16, r14
    d47a:	1f 1d       	adc	r17, r15
    d47c:	f8 01       	movw	r30, r16
    d47e:	10 82       	st	Z, r1
	return pnew;
}
    d480:	c7 01       	movw	r24, r14
    d482:	1f 91       	pop	r17
    d484:	0f 91       	pop	r16
    d486:	ff 90       	pop	r15
    d488:	ef 90       	pop	r14
    d48a:	08 95       	ret

0000d48c <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    d48c:	6f 92       	push	r6
    d48e:	7f 92       	push	r7
    d490:	8f 92       	push	r8
    d492:	9f 92       	push	r9
    d494:	af 92       	push	r10
    d496:	bf 92       	push	r11
    d498:	cf 92       	push	r12
    d49a:	df 92       	push	r13
    d49c:	ef 92       	push	r14
    d49e:	ff 92       	push	r15
    d4a0:	0f 93       	push	r16
    d4a2:	1f 93       	push	r17
    d4a4:	cf 93       	push	r28
    d4a6:	df 93       	push	r29
    d4a8:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d4aa:	8d 30       	cpi	r24, 0x0D	; 13
    d4ac:	19 f0       	breq	.+6      	; 0xd4b4 <recv_input+0x28>
    d4ae:	8a 30       	cpi	r24, 0x0A	; 10
    d4b0:	09 f0       	breq	.+2      	; 0xd4b4 <recv_input+0x28>
    d4b2:	e5 c1       	rjmp	.+970    	; 0xd87e <recv_input+0x3f2>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d4b4:	80 91 66 02 	lds	r24, 0x0266
    d4b8:	e8 2f       	mov	r30, r24
    d4ba:	ff 27       	eor	r31, r31
    d4bc:	eb 54       	subi	r30, 0x4B	; 75
    d4be:	fd 4f       	sbci	r31, 0xFD	; 253
    d4c0:	10 82       	st	Z, r1
  int8_t rc;
  int16_t value=0;
  char * raw_byte;
  short * raw_short;

  if (s[0] == 0)
    d4c2:	80 91 b5 02 	lds	r24, 0x02B5
    d4c6:	88 23       	and	r24, r24
    d4c8:	09 f4       	brne	.+2      	; 0xd4cc <recv_input+0x40>
    d4ca:	d6 c1       	rjmp	.+940    	; 0xd878 <recv_input+0x3ec>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d4cc:	e0 91 67 02 	lds	r30, 0x0267
    d4d0:	f0 91 68 02 	lds	r31, 0x0268
    d4d4:	10 82       	st	Z, r1
  index = 0;
    d4d6:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d4d8:	80 91 b5 02 	lds	r24, 0x02B5
    d4dc:	88 23       	and	r24, r24
    d4de:	d1 f0       	breq	.+52     	; 0xd514 <recv_input+0x88>
    d4e0:	8d 33       	cpi	r24, 0x3D	; 61
    d4e2:	c1 f0       	breq	.+48     	; 0xd514 <recv_input+0x88>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d4e4:	e9 2f       	mov	r30, r25
    d4e6:	ff 27       	eor	r31, r31
    d4e8:	a0 91 67 02 	lds	r26, 0x0267
    d4ec:	b0 91 68 02 	lds	r27, 0x0268
    d4f0:	ae 0f       	add	r26, r30
    d4f2:	bf 1f       	adc	r27, r31
    d4f4:	eb 54       	subi	r30, 0x4B	; 75
    d4f6:	fd 4f       	sbci	r31, 0xFD	; 253
    d4f8:	80 81       	ld	r24, Z
    d4fa:	8c 93       	st	X, r24
    index++;
    d4fc:	9f 5f       	subi	r25, 0xFF	; 255
    d4fe:	94 31       	cpi	r25, 0x14	; 20
    d500:	48 f4       	brcc	.+18     	; 0xd514 <recv_input+0x88>
    d502:	e9 2f       	mov	r30, r25
    d504:	ff 27       	eor	r31, r31
    d506:	eb 54       	subi	r30, 0x4B	; 75
    d508:	fd 4f       	sbci	r31, 0xFD	; 253
    d50a:	e0 81       	ld	r30, Z
    d50c:	ee 23       	and	r30, r30
    d50e:	11 f0       	breq	.+4      	; 0xd514 <recv_input+0x88>
    d510:	ed 33       	cpi	r30, 0x3D	; 61
    d512:	41 f7       	brne	.-48     	; 0xd4e4 <recv_input+0x58>
    d514:	a0 91 67 02 	lds	r26, 0x0267
    d518:	b0 91 68 02 	lds	r27, 0x0268
  }
  if (index < sizeof(do_cmdbuf)) {
    d51c:	94 31       	cpi	r25, 0x14	; 20
    d51e:	68 f4       	brcc	.+26     	; 0xd53a <recv_input+0xae>
    cmd[index] = 0;
    d520:	89 2f       	mov	r24, r25
    d522:	99 27       	eor	r25, r25
    d524:	a8 0f       	add	r26, r24
    d526:	b9 1f       	adc	r27, r25
    d528:	1c 92       	st	X, r1
    args = &s[index];
    d52a:	fc 01       	movw	r30, r24
    d52c:	eb 54       	subi	r30, 0x4B	; 75
    d52e:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d530:	80 81       	ld	r24, Z
    d532:	8d 33       	cpi	r24, 0x3D	; 61
    d534:	21 f4       	brne	.+8      	; 0xd53e <recv_input+0xb2>
    d536:	31 96       	adiw	r30, 0x01	; 1
    d538:	fb cf       	rjmp	.-10     	; 0xd530 <recv_input+0xa4>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d53a:	fd 01       	movw	r30, r26
    d53c:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d53e:	e0 91 67 02 	lds	r30, 0x0267
    d542:	f0 91 68 02 	lds	r31, 0x0268
    d546:	80 81       	ld	r24, Z
    d548:	88 23       	and	r24, r24
    d54a:	09 f4       	brne	.+2      	; 0xd54e <recv_input+0xc2>
    d54c:	95 c1       	rjmp	.+810    	; 0xd878 <recv_input+0x3ec>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d54e:	64 e7       	ldi	r22, 0x74	; 116
    d550:	70 e0       	ldi	r23, 0x00	; 0
    d552:	99 27       	eor	r25, r25
    d554:	0e 94 3a 69 	call	0xd274	; 0xd274 <strcmp>
    d558:	89 2b       	or	r24, r25
    d55a:	09 f0       	breq	.+2      	; 0xd55e <recv_input+0xd2>
    d55c:	8d c1       	rjmp	.+794    	; 0xd878 <recv_input+0x3ec>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d55e:	82 e0       	ldi	r24, 0x02	; 2
    d560:	90 e0       	ldi	r25, 0x00	; 0
    d562:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d566:	3c 01       	movw	r6, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d568:	9c 01       	movw	r18, r24
    d56a:	43 e0       	ldi	r20, 0x03	; 3
    d56c:	50 e0       	ldi	r21, 0x00	; 0
    d56e:	61 e0       	ldi	r22, 0x01	; 1
    d570:	70 e0       	ldi	r23, 0x00	; 0
    d572:	80 91 67 02 	lds	r24, 0x0267
    d576:	90 91 68 02 	lds	r25, 0x0268
    d57a:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d57e:	90 93 8f 02 	sts	0x028F, r25
    d582:	80 93 8e 02 	sts	0x028E, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d586:	c3 01       	movw	r24, r6
    d588:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
	// 2	unsigned char	Pack State of Health				0.5%
	// 3	unsigned char	Max Pack Temperature				1 deg C
	// 4-5	short			Min Pack Voltage					1mV
	// 6-7	short			Max Pack Voltage					1mV
	 
	if (strcmp(can_addr, "630") == 0) {
    d58c:	64 e1       	ldi	r22, 0x14	; 20
    d58e:	72 e0       	ldi	r23, 0x02	; 2
    d590:	80 91 8e 02 	lds	r24, 0x028E
    d594:	90 91 8f 02 	lds	r25, 0x028F
    d598:	0e 94 3a 69 	call	0xd274	; 0xd274 <strcmp>
    d59c:	6c 01       	movw	r12, r24
    d59e:	89 2b       	or	r24, r25
    d5a0:	09 f0       	breq	.+2      	; 0xd5a4 <recv_input+0x118>
    d5a2:	6a c0       	rjmp	.+212    	; 0xd678 <recv_input+0x1ec>
		wdt_reset();
    d5a4:	a8 95       	wdr
		
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d5a6:	82 e0       	ldi	r24, 0x02	; 2
    d5a8:	90 e0       	ldi	r25, 0x00	; 0
    d5aa:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d5ae:	f3 01       	movw	r30, r6
    d5b0:	80 83       	st	Z, r24

		// SOC, byte 0
		raw_byte = substr(cmd, 5, 2,pnew);
    d5b2:	93 01       	movw	r18, r6
    d5b4:	42 e0       	ldi	r20, 0x02	; 2
    d5b6:	50 e0       	ldi	r21, 0x00	; 0
    d5b8:	65 e0       	ldi	r22, 0x05	; 5
    d5ba:	70 e0       	ldi	r23, 0x00	; 0
    d5bc:	80 91 67 02 	lds	r24, 0x0267
    d5c0:	90 91 68 02 	lds	r25, 0x0268
    d5c4:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d5c8:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d5ca:	c3 01       	movw	r24, r6
    d5cc:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d5d0:	ce 01       	movw	r24, r28
    d5d2:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d5d6:	bc 01       	movw	r22, r24
		value = value/2;	// 0.5 % per LSB
    d5d8:	77 fd       	sbrc	r23, 7
    d5da:	01 96       	adiw	r24, 0x01	; 1
    d5dc:	95 95       	asr	r25
    d5de:	87 95       	ror	r24
		LCD_UpdateSOC(value);
    d5e0:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>


		// Max Pack temp, byte 3
		raw_byte = substr(cmd, 11, 2,pnew);
    d5e4:	93 01       	movw	r18, r6
    d5e6:	42 e0       	ldi	r20, 0x02	; 2
    d5e8:	50 e0       	ldi	r21, 0x00	; 0
    d5ea:	6b e0       	ldi	r22, 0x0B	; 11
    d5ec:	70 e0       	ldi	r23, 0x00	; 0
    d5ee:	80 91 67 02 	lds	r24, 0x0267
    d5f2:	90 91 68 02 	lds	r25, 0x0268
    d5f6:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d5fa:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d5fc:	c3 01       	movw	r24, r6
    d5fe:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);
    d602:	ce 01       	movw	r24, r28
    d604:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
		LCD_UpdateMaxTemp(value);
    d608:	0e 94 60 70 	call	0xe0c0	; 0xe0c0 <LCD_UpdateMaxTemp>
		
		char *spnew = MEM_ALLOC(6);
    d60c:	82 e0       	ldi	r24, 0x02	; 2
    d60e:	90 e0       	ldi	r25, 0x00	; 0
    d610:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d614:	7c 01       	movw	r14, r24

		// Min Pack Voltage, byte 4-5
		raw_short = substr(cmd, 13, 4,spnew);
    d616:	9c 01       	movw	r18, r24
    d618:	44 e0       	ldi	r20, 0x04	; 4
    d61a:	50 e0       	ldi	r21, 0x00	; 0
    d61c:	6d e0       	ldi	r22, 0x0D	; 13
    d61e:	70 e0       	ldi	r23, 0x00	; 0
    d620:	80 91 67 02 	lds	r24, 0x0267
    d624:	90 91 68 02 	lds	r25, 0x0268
    d628:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d62c:	8c 01       	movw	r16, r24
		MEM_FREE(spnew);
    d62e:	c7 01       	movw	r24, r14
    d630:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_short);
    d634:	c8 01       	movw	r24, r16
    d636:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
		LCD_UpdateMinVolt(value);
    d63a:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <LCD_UpdateMinVolt>
		
		// Small status line for each frame received. Since ID 630 should
		// be transmitted once per second, there should be small but visible
		// blinking of few pixels in one of the corners of the display. 		
		if (la == 0)
    d63e:	80 91 4c 02 	lds	r24, 0x024C
    d642:	90 91 4d 02 	lds	r25, 0x024D
    d646:	89 2b       	or	r24, r25
    d648:	69 f4       	brne	.+26     	; 0xd664 <recv_input+0x1d8>
		{
				LCD_ClrLine(1,63,2,63);
    d64a:	2f e3       	ldi	r18, 0x3F	; 63
    d64c:	42 e0       	ldi	r20, 0x02	; 2
    d64e:	62 2f       	mov	r22, r18
    d650:	81 e0       	ldi	r24, 0x01	; 1
    d652:	0e 94 0c 72 	call	0xe418	; 0xe418 <LCD_ClrLine>
				la = 1;
    d656:	81 e0       	ldi	r24, 0x01	; 1
    d658:	90 e0       	ldi	r25, 0x00	; 0
    d65a:	90 93 4d 02 	sts	0x024D, r25
    d65e:	80 93 4c 02 	sts	0x024C, r24
    d662:	0a c0       	rjmp	.+20     	; 0xd678 <recv_input+0x1ec>
		} else {
				LCD_SetLine(1,63,2,63);
    d664:	2f e3       	ldi	r18, 0x3F	; 63
    d666:	42 e0       	ldi	r20, 0x02	; 2
    d668:	62 2f       	mov	r22, r18
    d66a:	81 e0       	ldi	r24, 0x01	; 1
    d66c:	0e 94 a4 71 	call	0xe348	; 0xe348 <LCD_SetLine>
				la = 0;
    d670:	d0 92 4d 02 	sts	0x024D, r13
    d674:	c0 92 4c 02 	sts	0x024C, r12
		
	} // Summary values end	

	
	// Screen contrast and color
	if (strcmp(can_addr, "7DD") == 0) {
    d678:	68 e1       	ldi	r22, 0x18	; 24
    d67a:	72 e0       	ldi	r23, 0x02	; 2
    d67c:	80 91 8e 02 	lds	r24, 0x028E
    d680:	90 91 8f 02 	lds	r25, 0x028F
    d684:	0e 94 3a 69 	call	0xd274	; 0xd274 <strcmp>
    d688:	89 2b       	or	r24, r25
    d68a:	09 f0       	breq	.+2      	; 0xd68e <recv_input+0x202>
    d68c:	f5 c0       	rjmp	.+490    	; 0xd878 <recv_input+0x3ec>
		// byte 2 green
		// byte 3 blue
		// byte 4 intensity

		// byte 0 contrast
		*pnew = MEM_ALLOC(3);
    d68e:	82 e0       	ldi	r24, 0x02	; 2
    d690:	90 e0       	ldi	r25, 0x00	; 0
    d692:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d696:	f3 01       	movw	r30, r6
    d698:	80 83       	st	Z, r24
		raw_byte = substr(cmd, 5, 2,pnew);
    d69a:	93 01       	movw	r18, r6
    d69c:	42 e0       	ldi	r20, 0x02	; 2
    d69e:	50 e0       	ldi	r21, 0x00	; 0
    d6a0:	65 e0       	ldi	r22, 0x05	; 5
    d6a2:	70 e0       	ldi	r23, 0x00	; 0
    d6a4:	80 91 67 02 	lds	r24, 0x0267
    d6a8:	90 91 68 02 	lds	r25, 0x0268
    d6ac:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d6b0:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d6b2:	c3 01       	movw	r24, r6
    d6b4:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);		
    d6b8:	ce 01       	movw	r24, r28
    d6ba:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d6be:	bc 01       	movw	r22, r24

/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    d6c0:	58 e0       	ldi	r21, 0x08	; 8
    d6c2:	85 2e       	mov	r8, r21
    d6c4:	91 2c       	mov	r9, r1
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    d6c6:	4c eb       	ldi	r20, 0xBC	; 188
    d6c8:	59 e6       	ldi	r21, 0x69	; 105
    d6ca:	c4 01       	movw	r24, r8
    d6cc:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <__eewr_word>
		eeprom_write_word(8, value);

		// byte 1 red
		*pnew = MEM_ALLOC(3);
    d6d0:	82 e0       	ldi	r24, 0x02	; 2
    d6d2:	90 e0       	ldi	r25, 0x00	; 0
    d6d4:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d6d8:	f3 01       	movw	r30, r6
    d6da:	80 83       	st	Z, r24
		raw_byte = substr(cmd, 7, 2,pnew);
    d6dc:	93 01       	movw	r18, r6
    d6de:	42 e0       	ldi	r20, 0x02	; 2
    d6e0:	50 e0       	ldi	r21, 0x00	; 0
    d6e2:	67 e0       	ldi	r22, 0x07	; 7
    d6e4:	70 e0       	ldi	r23, 0x00	; 0
    d6e6:	80 91 67 02 	lds	r24, 0x0267
    d6ea:	90 91 68 02 	lds	r25, 0x0268
    d6ee:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d6f2:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d6f4:	c3 01       	movw	r24, r6
    d6f6:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);		
    d6fa:	ce 01       	movw	r24, r28
    d6fc:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d700:	bc 01       	movw	r22, r24

/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    d702:	4a e0       	ldi	r20, 0x0A	; 10
    d704:	a4 2e       	mov	r10, r20
    d706:	b1 2c       	mov	r11, r1
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    d708:	4c eb       	ldi	r20, 0xBC	; 188
    d70a:	59 e6       	ldi	r21, 0x69	; 105
    d70c:	c5 01       	movw	r24, r10
    d70e:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <__eewr_word>
		eeprom_write_word(10, value);

		// byte 2 green
		*pnew = MEM_ALLOC(3);
    d712:	82 e0       	ldi	r24, 0x02	; 2
    d714:	90 e0       	ldi	r25, 0x00	; 0
    d716:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d71a:	f3 01       	movw	r30, r6
    d71c:	80 83       	st	Z, r24
		raw_byte = substr(cmd, 9, 2,pnew);
    d71e:	93 01       	movw	r18, r6
    d720:	42 e0       	ldi	r20, 0x02	; 2
    d722:	50 e0       	ldi	r21, 0x00	; 0
    d724:	69 e0       	ldi	r22, 0x09	; 9
    d726:	70 e0       	ldi	r23, 0x00	; 0
    d728:	80 91 67 02 	lds	r24, 0x0267
    d72c:	90 91 68 02 	lds	r25, 0x0268
    d730:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d734:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d736:	c3 01       	movw	r24, r6
    d738:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);		
    d73c:	ce 01       	movw	r24, r28
    d73e:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d742:	bc 01       	movw	r22, r24

/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    d744:	3c e0       	ldi	r19, 0x0C	; 12
    d746:	c3 2e       	mov	r12, r19
    d748:	d1 2c       	mov	r13, r1
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    d74a:	4c eb       	ldi	r20, 0xBC	; 188
    d74c:	59 e6       	ldi	r21, 0x69	; 105
    d74e:	c6 01       	movw	r24, r12
    d750:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <__eewr_word>
		eeprom_write_word(12, value);

		// byte 3 blue
		*pnew = MEM_ALLOC(3);
    d754:	82 e0       	ldi	r24, 0x02	; 2
    d756:	90 e0       	ldi	r25, 0x00	; 0
    d758:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d75c:	f3 01       	movw	r30, r6
    d75e:	80 83       	st	Z, r24
		raw_byte = substr(cmd, 11, 2,pnew);
    d760:	93 01       	movw	r18, r6
    d762:	42 e0       	ldi	r20, 0x02	; 2
    d764:	50 e0       	ldi	r21, 0x00	; 0
    d766:	6b e0       	ldi	r22, 0x0B	; 11
    d768:	70 e0       	ldi	r23, 0x00	; 0
    d76a:	80 91 67 02 	lds	r24, 0x0267
    d76e:	90 91 68 02 	lds	r25, 0x0268
    d772:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d776:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d778:	c3 01       	movw	r24, r6
    d77a:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);		
    d77e:	ce 01       	movw	r24, r28
    d780:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d784:	bc 01       	movw	r22, r24

/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    d786:	2e e0       	ldi	r18, 0x0E	; 14
    d788:	e2 2e       	mov	r14, r18
    d78a:	f1 2c       	mov	r15, r1
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    d78c:	4c eb       	ldi	r20, 0xBC	; 188
    d78e:	59 e6       	ldi	r21, 0x69	; 105
    d790:	c7 01       	movw	r24, r14
    d792:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <__eewr_word>
		eeprom_write_word(14, value);

		// byte 3 blue
		*pnew = MEM_ALLOC(3);
    d796:	82 e0       	ldi	r24, 0x02	; 2
    d798:	90 e0       	ldi	r25, 0x00	; 0
    d79a:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    d79e:	f3 01       	movw	r30, r6
    d7a0:	80 83       	st	Z, r24
		raw_byte = substr(cmd, 13, 2,pnew);
    d7a2:	93 01       	movw	r18, r6
    d7a4:	42 e0       	ldi	r20, 0x02	; 2
    d7a6:	50 e0       	ldi	r21, 0x00	; 0
    d7a8:	6d e0       	ldi	r22, 0x0D	; 13
    d7aa:	70 e0       	ldi	r23, 0x00	; 0
    d7ac:	80 91 67 02 	lds	r24, 0x0267
    d7b0:	90 91 68 02 	lds	r25, 0x0268
    d7b4:	0e 94 31 6a 	call	0xd462	; 0xd462 <substr>
    d7b8:	ec 01       	movw	r28, r24
		MEM_FREE(pnew);
    d7ba:	c3 01       	movw	r24, r6
    d7bc:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
		value = xstrtoi(raw_byte);		
    d7c0:	ce 01       	movw	r24, r28
    d7c2:	0e 94 2c 6a 	call	0xd458	; 0xd458 <xstrtoi>
    d7c6:	bc 01       	movw	r22, r24

/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    d7c8:	00 e1       	ldi	r16, 0x10	; 16
    d7ca:	10 e0       	ldi	r17, 0x00	; 0
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    __eewr_word (__p, __value, eeprom_write_byte);
    d7cc:	4c eb       	ldi	r20, 0xBC	; 188
    d7ce:	59 e6       	ldi	r21, 0x69	; 105
    d7d0:	c8 01       	movw	r24, r16
    d7d2:	0e 94 6a 69 	call	0xd2d4	; 0xd2d4 <__eewr_word>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d7d6:	64 eb       	ldi	r22, 0xB4	; 180
    d7d8:	79 e6       	ldi	r23, 0x69	; 105
    d7da:	c4 01       	movw	r24, r8
    d7dc:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d7e0:	90 93 51 02 	sts	0x0251, r25
    d7e4:	80 93 50 02 	sts	0x0250, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d7e8:	64 eb       	ldi	r22, 0xB4	; 180
    d7ea:	79 e6       	ldi	r23, 0x69	; 105
    d7ec:	c5 01       	movw	r24, r10
    d7ee:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d7f2:	90 93 57 02 	sts	0x0257, r25
    d7f6:	80 93 56 02 	sts	0x0256, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d7fa:	64 eb       	ldi	r22, 0xB4	; 180
    d7fc:	79 e6       	ldi	r23, 0x69	; 105
    d7fe:	c6 01       	movw	r24, r12
    d800:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d804:	90 93 55 02 	sts	0x0255, r25
    d808:	80 93 54 02 	sts	0x0254, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d80c:	64 eb       	ldi	r22, 0xB4	; 180
    d80e:	79 e6       	ldi	r23, 0x69	; 105
    d810:	c7 01       	movw	r24, r14
    d812:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d816:	90 93 53 02 	sts	0x0253, r25
    d81a:	80 93 52 02 	sts	0x0252, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d81e:	64 eb       	ldi	r22, 0xB4	; 180
    d820:	79 e6       	ldi	r23, 0x69	; 105
    d822:	c8 01       	movw	r24, r16
    d824:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d828:	90 93 4f 02 	sts	0x024F, r25
    d82c:	80 93 4e 02 	sts	0x024E, r24
		Red = eeprom_read_word((uint16_t*)10);
		Green = eeprom_read_word((uint16_t*)12);
		Blue = eeprom_read_word((uint16_t*)14);
		Intensity = eeprom_read_word((uint16_t*)16);

		BACKLIGHT_SetRGB( Red, Green, Blue );
    d830:	40 91 52 02 	lds	r20, 0x0252
    d834:	60 91 54 02 	lds	r22, 0x0254
    d838:	80 91 56 02 	lds	r24, 0x0256
    d83c:	0e 94 90 73 	call	0xe720	; 0xe720 <BACKLIGHT_SetRGB>
		BACKLIGHT_SetIntensity(Intensity);
    d840:	80 91 4e 02 	lds	r24, 0x024E
    d844:	0e 94 5c 73 	call	0xe6b8	; 0xe6b8 <BACKLIGHT_SetIntensity>

		TERMFONT_DisplayString(".Display adjusted.", 7, 0);
    d848:	40 e0       	ldi	r20, 0x00	; 0
    d84a:	67 e0       	ldi	r22, 0x07	; 7
    d84c:	8c e1       	ldi	r24, 0x1C	; 28
    d84e:	92 e0       	ldi	r25, 0x02	; 2
    d850:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d854:	8d ec       	ldi	r24, 0xCD	; 205
    d856:	97 e0       	ldi	r25, 0x07	; 7
    d858:	a7 e0       	ldi	r26, 0x07	; 7
    d85a:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d85c:	01 97       	sbiw	r24, 0x01	; 1
    d85e:	a1 09       	sbc	r26, r1
    d860:	b1 09       	sbc	r27, r1
    d862:	00 00       	nop
    d864:	01 f0       	breq	.+0      	; 0xd866 <recv_input+0x3da>
    d866:	d1 f7       	brne	.-12     	; 0xd85c <recv_input+0x3d0>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d868:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d86a:	00 00       	nop
		
		DELAY_MS(500);
		
		LCD_ClrBox(0,0,128,64);
    d86c:	20 e4       	ldi	r18, 0x40	; 64
    d86e:	40 e8       	ldi	r20, 0x80	; 128
    d870:	60 e0       	ldi	r22, 0x00	; 0
    d872:	86 2f       	mov	r24, r22
    d874:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <LCD_ClrBox>
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d878:	10 92 66 02 	sts	0x0266, r1
    d87c:	10 c0       	rjmp	.+32     	; 0xd89e <recv_input+0x412>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d87e:	80 91 66 02 	lds	r24, 0x0266
    d882:	e8 2f       	mov	r30, r24
    d884:	ff 27       	eor	r31, r31
    d886:	eb 54       	subi	r30, 0x4B	; 75
    d888:	fd 4f       	sbci	r31, 0xFD	; 253
    d88a:	90 83       	st	Z, r25
    d88c:	8f 5f       	subi	r24, 0xFF	; 255
    d88e:	80 93 66 02 	sts	0x0266, r24
    if (idx == CMD_BUF_LEN) {
    d892:	80 38       	cpi	r24, 0x80	; 128
    d894:	21 f4       	brne	.+8      	; 0xd89e <recv_input+0x412>
      idx = 0;
    d896:	10 92 66 02 	sts	0x0266, r1
      recv_input_cmdbuf[idx] = 0;
    d89a:	10 92 b5 02 	sts	0x02B5, r1
    d89e:	df 91       	pop	r29
    d8a0:	cf 91       	pop	r28
    d8a2:	1f 91       	pop	r17
    d8a4:	0f 91       	pop	r16
    d8a6:	ff 90       	pop	r15
    d8a8:	ef 90       	pop	r14
    d8aa:	df 90       	pop	r13
    d8ac:	cf 90       	pop	r12
    d8ae:	bf 90       	pop	r11
    d8b0:	af 90       	pop	r10
    d8b2:	9f 90       	pop	r9
    d8b4:	8f 90       	pop	r8
    d8b6:	7f 90       	pop	r7
    d8b8:	6f 90       	pop	r6
    d8ba:	08 95       	ret

0000d8bc <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d8bc:	cf ef       	ldi	r28, 0xFF	; 255
    d8be:	d1 e2       	ldi	r29, 0x21	; 33
    d8c0:	de bf       	out	0x3e, r29	; 62
    d8c2:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);

	LCD_UpdateSOC(1);
    d8c4:	81 e0       	ldi	r24, 0x01	; 1
    d8c6:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	stdout = &mystdout;
    d8ca:	88 e5       	ldi	r24, 0x58	; 88
    d8cc:	92 e0       	ldi	r25, 0x02	; 2
    d8ce:	90 93 dc 18 	sts	0x18DC, r25
    d8d2:	80 93 db 18 	sts	0x18DB, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d8d6:	54 9a       	sbi	0x0a, 4	; 10
    d8d8:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d8da:	0e 94 ee 69 	call	0xd3dc	; 0xd3dc <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d8de:	82 e0       	ldi	r24, 0x02	; 2
    d8e0:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d8e4:	0e 94 ff 6c 	call	0xd9fe	; 0xd9fe <InitMemory>

	LCD_UpdateSOC(3);
    d8e8:	83 e0       	ldi	r24, 0x03	; 3
    d8ea:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	LCD_Init();
    d8ee:	0e 94 f3 6d 	call	0xdbe6	; 0xdbe6 <LCD_Init>

	LCD_UpdateSOC(4);
    d8f2:	84 e0       	ldi	r24, 0x04	; 4
    d8f4:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	TIMING_Init();
    d8f8:	0e 94 b9 76 	call	0xed72	; 0xed72 <TIMING_Init>

	LCD_UpdateSOC(5);
    d8fc:	85 e0       	ldi	r24, 0x05	; 5
    d8fe:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	RTC_Init();
    d902:	0e 94 82 76 	call	0xed04	; 0xed04 <RTC_Init>

	LCD_UpdateSOC(6);
    d906:	86 e0       	ldi	r24, 0x06	; 6
    d908:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d90c:	8a e5       	ldi	r24, 0x5A	; 90
    d90e:	97 e7       	ldi	r25, 0x77	; 119
    d910:	0e 94 b1 76 	call	0xed62	; 0xed62 <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d914:	87 e0       	ldi	r24, 0x07	; 7
    d916:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d91a:	62 e3       	ldi	r22, 0x32	; 50
    d91c:	84 e6       	ldi	r24, 0x64	; 100
    d91e:	0e 94 b0 72 	call	0xe560	; 0xe560 <JOYSTICK_Init>

	//USART_Init();

//	CAL_enable_interrupt();

	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d922:	00 e9       	ldi	r16, 0x90	; 144
    d924:	12 e0       	ldi	r17, 0x02	; 2
    d926:	2f eb       	ldi	r18, 0xBF	; 191
    d928:	32 e7       	ldi	r19, 0x72	; 114
    d92a:	41 e0       	ldi	r20, 0x01	; 1
    d92c:	50 e0       	ldi	r21, 0x00	; 0
    d92e:	60 e0       	ldi	r22, 0x00	; 0
    d930:	70 e0       	ldi	r23, 0x00	; 0
    d932:	8f ef       	ldi	r24, 0xFF	; 255
    d934:	0e 94 c1 78 	call	0xf182	; 0xf182 <TIMING_AddRepCallbackEvent>

	// happy startup sound
	LCD_UpdateSOC(8);
    d938:	88 e0       	ldi	r24, 0x08	; 8
    d93a:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;

	// interrupt enable
	SREG |= 1<<7;
    d93e:	8f b7       	in	r24, 0x3f	; 63
    d940:	80 68       	ori	r24, 0x80	; 128
    d942:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d944:	89 e0       	ldi	r24, 0x09	; 9
    d946:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/

	LCD_UpdateSOC(10);
    d94a:	8a e0       	ldi	r24, 0x0A	; 10
    d94c:	0e 94 73 71 	call	0xe2e6	; 0xe2e6 <LCD_UpdateSOC>

	PlaySound(11);
    d950:	8b e0       	ldi	r24, 0x0B	; 11
    d952:	90 e0       	ldi	r25, 0x00	; 0
    d954:	0e 94 47 6d 	call	0xda8e	; 0xda8e <PlaySound>
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
//	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );

	// init backlight
	BACKLIGHT_Init();
    d958:	0e 94 38 73 	call	0xe670	; 0xe670 <BACKLIGHT_Init>
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d95c:	64 eb       	ldi	r22, 0xB4	; 180
    d95e:	79 e6       	ldi	r23, 0x69	; 105
    d960:	88 e0       	ldi	r24, 0x08	; 8
    d962:	90 e0       	ldi	r25, 0x00	; 0
    d964:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d968:	90 93 51 02 	sts	0x0251, r25
    d96c:	80 93 50 02 	sts	0x0250, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d970:	64 eb       	ldi	r22, 0xB4	; 180
    d972:	79 e6       	ldi	r23, 0x69	; 105
    d974:	8a e0       	ldi	r24, 0x0A	; 10
    d976:	90 e0       	ldi	r25, 0x00	; 0
    d978:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d97c:	90 93 57 02 	sts	0x0257, r25
    d980:	80 93 56 02 	sts	0x0256, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d984:	64 eb       	ldi	r22, 0xB4	; 180
    d986:	79 e6       	ldi	r23, 0x69	; 105
    d988:	8c e0       	ldi	r24, 0x0C	; 12
    d98a:	90 e0       	ldi	r25, 0x00	; 0
    d98c:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d990:	90 93 55 02 	sts	0x0255, r25
    d994:	80 93 54 02 	sts	0x0254, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d998:	64 eb       	ldi	r22, 0xB4	; 180
    d99a:	79 e6       	ldi	r23, 0x69	; 105
    d99c:	8e e0       	ldi	r24, 0x0E	; 14
    d99e:	90 e0       	ldi	r25, 0x00	; 0
    d9a0:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d9a4:	90 93 53 02 	sts	0x0253, r25
    d9a8:	80 93 52 02 	sts	0x0252, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d9ac:	64 eb       	ldi	r22, 0xB4	; 180
    d9ae:	79 e6       	ldi	r23, 0x69	; 105
    d9b0:	80 e1       	ldi	r24, 0x10	; 16
    d9b2:	90 e0       	ldi	r25, 0x00	; 0
    d9b4:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d9b8:	90 93 4f 02 	sts	0x024F, r25
    d9bc:	80 93 4e 02 	sts	0x024E, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d9c0:	40 91 52 02 	lds	r20, 0x0252
    d9c4:	60 91 54 02 	lds	r22, 0x0254
    d9c8:	80 91 56 02 	lds	r24, 0x0256
    d9cc:	0e 94 90 73 	call	0xe720	; 0xe720 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d9d0:	80 91 4e 02 	lds	r24, 0x024E
    d9d4:	0e 94 5c 73 	call	0xe6b8	; 0xe6b8 <BACKLIGHT_SetIntensity>
	TIMING_RemoveEvent( splashScreenEvent );
	MEM_FREE( splashScreenEvent );

	DELAY_MS(500);
*/
	LCD_ClrBox(0,0,128,64);
    d9d8:	20 e4       	ldi	r18, 0x40	; 64
    d9da:	40 e8       	ldi	r20, 0x80	; 128
    d9dc:	60 e0       	ldi	r22, 0x00	; 0
    d9de:	86 2f       	mov	r24, r22
    d9e0:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <LCD_ClrBox>
//	LcdContrast();
//}

	while (1)
 	{
		if (urx_recv) 
    d9e4:	80 91 a0 02 	lds	r24, 0x02A0
    d9e8:	88 23       	and	r24, r24
    d9ea:	e1 f3       	breq	.-8      	; 0xd9e4 <main+0x128>
		{	
			cli();
    d9ec:	f8 94       	cli
            urx_recv = 0;
    d9ee:	10 92 a0 02 	sts	0x02A0, r1
            ch = urx;
    d9f2:	80 91 9f 02 	lds	r24, 0x029F
            sei();
    d9f6:	78 94       	sei
            /* build a command line and execute commands when complete */
            recv_input(ch);
    d9f8:	0e 94 46 6a 	call	0xd48c	; 0xd48c <recv_input>
    d9fc:	f3 cf       	rjmp	.-26     	; 0xd9e4 <main+0x128>

0000d9fe <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d9fe:	6e e3       	ldi	r22, 0x3E	; 62
    da00:	78 e1       	ldi	r23, 0x18	; 24
    da02:	84 e0       	ldi	r24, 0x04	; 4
    da04:	90 e0       	ldi	r25, 0x00	; 0
    da06:	0e 94 9b 74 	call	0xe936	; 0xe936 <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    da0a:	25 e3       	ldi	r18, 0x35	; 53
    da0c:	33 e0       	ldi	r19, 0x03	; 3
    da0e:	40 e1       	ldi	r20, 0x10	; 16
    da10:	50 e0       	ldi	r21, 0x00	; 0
    da12:	ba 01       	movw	r22, r20
    da14:	80 e0       	ldi	r24, 0x00	; 0
    da16:	90 e0       	ldi	r25, 0x00	; 0
    da18:	0e 94 a4 74 	call	0xe948	; 0xe948 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    da1c:	27 e3       	ldi	r18, 0x37	; 55
    da1e:	34 e0       	ldi	r19, 0x04	; 4
    da20:	40 e2       	ldi	r20, 0x20	; 32
    da22:	50 e0       	ldi	r21, 0x00	; 0
    da24:	ba 01       	movw	r22, r20
    da26:	81 e0       	ldi	r24, 0x01	; 1
    da28:	90 e0       	ldi	r25, 0x00	; 0
    da2a:	0e 94 a4 74 	call	0xe948	; 0xe948 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    da2e:	2b e3       	ldi	r18, 0x3B	; 59
    da30:	38 e0       	ldi	r19, 0x08	; 8
    da32:	40 e1       	ldi	r20, 0x10	; 16
    da34:	50 e0       	ldi	r21, 0x00	; 0
    da36:	60 e4       	ldi	r22, 0x40	; 64
    da38:	70 e0       	ldi	r23, 0x00	; 0
    da3a:	82 e0       	ldi	r24, 0x02	; 2
    da3c:	90 e0       	ldi	r25, 0x00	; 0
    da3e:	0e 94 a4 74 	call	0xe948	; 0xe948 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    da42:	2d e3       	ldi	r18, 0x3D	; 61
    da44:	3c e0       	ldi	r19, 0x0C	; 12
    da46:	43 e0       	ldi	r20, 0x03	; 3
    da48:	50 e0       	ldi	r21, 0x00	; 0
    da4a:	60 e0       	ldi	r22, 0x00	; 0
    da4c:	74 e0       	ldi	r23, 0x04	; 4
    da4e:	ca 01       	movw	r24, r20
    da50:	0e 94 a4 74 	call	0xe948	; 0xe948 <MEMBLOCK_InitBag>
    da54:	08 95       	ret

0000da56 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    da56:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    da58:	e8 2f       	mov	r30, r24
    da5a:	ff 27       	eor	r31, r31
    da5c:	ee 0f       	add	r30, r30
    da5e:	ff 1f       	adc	r31, r31
    da60:	e4 58       	subi	r30, 0x84	; 132
    da62:	f8 43       	sbci	r31, 0x38	; 56
    da64:	85 91       	lpm	r24, Z+
    da66:	94 91       	lpm	r25, Z+
    da68:	bc 01       	movw	r22, r24
    da6a:	c9 01       	movw	r24, r18
    da6c:	0e 94 24 7a 	call	0xf448	; 0xf448 <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    da70:	8d ec       	ldi	r24, 0xCD	; 205
    da72:	97 e0       	ldi	r25, 0x07	; 7
    da74:	a7 e0       	ldi	r26, 0x07	; 7
    da76:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    da78:	01 97       	sbiw	r24, 0x01	; 1
    da7a:	a1 09       	sbc	r26, r1
    da7c:	b1 09       	sbc	r27, r1
    da7e:	00 00       	nop
    da80:	01 f0       	breq	.+0      	; 0xda82 <SONG_PlayTune+0x2c>
    da82:	d1 f7       	brne	.-12     	; 0xda78 <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    da84:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    da86:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    da88:	0e 94 15 7a 	call	0xf42a	; 0xf42a <SONG_StopTune>
    da8c:	08 95       	ret

0000da8e <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    da8e:	cf 92       	push	r12
    da90:	df 92       	push	r13
    da92:	ef 92       	push	r14
    da94:	ff 92       	push	r15
    da96:	0f 93       	push	r16
    da98:	1f 93       	push	r17
    da9a:	cf 93       	push	r28
    da9c:	df 93       	push	r29
    da9e:	cd b7       	in	r28, 0x3d	; 61
    daa0:	de b7       	in	r29, 0x3e	; 62
    daa2:	2e 97       	sbiw	r28, 0x0e	; 14
    daa4:	0f b6       	in	r0, 0x3f	; 63
    daa6:	f8 94       	cli
    daa8:	de bf       	out	0x3e, r29	; 62
    daaa:	0f be       	out	0x3f, r0	; 63
    daac:	cd bf       	out	0x3d, r28	; 61
    daae:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    dab0:	88 e2       	ldi	r24, 0x28	; 40
    dab2:	90 e0       	ldi	r25, 0x00	; 0
    dab4:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    dab8:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    daba:	80 e3       	ldi	r24, 0x30	; 48
    dabc:	90 e0       	ldi	r25, 0x00	; 0
    dabe:	0e 94 e7 74 	call	0xe9ce	; 0xe9ce <MEMBLOCK_Allocate>
    dac2:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    dac4:	48 e2       	ldi	r20, 0x28	; 40
    dac6:	b7 01       	movw	r22, r14
    dac8:	ce 01       	movw	r24, r28
    daca:	01 96       	adiw	r24, 0x01	; 1
    dacc:	0e 94 36 74 	call	0xe86c	; 0xe86c <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    dad0:	be 01       	movw	r22, r28
    dad2:	6f 5f       	subi	r22, 0xFF	; 255
    dad4:	7f 4f       	sbci	r23, 0xFF	; 255
    dad6:	80 2f       	mov	r24, r16
    dad8:	0e 94 2b 6d 	call	0xda56	; 0xda56 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    dadc:	c7 01       	movw	r24, r14
    dade:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    dae2:	c6 01       	movw	r24, r12
    dae4:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <MEMBLOCK_Free>
    dae8:	2e 96       	adiw	r28, 0x0e	; 14
    daea:	0f b6       	in	r0, 0x3f	; 63
    daec:	f8 94       	cli
    daee:	de bf       	out	0x3e, r29	; 62
    daf0:	0f be       	out	0x3f, r0	; 63
    daf2:	cd bf       	out	0x3d, r28	; 61
    daf4:	df 91       	pop	r29
    daf6:	cf 91       	pop	r28
    daf8:	1f 91       	pop	r17
    dafa:	0f 91       	pop	r16
    dafc:	ff 90       	pop	r15
    dafe:	ef 90       	pop	r14
    db00:	df 90       	pop	r13
    db02:	cf 90       	pop	r12
    db04:	08 95       	ret

0000db06 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    db06:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    db08:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    db0a:	85 ef       	ldi	r24, 0xF5	; 245
    db0c:	97 e6       	ldi	r25, 0x67	; 103
    db0e:	a1 e0       	ldi	r26, 0x01	; 1
    db10:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    db12:	01 97       	sbiw	r24, 0x01	; 1
    db14:	a1 09       	sbc	r26, r1
    db16:	b1 09       	sbc	r27, r1
    db18:	00 00       	nop
    db1a:	01 f0       	breq	.+0      	; 0xdb1c <S6B1713_HardReset+0x16>
    db1c:	d1 f7       	brne	.-12     	; 0xdb12 <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    db1e:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    db20:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    db22:	41 9a       	sbi	0x08, 1	; 8
    db24:	08 95       	ret

0000db26 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    db26:	0e 94 83 6d 	call	0xdb06	; 0xdb06 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    db2a:	87 e8       	ldi	r24, 0x87	; 135
    db2c:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    db30:	80 e8       	ldi	r24, 0x80	; 128
    db32:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    db36:	38 9a       	sbi	0x07, 0	; 7
    db38:	08 95       	ret

0000db3a <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    db3a:	40 98       	cbi	0x08, 0	; 8
    db3c:	8f ea       	ldi	r24, 0xAF	; 175
    db3e:	80 93 00 80 	sts	0x8000, r24
    db42:	08 95       	ret

0000db44 <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    db44:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    db46:	40 98       	cbi	0x08, 0	; 8
    db48:	80 64       	ori	r24, 0x40	; 64
    db4a:	80 93 00 80 	sts	0x8000, r24
    db4e:	08 95       	ret

0000db50 <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    db50:	98 2f       	mov	r25, r24
    db52:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    db54:	40 98       	cbi	0x08, 0	; 8
    db56:	81 e8       	ldi	r24, 0x81	; 129
    db58:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    db5c:	40 98       	cbi	0x08, 0	; 8
    db5e:	90 93 00 80 	sts	0x8000, r25
    db62:	08 95       	ret

0000db64 <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    db64:	40 98       	cbi	0x08, 0	; 8
    db66:	80 ea       	ldi	r24, 0xA0	; 160
    db68:	80 93 00 80 	sts	0x8000, r24
    db6c:	08 95       	ret

0000db6e <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    db6e:	40 98       	cbi	0x08, 0	; 8
    db70:	83 ea       	ldi	r24, 0xA3	; 163
    db72:	80 93 00 80 	sts	0x8000, r24
    db76:	08 95       	ret

0000db78 <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    db78:	40 98       	cbi	0x08, 0	; 8
    db7a:	80 ec       	ldi	r24, 0xC0	; 192
    db7c:	80 93 00 80 	sts	0x8000, r24
    db80:	08 95       	ret

0000db82 <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    db82:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    db84:	40 98       	cbi	0x08, 0	; 8
    db86:	88 62       	ori	r24, 0x28	; 40
    db88:	80 93 00 80 	sts	0x8000, r24
    db8c:	08 95       	ret

0000db8e <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    db8e:	40 98       	cbi	0x08, 0	; 8
    db90:	87 70       	andi	r24, 0x07	; 7
    db92:	80 62       	ori	r24, 0x20	; 32
    db94:	80 93 00 80 	sts	0x8000, r24
    db98:	08 95       	ret

0000db9a <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    db9a:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    db9c:	90 e0       	ldi	r25, 0x00	; 0
    db9e:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dba0:	89 2f       	mov	r24, r25
    dba2:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dba4:	40 98       	cbi	0x08, 0	; 8
    dba6:	80 6b       	ori	r24, 0xB0	; 176
    dba8:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dbac:	40 98       	cbi	0x08, 0	; 8
    dbae:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dbb2:	40 98       	cbi	0x08, 0	; 8
    dbb4:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    dbb8:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    dbba:	40 9a       	sbi	0x08, 0	; 8
    dbbc:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    dbc0:	81 50       	subi	r24, 0x01	; 1
    dbc2:	d9 f7       	brne	.-10     	; 0xdbba <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    dbc4:	9f 5f       	subi	r25, 0xFF	; 255
    dbc6:	98 30       	cpi	r25, 0x08	; 8
    dbc8:	58 f3       	brcs	.-42     	; 0xdba0 <LCD_SetScreen+0x6>
    dbca:	08 95       	ret

0000dbcc <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    dbcc:	1f 93       	push	r17
    dbce:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    dbd0:	87 70       	andi	r24, 0x07	; 7
    dbd2:	88 0f       	add	r24, r24
    dbd4:	88 0f       	add	r24, r24
    dbd6:	88 0f       	add	r24, r24
    dbd8:	86 0f       	add	r24, r22
    dbda:	0e 94 a2 6d 	call	0xdb44	; 0xdb44 <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    dbde:	10 93 69 02 	sts	0x0269, r17
    dbe2:	1f 91       	pop	r17
    dbe4:	08 95       	ret

0000dbe6 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    dbe6:	ef 92       	push	r14
    dbe8:	ff 92       	push	r15
    dbea:	0f 93       	push	r16
    dbec:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    dbee:	0e 94 93 6d 	call	0xdb26	; 0xdb26 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    dbf2:	84 e0       	ldi	r24, 0x04	; 4
    dbf4:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    dbf8:	85 e6       	ldi	r24, 0x65	; 101
    dbfa:	e8 2e       	mov	r14, r24
    dbfc:	8e e0       	ldi	r24, 0x0E	; 14
    dbfe:	f8 2e       	mov	r15, r24
    dc00:	01 2d       	mov	r16, r1
    dc02:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    dc04:	c7 01       	movw	r24, r14
    dc06:	01 97       	sbiw	r24, 0x01	; 1
    dc08:	f1 f7       	brne	.-4      	; 0xdc06 <LCD_Init+0x20>
    dc0a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    dc0c:	00 c0       	rjmp	.+0      	; 0xdc0e <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    dc0e:	86 e0       	ldi	r24, 0x06	; 6
    dc10:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    dc14:	c7 01       	movw	r24, r14
    dc16:	01 97       	sbiw	r24, 0x01	; 1
    dc18:	f1 f7       	brne	.-4      	; 0xdc16 <LCD_Init+0x30>
    dc1a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    dc1c:	00 c0       	rjmp	.+0      	; 0xdc1e <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    dc1e:	87 e0       	ldi	r24, 0x07	; 7
    dc20:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    dc24:	86 e0       	ldi	r24, 0x06	; 6
    dc26:	90 e0       	ldi	r25, 0x00	; 0
    dc28:	0e 94 c7 6d 	call	0xdb8e	; 0xdb8e <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    dc2c:	84 e0       	ldi	r24, 0x04	; 4
    dc2e:	0e 94 a8 6d 	call	0xdb50	; 0xdb50 <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    dc32:	c7 01       	movw	r24, r14
    dc34:	01 97       	sbiw	r24, 0x01	; 1
    dc36:	f1 f7       	brne	.-4      	; 0xdc34 <LCD_Init+0x4e>
    dc38:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    dc3a:	00 c0       	rjmp	.+0      	; 0xdc3c <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    dc3c:	0e 94 b7 6d 	call	0xdb6e	; 0xdb6e <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    dc40:	0e 94 b2 6d 	call	0xdb64	; 0xdb64 <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    dc44:	0e 94 bc 6d 	call	0xdb78	; 0xdb78 <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    dc48:	60 e0       	ldi	r22, 0x00	; 0
    dc4a:	86 2f       	mov	r24, r22
    dc4c:	0e 94 e6 6d 	call	0xdbcc	; 0xdbcc <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    dc50:	80 e0       	ldi	r24, 0x00	; 0
    dc52:	0e 94 cd 6d 	call	0xdb9a	; 0xdb9a <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    dc56:	0e 94 9d 6d 	call	0xdb3a	; 0xdb3a <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    dc5a:	85 e5       	ldi	r24, 0x55	; 85
    dc5c:	0e 94 cd 6d 	call	0xdb9a	; 0xdb9a <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    dc60:	80 e0       	ldi	r24, 0x00	; 0
    dc62:	0e 94 cd 6d 	call	0xdb9a	; 0xdb9a <LCD_SetScreen>
    dc66:	1f 91       	pop	r17
    dc68:	0f 91       	pop	r16
    dc6a:	ff 90       	pop	r15
    dc6c:	ef 90       	pop	r14
    dc6e:	08 95       	ret

0000dc70 <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    dc70:	cf 93       	push	r28
    dc72:	df 93       	push	r29
    dc74:	cd b7       	in	r28, 0x3d	; 61
    dc76:	de b7       	in	r29, 0x3e	; 62
    dc78:	21 97       	sbiw	r28, 0x01	; 1
    dc7a:	0f b6       	in	r0, 0x3f	; 63
    dc7c:	f8 94       	cli
    dc7e:	de bf       	out	0x3e, r29	; 62
    dc80:	0f be       	out	0x3f, r0	; 63
    dc82:	cd bf       	out	0x3d, r28	; 61
    dc84:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dc86:	40 98       	cbi	0x08, 0	; 8
    dc88:	80 ee       	ldi	r24, 0xE0	; 224
    dc8a:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dc8e:	86 2f       	mov	r24, r22
    dc90:	86 95       	lsr	r24
    dc92:	86 95       	lsr	r24
    dc94:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc96:	40 98       	cbi	0x08, 0	; 8
    dc98:	80 6b       	ori	r24, 0xB0	; 176
    dc9a:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dc9e:	82 2f       	mov	r24, r18
    dca0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dca2:	40 98       	cbi	0x08, 0	; 8
    dca4:	99 27       	eor	r25, r25
    dca6:	44 e0       	ldi	r20, 0x04	; 4
    dca8:	96 95       	lsr	r25
    dcaa:	87 95       	ror	r24
    dcac:	4a 95       	dec	r20
    dcae:	e1 f7       	brne	.-8      	; 0xdca8 <LCD_SetPixel+0x38>
    dcb0:	80 61       	ori	r24, 0x10	; 16
    dcb2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dcb6:	40 98       	cbi	0x08, 0	; 8
    dcb8:	2f 70       	andi	r18, 0x0F	; 15
    dcba:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    dcbe:	40 9a       	sbi	0x08, 0	; 8
    dcc0:	80 91 00 81 	lds	r24, 0x8100
    dcc4:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    dcc6:	40 9a       	sbi	0x08, 0	; 8
    dcc8:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    dccc:	40 9a       	sbi	0x08, 0	; 8
    dcce:	26 2f       	mov	r18, r22
    dcd0:	33 27       	eor	r19, r19
    dcd2:	27 70       	andi	r18, 0x07	; 7
    dcd4:	30 70       	andi	r19, 0x00	; 0
    dcd6:	81 e0       	ldi	r24, 0x01	; 1
    dcd8:	90 e0       	ldi	r25, 0x00	; 0
    dcda:	02 c0       	rjmp	.+4      	; 0xdce0 <LCD_SetPixel+0x70>
    dcdc:	88 0f       	add	r24, r24
    dcde:	99 1f       	adc	r25, r25
    dce0:	2a 95       	dec	r18
    dce2:	e2 f7       	brpl	.-8      	; 0xdcdc <LCD_SetPixel+0x6c>
    dce4:	48 2b       	or	r20, r24
    dce6:	40 93 00 81 	sts	0x8100, r20
    dcea:	21 96       	adiw	r28, 0x01	; 1
    dcec:	0f b6       	in	r0, 0x3f	; 63
    dcee:	f8 94       	cli
    dcf0:	de bf       	out	0x3e, r29	; 62
    dcf2:	0f be       	out	0x3f, r0	; 63
    dcf4:	cd bf       	out	0x3d, r28	; 61
    dcf6:	df 91       	pop	r29
    dcf8:	cf 91       	pop	r28
    dcfa:	08 95       	ret

0000dcfc <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    dcfc:	cf 93       	push	r28
    dcfe:	df 93       	push	r29
    dd00:	cd b7       	in	r28, 0x3d	; 61
    dd02:	de b7       	in	r29, 0x3e	; 62
    dd04:	21 97       	sbiw	r28, 0x01	; 1
    dd06:	0f b6       	in	r0, 0x3f	; 63
    dd08:	f8 94       	cli
    dd0a:	de bf       	out	0x3e, r29	; 62
    dd0c:	0f be       	out	0x3f, r0	; 63
    dd0e:	cd bf       	out	0x3d, r28	; 61
    dd10:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dd12:	40 98       	cbi	0x08, 0	; 8
    dd14:	80 ee       	ldi	r24, 0xE0	; 224
    dd16:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    dd1a:	86 2f       	mov	r24, r22
    dd1c:	86 95       	lsr	r24
    dd1e:	86 95       	lsr	r24
    dd20:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dd22:	40 98       	cbi	0x08, 0	; 8
    dd24:	80 6b       	ori	r24, 0xB0	; 176
    dd26:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dd2a:	82 2f       	mov	r24, r18
    dd2c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dd2e:	40 98       	cbi	0x08, 0	; 8
    dd30:	99 27       	eor	r25, r25
    dd32:	54 e0       	ldi	r21, 0x04	; 4
    dd34:	96 95       	lsr	r25
    dd36:	87 95       	ror	r24
    dd38:	5a 95       	dec	r21
    dd3a:	e1 f7       	brne	.-8      	; 0xdd34 <LCD_ClrPixel+0x38>
    dd3c:	80 61       	ori	r24, 0x10	; 16
    dd3e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dd42:	40 98       	cbi	0x08, 0	; 8
    dd44:	2f 70       	andi	r18, 0x0F	; 15
    dd46:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    dd4a:	40 9a       	sbi	0x08, 0	; 8
    dd4c:	80 91 00 81 	lds	r24, 0x8100
    dd50:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    dd52:	40 9a       	sbi	0x08, 0	; 8
    dd54:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    dd58:	40 9a       	sbi	0x08, 0	; 8
    dd5a:	26 2f       	mov	r18, r22
    dd5c:	33 27       	eor	r19, r19
    dd5e:	27 70       	andi	r18, 0x07	; 7
    dd60:	30 70       	andi	r19, 0x00	; 0
    dd62:	81 e0       	ldi	r24, 0x01	; 1
    dd64:	90 e0       	ldi	r25, 0x00	; 0
    dd66:	02 c0       	rjmp	.+4      	; 0xdd6c <LCD_ClrPixel+0x70>
    dd68:	88 0f       	add	r24, r24
    dd6a:	99 1f       	adc	r25, r25
    dd6c:	2a 95       	dec	r18
    dd6e:	e2 f7       	brpl	.-8      	; 0xdd68 <LCD_ClrPixel+0x6c>
    dd70:	80 95       	com	r24
    dd72:	48 23       	and	r20, r24
    dd74:	40 93 00 81 	sts	0x8100, r20
    dd78:	21 96       	adiw	r28, 0x01	; 1
    dd7a:	0f b6       	in	r0, 0x3f	; 63
    dd7c:	f8 94       	cli
    dd7e:	de bf       	out	0x3e, r29	; 62
    dd80:	0f be       	out	0x3f, r0	; 63
    dd82:	cd bf       	out	0x3d, r28	; 61
    dd84:	df 91       	pop	r29
    dd86:	cf 91       	pop	r28
    dd88:	08 95       	ret

0000dd8a <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    dd8a:	cf 93       	push	r28
    dd8c:	df 93       	push	r29
    dd8e:	cd b7       	in	r28, 0x3d	; 61
    dd90:	de b7       	in	r29, 0x3e	; 62
    dd92:	21 97       	sbiw	r28, 0x01	; 1
    dd94:	0f b6       	in	r0, 0x3f	; 63
    dd96:	f8 94       	cli
    dd98:	de bf       	out	0x3e, r29	; 62
    dd9a:	0f be       	out	0x3f, r0	; 63
    dd9c:	cd bf       	out	0x3d, r28	; 61
    dd9e:	e8 2f       	mov	r30, r24
    dda0:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    dda2:	48 17       	cp	r20, r24
    dda4:	10 f4       	brcc	.+4      	; 0xddaa <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    dda6:	e4 2f       	mov	r30, r20
		x2 = temp;
    dda8:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    ddaa:	56 17       	cp	r21, r22
    ddac:	18 f4       	brcc	.+6      	; 0xddb4 <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    ddae:	86 2f       	mov	r24, r22
		y1 = y2;
    ddb0:	65 2f       	mov	r22, r21
		y2 = temp;
    ddb2:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    ddb4:	f6 2f       	mov	r31, r22
    ddb6:	f6 95       	lsr	r31
    ddb8:	f6 95       	lsr	r31
    ddba:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    ddbc:	75 2f       	mov	r23, r21
    ddbe:	76 95       	lsr	r23
    ddc0:	76 95       	lsr	r23
    ddc2:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    ddc4:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    ddc6:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    ddc8:	2f ef       	ldi	r18, 0xFF	; 255
    ddca:	30 e0       	ldi	r19, 0x00	; 0
    ddcc:	c9 01       	movw	r24, r18
    ddce:	02 c0       	rjmp	.+4      	; 0xddd4 <LCD_ClrBox+0x4a>
    ddd0:	88 0f       	add	r24, r24
    ddd2:	99 1f       	adc	r25, r25
    ddd4:	6a 95       	dec	r22
    ddd6:	e2 f7       	brpl	.-8      	; 0xddd0 <LCD_ClrBox+0x46>
    ddd8:	68 2f       	mov	r22, r24
    ddda:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dddc:	87 e0       	ldi	r24, 0x07	; 7
    ddde:	90 e0       	ldi	r25, 0x00	; 0
    dde0:	85 1b       	sub	r24, r21
    dde2:	91 09       	sbc	r25, r1
    dde4:	02 c0       	rjmp	.+4      	; 0xddea <LCD_ClrBox+0x60>
    dde6:	35 95       	asr	r19
    dde8:	27 95       	ror	r18
    ddea:	8a 95       	dec	r24
    ddec:	e2 f7       	brpl	.-8      	; 0xdde6 <LCD_ClrBox+0x5c>
    ddee:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    ddf0:	4e 1b       	sub	r20, r30
    ddf2:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    ddf4:	40 98       	cbi	0x08, 0	; 8
    ddf6:	80 ee       	ldi	r24, 0xE0	; 224
    ddf8:	80 93 00 80 	sts	0x8000, r24
    ddfc:	ae 2f       	mov	r26, r30
    ddfe:	af 77       	andi	r26, 0x7F	; 127
    de00:	be 2f       	mov	r27, r30
    de02:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    de04:	f7 17       	cp	r31, r23
    de06:	11 f5       	brne	.+68     	; 0xde4c <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    de08:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de0a:	40 98       	cbi	0x08, 0	; 8
    de0c:	70 6b       	ori	r23, 0xB0	; 176
    de0e:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de12:	40 98       	cbi	0x08, 0	; 8
    de14:	8a 2f       	mov	r24, r26
    de16:	99 27       	eor	r25, r25
    de18:	54 e0       	ldi	r21, 0x04	; 4
    de1a:	96 95       	lsr	r25
    de1c:	87 95       	ror	r24
    de1e:	5a 95       	dec	r21
    de20:	e1 f7       	brne	.-8      	; 0xde1a <LCD_ClrBox+0x90>
    de22:	80 61       	ori	r24, 0x10	; 16
    de24:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de28:	40 98       	cbi	0x08, 0	; 8
    de2a:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    de2e:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    de30:	40 9a       	sbi	0x08, 0	; 8
    de32:	80 91 00 81 	lds	r24, 0x8100
    de36:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    de38:	40 9a       	sbi	0x08, 0	; 8
    de3a:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    de3e:	40 9a       	sbi	0x08, 0	; 8
    de40:	82 23       	and	r24, r18
    de42:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    de46:	31 50       	subi	r19, 0x01	; 1
    de48:	99 f7       	brne	.-26     	; 0xde30 <LCD_ClrBox+0xa6>
    de4a:	6b c0       	rjmp	.+214    	; 0xdf22 <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    de4c:	57 2f       	mov	r21, r23
    de4e:	5f 1b       	sub	r21, r31
    de50:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    de52:	40 98       	cbi	0x08, 0	; 8
    de54:	8f 2f       	mov	r24, r31
    de56:	80 6b       	ori	r24, 0xB0	; 176
    de58:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    de5c:	40 98       	cbi	0x08, 0	; 8
    de5e:	8a 2f       	mov	r24, r26
    de60:	99 27       	eor	r25, r25
    de62:	34 e0       	ldi	r19, 0x04	; 4
    de64:	96 95       	lsr	r25
    de66:	87 95       	ror	r24
    de68:	3a 95       	dec	r19
    de6a:	e1 f7       	brne	.-8      	; 0xde64 <LCD_ClrBox+0xda>
    de6c:	80 61       	ori	r24, 0x10	; 16
    de6e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    de72:	40 98       	cbi	0x08, 0	; 8
    de74:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    de78:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    de7a:	40 9a       	sbi	0x08, 0	; 8
    de7c:	80 91 00 81 	lds	r24, 0x8100
    de80:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    de82:	40 9a       	sbi	0x08, 0	; 8
    de84:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    de88:	40 9a       	sbi	0x08, 0	; 8
    de8a:	86 23       	and	r24, r22
    de8c:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    de90:	31 50       	subi	r19, 0x01	; 1
    de92:	99 f7       	brne	.-26     	; 0xde7a <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    de94:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    de96:	85 2f       	mov	r24, r21
    de98:	51 50       	subi	r21, 0x01	; 1
    de9a:	18 16       	cp	r1, r24
    de9c:	04 f5       	brge	.+64     	; 0xdede <LCD_ClrBox+0x154>
    de9e:	8a 2f       	mov	r24, r26
    dea0:	99 27       	eor	r25, r25
    dea2:	64 e0       	ldi	r22, 0x04	; 4
    dea4:	96 95       	lsr	r25
    dea6:	87 95       	ror	r24
    dea8:	6a 95       	dec	r22
    deaa:	e1 f7       	brne	.-8      	; 0xdea4 <LCD_ClrBox+0x11a>
    deac:	98 2f       	mov	r25, r24
    deae:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    deb0:	8f 2f       	mov	r24, r31
    deb2:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    deb4:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    deb6:	40 98       	cbi	0x08, 0	; 8
    deb8:	80 6b       	ori	r24, 0xB0	; 176
    deba:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    debe:	40 98       	cbi	0x08, 0	; 8
    dec0:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dec4:	40 98       	cbi	0x08, 0	; 8
    dec6:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    deca:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    decc:	40 9a       	sbi	0x08, 0	; 8
    dece:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    ded2:	31 50       	subi	r19, 0x01	; 1
    ded4:	d9 f7       	brne	.-10     	; 0xdecc <LCD_ClrBox+0x142>
    ded6:	85 2f       	mov	r24, r21
    ded8:	51 50       	subi	r21, 0x01	; 1
    deda:	18 16       	cp	r1, r24
    dedc:	4c f3       	brlt	.-46     	; 0xdeb0 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dede:	40 98       	cbi	0x08, 0	; 8
    dee0:	70 6b       	ori	r23, 0xB0	; 176
    dee2:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dee6:	8e 2f       	mov	r24, r30
    dee8:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    deea:	40 98       	cbi	0x08, 0	; 8
    deec:	99 27       	eor	r25, r25
    deee:	54 e0       	ldi	r21, 0x04	; 4
    def0:	96 95       	lsr	r25
    def2:	87 95       	ror	r24
    def4:	5a 95       	dec	r21
    def6:	e1 f7       	brne	.-8      	; 0xdef0 <LCD_ClrBox+0x166>
    def8:	80 61       	ori	r24, 0x10	; 16
    defa:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    defe:	40 98       	cbi	0x08, 0	; 8
    df00:	ef 70       	andi	r30, 0x0F	; 15
    df02:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    df06:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    df08:	40 9a       	sbi	0x08, 0	; 8
    df0a:	80 91 00 81 	lds	r24, 0x8100
    df0e:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    df10:	40 9a       	sbi	0x08, 0	; 8
    df12:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    df16:	40 9a       	sbi	0x08, 0	; 8
    df18:	82 23       	and	r24, r18
    df1a:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    df1e:	31 50       	subi	r19, 0x01	; 1
    df20:	99 f7       	brne	.-26     	; 0xdf08 <LCD_ClrBox+0x17e>
    df22:	21 96       	adiw	r28, 0x01	; 1
    df24:	0f b6       	in	r0, 0x3f	; 63
    df26:	f8 94       	cli
    df28:	de bf       	out	0x3e, r29	; 62
    df2a:	0f be       	out	0x3f, r0	; 63
    df2c:	cd bf       	out	0x3d, r28	; 61
    df2e:	df 91       	pop	r29
    df30:	cf 91       	pop	r28
    df32:	08 95       	ret

0000df34 <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    df34:	cf 93       	push	r28
    df36:	df 93       	push	r29
    df38:	cd b7       	in	r28, 0x3d	; 61
    df3a:	de b7       	in	r29, 0x3e	; 62
    df3c:	21 97       	sbiw	r28, 0x01	; 1
    df3e:	0f b6       	in	r0, 0x3f	; 63
    df40:	f8 94       	cli
    df42:	de bf       	out	0x3e, r29	; 62
    df44:	0f be       	out	0x3f, r0	; 63
    df46:	cd bf       	out	0x3d, r28	; 61
    df48:	36 2f       	mov	r19, r22
    df4a:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    df4c:	40 98       	cbi	0x08, 0	; 8
    df4e:	90 ee       	ldi	r25, 0xE0	; 224
    df50:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    df54:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    df56:	40 98       	cbi	0x08, 0	; 8
    df58:	30 6b       	ori	r19, 0xB0	; 176
    df5a:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    df5e:	94 2f       	mov	r25, r20
    df60:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    df62:	40 98       	cbi	0x08, 0	; 8
    df64:	29 2f       	mov	r18, r25
    df66:	33 27       	eor	r19, r19
    df68:	e4 e0       	ldi	r30, 0x04	; 4
    df6a:	36 95       	lsr	r19
    df6c:	27 95       	ror	r18
    df6e:	ea 95       	dec	r30
    df70:	e1 f7       	brne	.-8      	; 0xdf6a <LCD_ClrPage+0x36>
    df72:	92 2f       	mov	r25, r18
    df74:	90 61       	ori	r25, 0x10	; 16
    df76:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    df7a:	40 98       	cbi	0x08, 0	; 8
    df7c:	4f 70       	andi	r20, 0x0F	; 15
    df7e:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    df82:	98 2f       	mov	r25, r24
    df84:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    df86:	40 9a       	sbi	0x08, 0	; 8
    df88:	80 91 00 81 	lds	r24, 0x8100
    df8c:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    df8e:	40 9a       	sbi	0x08, 0	; 8
    df90:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    df94:	40 9a       	sbi	0x08, 0	; 8
    df96:	89 23       	and	r24, r25
    df98:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    df9c:	51 50       	subi	r21, 0x01	; 1
    df9e:	99 f7       	brne	.-26     	; 0xdf86 <LCD_ClrPage+0x52>
    dfa0:	21 96       	adiw	r28, 0x01	; 1
    dfa2:	0f b6       	in	r0, 0x3f	; 63
    dfa4:	f8 94       	cli
    dfa6:	de bf       	out	0x3e, r29	; 62
    dfa8:	0f be       	out	0x3f, r0	; 63
    dfaa:	cd bf       	out	0x3d, r28	; 61
    dfac:	df 91       	pop	r29
    dfae:	cf 91       	pop	r28
    dfb0:	08 95       	ret

0000dfb2 <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    dfb2:	fc 01       	movw	r30, r24
    dfb4:	86 2f       	mov	r24, r22
    dfb6:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dfb8:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dfba:	40 98       	cbi	0x08, 0	; 8
    dfbc:	80 6b       	ori	r24, 0xB0	; 176
    dfbe:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dfc2:	84 2f       	mov	r24, r20
    dfc4:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dfc6:	40 98       	cbi	0x08, 0	; 8
    dfc8:	99 27       	eor	r25, r25
    dfca:	44 e0       	ldi	r20, 0x04	; 4
    dfcc:	96 95       	lsr	r25
    dfce:	87 95       	ror	r24
    dfd0:	4a 95       	dec	r20
    dfd2:	e1 f7       	brne	.-8      	; 0xdfcc <LCD_WritePage_F+0x1a>
    dfd4:	80 61       	ori	r24, 0x10	; 16
    dfd6:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dfda:	40 98       	cbi	0x08, 0	; 8
    dfdc:	3f 70       	andi	r19, 0x0F	; 15
    dfde:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    dfe2:	40 9a       	sbi	0x08, 0	; 8
    dfe4:	84 91       	lpm	r24, Z+
    dfe6:	80 93 00 81 	sts	0x8100, r24
		data++;
    dfea:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    dfec:	21 50       	subi	r18, 0x01	; 1
    dfee:	c9 f7       	brne	.-14     	; 0xdfe2 <LCD_WritePage_F+0x30>
    dff0:	08 95       	ret

0000dff2 <LCD_UpdateMinVolt>:
	LCD_UpdateBigNumbers(soc);
	
}

void LCD_UpdateMinVolt(uint16_t volt)
{
    dff2:	0f 93       	push	r16
    dff4:	1f 93       	push	r17
    dff6:	cf 93       	push	r28
    dff8:	df 93       	push	r29
    dffa:	cd b7       	in	r28, 0x3d	; 61
    dffc:	de b7       	in	r29, 0x3e	; 62
    dffe:	61 97       	sbiw	r28, 0x11	; 17
    e000:	0f b6       	in	r0, 0x3f	; 63
    e002:	f8 94       	cli
    e004:	de bf       	out	0x3e, r29	; 62
    e006:	0f be       	out	0x3f, r0	; 63
    e008:	cd bf       	out	0x3d, r28	; 61
    e00a:	8c 01       	movw	r16, r24
	// x = pixels ?
	char buffer [sizeof(uint16_t)*8+1];
	int charw=6;
	int startpos=60;
	
	TERMFONT_DisplayString("Min Volt:", 7, 0);
    e00c:	40 e0       	ldi	r20, 0x00	; 0
    e00e:	50 e0       	ldi	r21, 0x00	; 0
    e010:	67 e0       	ldi	r22, 0x07	; 7
    e012:	70 e0       	ldi	r23, 0x00	; 0
    e014:	8f e2       	ldi	r24, 0x2F	; 47
    e016:	92 e0       	ldi	r25, 0x02	; 2
    e018:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
	
	// convert to ascii
    itoa(volt,buffer,10);
    e01c:	4a e0       	ldi	r20, 0x0A	; 10
    e01e:	50 e0       	ldi	r21, 0x00	; 0
    e020:	be 01       	movw	r22, r28
    e022:	6f 5f       	subi	r22, 0xFF	; 255
    e024:	7f 4f       	sbci	r23, 0xFF	; 255
    e026:	c8 01       	movw	r24, r16
    e028:	0e 94 83 69 	call	0xd306	; 0xd306 <itoa>

	//TERMFONT_DisplayChar(buffer[0], 7, startpos );
	
	if (volt<10)
    e02c:	0a 30       	cpi	r16, 0x0A	; 10
    e02e:	11 05       	cpc	r17, r1
    e030:	a0 f4       	brcc	.+40     	; 0xe05a <LCD_UpdateMinVolt+0x68>
	{
		// leading zero
		TERMFONT_DisplayChar('0', 7, startpos );
    e032:	4c e3       	ldi	r20, 0x3C	; 60
    e034:	50 e0       	ldi	r21, 0x00	; 0
    e036:	67 e0       	ldi	r22, 0x07	; 7
    e038:	70 e0       	ldi	r23, 0x00	; 0
    e03a:	80 e3       	ldi	r24, 0x30	; 48
    e03c:	90 e0       	ldi	r25, 0x00	; 0
    e03e:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    e042:	42 e4       	ldi	r20, 0x42	; 66
    e044:	50 e0       	ldi	r21, 0x00	; 0
    e046:	67 e0       	ldi	r22, 0x07	; 7
    e048:	70 e0       	ldi	r23, 0x00	; 0
    e04a:	8e e2       	ldi	r24, 0x2E	; 46
    e04c:	90 e0       	ldi	r25, 0x00	; 0
    e04e:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[0], 7, startpos+2*charw );
    e052:	89 81       	ldd	r24, Y+1	; 0x01
    e054:	48 e4       	ldi	r20, 0x48	; 72
    e056:	50 e0       	ldi	r21, 0x00	; 0
    e058:	1b c0       	rjmp	.+54     	; 0xe090 <LCD_UpdateMinVolt+0x9e>
	} else {
		TERMFONT_DisplayChar(buffer[0], 7, startpos );
    e05a:	89 81       	ldd	r24, Y+1	; 0x01
    e05c:	4c e3       	ldi	r20, 0x3C	; 60
    e05e:	50 e0       	ldi	r21, 0x00	; 0
    e060:	67 e0       	ldi	r22, 0x07	; 7
    e062:	70 e0       	ldi	r23, 0x00	; 0
    e064:	99 27       	eor	r25, r25
    e066:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    e06a:	42 e4       	ldi	r20, 0x42	; 66
    e06c:	50 e0       	ldi	r21, 0x00	; 0
    e06e:	67 e0       	ldi	r22, 0x07	; 7
    e070:	70 e0       	ldi	r23, 0x00	; 0
    e072:	8e e2       	ldi	r24, 0x2E	; 46
    e074:	90 e0       	ldi	r25, 0x00	; 0
    e076:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[1], 7, startpos+2*charw );
    e07a:	8a 81       	ldd	r24, Y+2	; 0x02
    e07c:	48 e4       	ldi	r20, 0x48	; 72
    e07e:	50 e0       	ldi	r21, 0x00	; 0
    e080:	67 e0       	ldi	r22, 0x07	; 7
    e082:	70 e0       	ldi	r23, 0x00	; 0
    e084:	99 27       	eor	r25, r25
    e086:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[2], 7, startpos+3*charw );
    e08a:	8b 81       	ldd	r24, Y+3	; 0x03
    e08c:	4e e4       	ldi	r20, 0x4E	; 78
    e08e:	50 e0       	ldi	r21, 0x00	; 0
    e090:	67 e0       	ldi	r22, 0x07	; 7
    e092:	70 e0       	ldi	r23, 0x00	; 0
    e094:	99 27       	eor	r25, r25
    e096:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
	}

	TERMFONT_DisplayString("V" , 7, startpos+4*charw );
    e09a:	44 e5       	ldi	r20, 0x54	; 84
    e09c:	50 e0       	ldi	r21, 0x00	; 0
    e09e:	67 e0       	ldi	r22, 0x07	; 7
    e0a0:	70 e0       	ldi	r23, 0x00	; 0
    e0a2:	89 e3       	ldi	r24, 0x39	; 57
    e0a4:	92 e0       	ldi	r25, 0x02	; 2
    e0a6:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
    e0aa:	61 96       	adiw	r28, 0x11	; 17
    e0ac:	0f b6       	in	r0, 0x3f	; 63
    e0ae:	f8 94       	cli
    e0b0:	de bf       	out	0x3e, r29	; 62
    e0b2:	0f be       	out	0x3f, r0	; 63
    e0b4:	cd bf       	out	0x3d, r28	; 61
    e0b6:	df 91       	pop	r29
    e0b8:	cf 91       	pop	r28
    e0ba:	1f 91       	pop	r17
    e0bc:	0f 91       	pop	r16
    e0be:	08 95       	ret

0000e0c0 <LCD_UpdateMaxTemp>:

}

void LCD_UpdateMaxTemp(uint8_t temp)
{
    e0c0:	1f 93       	push	r17
    e0c2:	cf 93       	push	r28
    e0c4:	df 93       	push	r29
    e0c6:	cd b7       	in	r28, 0x3d	; 61
    e0c8:	de b7       	in	r29, 0x3e	; 62
    e0ca:	29 97       	sbiw	r28, 0x09	; 9
    e0cc:	0f b6       	in	r0, 0x3f	; 63
    e0ce:	f8 94       	cli
    e0d0:	de bf       	out	0x3e, r29	; 62
    e0d2:	0f be       	out	0x3f, r0	; 63
    e0d4:	cd bf       	out	0x3d, r28	; 61
    e0d6:	18 2f       	mov	r17, r24
	char buffer [sizeof(uint8_t)*8+1];
    itoa(temp,buffer,10);
    e0d8:	4a e0       	ldi	r20, 0x0A	; 10
    e0da:	50 e0       	ldi	r21, 0x00	; 0
    e0dc:	be 01       	movw	r22, r28
    e0de:	6f 5f       	subi	r22, 0xFF	; 255
    e0e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e0e2:	99 27       	eor	r25, r25
    e0e4:	0e 94 83 69 	call	0xd306	; 0xd306 <itoa>
	
	TERMFONT_DisplayString( "Max Temp:", 5, 0 );
    e0e8:	40 e0       	ldi	r20, 0x00	; 0
    e0ea:	50 e0       	ldi	r21, 0x00	; 0
    e0ec:	65 e0       	ldi	r22, 0x05	; 5
    e0ee:	70 e0       	ldi	r23, 0x00	; 0
    e0f0:	8b e3       	ldi	r24, 0x3B	; 59
    e0f2:	92 e0       	ldi	r25, 0x02	; 2
    e0f4:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>

	if (temp<10)
    e0f8:	1a 30       	cpi	r17, 0x0A	; 10
    e0fa:	40 f4       	brcc	.+16     	; 0xe10c <LCD_UpdateMaxTemp+0x4c>
	{
		// erase old content
		TERMFONT_DisplayString("    ",5,66);
    e0fc:	42 e4       	ldi	r20, 0x42	; 66
    e0fe:	50 e0       	ldi	r21, 0x00	; 0
    e100:	65 e0       	ldi	r22, 0x05	; 5
    e102:	70 e0       	ldi	r23, 0x00	; 0
    e104:	85 e4       	ldi	r24, 0x45	; 69
    e106:	92 e0       	ldi	r25, 0x02	; 2
    e108:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
		TERMFONT_DisplayString(buffer,5,66);
	} else {
		TERMFONT_DisplayString( buffer, 5, 66 );
    e10c:	42 e4       	ldi	r20, 0x42	; 66
    e10e:	50 e0       	ldi	r21, 0x00	; 0
    e110:	65 e0       	ldi	r22, 0x05	; 5
    e112:	70 e0       	ldi	r23, 0x00	; 0
    e114:	ce 01       	movw	r24, r28
    e116:	01 96       	adiw	r24, 0x01	; 1
    e118:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
	}
	
	TERMFONT_DisplayString( "C", 5, 84 );
    e11c:	44 e5       	ldi	r20, 0x54	; 84
    e11e:	50 e0       	ldi	r21, 0x00	; 0
    e120:	65 e0       	ldi	r22, 0x05	; 5
    e122:	70 e0       	ldi	r23, 0x00	; 0
    e124:	8a e4       	ldi	r24, 0x4A	; 74
    e126:	92 e0       	ldi	r25, 0x02	; 2
    e128:	0e 94 04 79 	call	0xf208	; 0xf208 <TERMFONT_DisplayString>
    e12c:	29 96       	adiw	r28, 0x09	; 9
    e12e:	0f b6       	in	r0, 0x3f	; 63
    e130:	f8 94       	cli
    e132:	de bf       	out	0x3e, r29	; 62
    e134:	0f be       	out	0x3f, r0	; 63
    e136:	cd bf       	out	0x3d, r28	; 61
    e138:	df 91       	pop	r29
    e13a:	cf 91       	pop	r28
    e13c:	1f 91       	pop	r17
    e13e:	08 95       	ret

0000e140 <LCD_UpdateBigNumbers>:

}

void LCD_UpdateBigNumbers(uint8_t value)
{
    e140:	6f 92       	push	r6
    e142:	7f 92       	push	r7
    e144:	8f 92       	push	r8
    e146:	9f 92       	push	r9
    e148:	af 92       	push	r10
    e14a:	bf 92       	push	r11
    e14c:	cf 92       	push	r12
    e14e:	df 92       	push	r13
    e150:	ef 92       	push	r14
    e152:	ff 92       	push	r15
    e154:	0f 93       	push	r16
    e156:	1f 93       	push	r17
    e158:	cf 93       	push	r28
    e15a:	df 93       	push	r29
    e15c:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    e15e:	66 24       	eor	r6, r6
    e160:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    e162:	8f 3f       	cpi	r24, 0xFF	; 255
    e164:	09 f4       	brne	.+2      	; 0xe168 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    e166:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    e168:	20 e2       	ldi	r18, 0x20	; 32
    e16a:	40 e6       	ldi	r20, 0x60	; 96
    e16c:	60 e0       	ldi	r22, 0x00	; 0
    e16e:	86 2f       	mov	r24, r22
    e170:	0e 94 c5 6e 	call	0xdd8a	; 0xdd8a <LCD_ClrBox>

	if (value < 10)
    e174:	ca 30       	cpi	r28, 0x0A	; 10
    e176:	80 f4       	brcc	.+32     	; 0xe198 <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    e178:	ec 2f       	mov	r30, r28
    e17a:	ff 27       	eor	r31, r31
    e17c:	ee 0f       	add	r30, r30
    e17e:	ff 1f       	adc	r31, r31
    e180:	e6 59       	subi	r30, 0x96	; 150
    e182:	f0 43       	sbci	r31, 0x30	; 48
    e184:	85 91       	lpm	r24, Z+
    e186:	94 91       	lpm	r25, Z+
    e188:	f4 e0       	ldi	r31, 0x04	; 4
    e18a:	af 2e       	mov	r10, r31
    e18c:	b1 2c       	mov	r11, r1
    e18e:	e0 e2       	ldi	r30, 0x20	; 32
    e190:	ce 2e       	mov	r12, r30
    e192:	d1 2c       	mov	r13, r1
    e194:	73 01       	movw	r14, r6
    e196:	34 c0       	rjmp	.+104    	; 0xe200 <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    e198:	8c 2f       	mov	r24, r28
    e19a:	8a 50       	subi	r24, 0x0A	; 10
    e19c:	8c 2e       	mov	r8, r28
    e19e:	99 24       	eor	r9, r9
    e1a0:	8a 35       	cpi	r24, 0x5A	; 90
    e1a2:	08 f0       	brcs	.+2      	; 0xe1a6 <LCD_UpdateBigNumbers+0x66>
    e1a4:	3b c0       	rjmp	.+118    	; 0xe21c <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    e1a6:	8c 2f       	mov	r24, r28
    e1a8:	6a e0       	ldi	r22, 0x0A	; 10
    e1aa:	0e 94 52 7a 	call	0xf4a4	; 0xf4a4 <__udivmodqi4>
    e1ae:	c8 2f       	mov	r28, r24
    e1b0:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e1b2:	fe 01       	movw	r30, r28
    e1b4:	ec 0f       	add	r30, r28
    e1b6:	fd 1f       	adc	r31, r29
    e1b8:	e6 59       	subi	r30, 0x96	; 150
    e1ba:	f0 43       	sbci	r31, 0x30	; 48
    e1bc:	85 91       	lpm	r24, Z+
    e1be:	94 91       	lpm	r25, Z+
    e1c0:	74 e0       	ldi	r23, 0x04	; 4
    e1c2:	a7 2e       	mov	r10, r23
    e1c4:	b1 2c       	mov	r11, r1
    e1c6:	60 e2       	ldi	r22, 0x20	; 32
    e1c8:	c6 2e       	mov	r12, r22
    e1ca:	d1 2c       	mov	r13, r1
    e1cc:	73 01       	movw	r14, r6
    e1ce:	83 01       	movw	r16, r6
    e1d0:	93 01       	movw	r18, r6
    e1d2:	a3 01       	movw	r20, r6
    e1d4:	b6 01       	movw	r22, r12
    e1d6:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    e1da:	ce 01       	movw	r24, r28
    e1dc:	53 e0       	ldi	r21, 0x03	; 3
    e1de:	88 0f       	add	r24, r24
    e1e0:	99 1f       	adc	r25, r25
    e1e2:	5a 95       	dec	r21
    e1e4:	e1 f7       	brne	.-8      	; 0xe1de <LCD_UpdateBigNumbers+0x9e>
    e1e6:	8c 0f       	add	r24, r28
    e1e8:	9d 1f       	adc	r25, r29
    e1ea:	8c 0f       	add	r24, r28
    e1ec:	9d 1f       	adc	r25, r29
    e1ee:	f4 01       	movw	r30, r8
    e1f0:	e8 1b       	sub	r30, r24
    e1f2:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e1f4:	ee 0f       	add	r30, r30
    e1f6:	ff 1f       	adc	r31, r31
    e1f8:	e6 59       	subi	r30, 0x96	; 150
    e1fa:	f0 43       	sbci	r31, 0x30	; 48
    e1fc:	85 91       	lpm	r24, Z+
    e1fe:	94 91       	lpm	r25, Z+
    e200:	86 01       	movw	r16, r12
    e202:	93 01       	movw	r18, r6
    e204:	a3 01       	movw	r20, r6
    e206:	b6 01       	movw	r22, r12
    e208:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    e20c:	00 e4       	ldi	r16, 0x40	; 64
    e20e:	10 e0       	ldi	r17, 0x00	; 0
    e210:	93 01       	movw	r18, r6
    e212:	a3 01       	movw	r20, r6
    e214:	b6 01       	movw	r22, r12
    e216:	8c e7       	ldi	r24, 0x7C	; 124
    e218:	98 e9       	ldi	r25, 0x98	; 152
    e21a:	54 c0       	rjmp	.+168    	; 0xe2c4 <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    e21c:	8c 2f       	mov	r24, r28
    e21e:	64 e6       	ldi	r22, 0x64	; 100
    e220:	0e 94 52 7a 	call	0xf4a4	; 0xf4a4 <__udivmodqi4>
    e224:	c8 2f       	mov	r28, r24
    e226:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    e228:	84 e6       	ldi	r24, 0x64	; 100
    e22a:	90 e0       	ldi	r25, 0x00	; 0
    e22c:	c8 9f       	mul	r28, r24
    e22e:	90 01       	movw	r18, r0
    e230:	c9 9f       	mul	r28, r25
    e232:	30 0d       	add	r19, r0
    e234:	d8 9f       	mul	r29, r24
    e236:	30 0d       	add	r19, r0
    e238:	11 24       	eor	r1, r1
    e23a:	c9 01       	movw	r24, r18
    e23c:	94 01       	movw	r18, r8
    e23e:	28 1b       	sub	r18, r24
    e240:	39 0b       	sbc	r19, r25
    e242:	c9 01       	movw	r24, r18
    e244:	6a e0       	ldi	r22, 0x0A	; 10
    e246:	70 e0       	ldi	r23, 0x00	; 0
    e248:	0e 94 72 7a 	call	0xf4e4	; 0xf4e4 <__divmodhi4>
    e24c:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    e24e:	cb 01       	movw	r24, r22
    e250:	43 e0       	ldi	r20, 0x03	; 3
    e252:	88 0f       	add	r24, r24
    e254:	99 1f       	adc	r25, r25
    e256:	4a 95       	dec	r20
    e258:	e1 f7       	brne	.-8      	; 0xe252 <LCD_UpdateBigNumbers+0x112>
    e25a:	86 0f       	add	r24, r22
    e25c:	97 1f       	adc	r25, r23
    e25e:	86 0f       	add	r24, r22
    e260:	97 1f       	adc	r25, r23
    e262:	39 01       	movw	r6, r18
    e264:	68 1a       	sub	r6, r24
    e266:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    e268:	fe 01       	movw	r30, r28
    e26a:	ec 0f       	add	r30, r28
    e26c:	fd 1f       	adc	r31, r29
    e26e:	e6 59       	subi	r30, 0x96	; 150
    e270:	f0 43       	sbci	r31, 0x30	; 48
    e272:	85 91       	lpm	r24, Z+
    e274:	94 91       	lpm	r25, Z+
    e276:	34 e0       	ldi	r19, 0x04	; 4
    e278:	a3 2e       	mov	r10, r19
    e27a:	b1 2c       	mov	r11, r1
    e27c:	20 e2       	ldi	r18, 0x20	; 32
    e27e:	c2 2e       	mov	r12, r18
    e280:	d1 2c       	mov	r13, r1
    e282:	ee 24       	eor	r14, r14
    e284:	ff 24       	eor	r15, r15
    e286:	87 01       	movw	r16, r14
    e288:	97 01       	movw	r18, r14
    e28a:	a7 01       	movw	r20, r14
    e28c:	b6 01       	movw	r22, r12
    e28e:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    e292:	f4 01       	movw	r30, r8
    e294:	e8 0d       	add	r30, r8
    e296:	f9 1d       	adc	r31, r9
    e298:	e6 59       	subi	r30, 0x96	; 150
    e29a:	f0 43       	sbci	r31, 0x30	; 48
    e29c:	85 91       	lpm	r24, Z+
    e29e:	94 91       	lpm	r25, Z+
    e2a0:	86 01       	movw	r16, r12
    e2a2:	97 01       	movw	r18, r14
    e2a4:	a7 01       	movw	r20, r14
    e2a6:	b6 01       	movw	r22, r12
    e2a8:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    e2ac:	f3 01       	movw	r30, r6
    e2ae:	e6 0d       	add	r30, r6
    e2b0:	f7 1d       	adc	r31, r7
    e2b2:	e6 59       	subi	r30, 0x96	; 150
    e2b4:	f0 43       	sbci	r31, 0x30	; 48
    e2b6:	85 91       	lpm	r24, Z+
    e2b8:	94 91       	lpm	r25, Z+
    e2ba:	00 e4       	ldi	r16, 0x40	; 64
    e2bc:	10 e0       	ldi	r17, 0x00	; 0
    e2be:	97 01       	movw	r18, r14
    e2c0:	a7 01       	movw	r20, r14
    e2c2:	b6 01       	movw	r22, r12
    e2c4:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>
    e2c8:	df 91       	pop	r29
    e2ca:	cf 91       	pop	r28
    e2cc:	1f 91       	pop	r17
    e2ce:	0f 91       	pop	r16
    e2d0:	ff 90       	pop	r15
    e2d2:	ef 90       	pop	r14
    e2d4:	df 90       	pop	r13
    e2d6:	cf 90       	pop	r12
    e2d8:	bf 90       	pop	r11
    e2da:	af 90       	pop	r10
    e2dc:	9f 90       	pop	r9
    e2de:	8f 90       	pop	r8
    e2e0:	7f 90       	pop	r7
    e2e2:	6f 90       	pop	r6
    e2e4:	08 95       	ret

0000e2e6 <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    e2e6:	af 92       	push	r10
    e2e8:	bf 92       	push	r11
    e2ea:	cf 92       	push	r12
    e2ec:	df 92       	push	r13
    e2ee:	ef 92       	push	r14
    e2f0:	ff 92       	push	r15
    e2f2:	0f 93       	push	r16
    e2f4:	1f 93       	push	r17
    e2f6:	cf 93       	push	r28
    e2f8:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e2fa:	85 36       	cpi	r24, 0x65	; 101
    e2fc:	08 f0       	brcs	.+2      	; 0xe300 <LCD_UpdateSOC+0x1a>
		soc = 100;
    e2fe:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e300:	ec 2f       	mov	r30, r28
    e302:	ff 27       	eor	r31, r31
    e304:	ee 0f       	add	r30, r30
    e306:	ff 1f       	adc	r31, r31
    e308:	ea 57       	subi	r30, 0x7A	; 122
    e30a:	f0 43       	sbci	r31, 0x30	; 48
    e30c:	85 91       	lpm	r24, Z+
    e30e:	94 91       	lpm	r25, Z+
    e310:	b8 e0       	ldi	r27, 0x08	; 8
    e312:	ab 2e       	mov	r10, r27
    e314:	b1 2c       	mov	r11, r1
    e316:	a0 e2       	ldi	r26, 0x20	; 32
    e318:	ca 2e       	mov	r12, r26
    e31a:	d1 2c       	mov	r13, r1
    e31c:	ee 24       	eor	r14, r14
    e31e:	ff 24       	eor	r15, r15
    e320:	00 e6       	ldi	r16, 0x60	; 96
    e322:	10 e0       	ldi	r17, 0x00	; 0
    e324:	97 01       	movw	r18, r14
    e326:	a7 01       	movw	r20, r14
    e328:	b6 01       	movw	r22, r12
    e32a:	0e 94 e6 75 	call	0xebcc	; 0xebcc <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e32e:	8c 2f       	mov	r24, r28
    e330:	0e 94 a0 70 	call	0xe140	; 0xe140 <LCD_UpdateBigNumbers>
    e334:	cf 91       	pop	r28
    e336:	1f 91       	pop	r17
    e338:	0f 91       	pop	r16
    e33a:	ff 90       	pop	r15
    e33c:	ef 90       	pop	r14
    e33e:	df 90       	pop	r13
    e340:	cf 90       	pop	r12
    e342:	bf 90       	pop	r11
    e344:	af 90       	pop	r10
    e346:	08 95       	ret

0000e348 <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e348:	9f 92       	push	r9
    e34a:	af 92       	push	r10
    e34c:	bf 92       	push	r11
    e34e:	cf 92       	push	r12
    e350:	df 92       	push	r13
    e352:	ef 92       	push	r14
    e354:	ff 92       	push	r15
    e356:	0f 93       	push	r16
    e358:	1f 93       	push	r17
    e35a:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e35c:	48 17       	cp	r20, r24
    e35e:	30 f4       	brcc	.+12     	; 0xe36c <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e360:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e362:	84 2f       	mov	r24, r20
        Xend = dx;
    e364:	40 2f       	mov	r20, r16
        dy = Ystart;
    e366:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e368:	62 2f       	mov	r22, r18
        Yend = dy;
    e36a:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e36c:	04 2f       	mov	r16, r20
    e36e:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e370:	12 2f       	mov	r17, r18
    e372:	16 1b       	sub	r17, r22

    x = Xstart;
    e374:	b8 2e       	mov	r11, r24
    y = Ystart;
    e376:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e378:	07 ff       	sbrs	r16, 7
    e37a:	04 c0       	rjmp	.+8      	; 0xe384 <LCD_SetLine+0x3c>
        xinc = -1;
    e37c:	2f ef       	ldi	r18, 0xFF	; 255
    e37e:	92 2e       	mov	r9, r18
        dx = -dx;
    e380:	01 95       	neg	r16
    e382:	02 c0       	rjmp	.+4      	; 0xe388 <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e384:	91 e0       	ldi	r25, 0x01	; 1
    e386:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e388:	17 ff       	sbrs	r17, 7
    e38a:	04 c0       	rjmp	.+8      	; 0xe394 <LCD_SetLine+0x4c>
        yinc = -1;
    e38c:	8f ef       	ldi	r24, 0xFF	; 255
    e38e:	a8 2e       	mov	r10, r24
        dy = -dy;
    e390:	11 95       	neg	r17
    e392:	02 c0       	rjmp	.+4      	; 0xe398 <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e394:	c1 e0       	ldi	r28, 0x01	; 1
    e396:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e398:	10 17       	cp	r17, r16
    e39a:	d4 f4       	brge	.+52     	; 0xe3d0 <LCD_SetLine+0x88>
        e = dy - dx;
    e39c:	c1 2f       	mov	r28, r17
    e39e:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e3a0:	dd 24       	eor	r13, r13
    e3a2:	e0 2e       	mov	r14, r16
    e3a4:	ff 24       	eor	r15, r15
    e3a6:	e7 fc       	sbrc	r14, 7
    e3a8:	f0 94       	com	r15
    e3aa:	f7 fc       	sbrc	r15, 7
    e3ac:	2a c0       	rjmp	.+84     	; 0xe402 <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e3ae:	6c 2d       	mov	r22, r12
    e3b0:	8b 2d       	mov	r24, r11
    e3b2:	0e 94 38 6e 	call	0xdc70	; 0xdc70 <LCD_SetPixel>
            if (e >= 0){
    e3b6:	c7 fd       	sbrc	r28, 7
    e3b8:	02 c0       	rjmp	.+4      	; 0xe3be <LCD_SetLine+0x76>
                e -= dx;
    e3ba:	c0 1b       	sub	r28, r16
                y += yinc;
    e3bc:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e3be:	c1 0f       	add	r28, r17
            x += xinc;
    e3c0:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e3c2:	d3 94       	inc	r13
    e3c4:	8d 2d       	mov	r24, r13
    e3c6:	99 27       	eor	r25, r25
    e3c8:	e8 16       	cp	r14, r24
    e3ca:	f9 06       	cpc	r15, r25
    e3cc:	84 f7       	brge	.-32     	; 0xe3ae <LCD_SetLine+0x66>
    e3ce:	19 c0       	rjmp	.+50     	; 0xe402 <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e3d0:	c0 2f       	mov	r28, r16
    e3d2:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e3d4:	dd 24       	eor	r13, r13
    e3d6:	e1 2e       	mov	r14, r17
    e3d8:	ff 24       	eor	r15, r15
    e3da:	e7 fc       	sbrc	r14, 7
    e3dc:	f0 94       	com	r15
    e3de:	f7 fc       	sbrc	r15, 7
    e3e0:	10 c0       	rjmp	.+32     	; 0xe402 <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e3e2:	6c 2d       	mov	r22, r12
    e3e4:	8b 2d       	mov	r24, r11
    e3e6:	0e 94 38 6e 	call	0xdc70	; 0xdc70 <LCD_SetPixel>
    
            if (e >= 0){
    e3ea:	c7 fd       	sbrc	r28, 7
    e3ec:	02 c0       	rjmp	.+4      	; 0xe3f2 <LCD_SetLine+0xaa>
                e -= dy;
    e3ee:	c1 1b       	sub	r28, r17
                x += xinc;
    e3f0:	b9 0c       	add	r11, r9
            }
            e += dx;
    e3f2:	c0 0f       	add	r28, r16
            y += yinc;
    e3f4:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e3f6:	d3 94       	inc	r13
    e3f8:	8d 2d       	mov	r24, r13
    e3fa:	99 27       	eor	r25, r25
    e3fc:	e8 16       	cp	r14, r24
    e3fe:	f9 06       	cpc	r15, r25
    e400:	84 f7       	brge	.-32     	; 0xe3e2 <LCD_SetLine+0x9a>
    e402:	cf 91       	pop	r28
    e404:	1f 91       	pop	r17
    e406:	0f 91       	pop	r16
    e408:	ff 90       	pop	r15
    e40a:	ef 90       	pop	r14
    e40c:	df 90       	pop	r13
    e40e:	cf 90       	pop	r12
    e410:	bf 90       	pop	r11
    e412:	af 90       	pop	r10
    e414:	9f 90       	pop	r9
    e416:	08 95       	ret

0000e418 <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e418:	9f 92       	push	r9
    e41a:	af 92       	push	r10
    e41c:	bf 92       	push	r11
    e41e:	cf 92       	push	r12
    e420:	df 92       	push	r13
    e422:	ef 92       	push	r14
    e424:	ff 92       	push	r15
    e426:	0f 93       	push	r16
    e428:	1f 93       	push	r17
    e42a:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e42c:	48 17       	cp	r20, r24
    e42e:	30 f4       	brcc	.+12     	; 0xe43c <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e430:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e432:	84 2f       	mov	r24, r20
        Xend = dx;
    e434:	40 2f       	mov	r20, r16
        dy = Ystart;
    e436:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e438:	62 2f       	mov	r22, r18
        Yend = dy;
    e43a:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e43c:	04 2f       	mov	r16, r20
    e43e:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e440:	12 2f       	mov	r17, r18
    e442:	16 1b       	sub	r17, r22

    x = Xstart;
    e444:	b8 2e       	mov	r11, r24
    y = Ystart;
    e446:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e448:	07 ff       	sbrs	r16, 7
    e44a:	04 c0       	rjmp	.+8      	; 0xe454 <LCD_ClrLine+0x3c>
        xinc = -1;
    e44c:	6f ef       	ldi	r22, 0xFF	; 255
    e44e:	96 2e       	mov	r9, r22
        dx = -dx;
    e450:	01 95       	neg	r16
    e452:	02 c0       	rjmp	.+4      	; 0xe458 <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e454:	51 e0       	ldi	r21, 0x01	; 1
    e456:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e458:	17 ff       	sbrs	r17, 7
    e45a:	04 c0       	rjmp	.+8      	; 0xe464 <LCD_ClrLine+0x4c>
        yinc = -1;
    e45c:	4f ef       	ldi	r20, 0xFF	; 255
    e45e:	a4 2e       	mov	r10, r20
        dy = -dy;
    e460:	11 95       	neg	r17
    e462:	02 c0       	rjmp	.+4      	; 0xe468 <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e464:	31 e0       	ldi	r19, 0x01	; 1
    e466:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e468:	10 17       	cp	r17, r16
    e46a:	d4 f4       	brge	.+52     	; 0xe4a0 <LCD_ClrLine+0x88>
        e = dy - dx;
    e46c:	c1 2f       	mov	r28, r17
    e46e:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e470:	dd 24       	eor	r13, r13
    e472:	e0 2e       	mov	r14, r16
    e474:	ff 24       	eor	r15, r15
    e476:	e7 fc       	sbrc	r14, 7
    e478:	f0 94       	com	r15
    e47a:	f7 fc       	sbrc	r15, 7
    e47c:	2a c0       	rjmp	.+84     	; 0xe4d2 <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e47e:	6c 2d       	mov	r22, r12
    e480:	8b 2d       	mov	r24, r11
    e482:	0e 94 7e 6e 	call	0xdcfc	; 0xdcfc <LCD_ClrPixel>
            if (e >= 0){
    e486:	c7 fd       	sbrc	r28, 7
    e488:	02 c0       	rjmp	.+4      	; 0xe48e <LCD_ClrLine+0x76>
                e -= dx;
    e48a:	c0 1b       	sub	r28, r16
                y += yinc;
    e48c:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e48e:	c1 0f       	add	r28, r17
            x += xinc;
    e490:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e492:	d3 94       	inc	r13
    e494:	8d 2d       	mov	r24, r13
    e496:	99 27       	eor	r25, r25
    e498:	e8 16       	cp	r14, r24
    e49a:	f9 06       	cpc	r15, r25
    e49c:	84 f7       	brge	.-32     	; 0xe47e <LCD_ClrLine+0x66>
    e49e:	19 c0       	rjmp	.+50     	; 0xe4d2 <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e4a0:	c0 2f       	mov	r28, r16
    e4a2:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e4a4:	dd 24       	eor	r13, r13
    e4a6:	e1 2e       	mov	r14, r17
    e4a8:	ff 24       	eor	r15, r15
    e4aa:	e7 fc       	sbrc	r14, 7
    e4ac:	f0 94       	com	r15
    e4ae:	f7 fc       	sbrc	r15, 7
    e4b0:	10 c0       	rjmp	.+32     	; 0xe4d2 <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e4b2:	6c 2d       	mov	r22, r12
    e4b4:	8b 2d       	mov	r24, r11
    e4b6:	0e 94 7e 6e 	call	0xdcfc	; 0xdcfc <LCD_ClrPixel>
    
            if (e >= 0){
    e4ba:	c7 fd       	sbrc	r28, 7
    e4bc:	02 c0       	rjmp	.+4      	; 0xe4c2 <LCD_ClrLine+0xaa>
                e -= dy;
    e4be:	c1 1b       	sub	r28, r17
                x += xinc;
    e4c0:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e4c2:	c0 0f       	add	r28, r16
            y += yinc;
    e4c4:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e4c6:	d3 94       	inc	r13
    e4c8:	8d 2d       	mov	r24, r13
    e4ca:	99 27       	eor	r25, r25
    e4cc:	e8 16       	cp	r14, r24
    e4ce:	f9 06       	cpc	r15, r25
    e4d0:	84 f7       	brge	.-32     	; 0xe4b2 <LCD_ClrLine+0x9a>
    e4d2:	cf 91       	pop	r28
    e4d4:	1f 91       	pop	r17
    e4d6:	0f 91       	pop	r16
    e4d8:	ff 90       	pop	r15
    e4da:	ef 90       	pop	r14
    e4dc:	df 90       	pop	r13
    e4de:	cf 90       	pop	r12
    e4e0:	bf 90       	pop	r11
    e4e2:	af 90       	pop	r10
    e4e4:	9f 90       	pop	r9
    e4e6:	08 95       	ret

0000e4e8 <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e4e8:	87 b1       	in	r24, 0x07	; 7
    e4ea:	87 70       	andi	r24, 0x07	; 7
    e4ec:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e4ee:	88 b1       	in	r24, 0x08	; 8
    e4f0:	88 6f       	ori	r24, 0xF8	; 248
    e4f2:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e4f4:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e4f6:	24 9a       	sbi	0x04, 4	; 4
    e4f8:	08 95       	ret

0000e4fa <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e4fa:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e4fc:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e4fe:	90 91 6b 00 	lds	r25, 0x006B
    e502:	9f 7e       	andi	r25, 0xEF	; 239
    e504:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e508:	91 e0       	ldi	r25, 0x01	; 1
    e50a:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e50c:	8f bf       	out	0x3f, r24	; 63
    e50e:	08 95       	ret

0000e510 <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e510:	1f 92       	push	r1
    e512:	0f 92       	push	r0
    e514:	0f b6       	in	r0, 0x3f	; 63
    e516:	0f 92       	push	r0
    e518:	11 24       	eor	r1, r1
    e51a:	2f 93       	push	r18
    e51c:	3f 93       	push	r19
    e51e:	4f 93       	push	r20
    e520:	5f 93       	push	r21
    e522:	6f 93       	push	r22
    e524:	7f 93       	push	r23
    e526:	8f 93       	push	r24
    e528:	9f 93       	push	r25
    e52a:	af 93       	push	r26
    e52c:	bf 93       	push	r27
    e52e:	ef 93       	push	r30
    e530:	ff 93       	push	r31
	POWER_WakeupCallback();
    e532:	0e 94 34 73 	call	0xe668	; 0xe668 <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e536:	0e 94 74 72 	call	0xe4e8	; 0xe4e8 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e53a:	0e 94 7d 72 	call	0xe4fa	; 0xe4fa <JOYSTICK_DisableWakeupInterrupt>
    e53e:	ff 91       	pop	r31
    e540:	ef 91       	pop	r30
    e542:	bf 91       	pop	r27
    e544:	af 91       	pop	r26
    e546:	9f 91       	pop	r25
    e548:	8f 91       	pop	r24
    e54a:	7f 91       	pop	r23
    e54c:	6f 91       	pop	r22
    e54e:	5f 91       	pop	r21
    e550:	4f 91       	pop	r20
    e552:	3f 91       	pop	r19
    e554:	2f 91       	pop	r18
    e556:	0f 90       	pop	r0
    e558:	0f be       	out	0x3f, r0	; 63
    e55a:	0f 90       	pop	r0
    e55c:	1f 90       	pop	r1
    e55e:	18 95       	reti

0000e560 <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e560:	0f 93       	push	r16
    e562:	1f 93       	push	r17
    e564:	18 2f       	mov	r17, r24
    e566:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e568:	0e 94 74 72 	call	0xe4e8	; 0xe4e8 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e56c:	0e 94 7d 72 	call	0xe4fa	; 0xe4fa <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e570:	10 93 6d 02 	sts	0x026D, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e574:	00 93 6c 02 	sts	0x026C, r16
    e578:	1f 91       	pop	r17
    e57a:	0f 91       	pop	r16
    e57c:	08 95       	ret

0000e57e <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e57e:	0f 93       	push	r16
    e580:	1f 93       	push	r17
    e582:	cf 93       	push	r28
    e584:	df 93       	push	r29
    e586:	cd b7       	in	r28, 0x3d	; 61
    e588:	de b7       	in	r29, 0x3e	; 62
    e58a:	25 97       	sbiw	r28, 0x05	; 5
    e58c:	0f b6       	in	r0, 0x3f	; 63
    e58e:	f8 94       	cli
    e590:	de bf       	out	0x3e, r29	; 62
    e592:	0f be       	out	0x3f, r0	; 63
    e594:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e596:	36 b1       	in	r19, 0x06	; 6
    e598:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e59a:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e59c:	80 91 70 02 	lds	r24, 0x0270
    e5a0:	38 17       	cp	r19, r24
    e5a2:	19 f0       	breq	.+6      	; 0xe5aa <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e5a4:	30 93 70 02 	sts	0x0270, r19
    e5a8:	54 c0       	rjmp	.+168    	; 0xe652 <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e5aa:	20 91 6f 02 	lds	r18, 0x026F
    e5ae:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e5b0:	02 2f       	mov	r16, r18
    e5b2:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e5b4:	50 91 6f 02 	lds	r21, 0x026F
    e5b8:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e5ba:	92 2f       	mov	r25, r18
    e5bc:	90 95       	com	r25
    e5be:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e5c0:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e5c2:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e5c4:	41 e0       	ldi	r20, 0x01	; 1
    e5c6:	a1 e7       	ldi	r26, 0x71	; 113
    e5c8:	b2 e0       	ldi	r27, 0x02	; 2
    e5ca:	e9 e7       	ldi	r30, 0x79	; 121
    e5cc:	f2 e0       	ldi	r31, 0x02	; 2
    e5ce:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e5d0:	80 81       	ld	r24, Z
    e5d2:	88 23       	and	r24, r24
    e5d4:	11 f0       	breq	.+4      	; 0xe5da <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e5d6:	81 50       	subi	r24, 0x01	; 1
    e5d8:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e5da:	80 2f       	mov	r24, r16
    e5dc:	84 23       	and	r24, r20
    e5de:	49 f0       	breq	.+18     	; 0xe5f2 <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e5e0:	80 91 6d 02 	lds	r24, 0x026D
    e5e4:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e5e6:	80 81       	ld	r24, Z
    e5e8:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e5ea:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e5ec:	80 91 6c 02 	lds	r24, 0x026C
    e5f0:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e5f2:	89 2f       	mov	r24, r25
    e5f4:	84 23       	and	r24, r20
    e5f6:	41 f0       	breq	.+16     	; 0xe608 <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e5f8:	8c 91       	ld	r24, X
    e5fa:	88 23       	and	r24, r24
    e5fc:	29 f0       	breq	.+10     	; 0xe608 <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e5fe:	81 50       	subi	r24, 0x01	; 1
    e600:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e602:	88 23       	and	r24, r24
    e604:	09 f4       	brne	.+2      	; 0xe608 <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e606:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e608:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e60a:	61 50       	subi	r22, 0x01	; 1
    e60c:	31 96       	adiw	r30, 0x01	; 1
    e60e:	11 96       	adiw	r26, 0x01	; 1
    e610:	67 ff       	sbrs	r22, 7
    e612:	de cf       	rjmp	.-68     	; 0xe5d0 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e614:	80 91 6e 02 	lds	r24, 0x026E
    e618:	87 2b       	or	r24, r23
    e61a:	80 93 6e 02 	sts	0x026E, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e61e:	95 2f       	mov	r25, r21
    e620:	90 95       	com	r25
    e622:	80 91 6e 02 	lds	r24, 0x026E
    e626:	89 23       	and	r24, r25
    e628:	80 93 6e 02 	sts	0x026E, r24
		JOYSTICK_currentState = newState;
    e62c:	30 93 6f 02 	sts	0x026F, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e630:	e0 91 6a 02 	lds	r30, 0x026A
    e634:	f0 91 6b 02 	lds	r31, 0x026B
    e638:	30 97       	sbiw	r30, 0x00	; 0
    e63a:	59 f0       	breq	.+22     	; 0xe652 <JOYSTICK_PollingHandler+0xd4>
    e63c:	27 2b       	or	r18, r23
    e63e:	21 2b       	or	r18, r17
    e640:	41 f0       	breq	.+16     	; 0xe652 <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e642:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e644:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e646:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e648:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e64a:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e64c:	ce 01       	movw	r24, r28
    e64e:	01 96       	adiw	r24, 0x01	; 1
    e650:	09 95       	icall
    e652:	25 96       	adiw	r28, 0x05	; 5
    e654:	0f b6       	in	r0, 0x3f	; 63
    e656:	f8 94       	cli
    e658:	de bf       	out	0x3e, r29	; 62
    e65a:	0f be       	out	0x3f, r0	; 63
    e65c:	cd bf       	out	0x3d, r28	; 61
    e65e:	df 91       	pop	r29
    e660:	cf 91       	pop	r28
    e662:	1f 91       	pop	r17
    e664:	0f 91       	pop	r16
    e666:	08 95       	ret

0000e668 <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e668:	81 e0       	ldi	r24, 0x01	; 1
    e66a:	80 93 81 02 	sts	0x0281, r24
    e66e:	08 95       	ret

0000e670 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e670:	80 91 65 00 	lds	r24, 0x0065
    e674:	87 7f       	andi	r24, 0xF7	; 247
    e676:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e67a:	8d b1       	in	r24, 0x0d	; 13
    e67c:	88 63       	ori	r24, 0x38	; 56
    e67e:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e680:	80 91 85 02 	lds	r24, 0x0285
    e684:	99 27       	eor	r25, r25
    e686:	90 93 99 00 	sts	0x0099, r25
    e68a:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e68e:	80 91 84 02 	lds	r24, 0x0284
    e692:	99 27       	eor	r25, r25
    e694:	90 93 9b 00 	sts	0x009B, r25
    e698:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e69c:	80 91 83 02 	lds	r24, 0x0283
    e6a0:	99 27       	eor	r25, r25
    e6a2:	90 93 9d 00 	sts	0x009D, r25
    e6a6:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e6aa:	89 ea       	ldi	r24, 0xA9	; 169
    e6ac:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e6b0:	81 e0       	ldi	r24, 0x01	; 1
    e6b2:	80 93 91 00 	sts	0x0091, r24
    e6b6:	08 95       	ret

0000e6b8 <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e6b8:	cf 93       	push	r28
    e6ba:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e6bc:	e0 91 85 02 	lds	r30, 0x0285
    green = BACKLIGHT_green;
    e6c0:	f0 91 84 02 	lds	r31, 0x0284
    blue = BACKLIGHT_blue;
    e6c4:	c0 91 83 02 	lds	r28, 0x0283
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e6c8:	2f ef       	ldi	r18, 0xFF	; 255
    e6ca:	30 e0       	ldi	r19, 0x00	; 0
    e6cc:	e8 9f       	mul	r30, r24
    e6ce:	c0 01       	movw	r24, r0
    e6d0:	11 24       	eor	r1, r1
    e6d2:	b9 01       	movw	r22, r18
    e6d4:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    e6d8:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e6da:	f4 9f       	mul	r31, r20
    e6dc:	c0 01       	movw	r24, r0
    e6de:	11 24       	eor	r1, r1
    e6e0:	b9 01       	movw	r22, r18
    e6e2:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    e6e6:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e6e8:	c4 9f       	mul	r28, r20
    e6ea:	c0 01       	movw	r24, r0
    e6ec:	11 24       	eor	r1, r1
    e6ee:	b9 01       	movw	r22, r18
    e6f0:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e6f4:	40 93 82 02 	sts	0x0282, r20
    OCR_RED = red;
    e6f8:	8e 2f       	mov	r24, r30
    e6fa:	99 27       	eor	r25, r25
    e6fc:	90 93 99 00 	sts	0x0099, r25
    e700:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e704:	8f 2f       	mov	r24, r31
    e706:	99 27       	eor	r25, r25
    e708:	90 93 9b 00 	sts	0x009B, r25
    e70c:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e710:	86 2f       	mov	r24, r22
    e712:	99 27       	eor	r25, r25
    e714:	90 93 9d 00 	sts	0x009D, r25
    e718:	80 93 9c 00 	sts	0x009C, r24
    e71c:	cf 91       	pop	r28
    e71e:	08 95       	ret

0000e720 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e720:	38 2f       	mov	r19, r24
    e722:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e724:	80 93 85 02 	sts	0x0285, r24
    BACKLIGHT_green = green;
    e728:	60 93 84 02 	sts	0x0284, r22
    BACKLIGHT_blue = blue;
    e72c:	40 93 83 02 	sts	0x0283, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e730:	20 91 82 02 	lds	r18, 0x0282
    e734:	2f 3f       	cpi	r18, 0xFF	; 255
    e736:	c1 f0       	breq	.+48     	; 0xe768 <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e738:	82 9f       	mul	r24, r18
    e73a:	c0 01       	movw	r24, r0
    e73c:	11 24       	eor	r1, r1
    e73e:	6f ef       	ldi	r22, 0xFF	; 255
    e740:	70 e0       	ldi	r23, 0x00	; 0
    e742:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    e746:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e748:	e2 9f       	mul	r30, r18
    e74a:	c0 01       	movw	r24, r0
    e74c:	11 24       	eor	r1, r1
    e74e:	6f ef       	ldi	r22, 0xFF	; 255
    e750:	70 e0       	ldi	r23, 0x00	; 0
    e752:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    e756:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e758:	42 9f       	mul	r20, r18
    e75a:	c0 01       	movw	r24, r0
    e75c:	11 24       	eor	r1, r1
    e75e:	6f ef       	ldi	r22, 0xFF	; 255
    e760:	70 e0       	ldi	r23, 0x00	; 0
    e762:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    e766:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    e768:	83 2f       	mov	r24, r19
    e76a:	99 27       	eor	r25, r25
    e76c:	90 93 99 00 	sts	0x0099, r25
    e770:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e774:	8e 2f       	mov	r24, r30
    e776:	99 27       	eor	r25, r25
    e778:	90 93 9b 00 	sts	0x009B, r25
    e77c:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e780:	84 2f       	mov	r24, r20
    e782:	99 27       	eor	r25, r25
    e784:	90 93 9d 00 	sts	0x009D, r25
    e788:	80 93 9c 00 	sts	0x009C, r24
    e78c:	08 95       	ret

0000e78e <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    e78e:	cf 93       	push	r28
    e790:	df 93       	push	r29
    e792:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    e794:	ed 01       	movw	r28, r26
    e796:	88 85       	ldd	r24, Y+8	; 0x08
    e798:	88 23       	and	r24, r24
    e79a:	e1 f3       	breq	.-8      	; 0xe794 <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    e79c:	ec 81       	ldd	r30, Y+4	; 0x04
    e79e:	fd 81       	ldd	r31, Y+5	; 0x05
    e7a0:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e7a2:	2a 81       	ldd	r18, Y+2	; 0x02
    e7a4:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    e7a6:	8c 81       	ldd	r24, Y+4	; 0x04
    e7a8:	9d 81       	ldd	r25, Y+5	; 0x05
    e7aa:	82 17       	cp	r24, r18
    e7ac:	93 07       	cpc	r25, r19
    e7ae:	31 f4       	brne	.+12     	; 0xe7bc <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    e7b0:	8d 91       	ld	r24, X+
    e7b2:	9c 91       	ld	r25, X
    e7b4:	11 97       	sbiw	r26, 0x01	; 1
    e7b6:	9d 83       	std	Y+5, r25	; 0x05
    e7b8:	8c 83       	std	Y+4, r24	; 0x04
    e7ba:	06 c0       	rjmp	.+12     	; 0xe7c8 <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    e7bc:	fd 01       	movw	r30, r26
    e7be:	84 81       	ldd	r24, Z+4	; 0x04
    e7c0:	95 81       	ldd	r25, Z+5	; 0x05
    e7c2:	01 96       	adiw	r24, 0x01	; 1
    e7c4:	95 83       	std	Z+5, r25	; 0x05
    e7c6:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    e7c8:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e7ca:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e7cc:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    e7ce:	ed 01       	movw	r28, r26
    e7d0:	89 85       	ldd	r24, Y+9	; 0x09
    e7d2:	88 23       	and	r24, r24
    e7d4:	09 f4       	brne	.+2      	; 0xe7d8 <FIFO_InternalPutData+0x4a>
    e7d6:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    e7d8:	fd 01       	movw	r30, r26
    e7da:	80 85       	ldd	r24, Z+8	; 0x08
    e7dc:	81 50       	subi	r24, 0x01	; 1
    e7de:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    e7e0:	81 85       	ldd	r24, Z+9	; 0x09
    e7e2:	8f 5f       	subi	r24, 0xFF	; 255
    e7e4:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    e7e6:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e7e8:	22 23       	and	r18, r18
    e7ea:	49 f0       	breq	.+18     	; 0xe7fe <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e7ec:	84 85       	ldd	r24, Z+12	; 0x0c
    e7ee:	95 85       	ldd	r25, Z+13	; 0x0d
    e7f0:	89 2b       	or	r24, r25
    e7f2:	29 f0       	breq	.+10     	; 0xe7fe <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e7f4:	04 84       	ldd	r0, Z+12	; 0x0c
    e7f6:	f5 85       	ldd	r31, Z+13	; 0x0d
    e7f8:	e0 2d       	mov	r30, r0
    e7fa:	cd 01       	movw	r24, r26
    e7fc:	09 95       	icall
    e7fe:	df 91       	pop	r29
    e800:	cf 91       	pop	r28
    e802:	08 95       	ret

0000e804 <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e804:	cf 93       	push	r28
    e806:	df 93       	push	r29
    e808:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e80a:	89 85       	ldd	r24, Y+9	; 0x09
    e80c:	88 23       	and	r24, r24
    e80e:	e9 f3       	breq	.-6      	; 0xe80a <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e810:	2a 81       	ldd	r18, Y+2	; 0x02
    e812:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e814:	8e 81       	ldd	r24, Y+6	; 0x06
    e816:	9f 81       	ldd	r25, Y+7	; 0x07
    e818:	82 17       	cp	r24, r18
    e81a:	93 07       	cpc	r25, r19
    e81c:	19 f4       	brne	.+6      	; 0xe824 <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e81e:	88 81       	ld	r24, Y
    e820:	99 81       	ldd	r25, Y+1	; 0x01
    e822:	03 c0       	rjmp	.+6      	; 0xe82a <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e824:	8e 81       	ldd	r24, Y+6	; 0x06
    e826:	9f 81       	ldd	r25, Y+7	; 0x07
    e828:	01 96       	adiw	r24, 0x01	; 1
    e82a:	9f 83       	std	Y+7, r25	; 0x07
    e82c:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e82e:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e830:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e832:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e834:	88 85       	ldd	r24, Y+8	; 0x08
    e836:	88 23       	and	r24, r24
    e838:	09 f4       	brne	.+2      	; 0xe83c <FIFO_InternalGetData+0x38>
    e83a:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e83c:	88 85       	ldd	r24, Y+8	; 0x08
    e83e:	8f 5f       	subi	r24, 0xFF	; 255
    e840:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e842:	89 85       	ldd	r24, Y+9	; 0x09
    e844:	81 50       	subi	r24, 0x01	; 1
    e846:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e848:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e84a:	22 23       	and	r18, r18
    e84c:	41 f0       	breq	.+16     	; 0xe85e <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e84e:	8a 85       	ldd	r24, Y+10	; 0x0a
    e850:	9b 85       	ldd	r25, Y+11	; 0x0b
    e852:	89 2b       	or	r24, r25
    e854:	21 f0       	breq	.+8      	; 0xe85e <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e856:	ea 85       	ldd	r30, Y+10	; 0x0a
    e858:	fb 85       	ldd	r31, Y+11	; 0x0b
    e85a:	ce 01       	movw	r24, r28
    e85c:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e85e:	ee 81       	ldd	r30, Y+6	; 0x06
    e860:	ff 81       	ldd	r31, Y+7	; 0x07
    e862:	80 81       	ld	r24, Z
}
    e864:	99 27       	eor	r25, r25
    e866:	df 91       	pop	r29
    e868:	cf 91       	pop	r28
    e86a:	08 95       	ret

0000e86c <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e86c:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e86e:	71 83       	std	Z+1, r23	; 0x01
    e870:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e872:	cb 01       	movw	r24, r22
    e874:	84 0f       	add	r24, r20
    e876:	91 1d       	adc	r25, r1
    e878:	01 97       	sbiw	r24, 0x01	; 1
    e87a:	93 83       	std	Z+3, r25	; 0x03
    e87c:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e87e:	75 83       	std	Z+5, r23	; 0x05
    e880:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e882:	97 83       	std	Z+7, r25	; 0x07
    e884:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e886:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e888:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e88a:	13 86       	std	Z+11, r1	; 0x0b
    e88c:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e88e:	15 86       	std	Z+13, r1	; 0x0d
    e890:	14 86       	std	Z+12, r1	; 0x0c
    e892:	08 95       	ret

0000e894 <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e894:	0e 94 02 74 	call	0xe804	; 0xe804 <FIFO_InternalGetData>
	
	return data;
}
    e898:	99 27       	eor	r25, r25
    e89a:	08 95       	ret

0000e89c <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e89c:	0f 93       	push	r16
    e89e:	1f 93       	push	r17
    e8a0:	cf 93       	push	r28
    e8a2:	df 93       	push	r29
    e8a4:	cd b7       	in	r28, 0x3d	; 61
    e8a6:	de b7       	in	r29, 0x3e	; 62
    e8a8:	21 97       	sbiw	r28, 0x01	; 1
    e8aa:	0f b6       	in	r0, 0x3f	; 63
    e8ac:	f8 94       	cli
    e8ae:	de bf       	out	0x3e, r29	; 62
    e8b0:	0f be       	out	0x3f, r0	; 63
    e8b2:	cd bf       	out	0x3d, r28	; 61
    e8b4:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e8b6:	fc 01       	movw	r30, r24
    e8b8:	81 85       	ldd	r24, Z+9	; 0x09
    e8ba:	88 23       	and	r24, r24
    e8bc:	41 f0       	breq	.+16     	; 0xe8ce <FIFO_Flush+0x32>
    e8be:	c8 01       	movw	r24, r16
    e8c0:	0e 94 4a 74 	call	0xe894	; 0xe894 <FIFO_GetUint8>
    e8c4:	89 83       	std	Y+1, r24	; 0x01
    e8c6:	f8 01       	movw	r30, r16
    e8c8:	81 85       	ldd	r24, Z+9	; 0x09
    e8ca:	88 23       	and	r24, r24
    e8cc:	c1 f7       	brne	.-16     	; 0xe8be <FIFO_Flush+0x22>
    e8ce:	21 96       	adiw	r28, 0x01	; 1
    e8d0:	0f b6       	in	r0, 0x3f	; 63
    e8d2:	f8 94       	cli
    e8d4:	de bf       	out	0x3e, r29	; 62
    e8d6:	0f be       	out	0x3f, r0	; 63
    e8d8:	cd bf       	out	0x3d, r28	; 61
    e8da:	df 91       	pop	r29
    e8dc:	cf 91       	pop	r28
    e8de:	1f 91       	pop	r17
    e8e0:	0f 91       	pop	r16
    e8e2:	08 95       	ret

0000e8e4 <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e8e4:	ef 92       	push	r14
    e8e6:	ff 92       	push	r15
    e8e8:	0f 93       	push	r16
    e8ea:	1f 93       	push	r17
    e8ec:	7c 01       	movw	r14, r24
    e8ee:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    e8f0:	0e 94 c7 73 	call	0xe78e	; 0xe78e <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    e8f4:	81 2f       	mov	r24, r17
    e8f6:	99 27       	eor	r25, r25
    e8f8:	68 2f       	mov	r22, r24
    e8fa:	c7 01       	movw	r24, r14
    e8fc:	0e 94 c7 73 	call	0xe78e	; 0xe78e <FIFO_InternalPutData>
    e900:	1f 91       	pop	r17
    e902:	0f 91       	pop	r16
    e904:	ff 90       	pop	r15
    e906:	ef 90       	pop	r14
    e908:	08 95       	ret

0000e90a <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    e90a:	ef 92       	push	r14
    e90c:	ff 92       	push	r15
    e90e:	0f 93       	push	r16
    e910:	1f 93       	push	r17
    e912:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    e914:	0e 94 02 74 	call	0xe804	; 0xe804 <FIFO_InternalGetData>
    e918:	e8 2e       	mov	r14, r24
    e91a:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    e91c:	c8 01       	movw	r24, r16
    e91e:	0e 94 02 74 	call	0xe804	; 0xe804 <FIFO_InternalGetData>
    e922:	99 27       	eor	r25, r25
    e924:	98 2f       	mov	r25, r24
    e926:	88 27       	eor	r24, r24
	
	return data;
}
    e928:	8e 29       	or	r24, r14
    e92a:	9f 29       	or	r25, r15
    e92c:	1f 91       	pop	r17
    e92e:	0f 91       	pop	r16
    e930:	ff 90       	pop	r15
    e932:	ef 90       	pop	r14
    e934:	08 95       	ret

0000e936 <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    e936:	90 93 87 02 	sts	0x0287, r25
    e93a:	80 93 86 02 	sts	0x0286, r24
	MEMBLOCK_manager.bags = workspace;
    e93e:	70 93 89 02 	sts	0x0289, r23
    e942:	60 93 88 02 	sts	0x0288, r22
    e946:	08 95       	ret

0000e948 <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    e948:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    e94a:	28 e1       	ldi	r18, 0x18	; 24
    e94c:	30 e0       	ldi	r19, 0x00	; 0
    e94e:	82 9f       	mul	r24, r18
    e950:	f0 01       	movw	r30, r0
    e952:	83 9f       	mul	r24, r19
    e954:	f0 0d       	add	r31, r0
    e956:	92 9f       	mul	r25, r18
    e958:	f0 0d       	add	r31, r0
    e95a:	11 24       	eor	r1, r1
    e95c:	cf 01       	movw	r24, r30
    e95e:	e0 91 88 02 	lds	r30, 0x0288
    e962:	f0 91 89 02 	lds	r31, 0x0289
    e966:	e8 0f       	add	r30, r24
    e968:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    e96a:	71 83       	std	Z+1, r23	; 0x01
    e96c:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    e96e:	53 83       	std	Z+3, r21	; 0x03
    e970:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    e972:	55 83       	std	Z+5, r21	; 0x05
    e974:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    e976:	13 86       	std	Z+11, r1	; 0x0b
    e978:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    e97a:	75 87       	std	Z+13, r23	; 0x0d
    e97c:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    e97e:	17 86       	std	Z+15, r1	; 0x0f
    e980:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    e982:	10 8a       	std	Z+16, r1	; 0x10
    e984:	11 8a       	std	Z+17, r1	; 0x11
    e986:	12 8a       	std	Z+18, r1	; 0x12
    e988:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    e98a:	14 8a       	std	Z+20, r1	; 0x14
    e98c:	15 8a       	std	Z+21, r1	; 0x15
    e98e:	16 8a       	std	Z+22, r1	; 0x16
    e990:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    e992:	b7 83       	std	Z+7, r27	; 0x07
    e994:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    e996:	64 9f       	mul	r22, r20
    e998:	c0 01       	movw	r24, r0
    e99a:	65 9f       	mul	r22, r21
    e99c:	90 0d       	add	r25, r0
    e99e:	74 9f       	mul	r23, r20
    e9a0:	90 0d       	add	r25, r0
    e9a2:	11 24       	eor	r1, r1
    e9a4:	8a 0f       	add	r24, r26
    e9a6:	9b 1f       	adc	r25, r27
    e9a8:	91 87       	std	Z+9, r25	; 0x09
    e9aa:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    e9ac:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    e9ae:	49 5f       	subi	r20, 0xF9	; 249
    e9b0:	5f 4f       	sbci	r21, 0xFF	; 255
    e9b2:	83 e0       	ldi	r24, 0x03	; 3
    e9b4:	56 95       	lsr	r21
    e9b6:	47 95       	ror	r20
    e9b8:	8a 95       	dec	r24
    e9ba:	e1 f7       	brne	.-8      	; 0xe9b4 <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    e9bc:	41 15       	cp	r20, r1
    e9be:	51 05       	cpc	r21, r1
    e9c0:	29 f0       	breq	.+10     	; 0xe9cc <MEMBLOCK_InitBag+0x84>
    e9c2:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    e9c4:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    e9c6:	41 50       	subi	r20, 0x01	; 1
    e9c8:	50 40       	sbci	r21, 0x00	; 0
    e9ca:	e1 f7       	brne	.-8      	; 0xe9c4 <MEMBLOCK_InitBag+0x7c>
    e9cc:	08 95       	ret

0000e9ce <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    e9ce:	af 92       	push	r10
    e9d0:	bf 92       	push	r11
    e9d2:	cf 92       	push	r12
    e9d4:	df 92       	push	r13
    e9d6:	ff 92       	push	r15
    e9d8:	0f 93       	push	r16
    e9da:	1f 93       	push	r17
    e9dc:	cf 93       	push	r28
    e9de:	df 93       	push	r29
    e9e0:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    e9e2:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    e9e4:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e9e6:	c0 91 88 02 	lds	r28, 0x0288
    e9ea:	d0 91 89 02 	lds	r29, 0x0289
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e9ee:	20 91 86 02 	lds	r18, 0x0286
    e9f2:	30 91 87 02 	lds	r19, 0x0287

	bool found = false;
    e9f6:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e9f8:	21 15       	cp	r18, r1
    e9fa:	31 05       	cpc	r19, r1
    e9fc:	09 f4       	brne	.+2      	; 0xea00 <MEMBLOCK_Allocate+0x32>
    e9fe:	81 c0       	rjmp	.+258    	; 0xeb02 <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    ea00:	88 81       	ld	r24, Y
    ea02:	99 81       	ldd	r25, Y+1	; 0x01
    ea04:	86 17       	cp	r24, r22
    ea06:	97 07       	cpc	r25, r23
    ea08:	30 f0       	brcs	.+12     	; 0xea16 <MEMBLOCK_Allocate+0x48>
    ea0a:	8c 81       	ldd	r24, Y+4	; 0x04
    ea0c:	9d 81       	ldd	r25, Y+5	; 0x05
    ea0e:	89 2b       	or	r24, r25
    ea10:	11 f0       	breq	.+4      	; 0xea16 <MEMBLOCK_Allocate+0x48>
			found = true;
    ea12:	41 e0       	ldi	r20, 0x01	; 1
    ea14:	03 c0       	rjmp	.+6      	; 0xea1c <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    ea16:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    ea18:	21 50       	subi	r18, 0x01	; 1
    ea1a:	30 40       	sbci	r19, 0x00	; 0
    ea1c:	21 15       	cp	r18, r1
    ea1e:	31 05       	cpc	r19, r1
    ea20:	11 f0       	breq	.+4      	; 0xea26 <MEMBLOCK_Allocate+0x58>
    ea22:	44 23       	and	r20, r20
    ea24:	69 f3       	breq	.-38     	; 0xea00 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    ea26:	44 23       	and	r20, r20
    ea28:	09 f4       	brne	.+2      	; 0xea2c <MEMBLOCK_Allocate+0x5e>
    ea2a:	6b c0       	rjmp	.+214    	; 0xeb02 <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    ea2c:	e8 85       	ldd	r30, Y+8	; 0x08
    ea2e:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    ea30:	20 e0       	ldi	r18, 0x00	; 0
    ea32:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    ea34:	80 81       	ld	r24, Z
    ea36:	88 23       	and	r24, r24
    ea38:	21 f4       	brne	.+8      	; 0xea42 <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    ea3a:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    ea3c:	28 5f       	subi	r18, 0xF8	; 248
    ea3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea40:	f9 cf       	rjmp	.-14     	; 0xea34 <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    ea42:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    ea44:	90 81       	ld	r25, Z
    ea46:	97 fd       	sbrc	r25, 7
    ea48:	06 c0       	rjmp	.+12     	; 0xea56 <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    ea4a:	46 95       	lsr	r20
		++blockIndex;
    ea4c:	2f 5f       	subi	r18, 0xFF	; 255
    ea4e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea50:	89 2f       	mov	r24, r25
    ea52:	84 23       	and	r24, r20
    ea54:	d1 f3       	breq	.-12     	; 0xea4a <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    ea56:	40 95       	com	r20
    ea58:	94 23       	and	r25, r20
    ea5a:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    ea5c:	8c 81       	ldd	r24, Y+4	; 0x04
    ea5e:	9d 81       	ldd	r25, Y+5	; 0x05
    ea60:	01 97       	sbiw	r24, 0x01	; 1
    ea62:	9d 83       	std	Y+5, r25	; 0x05
    ea64:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    ea66:	48 81       	ld	r20, Y
    ea68:	59 81       	ldd	r21, Y+1	; 0x01
    ea6a:	24 9f       	mul	r18, r20
    ea6c:	50 01       	movw	r10, r0
    ea6e:	25 9f       	mul	r18, r21
    ea70:	b0 0c       	add	r11, r0
    ea72:	34 9f       	mul	r19, r20
    ea74:	b0 0c       	add	r11, r0
    ea76:	11 24       	eor	r1, r1
    ea78:	0e 81       	ldd	r16, Y+6	; 0x06
    ea7a:	1f 81       	ldd	r17, Y+7	; 0x07
    ea7c:	0a 0d       	add	r16, r10
    ea7e:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    ea80:	2a 81       	ldd	r18, Y+2	; 0x02
    ea82:	3b 81       	ldd	r19, Y+3	; 0x03
    ea84:	28 1b       	sub	r18, r24
    ea86:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    ea88:	8a 85       	ldd	r24, Y+10	; 0x0a
    ea8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    ea8c:	82 17       	cp	r24, r18
    ea8e:	93 07       	cpc	r25, r19
    ea90:	10 f4       	brcc	.+4      	; 0xea96 <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    ea92:	3b 87       	std	Y+11, r19	; 0x0b
    ea94:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    ea96:	8e 85       	ldd	r24, Y+14	; 0x0e
    ea98:	9f 85       	ldd	r25, Y+15	; 0x0f
    ea9a:	86 17       	cp	r24, r22
    ea9c:	97 07       	cpc	r25, r23
    ea9e:	10 f4       	brcc	.+4      	; 0xeaa4 <MEMBLOCK_Allocate+0xd6>
    eaa0:	7f 87       	std	Y+15, r23	; 0x0f
    eaa2:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    eaa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    eaa6:	9d 85       	ldd	r25, Y+13	; 0x0d
    eaa8:	68 17       	cp	r22, r24
    eaaa:	79 07       	cpc	r23, r25
    eaac:	10 f4       	brcc	.+4      	; 0xeab2 <MEMBLOCK_Allocate+0xe4>
    eaae:	7d 87       	std	Y+13, r23	; 0x0d
    eab0:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    eab2:	88 89       	ldd	r24, Y+16	; 0x10
    eab4:	99 89       	ldd	r25, Y+17	; 0x11
    eab6:	aa 89       	ldd	r26, Y+18	; 0x12
    eab8:	bb 89       	ldd	r27, Y+19	; 0x13
    eaba:	01 96       	adiw	r24, 0x01	; 1
    eabc:	a1 1d       	adc	r26, r1
    eabe:	b1 1d       	adc	r27, r1
    eac0:	88 8b       	std	Y+16, r24	; 0x10
    eac2:	99 8b       	std	Y+17, r25	; 0x11
    eac4:	aa 8b       	std	Y+18, r26	; 0x12
    eac6:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    eac8:	cb 01       	movw	r24, r22
    eaca:	aa 27       	eor	r26, r26
    eacc:	bb 27       	eor	r27, r27
    eace:	ba 2f       	mov	r27, r26
    ead0:	a9 2f       	mov	r26, r25
    ead2:	98 2f       	mov	r25, r24
    ead4:	88 27       	eor	r24, r24
    ead6:	5a 01       	movw	r10, r20
    ead8:	cc 24       	eor	r12, r12
    eada:	dd 24       	eor	r13, r13
    eadc:	a6 01       	movw	r20, r12
    eade:	95 01       	movw	r18, r10
    eae0:	bc 01       	movw	r22, r24
    eae2:	cd 01       	movw	r24, r26
    eae4:	0e 94 85 7a 	call	0xf50a	; 0xf50a <__udivmodsi4>
		bag->allocationUtilization += utilization;
    eae8:	8c 89       	ldd	r24, Y+20	; 0x14
    eaea:	9d 89       	ldd	r25, Y+21	; 0x15
    eaec:	ae 89       	ldd	r26, Y+22	; 0x16
    eaee:	bf 89       	ldd	r27, Y+23	; 0x17
    eaf0:	82 0f       	add	r24, r18
    eaf2:	93 1f       	adc	r25, r19
    eaf4:	a4 1f       	adc	r26, r20
    eaf6:	b5 1f       	adc	r27, r21
    eaf8:	8c 8b       	std	Y+20, r24	; 0x14
    eafa:	9d 8b       	std	Y+21, r25	; 0x15
    eafc:	ae 8b       	std	Y+22, r26	; 0x16
    eafe:	bf 8b       	std	Y+23, r27	; 0x17
    eb00:	02 c0       	rjmp	.+4      	; 0xeb06 <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    eb02:	00 e0       	ldi	r16, 0x00	; 0
    eb04:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    eb06:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    eb08:	c8 01       	movw	r24, r16
    eb0a:	df 91       	pop	r29
    eb0c:	cf 91       	pop	r28
    eb0e:	1f 91       	pop	r17
    eb10:	0f 91       	pop	r16
    eb12:	ff 90       	pop	r15
    eb14:	df 90       	pop	r13
    eb16:	cf 90       	pop	r12
    eb18:	bf 90       	pop	r11
    eb1a:	af 90       	pop	r10
    eb1c:	08 95       	ret

0000eb1e <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    eb1e:	cf 93       	push	r28
    eb20:	df 93       	push	r29
    eb22:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    eb24:	89 2b       	or	r24, r25
    eb26:	09 f4       	brne	.+2      	; 0xeb2a <MEMBLOCK_Free+0xc>
    eb28:	4e c0       	rjmp	.+156    	; 0xebc6 <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    eb2a:	c0 91 88 02 	lds	r28, 0x0288
    eb2e:	d0 91 89 02 	lds	r29, 0x0289
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    eb32:	20 91 86 02 	lds	r18, 0x0286
    eb36:	30 91 87 02 	lds	r19, 0x0287

	bool found = false;
    eb3a:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    eb3c:	21 15       	cp	r18, r1
    eb3e:	31 05       	cpc	r19, r1
    eb40:	e9 f1       	breq	.+122    	; 0xebbc <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    eb42:	8e 81       	ldd	r24, Y+6	; 0x06
    eb44:	9f 81       	ldd	r25, Y+7	; 0x07
    eb46:	48 17       	cp	r20, r24
    eb48:	59 07       	cpc	r21, r25
    eb4a:	38 f0       	brcs	.+14     	; 0xeb5a <MEMBLOCK_Free+0x3c>
    eb4c:	88 85       	ldd	r24, Y+8	; 0x08
    eb4e:	99 85       	ldd	r25, Y+9	; 0x09
    eb50:	48 17       	cp	r20, r24
    eb52:	59 07       	cpc	r21, r25
    eb54:	10 f4       	brcc	.+4      	; 0xeb5a <MEMBLOCK_Free+0x3c>
			found = true;
    eb56:	61 e0       	ldi	r22, 0x01	; 1
    eb58:	03 c0       	rjmp	.+6      	; 0xeb60 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    eb5a:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    eb5c:	21 50       	subi	r18, 0x01	; 1
    eb5e:	30 40       	sbci	r19, 0x00	; 0
    eb60:	21 15       	cp	r18, r1
    eb62:	31 05       	cpc	r19, r1
    eb64:	11 f0       	breq	.+4      	; 0xeb6a <MEMBLOCK_Free+0x4c>
    eb66:	66 23       	and	r22, r22
    eb68:	61 f3       	breq	.-40     	; 0xeb42 <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    eb6a:	66 23       	and	r22, r22
    eb6c:	39 f1       	breq	.+78     	; 0xebbc <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    eb6e:	8e 81       	ldd	r24, Y+6	; 0x06
    eb70:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    eb72:	28 81       	ld	r18, Y
    eb74:	39 81       	ldd	r19, Y+1	; 0x01
    eb76:	48 1b       	sub	r20, r24
    eb78:	59 0b       	sbc	r21, r25
    eb7a:	ca 01       	movw	r24, r20
    eb7c:	b9 01       	movw	r22, r18
    eb7e:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <__udivmodhi4>
    eb82:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    eb84:	cb 01       	movw	r24, r22
    eb86:	43 e0       	ldi	r20, 0x03	; 3
    eb88:	96 95       	lsr	r25
    eb8a:	87 95       	ror	r24
    eb8c:	4a 95       	dec	r20
    eb8e:	e1 f7       	brne	.-8      	; 0xeb88 <MEMBLOCK_Free+0x6a>
    eb90:	e8 85       	ldd	r30, Y+8	; 0x08
    eb92:	f9 85       	ldd	r31, Y+9	; 0x09
    eb94:	e8 0f       	add	r30, r24
    eb96:	f9 1f       	adc	r31, r25
    eb98:	27 70       	andi	r18, 0x07	; 7
    eb9a:	30 70       	andi	r19, 0x00	; 0
    eb9c:	80 e8       	ldi	r24, 0x80	; 128
    eb9e:	90 e0       	ldi	r25, 0x00	; 0
    eba0:	02 c0       	rjmp	.+4      	; 0xeba6 <MEMBLOCK_Free+0x88>
    eba2:	95 95       	asr	r25
    eba4:	87 95       	ror	r24
    eba6:	2a 95       	dec	r18
    eba8:	e2 f7       	brpl	.-8      	; 0xeba2 <MEMBLOCK_Free+0x84>
    ebaa:	20 81       	ld	r18, Z
    ebac:	28 2b       	or	r18, r24
    ebae:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    ebb0:	8c 81       	ldd	r24, Y+4	; 0x04
    ebb2:	9d 81       	ldd	r25, Y+5	; 0x05
    ebb4:	01 96       	adiw	r24, 0x01	; 1
    ebb6:	9d 83       	std	Y+5, r25	; 0x05
    ebb8:	8c 83       	std	Y+4, r24	; 0x04
    ebba:	05 c0       	rjmp	.+10     	; 0xebc6 <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    ebbc:	80 91 8a 02 	lds	r24, 0x028A
    ebc0:	8f 5f       	subi	r24, 0xFF	; 255
    ebc2:	80 93 8a 02 	sts	0x028A, r24
    ebc6:	df 91       	pop	r29
    ebc8:	cf 91       	pop	r28
    ebca:	08 95       	ret

0000ebcc <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    ebcc:	8f 92       	push	r8
    ebce:	9f 92       	push	r9
    ebd0:	af 92       	push	r10
    ebd2:	cf 92       	push	r12
    ebd4:	ef 92       	push	r14
    ebd6:	0f 93       	push	r16
    ebd8:	1f 93       	push	r17
    ebda:	cf 93       	push	r28
    ebdc:	df 93       	push	r29
    ebde:	4b 01       	movw	r8, r22
    ebe0:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    ebe2:	33 27       	eor	r19, r19
    ebe4:	62 9f       	mul	r22, r18
    ebe6:	e0 01       	movw	r28, r0
    ebe8:	63 9f       	mul	r22, r19
    ebea:	d0 0d       	add	r29, r0
    ebec:	72 9f       	mul	r23, r18
    ebee:	d0 0d       	add	r29, r0
    ebf0:	11 24       	eor	r1, r1
    ebf2:	c4 0f       	add	r28, r20
    ebf4:	d5 1f       	adc	r29, r21
    ebf6:	c8 0f       	add	r28, r24
    ebf8:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    ebfa:	11 50       	subi	r17, 0x01	; 1
    ebfc:	1f 3f       	cpi	r17, 0xFF	; 255
    ebfe:	59 f0       	breq	.+22     	; 0xec16 <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    ec00:	2c 2d       	mov	r18, r12
    ec02:	40 2f       	mov	r20, r16
    ec04:	6e 2d       	mov	r22, r14
    ec06:	ce 01       	movw	r24, r28
    ec08:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    ec0c:	c8 0d       	add	r28, r8
    ec0e:	d9 1d       	adc	r29, r9
    destPage++;
    ec10:	e3 94       	inc	r14
    ec12:	11 50       	subi	r17, 0x01	; 1
    ec14:	a8 f7       	brcc	.-22     	; 0xec00 <PICTURE_CopyFlashToLcd+0x34>
    ec16:	df 91       	pop	r29
    ec18:	cf 91       	pop	r28
    ec1a:	1f 91       	pop	r17
    ec1c:	0f 91       	pop	r16
    ec1e:	ef 90       	pop	r14
    ec20:	cf 90       	pop	r12
    ec22:	af 90       	pop	r10
    ec24:	9f 90       	pop	r9
    ec26:	8f 90       	pop	r8
    ec28:	08 95       	ret

0000ec2a <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    ec2a:	1f 92       	push	r1
    ec2c:	0f 92       	push	r0
    ec2e:	0f b6       	in	r0, 0x3f	; 63
    ec30:	0f 92       	push	r0
    ec32:	11 24       	eor	r1, r1
    ec34:	2f 93       	push	r18
    ec36:	3f 93       	push	r19
    ec38:	4f 93       	push	r20
    ec3a:	5f 93       	push	r21
    ec3c:	6f 93       	push	r22
    ec3e:	7f 93       	push	r23
    ec40:	8f 93       	push	r24
    ec42:	9f 93       	push	r25
    ec44:	af 93       	push	r26
    ec46:	bf 93       	push	r27
    ec48:	ef 93       	push	r30
    ec4a:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    ec4c:	80 91 a3 18 	lds	r24, 0x18A3
    ec50:	90 91 a4 18 	lds	r25, 0x18A4
    ec54:	89 2b       	or	r24, r25
    ec56:	29 f0       	breq	.+10     	; 0xec62 <__vector_15+0x38>
		RTC_TickHandler();
    ec58:	e0 91 a3 18 	lds	r30, 0x18A3
    ec5c:	f0 91 a4 18 	lds	r31, 0x18A4
    ec60:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    ec62:	80 91 a2 18 	lds	r24, 0x18A2
    ec66:	8f 37       	cpi	r24, 0x7F	; 127
    ec68:	30 f4       	brcc	.+12     	; 0xec76 <__vector_15+0x4c>
		++RTC_ticks;
    ec6a:	80 91 a2 18 	lds	r24, 0x18A2
    ec6e:	8f 5f       	subi	r24, 0xFF	; 255
    ec70:	80 93 a2 18 	sts	0x18A2, r24
    ec74:	36 c0       	rjmp	.+108    	; 0xece2 <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    ec76:	10 92 a2 18 	sts	0x18A2, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    ec7a:	80 91 a1 18 	lds	r24, 0x18A1
    ec7e:	8b 33       	cpi	r24, 0x3B	; 59
    ec80:	30 f4       	brcc	.+12     	; 0xec8e <__vector_15+0x64>
			++RTC_seconds;
    ec82:	80 91 a1 18 	lds	r24, 0x18A1
    ec86:	8f 5f       	subi	r24, 0xFF	; 255
    ec88:	80 93 a1 18 	sts	0x18A1, r24
    ec8c:	2a c0       	rjmp	.+84     	; 0xece2 <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    ec8e:	10 92 a1 18 	sts	0x18A1, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    ec92:	80 91 a0 18 	lds	r24, 0x18A0
    ec96:	8b 33       	cpi	r24, 0x3B	; 59
    ec98:	30 f4       	brcc	.+12     	; 0xeca6 <__vector_15+0x7c>
				++RTC_minutes;
    ec9a:	80 91 a0 18 	lds	r24, 0x18A0
    ec9e:	8f 5f       	subi	r24, 0xFF	; 255
    eca0:	80 93 a0 18 	sts	0x18A0, r24
    eca4:	1e c0       	rjmp	.+60     	; 0xece2 <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    eca6:	10 92 a0 18 	sts	0x18A0, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    ecaa:	80 91 9f 18 	lds	r24, 0x189F
    ecae:	87 31       	cpi	r24, 0x17	; 23
    ecb0:	30 f4       	brcc	.+12     	; 0xecbe <__vector_15+0x94>
					++RTC_hours;
    ecb2:	80 91 9f 18 	lds	r24, 0x189F
    ecb6:	8f 5f       	subi	r24, 0xFF	; 255
    ecb8:	80 93 9f 18 	sts	0x189F, r24
    ecbc:	12 c0       	rjmp	.+36     	; 0xece2 <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    ecbe:	10 92 9f 18 	sts	0x189F, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    ecc2:	80 91 9e 18 	lds	r24, 0x189E
    ecc6:	8f 5f       	subi	r24, 0xFF	; 255
    ecc8:	80 93 9e 18 	sts	0x189E, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    eccc:	80 91 a5 18 	lds	r24, 0x18A5
    ecd0:	90 91 a6 18 	lds	r25, 0x18A6
    ecd4:	89 2b       	or	r24, r25
    ecd6:	29 f0       	breq	.+10     	; 0xece2 <__vector_15+0xb8>
						RTC_DayHandler();
    ecd8:	e0 91 a5 18 	lds	r30, 0x18A5
    ecdc:	f0 91 a6 18 	lds	r31, 0x18A6
    ece0:	09 95       	icall
    ece2:	ff 91       	pop	r31
    ece4:	ef 91       	pop	r30
    ece6:	bf 91       	pop	r27
    ece8:	af 91       	pop	r26
    ecea:	9f 91       	pop	r25
    ecec:	8f 91       	pop	r24
    ecee:	7f 91       	pop	r23
    ecf0:	6f 91       	pop	r22
    ecf2:	5f 91       	pop	r21
    ecf4:	4f 91       	pop	r20
    ecf6:	3f 91       	pop	r19
    ecf8:	2f 91       	pop	r18
    ecfa:	0f 90       	pop	r0
    ecfc:	0f be       	out	0x3f, r0	; 63
    ecfe:	0f 90       	pop	r0
    ed00:	1f 90       	pop	r1
    ed02:	18 95       	reti

0000ed04 <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    ed04:	10 92 a4 18 	sts	0x18A4, r1
    ed08:	10 92 a3 18 	sts	0x18A3, r1
	RTC_DayHandler = NULL;
    ed0c:	10 92 a6 18 	sts	0x18A6, r1
    ed10:	10 92 a5 18 	sts	0x18A5, r1
	RTC_ticks = 0;
    ed14:	10 92 a2 18 	sts	0x18A2, r1
	RTC_seconds = 0;
    ed18:	10 92 a1 18 	sts	0x18A1, r1
	RTC_minutes = 0;
    ed1c:	10 92 a0 18 	sts	0x18A0, r1
	RTC_hours = 0;
    ed20:	10 92 9f 18 	sts	0x189F, r1
	RTC_days = 0;
    ed24:	10 92 9e 18 	sts	0x189E, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    ed28:	80 91 64 00 	lds	r24, 0x0064
    ed2c:	8f 7b       	andi	r24, 0xBF	; 191
    ed2e:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    ed32:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    ed36:	80 e2       	ldi	r24, 0x20	; 32
    ed38:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    ed3c:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    ed40:	81 e0       	ldi	r24, 0x01	; 1
    ed42:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    ed46:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    ed4a:	80 91 b6 00 	lds	r24, 0x00B6
    ed4e:	99 27       	eor	r25, r25
    ed50:	8f 71       	andi	r24, 0x1F	; 31
    ed52:	90 70       	andi	r25, 0x00	; 0
    ed54:	89 2b       	or	r24, r25
    ed56:	c9 f7       	brne	.-14     	; 0xed4a <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    ed58:	81 e0       	ldi	r24, 0x01	; 1
    ed5a:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    ed5c:	80 93 70 00 	sts	0x0070, r24
    ed60:	08 95       	ret

0000ed62 <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    ed62:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    ed64:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    ed66:	90 93 a4 18 	sts	0x18A4, r25
    ed6a:	80 93 a3 18 	sts	0x18A3, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    ed6e:	2f bf       	out	0x3f, r18	; 63
    ed70:	08 95       	ret

0000ed72 <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    ed72:	10 92 a8 18 	sts	0x18A8, r1
    ed76:	10 92 a7 18 	sts	0x18A7, r1
	TIMING_currentTime = 0;
    ed7a:	10 92 ab 18 	sts	0x18AB, r1
    ed7e:	10 92 ac 18 	sts	0x18AC, r1
    ed82:	10 92 ad 18 	sts	0x18AD, r1
    ed86:	10 92 ae 18 	sts	0x18AE, r1
    ed8a:	08 95       	ret

0000ed8c <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    ed8c:	6f 92       	push	r6
    ed8e:	7f 92       	push	r7
    ed90:	9f 92       	push	r9
    ed92:	af 92       	push	r10
    ed94:	bf 92       	push	r11
    ed96:	cf 92       	push	r12
    ed98:	df 92       	push	r13
    ed9a:	ef 92       	push	r14
    ed9c:	ff 92       	push	r15
    ed9e:	0f 93       	push	r16
    eda0:	1f 93       	push	r17
    eda2:	cf 93       	push	r28
    eda4:	df 93       	push	r29
    eda6:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    eda8:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    edaa:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    edac:	60 91 a7 18 	lds	r22, 0x18A7
    edb0:	70 91 a8 18 	lds	r23, 0x18A8
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    edb4:	e0 91 a9 18 	lds	r30, 0x18A9
    edb8:	f0 91 aa 18 	lds	r31, 0x18AA
    edbc:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    edbe:	cc 24       	eor	r12, r12
    edc0:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    edc2:	dc 01       	movw	r26, r24
    edc4:	ed 90       	ld	r14, X+
    edc6:	fd 90       	ld	r15, X+
    edc8:	0d 91       	ld	r16, X+
    edca:	1c 91       	ld	r17, X
    edcc:	80 91 ab 18 	lds	r24, 0x18AB
    edd0:	90 91 ac 18 	lds	r25, 0x18AC
    edd4:	a0 91 ad 18 	lds	r26, 0x18AD
    edd8:	b0 91 ae 18 	lds	r27, 0x18AE
    eddc:	8e 15       	cp	r24, r14
    edde:	9f 05       	cpc	r25, r15
    ede0:	a0 07       	cpc	r26, r16
    ede2:	b1 07       	cpc	r27, r17
    ede4:	58 f1       	brcs	.+86     	; 0xee3c <TIMING_AddEvent+0xb0>
    ede6:	09 c0       	rjmp	.+18     	; 0xedfa <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    ede8:	61 15       	cp	r22, r1
    edea:	71 05       	cpc	r23, r1
    edec:	39 f1       	breq	.+78     	; 0xee3c <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    edee:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    edf0:	05 84       	ldd	r0, Z+13	; 0x0d
    edf2:	f6 85       	ldd	r31, Z+14	; 0x0e
    edf4:	e0 2d       	mov	r30, r0
			--eventsLeft;
    edf6:	61 50       	subi	r22, 0x01	; 1
    edf8:	70 40       	sbci	r23, 0x00	; 0
    edfa:	20 81       	ld	r18, Z
    edfc:	31 81       	ldd	r19, Z+1	; 0x01
    edfe:	42 81       	ldd	r20, Z+2	; 0x02
    ee00:	53 81       	ldd	r21, Z+3	; 0x03
    ee02:	80 91 ab 18 	lds	r24, 0x18AB
    ee06:	90 91 ac 18 	lds	r25, 0x18AC
    ee0a:	a0 91 ad 18 	lds	r26, 0x18AD
    ee0e:	b0 91 ae 18 	lds	r27, 0x18AE
    ee12:	28 17       	cp	r18, r24
    ee14:	39 07       	cpc	r19, r25
    ee16:	4a 07       	cpc	r20, r26
    ee18:	5b 07       	cpc	r21, r27
    ee1a:	30 f7       	brcc	.-52     	; 0xede8 <TIMING_AddEvent+0x5c>
    ee1c:	0f c0       	rjmp	.+30     	; 0xee3c <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    ee1e:	80 81       	ld	r24, Z
    ee20:	91 81       	ldd	r25, Z+1	; 0x01
    ee22:	a2 81       	ldd	r26, Z+2	; 0x02
    ee24:	b3 81       	ldd	r27, Z+3	; 0x03
    ee26:	8e 15       	cp	r24, r14
    ee28:	9f 05       	cpc	r25, r15
    ee2a:	a0 07       	cpc	r26, r16
    ee2c:	b1 07       	cpc	r27, r17
    ee2e:	48 f4       	brcc	.+18     	; 0xee42 <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    ee30:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    ee32:	05 84       	ldd	r0, Z+13	; 0x0d
    ee34:	f6 85       	ldd	r31, Z+14	; 0x0e
    ee36:	e0 2d       	mov	r30, r0
		--eventsLeft;
    ee38:	61 50       	subi	r22, 0x01	; 1
    ee3a:	70 40       	sbci	r23, 0x00	; 0
    ee3c:	61 15       	cp	r22, r1
    ee3e:	71 05       	cpc	r23, r1
    ee40:	71 f7       	brne	.-36     	; 0xee1e <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    ee42:	80 91 a7 18 	lds	r24, 0x18A7
    ee46:	90 91 a8 18 	lds	r25, 0x18A8
    ee4a:	68 17       	cp	r22, r24
    ee4c:	79 07       	cpc	r23, r25
    ee4e:	a1 f4       	brne	.+40     	; 0xee78 <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    ee50:	e3 01       	movw	r28, r6
    ee52:	be 86       	std	Y+14, r11	; 0x0e
    ee54:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    ee56:	70 92 aa 18 	sts	0x18AA, r7
    ee5a:	60 92 a9 18 	sts	0x18A9, r6
		TIMING_nextEventTime = event->triggerTime;
    ee5e:	88 81       	ld	r24, Y
    ee60:	99 81       	ldd	r25, Y+1	; 0x01
    ee62:	aa 81       	ldd	r26, Y+2	; 0x02
    ee64:	bb 81       	ldd	r27, Y+3	; 0x03
    ee66:	80 93 af 18 	sts	0x18AF, r24
    ee6a:	90 93 b0 18 	sts	0x18B0, r25
    ee6e:	a0 93 b1 18 	sts	0x18B1, r26
    ee72:	b0 93 b2 18 	sts	0x18B2, r27
    ee76:	06 c0       	rjmp	.+12     	; 0xee84 <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    ee78:	e3 01       	movw	r28, r6
    ee7a:	fe 87       	std	Y+14, r31	; 0x0e
    ee7c:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    ee7e:	f6 01       	movw	r30, r12
    ee80:	76 86       	std	Z+14, r7	; 0x0e
    ee82:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    ee84:	80 91 a7 18 	lds	r24, 0x18A7
    ee88:	90 91 a8 18 	lds	r25, 0x18A8
    ee8c:	01 96       	adiw	r24, 0x01	; 1
    ee8e:	90 93 a8 18 	sts	0x18A8, r25
    ee92:	80 93 a7 18 	sts	0x18A7, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    ee96:	9f be       	out	0x3f, r9	; 63
    ee98:	df 91       	pop	r29
    ee9a:	cf 91       	pop	r28
    ee9c:	1f 91       	pop	r17
    ee9e:	0f 91       	pop	r16
    eea0:	ff 90       	pop	r15
    eea2:	ef 90       	pop	r14
    eea4:	df 90       	pop	r13
    eea6:	cf 90       	pop	r12
    eea8:	bf 90       	pop	r11
    eeaa:	af 90       	pop	r10
    eeac:	9f 90       	pop	r9
    eeae:	7f 90       	pop	r7
    eeb0:	6f 90       	pop	r6
    eeb2:	08 95       	ret

0000eeb4 <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    eeb4:	0f 93       	push	r16
    eeb6:	1f 93       	push	r17
    eeb8:	cf 93       	push	r28
    eeba:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    eebc:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    eebe:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    eec0:	80 91 ab 18 	lds	r24, 0x18AB
    eec4:	90 91 ac 18 	lds	r25, 0x18AC
    eec8:	a0 91 ad 18 	lds	r26, 0x18AD
    eecc:	b0 91 ae 18 	lds	r27, 0x18AE
    eed0:	01 96       	adiw	r24, 0x01	; 1
    eed2:	a1 1d       	adc	r26, r1
    eed4:	b1 1d       	adc	r27, r1
    eed6:	80 93 ab 18 	sts	0x18AB, r24
    eeda:	90 93 ac 18 	sts	0x18AC, r25
    eede:	a0 93 ad 18 	sts	0x18AD, r26
    eee2:	b0 93 ae 18 	sts	0x18AE, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    eee6:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    eee8:	80 91 a7 18 	lds	r24, 0x18A7
    eeec:	90 91 a8 18 	lds	r25, 0x18A8
    eef0:	89 2b       	or	r24, r25
    eef2:	09 f4       	brne	.+2      	; 0xeef6 <TIMING_TickHandler+0x42>
    eef4:	70 c0       	rjmp	.+224    	; 0xefd6 <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    eef6:	20 91 af 18 	lds	r18, 0x18AF
    eefa:	30 91 b0 18 	lds	r19, 0x18B0
    eefe:	40 91 b1 18 	lds	r20, 0x18B1
    ef02:	50 91 b2 18 	lds	r21, 0x18B2
		if (TIMING_currentTime != next_event) {
    ef06:	80 91 ab 18 	lds	r24, 0x18AB
    ef0a:	90 91 ac 18 	lds	r25, 0x18AC
    ef0e:	a0 91 ad 18 	lds	r26, 0x18AD
    ef12:	b0 91 ae 18 	lds	r27, 0x18AE
    ef16:	82 17       	cp	r24, r18
    ef18:	93 07       	cpc	r25, r19
    ef1a:	a4 07       	cpc	r26, r20
    ef1c:	b5 07       	cpc	r27, r21
    ef1e:	11 f0       	breq	.+4      	; 0xef24 <TIMING_TickHandler+0x70>
			goon = 0;
    ef20:	00 e0       	ldi	r16, 0x00	; 0
    ef22:	50 c0       	rjmp	.+160    	; 0xefc4 <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    ef24:	c0 91 a9 18 	lds	r28, 0x18A9
    ef28:	d0 91 aa 18 	lds	r29, 0x18AA
			TIMING_firstEvent = event->next;
    ef2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    ef2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    ef30:	f0 93 aa 18 	sts	0x18AA, r31
    ef34:	e0 93 a9 18 	sts	0x18A9, r30
			--TIMING_queueSize;
    ef38:	80 91 a7 18 	lds	r24, 0x18A7
    ef3c:	90 91 a8 18 	lds	r25, 0x18A8
    ef40:	01 97       	sbiw	r24, 0x01	; 1
    ef42:	90 93 a8 18 	sts	0x18A8, r25
    ef46:	80 93 a7 18 	sts	0x18A7, r24
			if (TIMING_queueSize > 0) {
    ef4a:	80 91 a7 18 	lds	r24, 0x18A7
    ef4e:	90 91 a8 18 	lds	r25, 0x18A8
    ef52:	89 2b       	or	r24, r25
    ef54:	61 f0       	breq	.+24     	; 0xef6e <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    ef56:	80 81       	ld	r24, Z
    ef58:	91 81       	ldd	r25, Z+1	; 0x01
    ef5a:	a2 81       	ldd	r26, Z+2	; 0x02
    ef5c:	b3 81       	ldd	r27, Z+3	; 0x03
    ef5e:	80 93 af 18 	sts	0x18AF, r24
    ef62:	90 93 b0 18 	sts	0x18B0, r25
    ef66:	a0 93 b1 18 	sts	0x18B1, r26
    ef6a:	b0 93 b2 18 	sts	0x18B2, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    ef6e:	89 85       	ldd	r24, Y+9	; 0x09
    ef70:	9a 85       	ldd	r25, Y+10	; 0x0a
    ef72:	00 97       	sbiw	r24, 0x00	; 0
    ef74:	19 f0       	breq	.+6      	; 0xef7c <TIMING_TickHandler+0xc8>
    ef76:	01 97       	sbiw	r24, 0x01	; 1
    ef78:	39 f0       	breq	.+14     	; 0xef88 <TIMING_TickHandler+0xd4>
    ef7a:	09 c0       	rjmp	.+18     	; 0xef8e <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    ef7c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ef7e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ef80:	80 81       	ld	r24, Z
    ef82:	8f 5f       	subi	r24, 0xFF	; 255
    ef84:	80 83       	st	Z, r24
		break;
    ef86:	03 c0       	rjmp	.+6      	; 0xef8e <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    ef88:	eb 85       	ldd	r30, Y+11	; 0x0b
    ef8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ef8c:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    ef8e:	88 85       	ldd	r24, Y+8	; 0x08
    ef90:	8f 3f       	cpi	r24, 0xFF	; 255
    ef92:	11 f0       	breq	.+4      	; 0xef98 <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    ef94:	81 50       	subi	r24, 0x01	; 1
    ef96:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    ef98:	88 85       	ldd	r24, Y+8	; 0x08
    ef9a:	88 23       	and	r24, r24
    ef9c:	99 f0       	breq	.+38     	; 0xefc4 <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    ef9e:	88 81       	ld	r24, Y
    efa0:	99 81       	ldd	r25, Y+1	; 0x01
    efa2:	aa 81       	ldd	r26, Y+2	; 0x02
    efa4:	bb 81       	ldd	r27, Y+3	; 0x03
    efa6:	2c 81       	ldd	r18, Y+4	; 0x04
    efa8:	3d 81       	ldd	r19, Y+5	; 0x05
    efaa:	4e 81       	ldd	r20, Y+6	; 0x06
    efac:	5f 81       	ldd	r21, Y+7	; 0x07
    efae:	82 0f       	add	r24, r18
    efb0:	93 1f       	adc	r25, r19
    efb2:	a4 1f       	adc	r26, r20
    efb4:	b5 1f       	adc	r27, r21
    efb6:	88 83       	st	Y, r24
    efb8:	99 83       	std	Y+1, r25	; 0x01
    efba:	aa 83       	std	Y+2, r26	; 0x02
    efbc:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    efbe:	ce 01       	movw	r24, r28
    efc0:	0e 94 c6 76 	call	0xed8c	; 0xed8c <TIMING_AddEvent>
    efc4:	80 91 a7 18 	lds	r24, 0x18A7
    efc8:	90 91 a8 18 	lds	r25, 0x18A8
    efcc:	89 2b       	or	r24, r25
    efce:	19 f0       	breq	.+6      	; 0xefd6 <TIMING_TickHandler+0x122>
    efd0:	00 23       	and	r16, r16
    efd2:	09 f0       	breq	.+2      	; 0xefd6 <TIMING_TickHandler+0x122>
    efd4:	90 cf       	rjmp	.-224    	; 0xeef6 <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    efd6:	1f bf       	out	0x3f, r17	; 63
    efd8:	df 91       	pop	r29
    efda:	cf 91       	pop	r28
    efdc:	1f 91       	pop	r17
    efde:	0f 91       	pop	r16
    efe0:	08 95       	ret

0000efe2 <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    efe2:	cf 93       	push	r28
    efe4:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    efe6:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    efe8:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    efea:	40 91 a7 18 	lds	r20, 0x18A7
    efee:	50 91 a8 18 	lds	r21, 0x18A8
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    eff2:	e0 91 a9 18 	lds	r30, 0x18A9
    eff6:	f0 91 aa 18 	lds	r31, 0x18AA
	TIMING_event_t * lastEvent = 0;
    effa:	a0 e0       	ldi	r26, 0x00	; 0
    effc:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    effe:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    f000:	41 15       	cp	r20, r1
    f002:	51 05       	cpc	r21, r1
    f004:	81 f0       	breq	.+32     	; 0xf026 <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    f006:	e8 17       	cp	r30, r24
    f008:	f9 07       	cpc	r31, r25
    f00a:	11 f4       	brne	.+4      	; 0xf010 <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    f00c:	21 e0       	ldi	r18, 0x01	; 1
    f00e:	06 c0       	rjmp	.+12     	; 0xf01c <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    f010:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    f012:	05 84       	ldd	r0, Z+13	; 0x0d
    f014:	f6 85       	ldd	r31, Z+14	; 0x0e
    f016:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    f018:	41 50       	subi	r20, 0x01	; 1
    f01a:	50 40       	sbci	r21, 0x00	; 0
    f01c:	41 15       	cp	r20, r1
    f01e:	51 05       	cpc	r21, r1
    f020:	11 f0       	breq	.+4      	; 0xf026 <TIMING_RemoveEvent+0x44>
    f022:	22 23       	and	r18, r18
    f024:	81 f3       	breq	.-32     	; 0xf006 <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    f026:	22 23       	and	r18, r18
    f028:	d1 f0       	breq	.+52     	; 0xf05e <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    f02a:	80 91 a7 18 	lds	r24, 0x18A7
    f02e:	90 91 a8 18 	lds	r25, 0x18A8
    f032:	25 85       	ldd	r18, Z+13	; 0x0d
    f034:	36 85       	ldd	r19, Z+14	; 0x0e
    f036:	48 17       	cp	r20, r24
    f038:	59 07       	cpc	r21, r25
    f03a:	29 f4       	brne	.+10     	; 0xf046 <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    f03c:	30 93 aa 18 	sts	0x18AA, r19
    f040:	20 93 a9 18 	sts	0x18A9, r18
    f044:	03 c0       	rjmp	.+6      	; 0xf04c <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    f046:	ed 01       	movw	r28, r26
    f048:	3e 87       	std	Y+14, r19	; 0x0e
    f04a:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    f04c:	80 91 a7 18 	lds	r24, 0x18A7
    f050:	90 91 a8 18 	lds	r25, 0x18A8
    f054:	01 97       	sbiw	r24, 0x01	; 1
    f056:	90 93 a8 18 	sts	0x18A8, r25
    f05a:	80 93 a7 18 	sts	0x18A7, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f05e:	6f bf       	out	0x3f, r22	; 63
    f060:	df 91       	pop	r29
    f062:	cf 91       	pop	r28
    f064:	08 95       	ret

0000f066 <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f066:	cf 92       	push	r12
    f068:	df 92       	push	r13
    f06a:	ef 92       	push	r14
    f06c:	ff 92       	push	r15
    f06e:	0f 93       	push	r16
    f070:	1f 93       	push	r17
    f072:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f074:	44 23       	and	r20, r20
    f076:	91 f0       	breq	.+36     	; 0xf09c <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f078:	60 83       	st	Z, r22
    f07a:	71 83       	std	Z+1, r23	; 0x01
    f07c:	82 83       	std	Z+2, r24	; 0x02
    f07e:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f080:	04 83       	std	Z+4, r16	; 0x04
    f082:	15 83       	std	Z+5, r17	; 0x05
    f084:	26 83       	std	Z+6, r18	; 0x06
    f086:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f088:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    f08a:	81 e0       	ldi	r24, 0x01	; 1
    f08c:	90 e0       	ldi	r25, 0x00	; 0
    f08e:	92 87       	std	Z+10, r25	; 0x0a
    f090:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    f092:	f4 86       	std	Z+12, r15	; 0x0c
    f094:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f096:	c6 01       	movw	r24, r12
    f098:	0e 94 c6 76 	call	0xed8c	; 0xed8c <TIMING_AddEvent>
    f09c:	1f 91       	pop	r17
    f09e:	0f 91       	pop	r16
    f0a0:	ff 90       	pop	r15
    f0a2:	ef 90       	pop	r14
    f0a4:	df 90       	pop	r13
    f0a6:	cf 90       	pop	r12
    f0a8:	08 95       	ret

0000f0aa <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f0aa:	8f 92       	push	r8
    f0ac:	9f 92       	push	r9
    f0ae:	af 92       	push	r10
    f0b0:	bf 92       	push	r11
    f0b2:	cf 92       	push	r12
    f0b4:	df 92       	push	r13
    f0b6:	ef 92       	push	r14
    f0b8:	ff 92       	push	r15
    f0ba:	0f 93       	push	r16
    f0bc:	1f 93       	push	r17
    f0be:	4b 01       	movw	r8, r22
    f0c0:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    f0c2:	69 01       	movw	r12, r18
    f0c4:	7a 01       	movw	r14, r20
    f0c6:	00 e0       	ldi	r16, 0x00	; 0
    f0c8:	10 e0       	ldi	r17, 0x00	; 0
    f0ca:	20 e0       	ldi	r18, 0x00	; 0
    f0cc:	30 e0       	ldi	r19, 0x00	; 0
    f0ce:	41 e0       	ldi	r20, 0x01	; 1
    f0d0:	c5 01       	movw	r24, r10
    f0d2:	b4 01       	movw	r22, r8
    f0d4:	0e 94 33 78 	call	0xf066	; 0xf066 <TIMING_AddRepCallbackEventAt>
    f0d8:	1f 91       	pop	r17
    f0da:	0f 91       	pop	r16
    f0dc:	ff 90       	pop	r15
    f0de:	ef 90       	pop	r14
    f0e0:	df 90       	pop	r13
    f0e2:	cf 90       	pop	r12
    f0e4:	bf 90       	pop	r11
    f0e6:	af 90       	pop	r10
    f0e8:	9f 90       	pop	r9
    f0ea:	8f 90       	pop	r8
    f0ec:	08 95       	ret

0000f0ee <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f0ee:	ef 92       	push	r14
    f0f0:	ff 92       	push	r15
    f0f2:	0f 93       	push	r16
    f0f4:	1f 93       	push	r17
    f0f6:	7b 01       	movw	r14, r22
    f0f8:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    f0fa:	80 91 ab 18 	lds	r24, 0x18AB
    f0fe:	90 91 ac 18 	lds	r25, 0x18AC
    f102:	a0 91 ad 18 	lds	r26, 0x18AD
    f106:	b0 91 ae 18 	lds	r27, 0x18AE
    f10a:	8e 0d       	add	r24, r14
    f10c:	9f 1d       	adc	r25, r15
    f10e:	a0 1f       	adc	r26, r16
    f110:	b1 1f       	adc	r27, r17
    f112:	bc 01       	movw	r22, r24
    f114:	cd 01       	movw	r24, r26
    f116:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <TIMING_AddCallbackEventAt>
    f11a:	1f 91       	pop	r17
    f11c:	0f 91       	pop	r16
    f11e:	ff 90       	pop	r15
    f120:	ef 90       	pop	r14
    f122:	08 95       	ret

0000f124 <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f124:	7f 92       	push	r7
    f126:	8f 92       	push	r8
    f128:	9f 92       	push	r9
    f12a:	af 92       	push	r10
    f12c:	bf 92       	push	r11
    f12e:	cf 92       	push	r12
    f130:	df 92       	push	r13
    f132:	ef 92       	push	r14
    f134:	ff 92       	push	r15
    f136:	0f 93       	push	r16
    f138:	1f 93       	push	r17
    f13a:	4b 01       	movw	r8, r22
    f13c:	5c 01       	movw	r10, r24
    f13e:	74 2e       	mov	r7, r20
    f140:	b9 01       	movw	r22, r18
    f142:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    f144:	80 91 ab 18 	lds	r24, 0x18AB
    f148:	90 91 ac 18 	lds	r25, 0x18AC
    f14c:	a0 91 ad 18 	lds	r26, 0x18AD
    f150:	b0 91 ae 18 	lds	r27, 0x18AE
    f154:	88 0d       	add	r24, r8
    f156:	99 1d       	adc	r25, r9
    f158:	aa 1d       	adc	r26, r10
    f15a:	bb 1d       	adc	r27, r11
    f15c:	8a 01       	movw	r16, r20
    f15e:	9b 01       	movw	r18, r22
    f160:	47 2d       	mov	r20, r7
    f162:	bc 01       	movw	r22, r24
    f164:	cd 01       	movw	r24, r26
    f166:	0e 94 33 78 	call	0xf066	; 0xf066 <TIMING_AddRepCallbackEventAt>
    f16a:	1f 91       	pop	r17
    f16c:	0f 91       	pop	r16
    f16e:	ff 90       	pop	r15
    f170:	ef 90       	pop	r14
    f172:	df 90       	pop	r13
    f174:	cf 90       	pop	r12
    f176:	bf 90       	pop	r11
    f178:	af 90       	pop	r10
    f17a:	9f 90       	pop	r9
    f17c:	8f 90       	pop	r8
    f17e:	7f 90       	pop	r7
    f180:	08 95       	ret

0000f182 <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f182:	8f 92       	push	r8
    f184:	9f 92       	push	r9
    f186:	af 92       	push	r10
    f188:	bf 92       	push	r11
    f18a:	cf 92       	push	r12
    f18c:	df 92       	push	r13
    f18e:	ef 92       	push	r14
    f190:	ff 92       	push	r15
    f192:	0f 93       	push	r16
    f194:	1f 93       	push	r17
    f196:	e8 2f       	mov	r30, r24
    f198:	4a 01       	movw	r8, r20
    f19a:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    f19c:	68 01       	movw	r12, r16
    f19e:	79 01       	movw	r14, r18
    f1a0:	8a 01       	movw	r16, r20
    f1a2:	9b 01       	movw	r18, r22
    f1a4:	4e 2f       	mov	r20, r30
    f1a6:	c5 01       	movw	r24, r10
    f1a8:	b4 01       	movw	r22, r8
    f1aa:	0e 94 92 78 	call	0xf124	; 0xf124 <TIMING_AddRepCallbackEventAfter>
    f1ae:	1f 91       	pop	r17
    f1b0:	0f 91       	pop	r16
    f1b2:	ff 90       	pop	r15
    f1b4:	ef 90       	pop	r14
    f1b6:	df 90       	pop	r13
    f1b8:	cf 90       	pop	r12
    f1ba:	bf 90       	pop	r11
    f1bc:	af 90       	pop	r10
    f1be:	9f 90       	pop	r9
    f1c0:	8f 90       	pop	r8
    f1c2:	08 95       	ret

0000f1c4 <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    f1c4:	ef 92       	push	r14
    f1c6:	ff 92       	push	r15
    f1c8:	0f 93       	push	r16
    f1ca:	1f 93       	push	r17
    f1cc:	cf 93       	push	r28
    f1ce:	e6 2e       	mov	r14, r22
    f1d0:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    f1d2:	80 52       	subi	r24, 0x20	; 32
    f1d4:	8f 35       	cpi	r24, 0x5F	; 95
    f1d6:	90 f4       	brcc	.+36     	; 0xf1fc <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    f1d8:	95 e0       	ldi	r25, 0x05	; 5
    f1da:	f9 2e       	mov	r15, r25
    f1dc:	8f 9d       	mul	r24, r15
    f1de:	80 01       	movw	r16, r0
    f1e0:	11 24       	eor	r1, r1
    f1e2:	0e 5a       	subi	r16, 0xAE	; 174
    f1e4:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    f1e6:	21 e0       	ldi	r18, 0x01	; 1
    f1e8:	8f ef       	ldi	r24, 0xFF	; 255
    f1ea:	0e 94 9a 6f 	call	0xdf34	; 0xdf34 <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    f1ee:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    f1f0:	2f 2d       	mov	r18, r15
    f1f2:	4c 2f       	mov	r20, r28
    f1f4:	6e 2d       	mov	r22, r14
    f1f6:	c8 01       	movw	r24, r16
    f1f8:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <LCD_WritePage_F>
    f1fc:	cf 91       	pop	r28
    f1fe:	1f 91       	pop	r17
    f200:	0f 91       	pop	r16
    f202:	ff 90       	pop	r15
    f204:	ef 90       	pop	r14
    f206:	08 95       	ret

0000f208 <TERMFONT_DisplayString>:
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
    f208:	0f 93       	push	r16
    f20a:	1f 93       	push	r17
    f20c:	cf 93       	push	r28
    f20e:	df 93       	push	r29
    f210:	ec 01       	movw	r28, r24
    f212:	06 2f       	mov	r16, r22
    f214:	14 2f       	mov	r17, r20
  
    if (pTextString == NULL) { return; }
    f216:	89 2b       	or	r24, r25
    f218:	61 f0       	breq	.+24     	; 0xf232 <TERMFONT_DisplayString+0x2a>
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
	column += TERMFONT_CHAR_WIDTH;
    f21a:	88 81       	ld	r24, Y
    f21c:	88 23       	and	r24, r24
    f21e:	49 f0       	breq	.+18     	; 0xf232 <TERMFONT_DisplayString+0x2a>
  
    if (pTextString == NULL) { return; }
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
    f220:	41 2f       	mov	r20, r17
    f222:	60 2f       	mov	r22, r16
    f224:	89 91       	ld	r24, Y+
    f226:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <TERMFONT_DisplayChar>
	column += TERMFONT_CHAR_WIDTH;
    f22a:	1a 5f       	subi	r17, 0xFA	; 250
    f22c:	88 81       	ld	r24, Y
    f22e:	88 23       	and	r24, r24
    f230:	b9 f7       	brne	.-18     	; 0xf220 <TERMFONT_DisplayString+0x18>
    f232:	df 91       	pop	r29
    f234:	cf 91       	pop	r28
    f236:	1f 91       	pop	r17
    f238:	0f 91       	pop	r16
    f23a:	08 95       	ret

0000f23c <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    f23c:	20 91 64 00 	lds	r18, 0x0064
    f240:	27 7f       	andi	r18, 0xF7	; 247
    f242:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    f246:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    f248:	28 e0       	ldi	r18, 0x08	; 8
    f24a:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    f24e:	20 e1       	ldi	r18, 0x10	; 16
    f250:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    f254:	20 91 81 00 	lds	r18, 0x0081
    f258:	21 60       	ori	r18, 0x01	; 1
    f25a:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f25e:	90 93 c3 18 	sts	0x18C3, r25
    f262:	80 93 c2 18 	sts	0x18C2, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f266:	23 eb       	ldi	r18, 0xB3	; 179
    f268:	38 e1       	ldi	r19, 0x18	; 24
    f26a:	4e e3       	ldi	r20, 0x3E	; 62
    f26c:	59 e7       	ldi	r21, 0x79	; 121
    f26e:	6a e0       	ldi	r22, 0x0A	; 10
    f270:	70 e0       	ldi	r23, 0x00	; 0
    f272:	80 e0       	ldi	r24, 0x00	; 0
    f274:	90 e0       	ldi	r25, 0x00	; 0
    f276:	0e 94 77 78 	call	0xf0ee	; 0xf0ee <TIMING_AddCallbackEventAfter>
    f27a:	08 95       	ret

0000f27c <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f27c:	ef 92       	push	r14
    f27e:	ff 92       	push	r15
    f280:	0f 93       	push	r16
    f282:	1f 93       	push	r17
    f284:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f286:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f288:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f28a:	e0 91 c2 18 	lds	r30, 0x18C2
    f28e:	f0 91 c3 18 	lds	r31, 0x18C3
    f292:	81 85       	ldd	r24, Z+9	; 0x09
    f294:	84 30       	cpi	r24, 0x04	; 4
    f296:	b0 f1       	brcs	.+108    	; 0xf304 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f298:	cf 01       	movw	r24, r30
    f29a:	0e 94 85 74 	call	0xe90a	; 0xe90a <FIFO_GetUint16>
    f29e:	7c 01       	movw	r14, r24
    f2a0:	00 27       	eor	r16, r16
    f2a2:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f2a4:	80 91 c2 18 	lds	r24, 0x18C2
    f2a8:	90 91 c3 18 	lds	r25, 0x18C3
    f2ac:	0e 94 85 74 	call	0xe90a	; 0xe90a <FIFO_GetUint16>
    f2b0:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f2b2:	01 97       	sbiw	r24, 0x01	; 1
    f2b4:	31 f4       	brne	.+12     	; 0xf2c2 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f2b6:	10 92 8b 02 	sts	0x028B, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f2ba:	80 91 81 00 	lds	r24, 0x0081
    f2be:	8e 7f       	andi	r24, 0xFE	; 254
    f2c0:	06 c0       	rjmp	.+12     	; 0xf2ce <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f2c2:	81 e0       	ldi	r24, 0x01	; 1
    f2c4:	80 93 8b 02 	sts	0x028B, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f2c8:	80 91 81 00 	lds	r24, 0x0081
    f2cc:	81 60       	ori	r24, 0x01	; 1
    f2ce:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f2d2:	9a 01       	movw	r18, r20
    f2d4:	36 95       	lsr	r19
    f2d6:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f2d8:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f2da:	9a 01       	movw	r18, r20
    f2dc:	23 2f       	mov	r18, r19
    f2de:	33 27       	eor	r19, r19
    f2e0:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f2e2:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f2e6:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f2ea:	25 2f       	mov	r18, r21
    f2ec:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f2ee:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f2f2:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f2f6:	23 eb       	ldi	r18, 0xB3	; 179
    f2f8:	38 e1       	ldi	r19, 0x18	; 24
    f2fa:	4e e3       	ldi	r20, 0x3E	; 62
    f2fc:	59 e7       	ldi	r21, 0x79	; 121
    f2fe:	c8 01       	movw	r24, r16
    f300:	b7 01       	movw	r22, r14
    f302:	0f c0       	rjmp	.+30     	; 0xf322 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f304:	10 92 8b 02 	sts	0x028B, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f308:	80 91 81 00 	lds	r24, 0x0081
    f30c:	8e 7f       	andi	r24, 0xFE	; 254
    f30e:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f312:	23 eb       	ldi	r18, 0xB3	; 179
    f314:	38 e1       	ldi	r19, 0x18	; 24
    f316:	4e e3       	ldi	r20, 0x3E	; 62
    f318:	59 e7       	ldi	r21, 0x79	; 121
    f31a:	6a e0       	ldi	r22, 0x0A	; 10
    f31c:	70 e0       	ldi	r23, 0x00	; 0
    f31e:	80 e0       	ldi	r24, 0x00	; 0
    f320:	90 e0       	ldi	r25, 0x00	; 0
    f322:	0e 94 77 78 	call	0xf0ee	; 0xf0ee <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f326:	cf bf       	out	0x3f, r28	; 63
    f328:	cf 91       	pop	r28
    f32a:	1f 91       	pop	r17
    f32c:	0f 91       	pop	r16
    f32e:	ff 90       	pop	r15
    f330:	ef 90       	pop	r14
    f332:	08 95       	ret

0000f334 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f334:	10 92 8b 02 	sts	0x028B, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f338:	80 91 81 00 	lds	r24, 0x0081
    f33c:	8e 7f       	andi	r24, 0xFE	; 254
    f33e:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f342:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f346:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f34a:	83 eb       	ldi	r24, 0xB3	; 179
    f34c:	98 e1       	ldi	r25, 0x18	; 24
    f34e:	0e 94 f1 77 	call	0xefe2	; 0xefe2 <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f352:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f354:	80 91 64 00 	lds	r24, 0x0064
    f358:	88 60       	ori	r24, 0x08	; 8
    f35a:	80 93 64 00 	sts	0x0064, r24
    f35e:	08 95       	ret

0000f360 <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f360:	80 91 8b 02 	lds	r24, 0x028B
}
    f364:	99 27       	eor	r25, r25
    f366:	08 95       	ret

0000f368 <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f368:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f36a:	e0 91 c4 18 	lds	r30, 0x18C4
    f36e:	f0 91 c5 18 	lds	r31, 0x18C5
    f372:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f374:	24 30       	cpi	r18, 0x04	; 4
    f376:	08 f4       	brcc	.+2      	; 0xf37a <SONG_CallbackControlTask_F+0x12>
    f378:	41 c0       	rjmp	.+130    	; 0xf3fc <SONG_CallbackControlTask_F+0x94>
    f37a:	e0 91 d5 18 	lds	r30, 0x18D5
    f37e:	f0 91 d6 18 	lds	r31, 0x18D6
    f382:	85 91       	lpm	r24, Z+
    f384:	94 91       	lpm	r25, Z+
    f386:	89 2b       	or	r24, r25
    f388:	09 f4       	brne	.+2      	; 0xf38c <SONG_CallbackControlTask_F+0x24>
    f38a:	38 c0       	rjmp	.+112    	; 0xf3fc <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f38c:	80 91 d5 18 	lds	r24, 0x18D5
    f390:	90 91 d6 18 	lds	r25, 0x18D6
    f394:	fc 01       	movw	r30, r24
    f396:	65 91       	lpm	r22, Z+
    f398:	74 91       	lpm	r23, Z+
    f39a:	c2 2f       	mov	r28, r18
    f39c:	c4 50       	subi	r28, 0x04	; 4
    f39e:	2f ef       	ldi	r18, 0xFF	; 255
    f3a0:	6f 3f       	cpi	r22, 0xFF	; 255
    f3a2:	72 07       	cpc	r23, r18
    f3a4:	49 f4       	brne	.+18     	; 0xf3b8 <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f3a6:	80 91 d7 18 	lds	r24, 0x18D7
    f3aa:	90 91 d8 18 	lds	r25, 0x18D8
    f3ae:	90 93 d6 18 	sts	0x18D6, r25
    f3b2:	80 93 d5 18 	sts	0x18D5, r24
    f3b6:	1e c0       	rjmp	.+60     	; 0xf3f4 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f3b8:	02 96       	adiw	r24, 0x02	; 2
    f3ba:	90 93 d6 18 	sts	0x18D6, r25
    f3be:	80 93 d5 18 	sts	0x18D5, r24
    f3c2:	80 91 c4 18 	lds	r24, 0x18C4
    f3c6:	90 91 c5 18 	lds	r25, 0x18C5
    f3ca:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f3ce:	80 91 d5 18 	lds	r24, 0x18D5
    f3d2:	90 91 d6 18 	lds	r25, 0x18D6
    f3d6:	fc 01       	movw	r30, r24
    f3d8:	02 96       	adiw	r24, 0x02	; 2
    f3da:	90 93 d6 18 	sts	0x18D6, r25
    f3de:	80 93 d5 18 	sts	0x18D5, r24
    f3e2:	85 91       	lpm	r24, Z+
    f3e4:	94 91       	lpm	r25, Z+
    f3e6:	bc 01       	movw	r22, r24
    f3e8:	80 91 c4 18 	lds	r24, 0x18C4
    f3ec:	90 91 c5 18 	lds	r25, 0x18C5
    f3f0:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f3f4:	2c 2f       	mov	r18, r28
    f3f6:	c4 30       	cpi	r28, 0x04	; 4
    f3f8:	08 f0       	brcs	.+2      	; 0xf3fc <SONG_CallbackControlTask_F+0x94>
    f3fa:	bf cf       	rjmp	.-130    	; 0xf37a <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    f3fc:	e0 91 d5 18 	lds	r30, 0x18D5
    f400:	f0 91 d6 18 	lds	r31, 0x18D6
    f404:	85 91       	lpm	r24, Z+
    f406:	94 91       	lpm	r25, Z+
    f408:	89 2b       	or	r24, r25
    f40a:	69 f4       	brne	.+26     	; 0xf426 <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    f40c:	e0 91 c4 18 	lds	r30, 0x18C4
    f410:	f0 91 c5 18 	lds	r31, 0x18C5
    f414:	81 85       	ldd	r24, Z+9	; 0x09
    f416:	88 23       	and	r24, r24
    f418:	31 f4       	brne	.+12     	; 0xf426 <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    f41a:	0e 94 b0 79 	call	0xf360	; 0xf360 <SOUND_IsToneBusy>
    f41e:	88 23       	and	r24, r24
    f420:	11 f4       	brne	.+4      	; 0xf426 <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    f422:	0e 94 9a 79 	call	0xf334	; 0xf334 <SOUND_StopAudio>
    f426:	cf 91       	pop	r28
    f428:	08 95       	ret

0000f42a <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    f42a:	0e 94 9a 79 	call	0xf334	; 0xf334 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    f42e:	86 ec       	ldi	r24, 0xC6	; 198
    f430:	98 e1       	ldi	r25, 0x18	; 24
    f432:	0e 94 f1 77 	call	0xefe2	; 0xefe2 <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    f436:	80 91 c4 18 	lds	r24, 0x18C4
    f43a:	90 91 c5 18 	lds	r25, 0x18C5
    f43e:	0e 94 4e 74 	call	0xe89c	; 0xe89c <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    f442:	10 92 8c 02 	sts	0x028C, r1
    f446:	08 95       	ret

0000f448 <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    f448:	0f 93       	push	r16
    f44a:	1f 93       	push	r17
    f44c:	cf 93       	push	r28
    f44e:	df 93       	push	r29
    f450:	ec 01       	movw	r28, r24
    f452:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    f454:	80 91 8c 02 	lds	r24, 0x028C
    f458:	81 30       	cpi	r24, 0x01	; 1
    f45a:	11 f4       	brne	.+4      	; 0xf460 <SONG_StartTune_F+0x18>
		SONG_StopTune();
    f45c:	0e 94 15 7a 	call	0xf42a	; 0xf42a <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    f460:	d0 93 c5 18 	sts	0x18C5, r29
    f464:	c0 93 c4 18 	sts	0x18C4, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    f468:	81 e0       	ldi	r24, 0x01	; 1
    f46a:	80 93 8c 02 	sts	0x028C, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    f46e:	10 93 d8 18 	sts	0x18D8, r17
    f472:	00 93 d7 18 	sts	0x18D7, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    f476:	10 93 d6 18 	sts	0x18D6, r17
    f47a:	00 93 d5 18 	sts	0x18D5, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    f47e:	06 ec       	ldi	r16, 0xC6	; 198
    f480:	18 e1       	ldi	r17, 0x18	; 24
    f482:	24 eb       	ldi	r18, 0xB4	; 180
    f484:	39 e7       	ldi	r19, 0x79	; 121
    f486:	49 e0       	ldi	r20, 0x09	; 9
    f488:	50 e0       	ldi	r21, 0x00	; 0
    f48a:	60 e0       	ldi	r22, 0x00	; 0
    f48c:	70 e0       	ldi	r23, 0x00	; 0
    f48e:	8f ef       	ldi	r24, 0xFF	; 255
    f490:	0e 94 c1 78 	call	0xf182	; 0xf182 <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    f494:	ce 01       	movw	r24, r28
    f496:	0e 94 1e 79 	call	0xf23c	; 0xf23c <SOUND_StartAudio>
    f49a:	df 91       	pop	r29
    f49c:	cf 91       	pop	r28
    f49e:	1f 91       	pop	r17
    f4a0:	0f 91       	pop	r16
    f4a2:	08 95       	ret

0000f4a4 <__udivmodqi4>:
    f4a4:	99 1b       	sub	r25, r25
    f4a6:	79 e0       	ldi	r23, 0x09	; 9
    f4a8:	04 c0       	rjmp	.+8      	; 0xf4b2 <__udivmodqi4_ep>

0000f4aa <__udivmodqi4_loop>:
    f4aa:	99 1f       	adc	r25, r25
    f4ac:	96 17       	cp	r25, r22
    f4ae:	08 f0       	brcs	.+2      	; 0xf4b2 <__udivmodqi4_ep>
    f4b0:	96 1b       	sub	r25, r22

0000f4b2 <__udivmodqi4_ep>:
    f4b2:	88 1f       	adc	r24, r24
    f4b4:	7a 95       	dec	r23
    f4b6:	c9 f7       	brne	.-14     	; 0xf4aa <__udivmodqi4_loop>
    f4b8:	80 95       	com	r24
    f4ba:	08 95       	ret

0000f4bc <__udivmodhi4>:
    f4bc:	aa 1b       	sub	r26, r26
    f4be:	bb 1b       	sub	r27, r27
    f4c0:	51 e1       	ldi	r21, 0x11	; 17
    f4c2:	07 c0       	rjmp	.+14     	; 0xf4d2 <__udivmodhi4_ep>

0000f4c4 <__udivmodhi4_loop>:
    f4c4:	aa 1f       	adc	r26, r26
    f4c6:	bb 1f       	adc	r27, r27
    f4c8:	a6 17       	cp	r26, r22
    f4ca:	b7 07       	cpc	r27, r23
    f4cc:	10 f0       	brcs	.+4      	; 0xf4d2 <__udivmodhi4_ep>
    f4ce:	a6 1b       	sub	r26, r22
    f4d0:	b7 0b       	sbc	r27, r23

0000f4d2 <__udivmodhi4_ep>:
    f4d2:	88 1f       	adc	r24, r24
    f4d4:	99 1f       	adc	r25, r25
    f4d6:	5a 95       	dec	r21
    f4d8:	a9 f7       	brne	.-22     	; 0xf4c4 <__udivmodhi4_loop>
    f4da:	80 95       	com	r24
    f4dc:	90 95       	com	r25
    f4de:	bc 01       	movw	r22, r24
    f4e0:	cd 01       	movw	r24, r26
    f4e2:	08 95       	ret

0000f4e4 <__divmodhi4>:
    f4e4:	97 fb       	bst	r25, 7
    f4e6:	09 2e       	mov	r0, r25
    f4e8:	07 26       	eor	r0, r23
    f4ea:	0a d0       	rcall	.+20     	; 0xf500 <__divmodhi4_neg1>
    f4ec:	77 fd       	sbrc	r23, 7
    f4ee:	04 d0       	rcall	.+8      	; 0xf4f8 <__divmodhi4_neg2>
    f4f0:	e5 df       	rcall	.-54     	; 0xf4bc <__udivmodhi4>
    f4f2:	06 d0       	rcall	.+12     	; 0xf500 <__divmodhi4_neg1>
    f4f4:	00 20       	and	r0, r0
    f4f6:	1a f4       	brpl	.+6      	; 0xf4fe <__divmodhi4_exit>

0000f4f8 <__divmodhi4_neg2>:
    f4f8:	70 95       	com	r23
    f4fa:	61 95       	neg	r22
    f4fc:	7f 4f       	sbci	r23, 0xFF	; 255

0000f4fe <__divmodhi4_exit>:
    f4fe:	08 95       	ret

0000f500 <__divmodhi4_neg1>:
    f500:	f6 f7       	brtc	.-4      	; 0xf4fe <__divmodhi4_exit>
    f502:	90 95       	com	r25
    f504:	81 95       	neg	r24
    f506:	9f 4f       	sbci	r25, 0xFF	; 255
    f508:	08 95       	ret

0000f50a <__udivmodsi4>:
    f50a:	a1 e2       	ldi	r26, 0x21	; 33
    f50c:	1a 2e       	mov	r1, r26
    f50e:	aa 1b       	sub	r26, r26
    f510:	bb 1b       	sub	r27, r27
    f512:	fd 01       	movw	r30, r26
    f514:	0d c0       	rjmp	.+26     	; 0xf530 <__udivmodsi4_ep>

0000f516 <__udivmodsi4_loop>:
    f516:	aa 1f       	adc	r26, r26
    f518:	bb 1f       	adc	r27, r27
    f51a:	ee 1f       	adc	r30, r30
    f51c:	ff 1f       	adc	r31, r31
    f51e:	a2 17       	cp	r26, r18
    f520:	b3 07       	cpc	r27, r19
    f522:	e4 07       	cpc	r30, r20
    f524:	f5 07       	cpc	r31, r21
    f526:	20 f0       	brcs	.+8      	; 0xf530 <__udivmodsi4_ep>
    f528:	a2 1b       	sub	r26, r18
    f52a:	b3 0b       	sbc	r27, r19
    f52c:	e4 0b       	sbc	r30, r20
    f52e:	f5 0b       	sbc	r31, r21

0000f530 <__udivmodsi4_ep>:
    f530:	66 1f       	adc	r22, r22
    f532:	77 1f       	adc	r23, r23
    f534:	88 1f       	adc	r24, r24
    f536:	99 1f       	adc	r25, r25
    f538:	1a 94       	dec	r1
    f53a:	69 f7       	brne	.-38     	; 0xf516 <__udivmodsi4_loop>
    f53c:	60 95       	com	r22
    f53e:	70 95       	com	r23
    f540:	80 95       	com	r24
    f542:	90 95       	com	r25
    f544:	9b 01       	movw	r18, r22
    f546:	ac 01       	movw	r20, r24
    f548:	bd 01       	movw	r22, r26
    f54a:	cf 01       	movw	r24, r30
    f54c:	08 95       	ret

0000f54e <_exit>:
    f54e:	ff cf       	rjmp	.-2      	; 0xf54e <_exit>
