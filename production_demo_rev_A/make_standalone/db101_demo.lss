
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000ed68  0000edfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ed68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000015bb  0080025a  0080025a  0000ee56  2**0
                  ALLOC
  3 .debug_aranges 000008c0  00000000  00000000  0000ee56  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cf1  00000000  00000000  0000f716  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013292  00000000  00000000  00012407  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030fe  00000000  00000000  00025699  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ae54  00000000  00000000  00028797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fdf  00000000  00000000  000335eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  000385ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
       0:	0c 94 19 69 	jmp	0xd232	; 0xd232 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
      10:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
{
	POWER_wakeupRequested = true;
}

void POWER_EnterIdleSleepMode( void )
{
      18:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 94 6e 	jmp	0xdd28	; 0xdd28 <__vector_9>
    while (colsLeft-- > 0) {
      *dest++ = *source++;
    }
    // Move to next page.
    source += sourceWidth - width;
    dest += destWidth - width;
      28:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      2c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      30:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
 * \param  pTextString  Pointer to null-terminated string in flash
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString_F(char const CAL_PGM(* pTextString), uint8_t page, uint8_t column)
{
      34:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      38:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      3c:	0c 94 21 72 	jmp	0xe442	; 0xe442 <__vector_15>
      40:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      44:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      48:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      4c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      50:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      54:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      58:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      5c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      60:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      64:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      68:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      6c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      70:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      74:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      78:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      7c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      80:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      84:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      88:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      8c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      90:	0c 94 9c 69 	jmp	0xd338	; 0xd338 <__vector_36>
      94:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      98:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      9c:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      a8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      ac:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      b8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      bc:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c0:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c4:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>
      c8:	0c 94 38 69 	jmp	0xd270	; 0xd270 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_amperi_logo>:
	...
    9124:	00 00 80 c0 e0 e0 70 70 38 38 38 38 38 70 70 e0     ......pp88888pp.
    9134:	e0 c0 80 00 00 00 80 e0 f8 0e 00 80 c0 e0 70 70     ..............pp
    9144:	38 38 38 38 38 70 70 e0 e0 c0 80 00 00 00 00 00     88888pp.........
	...
    91a4:	f8 fe ff 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    91b4:	01 03 c1 f0 fc fe ff ff ff 7e 1f 07 01 00 00 00     .........~......
	...
    91cc:	01 07 ff fe f8 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9224:	00 03 0f 1f 3c 38 70 70 e0 e0 e0 e0 e0 70 70 38     ....<8pp.....pp8
    9234:	1c 0f 07 83 ff 3f 0f 03 01 00 0c 1e 3c 38 70 70     .....?......<8pp
    9244:	e0 e0 e0 e0 e0 70 70 38 3c 1f 0f 03 00 00 00 00     .....pp8<.......
	...
    92b4:	00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9308:	00 00 00 f8 fc cc cc cc cc cc cc cc cc cc cc cc     ................
    9318:	cc fc f8 00 00 fc fc 18 30 30 60 c0 c0 80 c0 c0     ........00`.....
    9328:	60 30 30 18 fc fc 00 00 fc fc cc cc cc cc cc cc     `00.............
    9338:	cc cc cc cc cc cc cc fc 78 00 00 fc fc cc cc cc     ........x.......
    9348:	cc cc cc cc 0c 0c 0c 0c 0c 0c 0c 00 00 fc fc cc     ................
    9358:	cc cc cc cc cc cc cc cc cc cc cc cc fc 78 00 00     .............x..
    9368:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9388:	00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00     ................
    9398:	00 0f 0f 00 00 0f 0f 00 00 00 00 00 01 03 01 00     ................
    93a8:	00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00 00     ................
	...
    93c0:	00 00 00 0f 0f 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    93d0:	0c 0c 0c 00 00 0f 0f 00 00 00 00 00 00 00 00 00     ................
    93e0:	01 03 06 0c 08 00 00 00 0f 0f 00 00 00 00 00 00     ................
	...

0000947c <FLASHPICS_PalonenLABS_128x64px>:
	...
    95fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    960c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    961c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    962c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    963c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    964c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    965c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    966c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    967c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    968c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    969c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    96ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    96bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    96cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    96dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000987c <FLASHPICS_pros>:
    987c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    988c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    989c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    98ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    98c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    98d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    98e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    98f4:	07 03 00 00 00 00 00 00                             ........

000098fc <FLASHPICS_plus>:
	...
    9908:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9920:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9930:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9940:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9950:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000997c <FLASHPICS_minus>:
	...
    99a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    99b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    99c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    99d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000099fc <FLASHPICS_X>:
    99fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    9a0c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    9a1c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    9a2c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    9a3c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    9a4c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    9a5c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    9a6c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

00009a7c <FLASHPICS_9>:
    9a7c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9a8c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a9c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    9aac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    9abc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    9acc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    9adc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9aec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009afc <FLASHPICS_8>:
    9afc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    9b1c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    9b2c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    9b3c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    9b4c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    9b5c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

00009b7c <FLASHPICS_7>:
    9b7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9b8c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    9b9c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    9bac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    9bc4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    9be4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

00009bfc <FLASHPICS_6>:
    9bfc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9c0c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    9c1c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    9c2c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    9c3c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    9c4c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    9c5c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9c6c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009c7c <FLASHPICS_5>:
    9c7c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    9c8c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    9c9c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    9cac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    9cbc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    9ccc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    9cdc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9cec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009cfc <FLASHPICS_4>:
    9cfc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    9d0c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    9d1c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9d2c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    9d3c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    9d4c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9d70:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

00009d7c <FLASHPICS_3>:
    9d7c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9d8c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    9d9c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    9dac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    9dbc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    9dcc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    9ddc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9dec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

00009dfc <FLASHPICS_2>:
    9dfc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9e0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9e1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9e2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9e3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9e4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9e5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9e6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009e7c <FLASHPICS_1>:
    9e7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9e8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9ea8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9eb8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ec8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ed8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ee8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9ef8:	00 00 00 00                                         ....

00009efc <FLASHPICS_0>:
    9efc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9f0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9f1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9f2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9f3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9f4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9f5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009f7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9f90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9fac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9fbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a018:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    a028:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    a040:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a08c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    a09c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    a0ac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    a0bc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a10c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a11c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    a140:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    a2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    a320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_8>:
	...
    a38c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    a39c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    a3ac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    a3bc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a40c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a41c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a42c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a43c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a490:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a4a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a4b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a4c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a510:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a520:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a530:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a540:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a6b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a720:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a730:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_7>:
	...
    a7a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a7e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a7f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a81c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a82c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a89c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a8ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a920:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a930:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a994:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a9a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a9b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    aa14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    aa24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    aa34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_6>:
	...
    ab90:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    aba0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    abb0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    abc0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    abe0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    abf0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    ac10:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    ac20:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    ac30:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    ac40:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ac98:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    acb0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    acc0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    ace0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    acf0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ad18:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    ad28:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad38:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    ad60:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    ad70:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    adf0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_5>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    afac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    afbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    afcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    afec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    b030:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    b040:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    b050:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    b060:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    b070:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    b0a0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    b0b0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    b0c0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    b0e0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    b0f0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    b120:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b130:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    b140:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_4>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_3>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    bab0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    bb30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_2>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    be90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bea0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    beb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bf30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_1>:
    bf7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bf8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bf9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bfac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bfbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bfcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bfdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bfec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    c008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    c030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    c040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    c050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    c060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    c070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    c080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    c090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    c0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    c0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    c0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    c0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    c0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    c0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    c100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    c130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    c140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    c160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    c170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    c1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    c1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    c1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    c1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    c220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    c230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    c260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    c270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    c280:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    c2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    c2e0:	df df df df df df df df df df df df df df df df     ................
    c2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    c300:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c330:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    c350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    c360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    c370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000c37c <FLASHPICS_ECARS_DEMO_0>:
	...
    c39c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    c3ac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    c3bc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    c3cc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c414:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c424:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c434:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c444:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c454:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c48c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c49c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c4ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c4bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c4cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c4dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c508:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c518:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c528:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c538:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c548:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c568:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c588:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c598:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c5a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c5b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c5c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c5d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c5e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c608:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c618:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c628:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c638:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c668:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c688:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c698:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c6a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c6b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c6c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c6d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c6e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c710:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c720:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c748:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c758:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c77c <SONG_data>:
    c77c:	b9 ce be cd 2d cd 4d cc 2b cb 19 cb 37 ca 93 c8     ....-.M.+...7...
    c78c:	82 c8 71 c8 e3 c7 b9 c7                             ..q.....

0000c794 <SONG_titles>:
    c794:	5f cf ac ce b7 cd 1f cd 45 cc 23 cb 11 cb 31 ca     _.......E.#...1.
    c7a4:	8c c8 7b c8 65 c8 db c7                             ..{.e...

0000c7ac <SONG_formTitle>:
    c7ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c7b9 <SONG_positiveActionTune>:
    c7b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c7c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c7db <SONG_positiveActionTitle>:
    c7db:	53 75 63 63 65 73 73 00                             Success.

0000c7e3 <SONG_disasterBeepTune>:
    c7e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c7f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c803:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c813:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c823:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c833:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c843:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c853:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c865 <SONG_disasterBeepTitle>:
    c865:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c871 <SONG_negativeBeepTune>:
    c871:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c87b <SONG_negativeBeepTitle>:
    c87b:	42 65 65 70 20 32 00                                Beep 2.

0000c882 <SONG_positiveBeepTune>:
    c882:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c88c <SONG_positiveBeepTitle>:
    c88c:	42 65 65 70 20 31 00                                Beep 1.

0000c893 <SONG_toneScaleTune>:
    c893:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c8a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c8b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c8c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c8d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c8e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c8f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c903:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c913:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c923:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c933:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c943:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c953:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c963:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c973:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c983:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c993:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c9a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c9b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c9c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c9d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c9e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c9f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    ca03:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    ca13:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    ca23:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000ca31 <SONG_toneScaleTitle>:
    ca31:	53 63 61 6c 65 00                                   Scale.

0000ca37 <SONG_whistleTune>:
    ca37:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    ca47:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    ca57:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    ca67:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    ca77:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    ca87:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    ca97:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    caa7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    cab7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    cac7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    cad7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    cae7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    caf7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    cb07:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000cb11 <SONG_whistleTitle>:
    cb11:	57 68 69 73 74 6c 65 00                             Whistle.

0000cb19 <SONG_siren2Tune>:
    cb19:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000cb23 <SONG_siren2Title>:
    cb23:	53 69 72 65 6e 20 32 00                             Siren 2.

0000cb2b <SONG_siren1Tune>:
    cb2b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    cb3b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    cb4b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    cb5b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    cb6b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    cb7b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    cb8b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    cb9b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    cbab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    cbbb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    cbcb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    cbdb:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    cbeb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    cbfb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    cc0b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    cc1b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    cc2b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    cc3b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000cc45 <SONG_siren1Title>:
    cc45:	53 69 72 65 6e 20 31 00                             Siren 1.

0000cc4d <SONG_solveigsSangTune>:
    cc4d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    cc5d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    cc6d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    cc7d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    cc8d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    cc9d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    ccad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    ccbd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    cccd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    ccdd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    cced:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    ccfd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    cd0d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    cd1d:	ff ff                                               ..

0000cd1f <SONG_solveigsSangTitle>:
    cd1f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000cd2d <SONG_minuetTune>:
    cd2d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    cd3d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    cd4d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    cd5d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    cd6d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    cd7d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    cd8d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    cd9d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    cdad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000cdb7 <SONG_minuetTitle>:
    cdb7:	4d 69 6e 75 65 74 00                                Minuet.

0000cdbe <SONG_turkeyMarchTune>:
    cdbe:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    cdce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    cdde:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    cdee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    cdfe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ce1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ce2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ce3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ce4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ce5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ce6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ce7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ce8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ce9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000ceac <SONG_turkeyMarchTitle>:
    ceac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000ceb9 <SONG_furEliseTune>:
    ceb9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cec9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    ced9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cee9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    cef9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cf09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cf19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cf29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cf39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cf49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cf59:	10 00 01 00 ff ff                                   ......

0000cf5f <SONG_furEliseTitle>:
    cf5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cf6a <big_number_pictures>:
    cf6a:	fc 9e 7c 9e fc 9d 7c 9d fc 9c 7c 9c fc 9b 7c 9b     ..|...|...|...|.
    cf7a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98                 ..|...|...|.

0000cf86 <soc_pictures>:
    cf86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cf96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cfa6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cfb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cfc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cfd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cfe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cff6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    d006:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    d016:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    d026:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    d036:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    d046:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000d052 <TERMFONT_fontdata>:
    d052:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    d062:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    d072:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    d082:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    d092:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    d0a2:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    d0b2:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    d0c2:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    d0d2:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    d0e2:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    d0f2:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    d102:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    d112:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    d122:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    d132:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    d142:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    d152:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    d162:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    d172:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    d182:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    d192:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    d1a2:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    d1b2:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    d1c2:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    d1d2:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    d1e2:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    d1f2:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    d202:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    d212:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    d222:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000d232 <__ctors_end>:
    d232:	11 24       	eor	r1, r1
    d234:	1f be       	out	0x3f, r1	; 63
    d236:	cf ef       	ldi	r28, 0xFF	; 255
    d238:	d1 e2       	ldi	r29, 0x21	; 33
    d23a:	de bf       	out	0x3e, r29	; 62
    d23c:	cd bf       	out	0x3d, r28	; 61

0000d23e <__do_copy_data>:
    d23e:	12 e0       	ldi	r17, 0x02	; 2
    d240:	a0 e0       	ldi	r26, 0x00	; 0
    d242:	b2 e0       	ldi	r27, 0x02	; 2
    d244:	e8 e6       	ldi	r30, 0x68	; 104
    d246:	fd ee       	ldi	r31, 0xED	; 237
    d248:	00 e0       	ldi	r16, 0x00	; 0
    d24a:	0b bf       	out	0x3b, r16	; 59
    d24c:	02 c0       	rjmp	.+4      	; 0xd252 <__do_copy_data+0x14>
    d24e:	07 90       	elpm	r0, Z+
    d250:	0d 92       	st	X+, r0
    d252:	aa 35       	cpi	r26, 0x5A	; 90
    d254:	b1 07       	cpc	r27, r17
    d256:	d9 f7       	brne	.-10     	; 0xd24e <__do_copy_data+0x10>

0000d258 <__do_clear_bss>:
    d258:	18 e1       	ldi	r17, 0x18	; 24
    d25a:	aa e5       	ldi	r26, 0x5A	; 90
    d25c:	b2 e0       	ldi	r27, 0x02	; 2
    d25e:	01 c0       	rjmp	.+2      	; 0xd262 <.do_clear_bss_start>

0000d260 <.do_clear_bss_loop>:
    d260:	1d 92       	st	X+, r1

0000d262 <.do_clear_bss_start>:
    d262:	a5 31       	cpi	r26, 0x15	; 21
    d264:	b1 07       	cpc	r27, r17
    d266:	e1 f7       	brne	.-8      	; 0xd260 <.do_clear_bss_loop>
    d268:	0e 94 ba 69 	call	0xd374	; 0xd374 <main>
    d26c:	0c 94 b3 76 	jmp	0xed66	; 0xed66 <_exit>

0000d270 <__bad_interrupt>:
    d270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000d274 <__eerd_word>:
    d274:	cf 92       	push	r12
    d276:	df 92       	push	r13
    d278:	ef 92       	push	r14
    d27a:	ff 92       	push	r15
    d27c:	0f 93       	push	r16
    d27e:	1f 93       	push	r17
    d280:	7c 01       	movw	r14, r24
    d282:	6b 01       	movw	r12, r22
    d284:	fb 01       	movw	r30, r22
    d286:	09 95       	icall
    d288:	08 2f       	mov	r16, r24
    d28a:	c7 01       	movw	r24, r14
    d28c:	01 96       	adiw	r24, 0x01	; 1
    d28e:	f6 01       	movw	r30, r12
    d290:	09 95       	icall
    d292:	18 2f       	mov	r17, r24
    d294:	c8 01       	movw	r24, r16
    d296:	1f 91       	pop	r17
    d298:	0f 91       	pop	r16
    d29a:	ff 90       	pop	r15
    d29c:	ef 90       	pop	r14
    d29e:	df 90       	pop	r13
    d2a0:	cf 90       	pop	r12
    d2a2:	08 95       	ret

0000d2a4 <itoa>:
    d2a4:	fb 01       	movw	r30, r22
    d2a6:	9f 01       	movw	r18, r30
    d2a8:	e8 94       	clt
    d2aa:	42 30       	cpi	r20, 0x02	; 2
    d2ac:	c4 f0       	brlt	.+48     	; 0xd2de <itoa+0x3a>
    d2ae:	45 32       	cpi	r20, 0x25	; 37
    d2b0:	b4 f4       	brge	.+44     	; 0xd2de <itoa+0x3a>
    d2b2:	4a 30       	cpi	r20, 0x0A	; 10
    d2b4:	29 f4       	brne	.+10     	; 0xd2c0 <itoa+0x1c>
    d2b6:	97 fb       	bst	r25, 7
    d2b8:	1e f4       	brtc	.+6      	; 0xd2c0 <itoa+0x1c>
    d2ba:	90 95       	com	r25
    d2bc:	81 95       	neg	r24
    d2be:	9f 4f       	sbci	r25, 0xFF	; 255
    d2c0:	64 2f       	mov	r22, r20
    d2c2:	77 27       	eor	r23, r23
    d2c4:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    d2c8:	80 5d       	subi	r24, 0xD0	; 208
    d2ca:	8a 33       	cpi	r24, 0x3A	; 58
    d2cc:	0c f0       	brlt	.+2      	; 0xd2d0 <itoa+0x2c>
    d2ce:	89 5d       	subi	r24, 0xD9	; 217
    d2d0:	81 93       	st	Z+, r24
    d2d2:	cb 01       	movw	r24, r22
    d2d4:	00 97       	sbiw	r24, 0x00	; 0
    d2d6:	a1 f7       	brne	.-24     	; 0xd2c0 <itoa+0x1c>
    d2d8:	16 f4       	brtc	.+4      	; 0xd2de <itoa+0x3a>
    d2da:	5d e2       	ldi	r21, 0x2D	; 45
    d2dc:	51 93       	st	Z+, r21
    d2de:	10 82       	st	Z, r1
    d2e0:	c9 01       	movw	r24, r18
    d2e2:	0c 94 73 69 	jmp	0xd2e6	; 0xd2e6 <strrev>

0000d2e6 <strrev>:
    d2e6:	dc 01       	movw	r26, r24
    d2e8:	fc 01       	movw	r30, r24
    d2ea:	67 2f       	mov	r22, r23
    d2ec:	71 91       	ld	r23, Z+
    d2ee:	77 23       	and	r23, r23
    d2f0:	e1 f7       	brne	.-8      	; 0xd2ea <strrev+0x4>
    d2f2:	32 97       	sbiw	r30, 0x02	; 2
    d2f4:	04 c0       	rjmp	.+8      	; 0xd2fe <strrev+0x18>
    d2f6:	7c 91       	ld	r23, X
    d2f8:	6d 93       	st	X+, r22
    d2fa:	70 83       	st	Z, r23
    d2fc:	62 91       	ld	r22, -Z
    d2fe:	ae 17       	cp	r26, r30
    d300:	bf 07       	cpc	r27, r31
    d302:	c8 f3       	brcs	.-14     	; 0xd2f6 <strrev+0x10>
    d304:	08 95       	ret

0000d306 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    d306:	f9 99       	sbic	0x1f, 1	; 31
    d308:	fe cf       	rjmp	.-4      	; 0xd306 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    d30a:	92 bd       	out	0x22, r25	; 34
    d30c:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    d30e:	f8 9a       	sbi	0x1f, 0	; 31
    d310:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    d312:	99 27       	eor	r25, r25
    d314:	08 95       	ret

0000d316 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    d316:	cf 93       	push	r28
    d318:	c8 2f       	mov	r28, r24

      if (c == '\n')
    d31a:	8a 30       	cpi	r24, 0x0A	; 10
    d31c:	19 f4       	brne	.+6      	; 0xd324 <uart_putchar+0xe>
        uart_putchar('\r', stream);
    d31e:	8d e0       	ldi	r24, 0x0D	; 13
    d320:	0e 94 8b 69 	call	0xd316	; 0xd316 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    d324:	80 91 c8 00 	lds	r24, 0x00C8
    d328:	85 ff       	sbrs	r24, 5
    d32a:	fc cf       	rjmp	.-8      	; 0xd324 <uart_putchar+0xe>
      UDR1 = c;
    d32c:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    d330:	80 e0       	ldi	r24, 0x00	; 0
    d332:	90 e0       	ldi	r25, 0x00	; 0
    d334:	cf 91       	pop	r28
    d336:	08 95       	ret

0000d338 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    d338:	1f 92       	push	r1
    d33a:	0f 92       	push	r0
    d33c:	0f b6       	in	r0, 0x3f	; 63
    d33e:	0f 92       	push	r0
    d340:	11 24       	eor	r1, r1
    d342:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    d344:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    d348:	80 91 ce 00 	lds	r24, 0x00CE
    d34c:	80 93 69 02 	sts	0x0269, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    d350:	81 e0       	ldi	r24, 0x01	; 1
    d352:	80 93 6a 02 	sts	0x026A, r24
    d356:	8f 91       	pop	r24
    d358:	0f 90       	pop	r0
    d35a:	0f be       	out	0x3f, r0	; 63
    d35c:	0f 90       	pop	r0
    d35e:	1f 90       	pop	r1
    d360:	18 95       	reti

0000d362 <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    d362:	88 e9       	ldi	r24, 0x98	; 152
    d364:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    d368:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    d36c:	87 e0       	ldi	r24, 0x07	; 7
    d36e:	80 93 cc 00 	sts	0x00CC, r24
    d372:	08 95       	ret

0000d374 <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d374:	cf ef       	ldi	r28, 0xFF	; 255
    d376:	d1 e2       	ldi	r29, 0x21	; 33
    d378:	de bf       	out	0x3e, r29	; 62
    d37a:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);

	LCD_UpdateSOC(1);
    d37c:	81 e0       	ldi	r24, 0x01	; 1
    d37e:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	stdout = &mystdout;
    d382:	87 e2       	ldi	r24, 0x27	; 39
    d384:	92 e0       	ldi	r25, 0x02	; 2
    d386:	90 93 12 18 	sts	0x1812, r25
    d38a:	80 93 11 18 	sts	0x1811, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d38e:	54 9a       	sbi	0x0a, 4	; 10
    d390:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d392:	0e 94 b1 69 	call	0xd362	; 0xd362 <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d396:	82 e0       	ldi	r24, 0x02	; 2
    d398:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d39c:	0e 94 68 6a 	call	0xd4d0	; 0xd4d0 <InitMemory>

	LCD_UpdateSOC(3);
    d3a0:	83 e0       	ldi	r24, 0x03	; 3
    d3a2:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	LCD_Init();
    d3a6:	0e 94 5c 6b 	call	0xd6b8	; 0xd6b8 <LCD_Init>

	LCD_UpdateSOC(4);
    d3aa:	84 e0       	ldi	r24, 0x04	; 4
    d3ac:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	TIMING_Init();
    d3b0:	0e 94 c5 72 	call	0xe58a	; 0xe58a <TIMING_Init>

	LCD_UpdateSOC(5);
    d3b4:	85 e0       	ldi	r24, 0x05	; 5
    d3b6:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	RTC_Init();
    d3ba:	0e 94 8e 72 	call	0xe51c	; 0xe51c <RTC_Init>

	LCD_UpdateSOC(6);
    d3be:	86 e0       	ldi	r24, 0x06	; 6
    d3c0:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d3c4:	86 e6       	ldi	r24, 0x66	; 102
    d3c6:	93 e7       	ldi	r25, 0x73	; 115
    d3c8:	0e 94 bd 72 	call	0xe57a	; 0xe57a <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d3cc:	87 e0       	ldi	r24, 0x07	; 7
    d3ce:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d3d2:	62 e3       	ldi	r22, 0x32	; 50
    d3d4:	84 e6       	ldi	r24, 0x64	; 100
    d3d6:	0e 94 bc 6e 	call	0xdd78	; 0xdd78 <JOYSTICK_Init>

	//USART_Init();

//	CAL_enable_interrupt();

	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d3da:	0a e5       	ldi	r16, 0x5A	; 90
    d3dc:	12 e0       	ldi	r17, 0x02	; 2
    d3de:	2b ec       	ldi	r18, 0xCB	; 203
    d3e0:	3e e6       	ldi	r19, 0x6E	; 110
    d3e2:	41 e0       	ldi	r20, 0x01	; 1
    d3e4:	50 e0       	ldi	r21, 0x00	; 0
    d3e6:	60 e0       	ldi	r22, 0x00	; 0
    d3e8:	70 e0       	ldi	r23, 0x00	; 0
    d3ea:	8f ef       	ldi	r24, 0xFF	; 255
    d3ec:	0e 94 cd 74 	call	0xe99a	; 0xe99a <TIMING_AddRepCallbackEvent>

	// happy startup sound
	LCD_UpdateSOC(8);
    d3f0:	88 e0       	ldi	r24, 0x08	; 8
    d3f2:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;

	// interrupt enable
	SREG |= 1<<7;
    d3f6:	8f b7       	in	r24, 0x3f	; 63
    d3f8:	80 68       	ori	r24, 0x80	; 128
    d3fa:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d3fc:	89 e0       	ldi	r24, 0x09	; 9
    d3fe:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/

	LCD_UpdateSOC(10);
    d402:	8a e0       	ldi	r24, 0x0A	; 10
    d404:	0e 94 4f 6e 	call	0xdc9e	; 0xdc9e <LCD_UpdateSOC>

	PlaySound(11);
    d408:	8b e0       	ldi	r24, 0x0B	; 11
    d40a:	90 e0       	ldi	r25, 0x00	; 0
    d40c:	0e 94 b0 6a 	call	0xd560	; 0xd560 <PlaySound>
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
//	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );

	// init backlight
	BACKLIGHT_Init();
    d410:	0e 94 44 6f 	call	0xde88	; 0xde88 <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d414:	63 e8       	ldi	r22, 0x83	; 131
    d416:	79 e6       	ldi	r23, 0x69	; 105
    d418:	88 e0       	ldi	r24, 0x08	; 8
    d41a:	90 e0       	ldi	r25, 0x00	; 0
    d41c:	0e 94 3a 69 	call	0xd274	; 0xd274 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d420:	90 93 20 02 	sts	0x0220, r25
    d424:	80 93 1f 02 	sts	0x021F, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d428:	63 e8       	ldi	r22, 0x83	; 131
    d42a:	79 e6       	ldi	r23, 0x69	; 105
    d42c:	8a e0       	ldi	r24, 0x0A	; 10
    d42e:	90 e0       	ldi	r25, 0x00	; 0
    d430:	0e 94 3a 69 	call	0xd274	; 0xd274 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d434:	90 93 26 02 	sts	0x0226, r25
    d438:	80 93 25 02 	sts	0x0225, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d43c:	63 e8       	ldi	r22, 0x83	; 131
    d43e:	79 e6       	ldi	r23, 0x69	; 105
    d440:	8c e0       	ldi	r24, 0x0C	; 12
    d442:	90 e0       	ldi	r25, 0x00	; 0
    d444:	0e 94 3a 69 	call	0xd274	; 0xd274 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d448:	90 93 24 02 	sts	0x0224, r25
    d44c:	80 93 23 02 	sts	0x0223, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d450:	63 e8       	ldi	r22, 0x83	; 131
    d452:	79 e6       	ldi	r23, 0x69	; 105
    d454:	8e e0       	ldi	r24, 0x0E	; 14
    d456:	90 e0       	ldi	r25, 0x00	; 0
    d458:	0e 94 3a 69 	call	0xd274	; 0xd274 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d45c:	90 93 22 02 	sts	0x0222, r25
    d460:	80 93 21 02 	sts	0x0221, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d464:	63 e8       	ldi	r22, 0x83	; 131
    d466:	79 e6       	ldi	r23, 0x69	; 105
    d468:	80 e1       	ldi	r24, 0x10	; 16
    d46a:	90 e0       	ldi	r25, 0x00	; 0
    d46c:	0e 94 3a 69 	call	0xd274	; 0xd274 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d470:	90 93 1e 02 	sts	0x021E, r25
    d474:	80 93 1d 02 	sts	0x021D, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d478:	40 91 21 02 	lds	r20, 0x0221
    d47c:	60 91 23 02 	lds	r22, 0x0223
    d480:	80 91 25 02 	lds	r24, 0x0225
    d484:	0e 94 9c 6f 	call	0xdf38	; 0xdf38 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d488:	80 91 1d 02 	lds	r24, 0x021D
    d48c:	0e 94 68 6f 	call	0xded0	; 0xded0 <BACKLIGHT_SetIntensity>
	TIMING_RemoveEvent( splashScreenEvent );
	MEM_FREE( splashScreenEvent );

	DELAY_MS(500);
*/
	LCD_ClrBox(0,0,128,64);
    d490:	20 e4       	ldi	r18, 0x40	; 64
    d492:	40 e8       	ldi	r20, 0x80	; 128
    d494:	60 e0       	ldi	r22, 0x00	; 0
    d496:	86 2f       	mov	r24, r22
    d498:	0e 94 a1 6b 	call	0xd742	; 0xd742 <LCD_ClrBox>
//	LcdContrast();

//if 	(JOYSTICK_GetState() & (JOYSTICK_ENTER) == 0x00) {
//	LcdContrast();
//}
	int value=0;
    d49c:	00 e0       	ldi	r16, 0x00	; 0
    d49e:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		value++;
    d4a0:	0f 5f       	subi	r16, 0xFF	; 255
    d4a2:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_UpdateMinVolt(value);		
    d4a4:	c8 01       	movw	r24, r16
    d4a6:	0e 94 d5 6c 	call	0xd9aa	; 0xd9aa <LCD_UpdateMinVolt>
		LCD_UpdateMaxTemp(value);		
    d4aa:	80 2f       	mov	r24, r16
    d4ac:	0e 94 3c 6d 	call	0xda78	; 0xda78 <LCD_UpdateMaxTemp>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d4b0:	88 ec       	ldi	r24, 0xC8	; 200
    d4b2:	9b eb       	ldi	r25, 0xBB	; 187
    d4b4:	a7 e0       	ldi	r26, 0x07	; 7
    d4b6:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d4b8:	01 97       	sbiw	r24, 0x01	; 1
    d4ba:	a1 09       	sbc	r26, r1
    d4bc:	b1 09       	sbc	r27, r1
    d4be:	00 00       	nop
    d4c0:	01 f0       	breq	.+0      	; 0xd4c2 <main+0x14e>
    d4c2:	d1 f7       	brne	.-12     	; 0xd4b8 <main+0x144>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d4c4:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d4c6:	00 00       	nop

		DELAY_MS(550);
		if (value>19)
    d4c8:	04 31       	cpi	r16, 0x14	; 20
    d4ca:	11 05       	cpc	r17, r1
    d4cc:	4c f3       	brlt	.-46     	; 0xd4a0 <main+0x12c>
    d4ce:	e6 cf       	rjmp	.-52     	; 0xd49c <main+0x128>

0000d4d0 <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d4d0:	64 e7       	ldi	r22, 0x74	; 116
    d4d2:	77 e1       	ldi	r23, 0x17	; 23
    d4d4:	84 e0       	ldi	r24, 0x04	; 4
    d4d6:	90 e0       	ldi	r25, 0x00	; 0
    d4d8:	0e 94 a7 70 	call	0xe14e	; 0xe14e <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d4dc:	2b e6       	ldi	r18, 0x6B	; 107
    d4de:	32 e0       	ldi	r19, 0x02	; 2
    d4e0:	40 e1       	ldi	r20, 0x10	; 16
    d4e2:	50 e0       	ldi	r21, 0x00	; 0
    d4e4:	ba 01       	movw	r22, r20
    d4e6:	80 e0       	ldi	r24, 0x00	; 0
    d4e8:	90 e0       	ldi	r25, 0x00	; 0
    d4ea:	0e 94 b0 70 	call	0xe160	; 0xe160 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d4ee:	2d e6       	ldi	r18, 0x6D	; 109
    d4f0:	33 e0       	ldi	r19, 0x03	; 3
    d4f2:	40 e2       	ldi	r20, 0x20	; 32
    d4f4:	50 e0       	ldi	r21, 0x00	; 0
    d4f6:	ba 01       	movw	r22, r20
    d4f8:	81 e0       	ldi	r24, 0x01	; 1
    d4fa:	90 e0       	ldi	r25, 0x00	; 0
    d4fc:	0e 94 b0 70 	call	0xe160	; 0xe160 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d500:	21 e7       	ldi	r18, 0x71	; 113
    d502:	37 e0       	ldi	r19, 0x07	; 7
    d504:	40 e1       	ldi	r20, 0x10	; 16
    d506:	50 e0       	ldi	r21, 0x00	; 0
    d508:	60 e4       	ldi	r22, 0x40	; 64
    d50a:	70 e0       	ldi	r23, 0x00	; 0
    d50c:	82 e0       	ldi	r24, 0x02	; 2
    d50e:	90 e0       	ldi	r25, 0x00	; 0
    d510:	0e 94 b0 70 	call	0xe160	; 0xe160 <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d514:	23 e7       	ldi	r18, 0x73	; 115
    d516:	3b e0       	ldi	r19, 0x0B	; 11
    d518:	43 e0       	ldi	r20, 0x03	; 3
    d51a:	50 e0       	ldi	r21, 0x00	; 0
    d51c:	60 e0       	ldi	r22, 0x00	; 0
    d51e:	74 e0       	ldi	r23, 0x04	; 4
    d520:	ca 01       	movw	r24, r20
    d522:	0e 94 b0 70 	call	0xe160	; 0xe160 <MEMBLOCK_InitBag>
    d526:	08 95       	ret

0000d528 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d528:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d52a:	e8 2f       	mov	r30, r24
    d52c:	ff 27       	eor	r31, r31
    d52e:	ee 0f       	add	r30, r30
    d530:	ff 1f       	adc	r31, r31
    d532:	e4 58       	subi	r30, 0x84	; 132
    d534:	f8 43       	sbci	r31, 0x38	; 56
    d536:	85 91       	lpm	r24, Z+
    d538:	94 91       	lpm	r25, Z+
    d53a:	bc 01       	movw	r22, r24
    d53c:	c9 01       	movw	r24, r18
    d53e:	0e 94 30 76 	call	0xec60	; 0xec60 <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d542:	8d ec       	ldi	r24, 0xCD	; 205
    d544:	97 e0       	ldi	r25, 0x07	; 7
    d546:	a7 e0       	ldi	r26, 0x07	; 7
    d548:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d54a:	01 97       	sbiw	r24, 0x01	; 1
    d54c:	a1 09       	sbc	r26, r1
    d54e:	b1 09       	sbc	r27, r1
    d550:	00 00       	nop
    d552:	01 f0       	breq	.+0      	; 0xd554 <SONG_PlayTune+0x2c>
    d554:	d1 f7       	brne	.-12     	; 0xd54a <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d556:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d558:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d55a:	0e 94 21 76 	call	0xec42	; 0xec42 <SONG_StopTune>
    d55e:	08 95       	ret

0000d560 <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d560:	cf 92       	push	r12
    d562:	df 92       	push	r13
    d564:	ef 92       	push	r14
    d566:	ff 92       	push	r15
    d568:	0f 93       	push	r16
    d56a:	1f 93       	push	r17
    d56c:	cf 93       	push	r28
    d56e:	df 93       	push	r29
    d570:	cd b7       	in	r28, 0x3d	; 61
    d572:	de b7       	in	r29, 0x3e	; 62
    d574:	2e 97       	sbiw	r28, 0x0e	; 14
    d576:	0f b6       	in	r0, 0x3f	; 63
    d578:	f8 94       	cli
    d57a:	de bf       	out	0x3e, r29	; 62
    d57c:	0f be       	out	0x3f, r0	; 63
    d57e:	cd bf       	out	0x3d, r28	; 61
    d580:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d582:	88 e2       	ldi	r24, 0x28	; 40
    d584:	90 e0       	ldi	r25, 0x00	; 0
    d586:	0e 94 f3 70 	call	0xe1e6	; 0xe1e6 <MEMBLOCK_Allocate>
    d58a:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d58c:	80 e3       	ldi	r24, 0x30	; 48
    d58e:	90 e0       	ldi	r25, 0x00	; 0
    d590:	0e 94 f3 70 	call	0xe1e6	; 0xe1e6 <MEMBLOCK_Allocate>
    d594:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d596:	48 e2       	ldi	r20, 0x28	; 40
    d598:	b7 01       	movw	r22, r14
    d59a:	ce 01       	movw	r24, r28
    d59c:	01 96       	adiw	r24, 0x01	; 1
    d59e:	0e 94 42 70 	call	0xe084	; 0xe084 <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d5a2:	be 01       	movw	r22, r28
    d5a4:	6f 5f       	subi	r22, 0xFF	; 255
    d5a6:	7f 4f       	sbci	r23, 0xFF	; 255
    d5a8:	80 2f       	mov	r24, r16
    d5aa:	0e 94 94 6a 	call	0xd528	; 0xd528 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d5ae:	c7 01       	movw	r24, r14
    d5b0:	0e 94 9b 71 	call	0xe336	; 0xe336 <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d5b4:	c6 01       	movw	r24, r12
    d5b6:	0e 94 9b 71 	call	0xe336	; 0xe336 <MEMBLOCK_Free>
    d5ba:	2e 96       	adiw	r28, 0x0e	; 14
    d5bc:	0f b6       	in	r0, 0x3f	; 63
    d5be:	f8 94       	cli
    d5c0:	de bf       	out	0x3e, r29	; 62
    d5c2:	0f be       	out	0x3f, r0	; 63
    d5c4:	cd bf       	out	0x3d, r28	; 61
    d5c6:	df 91       	pop	r29
    d5c8:	cf 91       	pop	r28
    d5ca:	1f 91       	pop	r17
    d5cc:	0f 91       	pop	r16
    d5ce:	ff 90       	pop	r15
    d5d0:	ef 90       	pop	r14
    d5d2:	df 90       	pop	r13
    d5d4:	cf 90       	pop	r12
    d5d6:	08 95       	ret

0000d5d8 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d5d8:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d5da:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d5dc:	85 ef       	ldi	r24, 0xF5	; 245
    d5de:	97 e6       	ldi	r25, 0x67	; 103
    d5e0:	a1 e0       	ldi	r26, 0x01	; 1
    d5e2:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d5e4:	01 97       	sbiw	r24, 0x01	; 1
    d5e6:	a1 09       	sbc	r26, r1
    d5e8:	b1 09       	sbc	r27, r1
    d5ea:	00 00       	nop
    d5ec:	01 f0       	breq	.+0      	; 0xd5ee <S6B1713_HardReset+0x16>
    d5ee:	d1 f7       	brne	.-12     	; 0xd5e4 <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d5f0:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d5f2:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d5f4:	41 9a       	sbi	0x08, 1	; 8
    d5f6:	08 95       	ret

0000d5f8 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d5f8:	0e 94 ec 6a 	call	0xd5d8	; 0xd5d8 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d5fc:	87 e8       	ldi	r24, 0x87	; 135
    d5fe:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d602:	80 e8       	ldi	r24, 0x80	; 128
    d604:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d608:	38 9a       	sbi	0x07, 0	; 7
    d60a:	08 95       	ret

0000d60c <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d60c:	40 98       	cbi	0x08, 0	; 8
    d60e:	8f ea       	ldi	r24, 0xAF	; 175
    d610:	80 93 00 80 	sts	0x8000, r24
    d614:	08 95       	ret

0000d616 <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d616:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d618:	40 98       	cbi	0x08, 0	; 8
    d61a:	80 64       	ori	r24, 0x40	; 64
    d61c:	80 93 00 80 	sts	0x8000, r24
    d620:	08 95       	ret

0000d622 <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d622:	98 2f       	mov	r25, r24
    d624:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d626:	40 98       	cbi	0x08, 0	; 8
    d628:	81 e8       	ldi	r24, 0x81	; 129
    d62a:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d62e:	40 98       	cbi	0x08, 0	; 8
    d630:	90 93 00 80 	sts	0x8000, r25
    d634:	08 95       	ret

0000d636 <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d636:	40 98       	cbi	0x08, 0	; 8
    d638:	80 ea       	ldi	r24, 0xA0	; 160
    d63a:	80 93 00 80 	sts	0x8000, r24
    d63e:	08 95       	ret

0000d640 <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d640:	40 98       	cbi	0x08, 0	; 8
    d642:	83 ea       	ldi	r24, 0xA3	; 163
    d644:	80 93 00 80 	sts	0x8000, r24
    d648:	08 95       	ret

0000d64a <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d64a:	40 98       	cbi	0x08, 0	; 8
    d64c:	80 ec       	ldi	r24, 0xC0	; 192
    d64e:	80 93 00 80 	sts	0x8000, r24
    d652:	08 95       	ret

0000d654 <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d654:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d656:	40 98       	cbi	0x08, 0	; 8
    d658:	88 62       	ori	r24, 0x28	; 40
    d65a:	80 93 00 80 	sts	0x8000, r24
    d65e:	08 95       	ret

0000d660 <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d660:	40 98       	cbi	0x08, 0	; 8
    d662:	87 70       	andi	r24, 0x07	; 7
    d664:	80 62       	ori	r24, 0x20	; 32
    d666:	80 93 00 80 	sts	0x8000, r24
    d66a:	08 95       	ret

0000d66c <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d66c:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d66e:	90 e0       	ldi	r25, 0x00	; 0
    d670:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d672:	89 2f       	mov	r24, r25
    d674:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d676:	40 98       	cbi	0x08, 0	; 8
    d678:	80 6b       	ori	r24, 0xB0	; 176
    d67a:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d67e:	40 98       	cbi	0x08, 0	; 8
    d680:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d684:	40 98       	cbi	0x08, 0	; 8
    d686:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d68a:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d68c:	40 9a       	sbi	0x08, 0	; 8
    d68e:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d692:	81 50       	subi	r24, 0x01	; 1
    d694:	d9 f7       	brne	.-10     	; 0xd68c <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d696:	9f 5f       	subi	r25, 0xFF	; 255
    d698:	98 30       	cpi	r25, 0x08	; 8
    d69a:	58 f3       	brcs	.-42     	; 0xd672 <LCD_SetScreen+0x6>
    d69c:	08 95       	ret

0000d69e <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d69e:	1f 93       	push	r17
    d6a0:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    d6a2:	87 70       	andi	r24, 0x07	; 7
    d6a4:	88 0f       	add	r24, r24
    d6a6:	88 0f       	add	r24, r24
    d6a8:	88 0f       	add	r24, r24
    d6aa:	86 0f       	add	r24, r22
    d6ac:	0e 94 0b 6b 	call	0xd616	; 0xd616 <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    d6b0:	10 93 35 02 	sts	0x0235, r17
    d6b4:	1f 91       	pop	r17
    d6b6:	08 95       	ret

0000d6b8 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    d6b8:	ef 92       	push	r14
    d6ba:	ff 92       	push	r15
    d6bc:	0f 93       	push	r16
    d6be:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    d6c0:	0e 94 fc 6a 	call	0xd5f8	; 0xd5f8 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    d6c4:	84 e0       	ldi	r24, 0x04	; 4
    d6c6:	0e 94 2a 6b 	call	0xd654	; 0xd654 <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    d6ca:	85 e6       	ldi	r24, 0x65	; 101
    d6cc:	e8 2e       	mov	r14, r24
    d6ce:	8e e0       	ldi	r24, 0x0E	; 14
    d6d0:	f8 2e       	mov	r15, r24
    d6d2:	01 2d       	mov	r16, r1
    d6d4:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d6d6:	c7 01       	movw	r24, r14
    d6d8:	01 97       	sbiw	r24, 0x01	; 1
    d6da:	f1 f7       	brne	.-4      	; 0xd6d8 <LCD_Init+0x20>
    d6dc:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d6de:	00 c0       	rjmp	.+0      	; 0xd6e0 <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    d6e0:	86 e0       	ldi	r24, 0x06	; 6
    d6e2:	0e 94 2a 6b 	call	0xd654	; 0xd654 <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d6e6:	c7 01       	movw	r24, r14
    d6e8:	01 97       	sbiw	r24, 0x01	; 1
    d6ea:	f1 f7       	brne	.-4      	; 0xd6e8 <LCD_Init+0x30>
    d6ec:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d6ee:	00 c0       	rjmp	.+0      	; 0xd6f0 <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    d6f0:	87 e0       	ldi	r24, 0x07	; 7
    d6f2:	0e 94 2a 6b 	call	0xd654	; 0xd654 <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    d6f6:	86 e0       	ldi	r24, 0x06	; 6
    d6f8:	90 e0       	ldi	r25, 0x00	; 0
    d6fa:	0e 94 30 6b 	call	0xd660	; 0xd660 <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    d6fe:	84 e0       	ldi	r24, 0x04	; 4
    d700:	0e 94 11 6b 	call	0xd622	; 0xd622 <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d704:	c7 01       	movw	r24, r14
    d706:	01 97       	sbiw	r24, 0x01	; 1
    d708:	f1 f7       	brne	.-4      	; 0xd706 <LCD_Init+0x4e>
    d70a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d70c:	00 c0       	rjmp	.+0      	; 0xd70e <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    d70e:	0e 94 20 6b 	call	0xd640	; 0xd640 <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    d712:	0e 94 1b 6b 	call	0xd636	; 0xd636 <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    d716:	0e 94 25 6b 	call	0xd64a	; 0xd64a <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    d71a:	60 e0       	ldi	r22, 0x00	; 0
    d71c:	86 2f       	mov	r24, r22
    d71e:	0e 94 4f 6b 	call	0xd69e	; 0xd69e <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    d722:	80 e0       	ldi	r24, 0x00	; 0
    d724:	0e 94 36 6b 	call	0xd66c	; 0xd66c <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    d728:	0e 94 06 6b 	call	0xd60c	; 0xd60c <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    d72c:	85 e5       	ldi	r24, 0x55	; 85
    d72e:	0e 94 36 6b 	call	0xd66c	; 0xd66c <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    d732:	80 e0       	ldi	r24, 0x00	; 0
    d734:	0e 94 36 6b 	call	0xd66c	; 0xd66c <LCD_SetScreen>
    d738:	1f 91       	pop	r17
    d73a:	0f 91       	pop	r16
    d73c:	ff 90       	pop	r15
    d73e:	ef 90       	pop	r14
    d740:	08 95       	ret

0000d742 <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    d742:	cf 93       	push	r28
    d744:	df 93       	push	r29
    d746:	cd b7       	in	r28, 0x3d	; 61
    d748:	de b7       	in	r29, 0x3e	; 62
    d74a:	21 97       	sbiw	r28, 0x01	; 1
    d74c:	0f b6       	in	r0, 0x3f	; 63
    d74e:	f8 94       	cli
    d750:	de bf       	out	0x3e, r29	; 62
    d752:	0f be       	out	0x3f, r0	; 63
    d754:	cd bf       	out	0x3d, r28	; 61
    d756:	e8 2f       	mov	r30, r24
    d758:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    d75a:	48 17       	cp	r20, r24
    d75c:	10 f4       	brcc	.+4      	; 0xd762 <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    d75e:	e4 2f       	mov	r30, r20
		x2 = temp;
    d760:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    d762:	56 17       	cp	r21, r22
    d764:	18 f4       	brcc	.+6      	; 0xd76c <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    d766:	86 2f       	mov	r24, r22
		y1 = y2;
    d768:	65 2f       	mov	r22, r21
		y2 = temp;
    d76a:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    d76c:	f6 2f       	mov	r31, r22
    d76e:	f6 95       	lsr	r31
    d770:	f6 95       	lsr	r31
    d772:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    d774:	75 2f       	mov	r23, r21
    d776:	76 95       	lsr	r23
    d778:	76 95       	lsr	r23
    d77a:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    d77c:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    d77e:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    d780:	2f ef       	ldi	r18, 0xFF	; 255
    d782:	30 e0       	ldi	r19, 0x00	; 0
    d784:	c9 01       	movw	r24, r18
    d786:	02 c0       	rjmp	.+4      	; 0xd78c <LCD_ClrBox+0x4a>
    d788:	88 0f       	add	r24, r24
    d78a:	99 1f       	adc	r25, r25
    d78c:	6a 95       	dec	r22
    d78e:	e2 f7       	brpl	.-8      	; 0xd788 <LCD_ClrBox+0x46>
    d790:	68 2f       	mov	r22, r24
    d792:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    d794:	87 e0       	ldi	r24, 0x07	; 7
    d796:	90 e0       	ldi	r25, 0x00	; 0
    d798:	85 1b       	sub	r24, r21
    d79a:	91 09       	sbc	r25, r1
    d79c:	02 c0       	rjmp	.+4      	; 0xd7a2 <LCD_ClrBox+0x60>
    d79e:	35 95       	asr	r19
    d7a0:	27 95       	ror	r18
    d7a2:	8a 95       	dec	r24
    d7a4:	e2 f7       	brpl	.-8      	; 0xd79e <LCD_ClrBox+0x5c>
    d7a6:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    d7a8:	4e 1b       	sub	r20, r30
    d7aa:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d7ac:	40 98       	cbi	0x08, 0	; 8
    d7ae:	80 ee       	ldi	r24, 0xE0	; 224
    d7b0:	80 93 00 80 	sts	0x8000, r24
    d7b4:	ae 2f       	mov	r26, r30
    d7b6:	af 77       	andi	r26, 0x7F	; 127
    d7b8:	be 2f       	mov	r27, r30
    d7ba:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    d7bc:	f7 17       	cp	r31, r23
    d7be:	11 f5       	brne	.+68     	; 0xd804 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    d7c0:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d7c2:	40 98       	cbi	0x08, 0	; 8
    d7c4:	70 6b       	ori	r23, 0xB0	; 176
    d7c6:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d7ca:	40 98       	cbi	0x08, 0	; 8
    d7cc:	8a 2f       	mov	r24, r26
    d7ce:	99 27       	eor	r25, r25
    d7d0:	54 e0       	ldi	r21, 0x04	; 4
    d7d2:	96 95       	lsr	r25
    d7d4:	87 95       	ror	r24
    d7d6:	5a 95       	dec	r21
    d7d8:	e1 f7       	brne	.-8      	; 0xd7d2 <LCD_ClrBox+0x90>
    d7da:	80 61       	ori	r24, 0x10	; 16
    d7dc:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d7e0:	40 98       	cbi	0x08, 0	; 8
    d7e2:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    d7e6:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    d7e8:	40 9a       	sbi	0x08, 0	; 8
    d7ea:	80 91 00 81 	lds	r24, 0x8100
    d7ee:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    d7f0:	40 9a       	sbi	0x08, 0	; 8
    d7f2:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    d7f6:	40 9a       	sbi	0x08, 0	; 8
    d7f8:	82 23       	and	r24, r18
    d7fa:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    d7fe:	31 50       	subi	r19, 0x01	; 1
    d800:	99 f7       	brne	.-26     	; 0xd7e8 <LCD_ClrBox+0xa6>
    d802:	6b c0       	rjmp	.+214    	; 0xd8da <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    d804:	57 2f       	mov	r21, r23
    d806:	5f 1b       	sub	r21, r31
    d808:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d80a:	40 98       	cbi	0x08, 0	; 8
    d80c:	8f 2f       	mov	r24, r31
    d80e:	80 6b       	ori	r24, 0xB0	; 176
    d810:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d814:	40 98       	cbi	0x08, 0	; 8
    d816:	8a 2f       	mov	r24, r26
    d818:	99 27       	eor	r25, r25
    d81a:	34 e0       	ldi	r19, 0x04	; 4
    d81c:	96 95       	lsr	r25
    d81e:	87 95       	ror	r24
    d820:	3a 95       	dec	r19
    d822:	e1 f7       	brne	.-8      	; 0xd81c <LCD_ClrBox+0xda>
    d824:	80 61       	ori	r24, 0x10	; 16
    d826:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d82a:	40 98       	cbi	0x08, 0	; 8
    d82c:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    d830:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    d832:	40 9a       	sbi	0x08, 0	; 8
    d834:	80 91 00 81 	lds	r24, 0x8100
    d838:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    d83a:	40 9a       	sbi	0x08, 0	; 8
    d83c:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    d840:	40 9a       	sbi	0x08, 0	; 8
    d842:	86 23       	and	r24, r22
    d844:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    d848:	31 50       	subi	r19, 0x01	; 1
    d84a:	99 f7       	brne	.-26     	; 0xd832 <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    d84c:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    d84e:	85 2f       	mov	r24, r21
    d850:	51 50       	subi	r21, 0x01	; 1
    d852:	18 16       	cp	r1, r24
    d854:	04 f5       	brge	.+64     	; 0xd896 <LCD_ClrBox+0x154>
    d856:	8a 2f       	mov	r24, r26
    d858:	99 27       	eor	r25, r25
    d85a:	64 e0       	ldi	r22, 0x04	; 4
    d85c:	96 95       	lsr	r25
    d85e:	87 95       	ror	r24
    d860:	6a 95       	dec	r22
    d862:	e1 f7       	brne	.-8      	; 0xd85c <LCD_ClrBox+0x11a>
    d864:	98 2f       	mov	r25, r24
    d866:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d868:	8f 2f       	mov	r24, r31
    d86a:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d86c:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d86e:	40 98       	cbi	0x08, 0	; 8
    d870:	80 6b       	ori	r24, 0xB0	; 176
    d872:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d876:	40 98       	cbi	0x08, 0	; 8
    d878:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d87c:	40 98       	cbi	0x08, 0	; 8
    d87e:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    d882:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    d884:	40 9a       	sbi	0x08, 0	; 8
    d886:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    d88a:	31 50       	subi	r19, 0x01	; 1
    d88c:	d9 f7       	brne	.-10     	; 0xd884 <LCD_ClrBox+0x142>
    d88e:	85 2f       	mov	r24, r21
    d890:	51 50       	subi	r21, 0x01	; 1
    d892:	18 16       	cp	r1, r24
    d894:	4c f3       	brlt	.-46     	; 0xd868 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d896:	40 98       	cbi	0x08, 0	; 8
    d898:	70 6b       	ori	r23, 0xB0	; 176
    d89a:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d89e:	8e 2f       	mov	r24, r30
    d8a0:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d8a2:	40 98       	cbi	0x08, 0	; 8
    d8a4:	99 27       	eor	r25, r25
    d8a6:	54 e0       	ldi	r21, 0x04	; 4
    d8a8:	96 95       	lsr	r25
    d8aa:	87 95       	ror	r24
    d8ac:	5a 95       	dec	r21
    d8ae:	e1 f7       	brne	.-8      	; 0xd8a8 <LCD_ClrBox+0x166>
    d8b0:	80 61       	ori	r24, 0x10	; 16
    d8b2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d8b6:	40 98       	cbi	0x08, 0	; 8
    d8b8:	ef 70       	andi	r30, 0x0F	; 15
    d8ba:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    d8be:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    d8c0:	40 9a       	sbi	0x08, 0	; 8
    d8c2:	80 91 00 81 	lds	r24, 0x8100
    d8c6:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    d8c8:	40 9a       	sbi	0x08, 0	; 8
    d8ca:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    d8ce:	40 9a       	sbi	0x08, 0	; 8
    d8d0:	82 23       	and	r24, r18
    d8d2:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    d8d6:	31 50       	subi	r19, 0x01	; 1
    d8d8:	99 f7       	brne	.-26     	; 0xd8c0 <LCD_ClrBox+0x17e>
    d8da:	21 96       	adiw	r28, 0x01	; 1
    d8dc:	0f b6       	in	r0, 0x3f	; 63
    d8de:	f8 94       	cli
    d8e0:	de bf       	out	0x3e, r29	; 62
    d8e2:	0f be       	out	0x3f, r0	; 63
    d8e4:	cd bf       	out	0x3d, r28	; 61
    d8e6:	df 91       	pop	r29
    d8e8:	cf 91       	pop	r28
    d8ea:	08 95       	ret

0000d8ec <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    d8ec:	cf 93       	push	r28
    d8ee:	df 93       	push	r29
    d8f0:	cd b7       	in	r28, 0x3d	; 61
    d8f2:	de b7       	in	r29, 0x3e	; 62
    d8f4:	21 97       	sbiw	r28, 0x01	; 1
    d8f6:	0f b6       	in	r0, 0x3f	; 63
    d8f8:	f8 94       	cli
    d8fa:	de bf       	out	0x3e, r29	; 62
    d8fc:	0f be       	out	0x3f, r0	; 63
    d8fe:	cd bf       	out	0x3d, r28	; 61
    d900:	36 2f       	mov	r19, r22
    d902:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d904:	40 98       	cbi	0x08, 0	; 8
    d906:	90 ee       	ldi	r25, 0xE0	; 224
    d908:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d90c:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d90e:	40 98       	cbi	0x08, 0	; 8
    d910:	30 6b       	ori	r19, 0xB0	; 176
    d912:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d916:	94 2f       	mov	r25, r20
    d918:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d91a:	40 98       	cbi	0x08, 0	; 8
    d91c:	29 2f       	mov	r18, r25
    d91e:	33 27       	eor	r19, r19
    d920:	e4 e0       	ldi	r30, 0x04	; 4
    d922:	36 95       	lsr	r19
    d924:	27 95       	ror	r18
    d926:	ea 95       	dec	r30
    d928:	e1 f7       	brne	.-8      	; 0xd922 <LCD_ClrPage+0x36>
    d92a:	92 2f       	mov	r25, r18
    d92c:	90 61       	ori	r25, 0x10	; 16
    d92e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d932:	40 98       	cbi	0x08, 0	; 8
    d934:	4f 70       	andi	r20, 0x0F	; 15
    d936:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    d93a:	98 2f       	mov	r25, r24
    d93c:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    d93e:	40 9a       	sbi	0x08, 0	; 8
    d940:	80 91 00 81 	lds	r24, 0x8100
    d944:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    d946:	40 9a       	sbi	0x08, 0	; 8
    d948:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    d94c:	40 9a       	sbi	0x08, 0	; 8
    d94e:	89 23       	and	r24, r25
    d950:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    d954:	51 50       	subi	r21, 0x01	; 1
    d956:	99 f7       	brne	.-26     	; 0xd93e <LCD_ClrPage+0x52>
    d958:	21 96       	adiw	r28, 0x01	; 1
    d95a:	0f b6       	in	r0, 0x3f	; 63
    d95c:	f8 94       	cli
    d95e:	de bf       	out	0x3e, r29	; 62
    d960:	0f be       	out	0x3f, r0	; 63
    d962:	cd bf       	out	0x3d, r28	; 61
    d964:	df 91       	pop	r29
    d966:	cf 91       	pop	r28
    d968:	08 95       	ret

0000d96a <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    d96a:	fc 01       	movw	r30, r24
    d96c:	86 2f       	mov	r24, r22
    d96e:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d970:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d972:	40 98       	cbi	0x08, 0	; 8
    d974:	80 6b       	ori	r24, 0xB0	; 176
    d976:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d97a:	84 2f       	mov	r24, r20
    d97c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d97e:	40 98       	cbi	0x08, 0	; 8
    d980:	99 27       	eor	r25, r25
    d982:	44 e0       	ldi	r20, 0x04	; 4
    d984:	96 95       	lsr	r25
    d986:	87 95       	ror	r24
    d988:	4a 95       	dec	r20
    d98a:	e1 f7       	brne	.-8      	; 0xd984 <LCD_WritePage_F+0x1a>
    d98c:	80 61       	ori	r24, 0x10	; 16
    d98e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d992:	40 98       	cbi	0x08, 0	; 8
    d994:	3f 70       	andi	r19, 0x0F	; 15
    d996:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    d99a:	40 9a       	sbi	0x08, 0	; 8
    d99c:	84 91       	lpm	r24, Z+
    d99e:	80 93 00 81 	sts	0x8100, r24
		data++;
    d9a2:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    d9a4:	21 50       	subi	r18, 0x01	; 1
    d9a6:	c9 f7       	brne	.-14     	; 0xd99a <LCD_WritePage_F+0x30>
    d9a8:	08 95       	ret

0000d9aa <LCD_UpdateMinVolt>:
	LCD_UpdateBigNumbers(soc);
	
}

void LCD_UpdateMinVolt(uint16_t volt)
{
    d9aa:	0f 93       	push	r16
    d9ac:	1f 93       	push	r17
    d9ae:	cf 93       	push	r28
    d9b0:	df 93       	push	r29
    d9b2:	cd b7       	in	r28, 0x3d	; 61
    d9b4:	de b7       	in	r29, 0x3e	; 62
    d9b6:	61 97       	sbiw	r28, 0x11	; 17
    d9b8:	0f b6       	in	r0, 0x3f	; 63
    d9ba:	f8 94       	cli
    d9bc:	de bf       	out	0x3e, r29	; 62
    d9be:	0f be       	out	0x3f, r0	; 63
    d9c0:	cd bf       	out	0x3d, r28	; 61
    d9c2:	8c 01       	movw	r16, r24
	// x = pixels ?
	char buffer [sizeof(uint16_t)*8+1];
	int charw=6;
	int startpos=60;
	
	TERMFONT_DisplayString("Min Volt:", 7, 0);
    d9c4:	40 e0       	ldi	r20, 0x00	; 0
    d9c6:	50 e0       	ldi	r21, 0x00	; 0
    d9c8:	67 e0       	ldi	r22, 0x07	; 7
    d9ca:	70 e0       	ldi	r23, 0x00	; 0
    d9cc:	80 e0       	ldi	r24, 0x00	; 0
    d9ce:	92 e0       	ldi	r25, 0x02	; 2
    d9d0:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>
	
	// convert to ascii
    itoa(volt,buffer,10);
    d9d4:	4a e0       	ldi	r20, 0x0A	; 10
    d9d6:	50 e0       	ldi	r21, 0x00	; 0
    d9d8:	be 01       	movw	r22, r28
    d9da:	6f 5f       	subi	r22, 0xFF	; 255
    d9dc:	7f 4f       	sbci	r23, 0xFF	; 255
    d9de:	c8 01       	movw	r24, r16
    d9e0:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <itoa>

	//TERMFONT_DisplayChar(buffer[0], 7, startpos );
	
	if (volt<10)
    d9e4:	0a 30       	cpi	r16, 0x0A	; 10
    d9e6:	11 05       	cpc	r17, r1
    d9e8:	a0 f4       	brcc	.+40     	; 0xda12 <LCD_UpdateMinVolt+0x68>
	{
		// leading zero
		TERMFONT_DisplayChar('0', 7, startpos );
    d9ea:	4c e3       	ldi	r20, 0x3C	; 60
    d9ec:	50 e0       	ldi	r21, 0x00	; 0
    d9ee:	67 e0       	ldi	r22, 0x07	; 7
    d9f0:	70 e0       	ldi	r23, 0x00	; 0
    d9f2:	80 e3       	ldi	r24, 0x30	; 48
    d9f4:	90 e0       	ldi	r25, 0x00	; 0
    d9f6:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    d9fa:	42 e4       	ldi	r20, 0x42	; 66
    d9fc:	50 e0       	ldi	r21, 0x00	; 0
    d9fe:	67 e0       	ldi	r22, 0x07	; 7
    da00:	70 e0       	ldi	r23, 0x00	; 0
    da02:	8e e2       	ldi	r24, 0x2E	; 46
    da04:	90 e0       	ldi	r25, 0x00	; 0
    da06:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[0], 7, startpos+2*charw );
    da0a:	89 81       	ldd	r24, Y+1	; 0x01
    da0c:	48 e4       	ldi	r20, 0x48	; 72
    da0e:	50 e0       	ldi	r21, 0x00	; 0
    da10:	1b c0       	rjmp	.+54     	; 0xda48 <LCD_UpdateMinVolt+0x9e>
	} else {
		TERMFONT_DisplayChar(buffer[0], 7, startpos );
    da12:	89 81       	ldd	r24, Y+1	; 0x01
    da14:	4c e3       	ldi	r20, 0x3C	; 60
    da16:	50 e0       	ldi	r21, 0x00	; 0
    da18:	67 e0       	ldi	r22, 0x07	; 7
    da1a:	70 e0       	ldi	r23, 0x00	; 0
    da1c:	99 27       	eor	r25, r25
    da1e:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar('.', 7, startpos+charw );
    da22:	42 e4       	ldi	r20, 0x42	; 66
    da24:	50 e0       	ldi	r21, 0x00	; 0
    da26:	67 e0       	ldi	r22, 0x07	; 7
    da28:	70 e0       	ldi	r23, 0x00	; 0
    da2a:	8e e2       	ldi	r24, 0x2E	; 46
    da2c:	90 e0       	ldi	r25, 0x00	; 0
    da2e:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[1], 7, startpos+2*charw );
    da32:	8a 81       	ldd	r24, Y+2	; 0x02
    da34:	48 e4       	ldi	r20, 0x48	; 72
    da36:	50 e0       	ldi	r21, 0x00	; 0
    da38:	67 e0       	ldi	r22, 0x07	; 7
    da3a:	70 e0       	ldi	r23, 0x00	; 0
    da3c:	99 27       	eor	r25, r25
    da3e:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
		TERMFONT_DisplayChar(buffer[2], 7, startpos+3*charw );
    da42:	8b 81       	ldd	r24, Y+3	; 0x03
    da44:	4e e4       	ldi	r20, 0x4E	; 78
    da46:	50 e0       	ldi	r21, 0x00	; 0
    da48:	67 e0       	ldi	r22, 0x07	; 7
    da4a:	70 e0       	ldi	r23, 0x00	; 0
    da4c:	99 27       	eor	r25, r25
    da4e:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
	}

	TERMFONT_DisplayString("V" , 7, startpos+4*charw );
    da52:	44 e5       	ldi	r20, 0x54	; 84
    da54:	50 e0       	ldi	r21, 0x00	; 0
    da56:	67 e0       	ldi	r22, 0x07	; 7
    da58:	70 e0       	ldi	r23, 0x00	; 0
    da5a:	8a e0       	ldi	r24, 0x0A	; 10
    da5c:	92 e0       	ldi	r25, 0x02	; 2
    da5e:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>
    da62:	61 96       	adiw	r28, 0x11	; 17
    da64:	0f b6       	in	r0, 0x3f	; 63
    da66:	f8 94       	cli
    da68:	de bf       	out	0x3e, r29	; 62
    da6a:	0f be       	out	0x3f, r0	; 63
    da6c:	cd bf       	out	0x3d, r28	; 61
    da6e:	df 91       	pop	r29
    da70:	cf 91       	pop	r28
    da72:	1f 91       	pop	r17
    da74:	0f 91       	pop	r16
    da76:	08 95       	ret

0000da78 <LCD_UpdateMaxTemp>:

}

void LCD_UpdateMaxTemp(uint8_t temp)
{
    da78:	1f 93       	push	r17
    da7a:	cf 93       	push	r28
    da7c:	df 93       	push	r29
    da7e:	cd b7       	in	r28, 0x3d	; 61
    da80:	de b7       	in	r29, 0x3e	; 62
    da82:	29 97       	sbiw	r28, 0x09	; 9
    da84:	0f b6       	in	r0, 0x3f	; 63
    da86:	f8 94       	cli
    da88:	de bf       	out	0x3e, r29	; 62
    da8a:	0f be       	out	0x3f, r0	; 63
    da8c:	cd bf       	out	0x3d, r28	; 61
    da8e:	18 2f       	mov	r17, r24
	char buffer [sizeof(uint8_t)*8+1];
    itoa(temp,buffer,10);
    da90:	4a e0       	ldi	r20, 0x0A	; 10
    da92:	50 e0       	ldi	r21, 0x00	; 0
    da94:	be 01       	movw	r22, r28
    da96:	6f 5f       	subi	r22, 0xFF	; 255
    da98:	7f 4f       	sbci	r23, 0xFF	; 255
    da9a:	99 27       	eor	r25, r25
    da9c:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <itoa>
	
	TERMFONT_DisplayString( "Max Temp:", 5, 0 );
    daa0:	40 e0       	ldi	r20, 0x00	; 0
    daa2:	50 e0       	ldi	r21, 0x00	; 0
    daa4:	65 e0       	ldi	r22, 0x05	; 5
    daa6:	70 e0       	ldi	r23, 0x00	; 0
    daa8:	8c e0       	ldi	r24, 0x0C	; 12
    daaa:	92 e0       	ldi	r25, 0x02	; 2
    daac:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>

	if (temp<10)
    dab0:	1a 30       	cpi	r17, 0x0A	; 10
    dab2:	40 f4       	brcc	.+16     	; 0xdac4 <LCD_UpdateMaxTemp+0x4c>
	{
		// erase old content
		TERMFONT_DisplayString("    ",5,66);
    dab4:	42 e4       	ldi	r20, 0x42	; 66
    dab6:	50 e0       	ldi	r21, 0x00	; 0
    dab8:	65 e0       	ldi	r22, 0x05	; 5
    daba:	70 e0       	ldi	r23, 0x00	; 0
    dabc:	86 e1       	ldi	r24, 0x16	; 22
    dabe:	92 e0       	ldi	r25, 0x02	; 2
    dac0:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>
		TERMFONT_DisplayString(buffer,5,66);
	} else {
		TERMFONT_DisplayString( buffer, 5, 66 );
    dac4:	42 e4       	ldi	r20, 0x42	; 66
    dac6:	50 e0       	ldi	r21, 0x00	; 0
    dac8:	65 e0       	ldi	r22, 0x05	; 5
    daca:	70 e0       	ldi	r23, 0x00	; 0
    dacc:	ce 01       	movw	r24, r28
    dace:	01 96       	adiw	r24, 0x01	; 1
    dad0:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>
	}
	
	TERMFONT_DisplayString( "C", 5, 84 );
    dad4:	44 e5       	ldi	r20, 0x54	; 84
    dad6:	50 e0       	ldi	r21, 0x00	; 0
    dad8:	65 e0       	ldi	r22, 0x05	; 5
    dada:	70 e0       	ldi	r23, 0x00	; 0
    dadc:	8b e1       	ldi	r24, 0x1B	; 27
    dade:	92 e0       	ldi	r25, 0x02	; 2
    dae0:	0e 94 10 75 	call	0xea20	; 0xea20 <TERMFONT_DisplayString>
    dae4:	29 96       	adiw	r28, 0x09	; 9
    dae6:	0f b6       	in	r0, 0x3f	; 63
    dae8:	f8 94       	cli
    daea:	de bf       	out	0x3e, r29	; 62
    daec:	0f be       	out	0x3f, r0	; 63
    daee:	cd bf       	out	0x3d, r28	; 61
    daf0:	df 91       	pop	r29
    daf2:	cf 91       	pop	r28
    daf4:	1f 91       	pop	r17
    daf6:	08 95       	ret

0000daf8 <LCD_UpdateBigNumbers>:

}

void LCD_UpdateBigNumbers(uint8_t value)
{
    daf8:	6f 92       	push	r6
    dafa:	7f 92       	push	r7
    dafc:	8f 92       	push	r8
    dafe:	9f 92       	push	r9
    db00:	af 92       	push	r10
    db02:	bf 92       	push	r11
    db04:	cf 92       	push	r12
    db06:	df 92       	push	r13
    db08:	ef 92       	push	r14
    db0a:	ff 92       	push	r15
    db0c:	0f 93       	push	r16
    db0e:	1f 93       	push	r17
    db10:	cf 93       	push	r28
    db12:	df 93       	push	r29
    db14:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    db16:	66 24       	eor	r6, r6
    db18:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    db1a:	8f 3f       	cpi	r24, 0xFF	; 255
    db1c:	09 f4       	brne	.+2      	; 0xdb20 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    db1e:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    db20:	20 e2       	ldi	r18, 0x20	; 32
    db22:	40 e6       	ldi	r20, 0x60	; 96
    db24:	60 e0       	ldi	r22, 0x00	; 0
    db26:	86 2f       	mov	r24, r22
    db28:	0e 94 a1 6b 	call	0xd742	; 0xd742 <LCD_ClrBox>

	if (value < 10)
    db2c:	ca 30       	cpi	r28, 0x0A	; 10
    db2e:	80 f4       	brcc	.+32     	; 0xdb50 <LCD_UpdateBigNumbers+0x58>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    db30:	ec 2f       	mov	r30, r28
    db32:	ff 27       	eor	r31, r31
    db34:	ee 0f       	add	r30, r30
    db36:	ff 1f       	adc	r31, r31
    db38:	e6 59       	subi	r30, 0x96	; 150
    db3a:	f0 43       	sbci	r31, 0x30	; 48
    db3c:	85 91       	lpm	r24, Z+
    db3e:	94 91       	lpm	r25, Z+
    db40:	f4 e0       	ldi	r31, 0x04	; 4
    db42:	af 2e       	mov	r10, r31
    db44:	b1 2c       	mov	r11, r1
    db46:	e0 e2       	ldi	r30, 0x20	; 32
    db48:	ce 2e       	mov	r12, r30
    db4a:	d1 2c       	mov	r13, r1
    db4c:	73 01       	movw	r14, r6
    db4e:	34 c0       	rjmp	.+104    	; 0xdbb8 <LCD_UpdateBigNumbers+0xc0>

		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);

	} 
	else if (value > 9 && value < 100) 
    db50:	8c 2f       	mov	r24, r28
    db52:	8a 50       	subi	r24, 0x0A	; 10
    db54:	8c 2e       	mov	r8, r28
    db56:	99 24       	eor	r9, r9
    db58:	8a 35       	cpi	r24, 0x5A	; 90
    db5a:	08 f0       	brcs	.+2      	; 0xdb5e <LCD_UpdateBigNumbers+0x66>
    db5c:	3b c0       	rjmp	.+118    	; 0xdbd4 <LCD_UpdateBigNumbers+0xdc>
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
		
		*/
		
		// 2 numbers and percent mark to the middle of the screen
		first = value / 10;
    db5e:	8c 2f       	mov	r24, r28
    db60:	6a e0       	ldi	r22, 0x0A	; 10
    db62:	0e 94 5e 76 	call	0xecbc	; 0xecbc <__udivmodqi4>
    db66:	c8 2f       	mov	r28, r24
    db68:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    db6a:	fe 01       	movw	r30, r28
    db6c:	ec 0f       	add	r30, r28
    db6e:	fd 1f       	adc	r31, r29
    db70:	e6 59       	subi	r30, 0x96	; 150
    db72:	f0 43       	sbci	r31, 0x30	; 48
    db74:	85 91       	lpm	r24, Z+
    db76:	94 91       	lpm	r25, Z+
    db78:	74 e0       	ldi	r23, 0x04	; 4
    db7a:	a7 2e       	mov	r10, r23
    db7c:	b1 2c       	mov	r11, r1
    db7e:	60 e2       	ldi	r22, 0x20	; 32
    db80:	c6 2e       	mov	r12, r22
    db82:	d1 2c       	mov	r13, r1
    db84:	73 01       	movw	r14, r6
    db86:	83 01       	movw	r16, r6
    db88:	93 01       	movw	r18, r6
    db8a:	a3 01       	movw	r20, r6
    db8c:	b6 01       	movw	r22, r12
    db8e:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    db92:	ce 01       	movw	r24, r28
    db94:	53 e0       	ldi	r21, 0x03	; 3
    db96:	88 0f       	add	r24, r24
    db98:	99 1f       	adc	r25, r25
    db9a:	5a 95       	dec	r21
    db9c:	e1 f7       	brne	.-8      	; 0xdb96 <LCD_UpdateBigNumbers+0x9e>
    db9e:	8c 0f       	add	r24, r28
    dba0:	9d 1f       	adc	r25, r29
    dba2:	8c 0f       	add	r24, r28
    dba4:	9d 1f       	adc	r25, r29
    dba6:	f4 01       	movw	r30, r8
    dba8:	e8 1b       	sub	r30, r24
    dbaa:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    dbac:	ee 0f       	add	r30, r30
    dbae:	ff 1f       	adc	r31, r31
    dbb0:	e6 59       	subi	r30, 0x96	; 150
    dbb2:	f0 43       	sbci	r31, 0x30	; 48
    dbb4:	85 91       	lpm	r24, Z+
    dbb6:	94 91       	lpm	r25, Z+
    dbb8:	86 01       	movw	r16, r12
    dbba:	93 01       	movw	r18, r6
    dbbc:	a3 01       	movw	r20, r6
    dbbe:	b6 01       	movw	r22, r12
    dbc0:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>
		
		// percent mark to this row
		PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 64, 0, 32, 4);
    dbc4:	00 e4       	ldi	r16, 0x40	; 64
    dbc6:	10 e0       	ldi	r17, 0x00	; 0
    dbc8:	93 01       	movw	r18, r6
    dbca:	a3 01       	movw	r20, r6
    dbcc:	b6 01       	movw	r22, r12
    dbce:	8c e7       	ldi	r24, 0x7C	; 124
    dbd0:	98 e9       	ldi	r25, 0x98	; 152
    dbd2:	54 c0       	rjmp	.+168    	; 0xdc7c <LCD_UpdateBigNumbers+0x184>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    dbd4:	8c 2f       	mov	r24, r28
    dbd6:	64 e6       	ldi	r22, 0x64	; 100
    dbd8:	0e 94 5e 76 	call	0xecbc	; 0xecbc <__udivmodqi4>
    dbdc:	c8 2f       	mov	r28, r24
    dbde:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    dbe0:	84 e6       	ldi	r24, 0x64	; 100
    dbe2:	90 e0       	ldi	r25, 0x00	; 0
    dbe4:	c8 9f       	mul	r28, r24
    dbe6:	90 01       	movw	r18, r0
    dbe8:	c9 9f       	mul	r28, r25
    dbea:	30 0d       	add	r19, r0
    dbec:	d8 9f       	mul	r29, r24
    dbee:	30 0d       	add	r19, r0
    dbf0:	11 24       	eor	r1, r1
    dbf2:	c9 01       	movw	r24, r18
    dbf4:	94 01       	movw	r18, r8
    dbf6:	28 1b       	sub	r18, r24
    dbf8:	39 0b       	sbc	r19, r25
    dbfa:	c9 01       	movw	r24, r18
    dbfc:	6a e0       	ldi	r22, 0x0A	; 10
    dbfe:	70 e0       	ldi	r23, 0x00	; 0
    dc00:	0e 94 7e 76 	call	0xecfc	; 0xecfc <__divmodhi4>
    dc04:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    dc06:	cb 01       	movw	r24, r22
    dc08:	43 e0       	ldi	r20, 0x03	; 3
    dc0a:	88 0f       	add	r24, r24
    dc0c:	99 1f       	adc	r25, r25
    dc0e:	4a 95       	dec	r20
    dc10:	e1 f7       	brne	.-8      	; 0xdc0a <LCD_UpdateBigNumbers+0x112>
    dc12:	86 0f       	add	r24, r22
    dc14:	97 1f       	adc	r25, r23
    dc16:	86 0f       	add	r24, r22
    dc18:	97 1f       	adc	r25, r23
    dc1a:	39 01       	movw	r6, r18
    dc1c:	68 1a       	sub	r6, r24
    dc1e:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    dc20:	fe 01       	movw	r30, r28
    dc22:	ec 0f       	add	r30, r28
    dc24:	fd 1f       	adc	r31, r29
    dc26:	e6 59       	subi	r30, 0x96	; 150
    dc28:	f0 43       	sbci	r31, 0x30	; 48
    dc2a:	85 91       	lpm	r24, Z+
    dc2c:	94 91       	lpm	r25, Z+
    dc2e:	34 e0       	ldi	r19, 0x04	; 4
    dc30:	a3 2e       	mov	r10, r19
    dc32:	b1 2c       	mov	r11, r1
    dc34:	20 e2       	ldi	r18, 0x20	; 32
    dc36:	c2 2e       	mov	r12, r18
    dc38:	d1 2c       	mov	r13, r1
    dc3a:	ee 24       	eor	r14, r14
    dc3c:	ff 24       	eor	r15, r15
    dc3e:	87 01       	movw	r16, r14
    dc40:	97 01       	movw	r18, r14
    dc42:	a7 01       	movw	r20, r14
    dc44:	b6 01       	movw	r22, r12
    dc46:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    dc4a:	f4 01       	movw	r30, r8
    dc4c:	e8 0d       	add	r30, r8
    dc4e:	f9 1d       	adc	r31, r9
    dc50:	e6 59       	subi	r30, 0x96	; 150
    dc52:	f0 43       	sbci	r31, 0x30	; 48
    dc54:	85 91       	lpm	r24, Z+
    dc56:	94 91       	lpm	r25, Z+
    dc58:	86 01       	movw	r16, r12
    dc5a:	97 01       	movw	r18, r14
    dc5c:	a7 01       	movw	r20, r14
    dc5e:	b6 01       	movw	r22, r12
    dc60:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>

		// 3rd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    dc64:	f3 01       	movw	r30, r6
    dc66:	e6 0d       	add	r30, r6
    dc68:	f7 1d       	adc	r31, r7
    dc6a:	e6 59       	subi	r30, 0x96	; 150
    dc6c:	f0 43       	sbci	r31, 0x30	; 48
    dc6e:	85 91       	lpm	r24, Z+
    dc70:	94 91       	lpm	r25, Z+
    dc72:	00 e4       	ldi	r16, 0x40	; 64
    dc74:	10 e0       	ldi	r17, 0x00	; 0
    dc76:	97 01       	movw	r18, r14
    dc78:	a7 01       	movw	r20, r14
    dc7a:	b6 01       	movw	r22, r12
    dc7c:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>
    dc80:	df 91       	pop	r29
    dc82:	cf 91       	pop	r28
    dc84:	1f 91       	pop	r17
    dc86:	0f 91       	pop	r16
    dc88:	ff 90       	pop	r15
    dc8a:	ef 90       	pop	r14
    dc8c:	df 90       	pop	r13
    dc8e:	cf 90       	pop	r12
    dc90:	bf 90       	pop	r11
    dc92:	af 90       	pop	r10
    dc94:	9f 90       	pop	r9
    dc96:	8f 90       	pop	r8
    dc98:	7f 90       	pop	r7
    dc9a:	6f 90       	pop	r6
    dc9c:	08 95       	ret

0000dc9e <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    dc9e:	af 92       	push	r10
    dca0:	bf 92       	push	r11
    dca2:	cf 92       	push	r12
    dca4:	df 92       	push	r13
    dca6:	ef 92       	push	r14
    dca8:	ff 92       	push	r15
    dcaa:	0f 93       	push	r16
    dcac:	1f 93       	push	r17
    dcae:	cf 93       	push	r28
    dcb0:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    dcb2:	85 36       	cpi	r24, 0x65	; 101
    dcb4:	08 f0       	brcs	.+2      	; 0xdcb8 <LCD_UpdateSOC+0x1a>
		soc = 100;
    dcb6:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    dcb8:	ec 2f       	mov	r30, r28
    dcba:	ff 27       	eor	r31, r31
    dcbc:	ee 0f       	add	r30, r30
    dcbe:	ff 1f       	adc	r31, r31
    dcc0:	ea 57       	subi	r30, 0x7A	; 122
    dcc2:	f0 43       	sbci	r31, 0x30	; 48
    dcc4:	85 91       	lpm	r24, Z+
    dcc6:	94 91       	lpm	r25, Z+
    dcc8:	b8 e0       	ldi	r27, 0x08	; 8
    dcca:	ab 2e       	mov	r10, r27
    dccc:	b1 2c       	mov	r11, r1
    dcce:	a0 e2       	ldi	r26, 0x20	; 32
    dcd0:	ca 2e       	mov	r12, r26
    dcd2:	d1 2c       	mov	r13, r1
    dcd4:	ee 24       	eor	r14, r14
    dcd6:	ff 24       	eor	r15, r15
    dcd8:	00 e6       	ldi	r16, 0x60	; 96
    dcda:	10 e0       	ldi	r17, 0x00	; 0
    dcdc:	97 01       	movw	r18, r14
    dcde:	a7 01       	movw	r20, r14
    dce0:	b6 01       	movw	r22, r12
    dce2:	0e 94 f2 71 	call	0xe3e4	; 0xe3e4 <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    dce6:	8c 2f       	mov	r24, r28
    dce8:	0e 94 7c 6d 	call	0xdaf8	; 0xdaf8 <LCD_UpdateBigNumbers>
    dcec:	cf 91       	pop	r28
    dcee:	1f 91       	pop	r17
    dcf0:	0f 91       	pop	r16
    dcf2:	ff 90       	pop	r15
    dcf4:	ef 90       	pop	r14
    dcf6:	df 90       	pop	r13
    dcf8:	cf 90       	pop	r12
    dcfa:	bf 90       	pop	r11
    dcfc:	af 90       	pop	r10
    dcfe:	08 95       	ret

0000dd00 <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    dd00:	87 b1       	in	r24, 0x07	; 7
    dd02:	87 70       	andi	r24, 0x07	; 7
    dd04:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    dd06:	88 b1       	in	r24, 0x08	; 8
    dd08:	88 6f       	ori	r24, 0xF8	; 248
    dd0a:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    dd0c:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    dd0e:	24 9a       	sbi	0x04, 4	; 4
    dd10:	08 95       	ret

0000dd12 <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    dd12:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    dd14:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    dd16:	90 91 6b 00 	lds	r25, 0x006B
    dd1a:	9f 7e       	andi	r25, 0xEF	; 239
    dd1c:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    dd20:	91 e0       	ldi	r25, 0x01	; 1
    dd22:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    dd24:	8f bf       	out	0x3f, r24	; 63
    dd26:	08 95       	ret

0000dd28 <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    dd28:	1f 92       	push	r1
    dd2a:	0f 92       	push	r0
    dd2c:	0f b6       	in	r0, 0x3f	; 63
    dd2e:	0f 92       	push	r0
    dd30:	11 24       	eor	r1, r1
    dd32:	2f 93       	push	r18
    dd34:	3f 93       	push	r19
    dd36:	4f 93       	push	r20
    dd38:	5f 93       	push	r21
    dd3a:	6f 93       	push	r22
    dd3c:	7f 93       	push	r23
    dd3e:	8f 93       	push	r24
    dd40:	9f 93       	push	r25
    dd42:	af 93       	push	r26
    dd44:	bf 93       	push	r27
    dd46:	ef 93       	push	r30
    dd48:	ff 93       	push	r31
	POWER_WakeupCallback();
    dd4a:	0e 94 40 6f 	call	0xde80	; 0xde80 <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    dd4e:	0e 94 80 6e 	call	0xdd00	; 0xdd00 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    dd52:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <JOYSTICK_DisableWakeupInterrupt>
    dd56:	ff 91       	pop	r31
    dd58:	ef 91       	pop	r30
    dd5a:	bf 91       	pop	r27
    dd5c:	af 91       	pop	r26
    dd5e:	9f 91       	pop	r25
    dd60:	8f 91       	pop	r24
    dd62:	7f 91       	pop	r23
    dd64:	6f 91       	pop	r22
    dd66:	5f 91       	pop	r21
    dd68:	4f 91       	pop	r20
    dd6a:	3f 91       	pop	r19
    dd6c:	2f 91       	pop	r18
    dd6e:	0f 90       	pop	r0
    dd70:	0f be       	out	0x3f, r0	; 63
    dd72:	0f 90       	pop	r0
    dd74:	1f 90       	pop	r1
    dd76:	18 95       	reti

0000dd78 <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    dd78:	0f 93       	push	r16
    dd7a:	1f 93       	push	r17
    dd7c:	18 2f       	mov	r17, r24
    dd7e:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    dd80:	0e 94 80 6e 	call	0xdd00	; 0xdd00 <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    dd84:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    dd88:	10 93 39 02 	sts	0x0239, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    dd8c:	00 93 38 02 	sts	0x0238, r16
    dd90:	1f 91       	pop	r17
    dd92:	0f 91       	pop	r16
    dd94:	08 95       	ret

0000dd96 <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    dd96:	0f 93       	push	r16
    dd98:	1f 93       	push	r17
    dd9a:	cf 93       	push	r28
    dd9c:	df 93       	push	r29
    dd9e:	cd b7       	in	r28, 0x3d	; 61
    dda0:	de b7       	in	r29, 0x3e	; 62
    dda2:	25 97       	sbiw	r28, 0x05	; 5
    dda4:	0f b6       	in	r0, 0x3f	; 63
    dda6:	f8 94       	cli
    dda8:	de bf       	out	0x3e, r29	; 62
    ddaa:	0f be       	out	0x3f, r0	; 63
    ddac:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    ddae:	36 b1       	in	r19, 0x06	; 6
    ddb0:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    ddb2:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    ddb4:	80 91 3c 02 	lds	r24, 0x023C
    ddb8:	38 17       	cp	r19, r24
    ddba:	19 f0       	breq	.+6      	; 0xddc2 <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    ddbc:	30 93 3c 02 	sts	0x023C, r19
    ddc0:	54 c0       	rjmp	.+168    	; 0xde6a <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    ddc2:	20 91 3b 02 	lds	r18, 0x023B
    ddc6:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    ddc8:	02 2f       	mov	r16, r18
    ddca:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    ddcc:	50 91 3b 02 	lds	r21, 0x023B
    ddd0:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    ddd2:	92 2f       	mov	r25, r18
    ddd4:	90 95       	com	r25
    ddd6:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    ddd8:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    ddda:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    dddc:	41 e0       	ldi	r20, 0x01	; 1
    ddde:	ad e3       	ldi	r26, 0x3D	; 61
    dde0:	b2 e0       	ldi	r27, 0x02	; 2
    dde2:	e5 e4       	ldi	r30, 0x45	; 69
    dde4:	f2 e0       	ldi	r31, 0x02	; 2
    dde6:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    dde8:	80 81       	ld	r24, Z
    ddea:	88 23       	and	r24, r24
    ddec:	11 f0       	breq	.+4      	; 0xddf2 <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    ddee:	81 50       	subi	r24, 0x01	; 1
    ddf0:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    ddf2:	80 2f       	mov	r24, r16
    ddf4:	84 23       	and	r24, r20
    ddf6:	49 f0       	breq	.+18     	; 0xde0a <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    ddf8:	80 91 39 02 	lds	r24, 0x0239
    ddfc:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    ddfe:	80 81       	ld	r24, Z
    de00:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    de02:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    de04:	80 91 38 02 	lds	r24, 0x0238
    de08:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    de0a:	89 2f       	mov	r24, r25
    de0c:	84 23       	and	r24, r20
    de0e:	41 f0       	breq	.+16     	; 0xde20 <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    de10:	8c 91       	ld	r24, X
    de12:	88 23       	and	r24, r24
    de14:	29 f0       	breq	.+10     	; 0xde20 <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    de16:	81 50       	subi	r24, 0x01	; 1
    de18:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    de1a:	88 23       	and	r24, r24
    de1c:	09 f4       	brne	.+2      	; 0xde20 <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    de1e:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    de20:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    de22:	61 50       	subi	r22, 0x01	; 1
    de24:	31 96       	adiw	r30, 0x01	; 1
    de26:	11 96       	adiw	r26, 0x01	; 1
    de28:	67 ff       	sbrs	r22, 7
    de2a:	de cf       	rjmp	.-68     	; 0xdde8 <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    de2c:	80 91 3a 02 	lds	r24, 0x023A
    de30:	87 2b       	or	r24, r23
    de32:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    de36:	95 2f       	mov	r25, r21
    de38:	90 95       	com	r25
    de3a:	80 91 3a 02 	lds	r24, 0x023A
    de3e:	89 23       	and	r24, r25
    de40:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentState = newState;
    de44:	30 93 3b 02 	sts	0x023B, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    de48:	e0 91 36 02 	lds	r30, 0x0236
    de4c:	f0 91 37 02 	lds	r31, 0x0237
    de50:	30 97       	sbiw	r30, 0x00	; 0
    de52:	59 f0       	breq	.+22     	; 0xde6a <JOYSTICK_PollingHandler+0xd4>
    de54:	27 2b       	or	r18, r23
    de56:	21 2b       	or	r18, r17
    de58:	41 f0       	breq	.+16     	; 0xde6a <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    de5a:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    de5c:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    de5e:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    de60:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    de62:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    de64:	ce 01       	movw	r24, r28
    de66:	01 96       	adiw	r24, 0x01	; 1
    de68:	09 95       	icall
    de6a:	25 96       	adiw	r28, 0x05	; 5
    de6c:	0f b6       	in	r0, 0x3f	; 63
    de6e:	f8 94       	cli
    de70:	de bf       	out	0x3e, r29	; 62
    de72:	0f be       	out	0x3f, r0	; 63
    de74:	cd bf       	out	0x3d, r28	; 61
    de76:	df 91       	pop	r29
    de78:	cf 91       	pop	r28
    de7a:	1f 91       	pop	r17
    de7c:	0f 91       	pop	r16
    de7e:	08 95       	ret

0000de80 <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    de80:	81 e0       	ldi	r24, 0x01	; 1
    de82:	80 93 4d 02 	sts	0x024D, r24
    de86:	08 95       	ret

0000de88 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    de88:	80 91 65 00 	lds	r24, 0x0065
    de8c:	87 7f       	andi	r24, 0xF7	; 247
    de8e:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    de92:	8d b1       	in	r24, 0x0d	; 13
    de94:	88 63       	ori	r24, 0x38	; 56
    de96:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    de98:	80 91 51 02 	lds	r24, 0x0251
    de9c:	99 27       	eor	r25, r25
    de9e:	90 93 99 00 	sts	0x0099, r25
    dea2:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    dea6:	80 91 50 02 	lds	r24, 0x0250
    deaa:	99 27       	eor	r25, r25
    deac:	90 93 9b 00 	sts	0x009B, r25
    deb0:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    deb4:	80 91 4f 02 	lds	r24, 0x024F
    deb8:	99 27       	eor	r25, r25
    deba:	90 93 9d 00 	sts	0x009D, r25
    debe:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    dec2:	89 ea       	ldi	r24, 0xA9	; 169
    dec4:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    dec8:	81 e0       	ldi	r24, 0x01	; 1
    deca:	80 93 91 00 	sts	0x0091, r24
    dece:	08 95       	ret

0000ded0 <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    ded0:	cf 93       	push	r28
    ded2:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    ded4:	e0 91 51 02 	lds	r30, 0x0251
    green = BACKLIGHT_green;
    ded8:	f0 91 50 02 	lds	r31, 0x0250
    blue = BACKLIGHT_blue;
    dedc:	c0 91 4f 02 	lds	r28, 0x024F
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    dee0:	2f ef       	ldi	r18, 0xFF	; 255
    dee2:	30 e0       	ldi	r19, 0x00	; 0
    dee4:	e8 9f       	mul	r30, r24
    dee6:	c0 01       	movw	r24, r0
    dee8:	11 24       	eor	r1, r1
    deea:	b9 01       	movw	r22, r18
    deec:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    def0:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    def2:	f4 9f       	mul	r31, r20
    def4:	c0 01       	movw	r24, r0
    def6:	11 24       	eor	r1, r1
    def8:	b9 01       	movw	r22, r18
    defa:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    defe:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    df00:	c4 9f       	mul	r28, r20
    df02:	c0 01       	movw	r24, r0
    df04:	11 24       	eor	r1, r1
    df06:	b9 01       	movw	r22, r18
    df08:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    df0c:	40 93 4e 02 	sts	0x024E, r20
    OCR_RED = red;
    df10:	8e 2f       	mov	r24, r30
    df12:	99 27       	eor	r25, r25
    df14:	90 93 99 00 	sts	0x0099, r25
    df18:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    df1c:	8f 2f       	mov	r24, r31
    df1e:	99 27       	eor	r25, r25
    df20:	90 93 9b 00 	sts	0x009B, r25
    df24:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    df28:	86 2f       	mov	r24, r22
    df2a:	99 27       	eor	r25, r25
    df2c:	90 93 9d 00 	sts	0x009D, r25
    df30:	80 93 9c 00 	sts	0x009C, r24
    df34:	cf 91       	pop	r28
    df36:	08 95       	ret

0000df38 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    df38:	38 2f       	mov	r19, r24
    df3a:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    df3c:	80 93 51 02 	sts	0x0251, r24
    BACKLIGHT_green = green;
    df40:	60 93 50 02 	sts	0x0250, r22
    BACKLIGHT_blue = blue;
    df44:	40 93 4f 02 	sts	0x024F, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    df48:	20 91 4e 02 	lds	r18, 0x024E
    df4c:	2f 3f       	cpi	r18, 0xFF	; 255
    df4e:	c1 f0       	breq	.+48     	; 0xdf80 <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    df50:	82 9f       	mul	r24, r18
    df52:	c0 01       	movw	r24, r0
    df54:	11 24       	eor	r1, r1
    df56:	6f ef       	ldi	r22, 0xFF	; 255
    df58:	70 e0       	ldi	r23, 0x00	; 0
    df5a:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    df5e:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    df60:	e2 9f       	mul	r30, r18
    df62:	c0 01       	movw	r24, r0
    df64:	11 24       	eor	r1, r1
    df66:	6f ef       	ldi	r22, 0xFF	; 255
    df68:	70 e0       	ldi	r23, 0x00	; 0
    df6a:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    df6e:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    df70:	42 9f       	mul	r20, r18
    df72:	c0 01       	movw	r24, r0
    df74:	11 24       	eor	r1, r1
    df76:	6f ef       	ldi	r22, 0xFF	; 255
    df78:	70 e0       	ldi	r23, 0x00	; 0
    df7a:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    df7e:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    df80:	83 2f       	mov	r24, r19
    df82:	99 27       	eor	r25, r25
    df84:	90 93 99 00 	sts	0x0099, r25
    df88:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    df8c:	8e 2f       	mov	r24, r30
    df8e:	99 27       	eor	r25, r25
    df90:	90 93 9b 00 	sts	0x009B, r25
    df94:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    df98:	84 2f       	mov	r24, r20
    df9a:	99 27       	eor	r25, r25
    df9c:	90 93 9d 00 	sts	0x009D, r25
    dfa0:	80 93 9c 00 	sts	0x009C, r24
    dfa4:	08 95       	ret

0000dfa6 <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    dfa6:	cf 93       	push	r28
    dfa8:	df 93       	push	r29
    dfaa:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    dfac:	ed 01       	movw	r28, r26
    dfae:	88 85       	ldd	r24, Y+8	; 0x08
    dfb0:	88 23       	and	r24, r24
    dfb2:	e1 f3       	breq	.-8      	; 0xdfac <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    dfb4:	ec 81       	ldd	r30, Y+4	; 0x04
    dfb6:	fd 81       	ldd	r31, Y+5	; 0x05
    dfb8:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    dfba:	2a 81       	ldd	r18, Y+2	; 0x02
    dfbc:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    dfbe:	8c 81       	ldd	r24, Y+4	; 0x04
    dfc0:	9d 81       	ldd	r25, Y+5	; 0x05
    dfc2:	82 17       	cp	r24, r18
    dfc4:	93 07       	cpc	r25, r19
    dfc6:	31 f4       	brne	.+12     	; 0xdfd4 <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    dfc8:	8d 91       	ld	r24, X+
    dfca:	9c 91       	ld	r25, X
    dfcc:	11 97       	sbiw	r26, 0x01	; 1
    dfce:	9d 83       	std	Y+5, r25	; 0x05
    dfd0:	8c 83       	std	Y+4, r24	; 0x04
    dfd2:	06 c0       	rjmp	.+12     	; 0xdfe0 <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    dfd4:	fd 01       	movw	r30, r26
    dfd6:	84 81       	ldd	r24, Z+4	; 0x04
    dfd8:	95 81       	ldd	r25, Z+5	; 0x05
    dfda:	01 96       	adiw	r24, 0x01	; 1
    dfdc:	95 83       	std	Z+5, r25	; 0x05
    dfde:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    dfe0:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    dfe2:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    dfe4:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    dfe6:	ed 01       	movw	r28, r26
    dfe8:	89 85       	ldd	r24, Y+9	; 0x09
    dfea:	88 23       	and	r24, r24
    dfec:	09 f4       	brne	.+2      	; 0xdff0 <FIFO_InternalPutData+0x4a>
    dfee:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    dff0:	fd 01       	movw	r30, r26
    dff2:	80 85       	ldd	r24, Z+8	; 0x08
    dff4:	81 50       	subi	r24, 0x01	; 1
    dff6:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    dff8:	81 85       	ldd	r24, Z+9	; 0x09
    dffa:	8f 5f       	subi	r24, 0xFF	; 255
    dffc:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    dffe:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e000:	22 23       	and	r18, r18
    e002:	49 f0       	breq	.+18     	; 0xe016 <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e004:	84 85       	ldd	r24, Z+12	; 0x0c
    e006:	95 85       	ldd	r25, Z+13	; 0x0d
    e008:	89 2b       	or	r24, r25
    e00a:	29 f0       	breq	.+10     	; 0xe016 <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e00c:	04 84       	ldd	r0, Z+12	; 0x0c
    e00e:	f5 85       	ldd	r31, Z+13	; 0x0d
    e010:	e0 2d       	mov	r30, r0
    e012:	cd 01       	movw	r24, r26
    e014:	09 95       	icall
    e016:	df 91       	pop	r29
    e018:	cf 91       	pop	r28
    e01a:	08 95       	ret

0000e01c <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e01c:	cf 93       	push	r28
    e01e:	df 93       	push	r29
    e020:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e022:	89 85       	ldd	r24, Y+9	; 0x09
    e024:	88 23       	and	r24, r24
    e026:	e9 f3       	breq	.-6      	; 0xe022 <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e028:	2a 81       	ldd	r18, Y+2	; 0x02
    e02a:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e02c:	8e 81       	ldd	r24, Y+6	; 0x06
    e02e:	9f 81       	ldd	r25, Y+7	; 0x07
    e030:	82 17       	cp	r24, r18
    e032:	93 07       	cpc	r25, r19
    e034:	19 f4       	brne	.+6      	; 0xe03c <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e036:	88 81       	ld	r24, Y
    e038:	99 81       	ldd	r25, Y+1	; 0x01
    e03a:	03 c0       	rjmp	.+6      	; 0xe042 <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e03c:	8e 81       	ldd	r24, Y+6	; 0x06
    e03e:	9f 81       	ldd	r25, Y+7	; 0x07
    e040:	01 96       	adiw	r24, 0x01	; 1
    e042:	9f 83       	std	Y+7, r25	; 0x07
    e044:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e046:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e048:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e04a:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e04c:	88 85       	ldd	r24, Y+8	; 0x08
    e04e:	88 23       	and	r24, r24
    e050:	09 f4       	brne	.+2      	; 0xe054 <FIFO_InternalGetData+0x38>
    e052:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e054:	88 85       	ldd	r24, Y+8	; 0x08
    e056:	8f 5f       	subi	r24, 0xFF	; 255
    e058:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e05a:	89 85       	ldd	r24, Y+9	; 0x09
    e05c:	81 50       	subi	r24, 0x01	; 1
    e05e:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e060:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e062:	22 23       	and	r18, r18
    e064:	41 f0       	breq	.+16     	; 0xe076 <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e066:	8a 85       	ldd	r24, Y+10	; 0x0a
    e068:	9b 85       	ldd	r25, Y+11	; 0x0b
    e06a:	89 2b       	or	r24, r25
    e06c:	21 f0       	breq	.+8      	; 0xe076 <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e06e:	ea 85       	ldd	r30, Y+10	; 0x0a
    e070:	fb 85       	ldd	r31, Y+11	; 0x0b
    e072:	ce 01       	movw	r24, r28
    e074:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e076:	ee 81       	ldd	r30, Y+6	; 0x06
    e078:	ff 81       	ldd	r31, Y+7	; 0x07
    e07a:	80 81       	ld	r24, Z
}
    e07c:	99 27       	eor	r25, r25
    e07e:	df 91       	pop	r29
    e080:	cf 91       	pop	r28
    e082:	08 95       	ret

0000e084 <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e084:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e086:	71 83       	std	Z+1, r23	; 0x01
    e088:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e08a:	cb 01       	movw	r24, r22
    e08c:	84 0f       	add	r24, r20
    e08e:	91 1d       	adc	r25, r1
    e090:	01 97       	sbiw	r24, 0x01	; 1
    e092:	93 83       	std	Z+3, r25	; 0x03
    e094:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e096:	75 83       	std	Z+5, r23	; 0x05
    e098:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e09a:	97 83       	std	Z+7, r25	; 0x07
    e09c:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e09e:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e0a0:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e0a2:	13 86       	std	Z+11, r1	; 0x0b
    e0a4:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e0a6:	15 86       	std	Z+13, r1	; 0x0d
    e0a8:	14 86       	std	Z+12, r1	; 0x0c
    e0aa:	08 95       	ret

0000e0ac <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e0ac:	0e 94 0e 70 	call	0xe01c	; 0xe01c <FIFO_InternalGetData>
	
	return data;
}
    e0b0:	99 27       	eor	r25, r25
    e0b2:	08 95       	ret

0000e0b4 <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e0b4:	0f 93       	push	r16
    e0b6:	1f 93       	push	r17
    e0b8:	cf 93       	push	r28
    e0ba:	df 93       	push	r29
    e0bc:	cd b7       	in	r28, 0x3d	; 61
    e0be:	de b7       	in	r29, 0x3e	; 62
    e0c0:	21 97       	sbiw	r28, 0x01	; 1
    e0c2:	0f b6       	in	r0, 0x3f	; 63
    e0c4:	f8 94       	cli
    e0c6:	de bf       	out	0x3e, r29	; 62
    e0c8:	0f be       	out	0x3f, r0	; 63
    e0ca:	cd bf       	out	0x3d, r28	; 61
    e0cc:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e0ce:	fc 01       	movw	r30, r24
    e0d0:	81 85       	ldd	r24, Z+9	; 0x09
    e0d2:	88 23       	and	r24, r24
    e0d4:	41 f0       	breq	.+16     	; 0xe0e6 <FIFO_Flush+0x32>
    e0d6:	c8 01       	movw	r24, r16
    e0d8:	0e 94 56 70 	call	0xe0ac	; 0xe0ac <FIFO_GetUint8>
    e0dc:	89 83       	std	Y+1, r24	; 0x01
    e0de:	f8 01       	movw	r30, r16
    e0e0:	81 85       	ldd	r24, Z+9	; 0x09
    e0e2:	88 23       	and	r24, r24
    e0e4:	c1 f7       	brne	.-16     	; 0xe0d6 <FIFO_Flush+0x22>
    e0e6:	21 96       	adiw	r28, 0x01	; 1
    e0e8:	0f b6       	in	r0, 0x3f	; 63
    e0ea:	f8 94       	cli
    e0ec:	de bf       	out	0x3e, r29	; 62
    e0ee:	0f be       	out	0x3f, r0	; 63
    e0f0:	cd bf       	out	0x3d, r28	; 61
    e0f2:	df 91       	pop	r29
    e0f4:	cf 91       	pop	r28
    e0f6:	1f 91       	pop	r17
    e0f8:	0f 91       	pop	r16
    e0fa:	08 95       	ret

0000e0fc <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e0fc:	ef 92       	push	r14
    e0fe:	ff 92       	push	r15
    e100:	0f 93       	push	r16
    e102:	1f 93       	push	r17
    e104:	7c 01       	movw	r14, r24
    e106:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    e108:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    e10c:	81 2f       	mov	r24, r17
    e10e:	99 27       	eor	r25, r25
    e110:	68 2f       	mov	r22, r24
    e112:	c7 01       	movw	r24, r14
    e114:	0e 94 d3 6f 	call	0xdfa6	; 0xdfa6 <FIFO_InternalPutData>
    e118:	1f 91       	pop	r17
    e11a:	0f 91       	pop	r16
    e11c:	ff 90       	pop	r15
    e11e:	ef 90       	pop	r14
    e120:	08 95       	ret

0000e122 <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    e122:	ef 92       	push	r14
    e124:	ff 92       	push	r15
    e126:	0f 93       	push	r16
    e128:	1f 93       	push	r17
    e12a:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    e12c:	0e 94 0e 70 	call	0xe01c	; 0xe01c <FIFO_InternalGetData>
    e130:	e8 2e       	mov	r14, r24
    e132:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    e134:	c8 01       	movw	r24, r16
    e136:	0e 94 0e 70 	call	0xe01c	; 0xe01c <FIFO_InternalGetData>
    e13a:	99 27       	eor	r25, r25
    e13c:	98 2f       	mov	r25, r24
    e13e:	88 27       	eor	r24, r24
	
	return data;
}
    e140:	8e 29       	or	r24, r14
    e142:	9f 29       	or	r25, r15
    e144:	1f 91       	pop	r17
    e146:	0f 91       	pop	r16
    e148:	ff 90       	pop	r15
    e14a:	ef 90       	pop	r14
    e14c:	08 95       	ret

0000e14e <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    e14e:	90 93 53 02 	sts	0x0253, r25
    e152:	80 93 52 02 	sts	0x0252, r24
	MEMBLOCK_manager.bags = workspace;
    e156:	70 93 55 02 	sts	0x0255, r23
    e15a:	60 93 54 02 	sts	0x0254, r22
    e15e:	08 95       	ret

0000e160 <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    e160:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    e162:	28 e1       	ldi	r18, 0x18	; 24
    e164:	30 e0       	ldi	r19, 0x00	; 0
    e166:	82 9f       	mul	r24, r18
    e168:	f0 01       	movw	r30, r0
    e16a:	83 9f       	mul	r24, r19
    e16c:	f0 0d       	add	r31, r0
    e16e:	92 9f       	mul	r25, r18
    e170:	f0 0d       	add	r31, r0
    e172:	11 24       	eor	r1, r1
    e174:	cf 01       	movw	r24, r30
    e176:	e0 91 54 02 	lds	r30, 0x0254
    e17a:	f0 91 55 02 	lds	r31, 0x0255
    e17e:	e8 0f       	add	r30, r24
    e180:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    e182:	71 83       	std	Z+1, r23	; 0x01
    e184:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    e186:	53 83       	std	Z+3, r21	; 0x03
    e188:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    e18a:	55 83       	std	Z+5, r21	; 0x05
    e18c:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    e18e:	13 86       	std	Z+11, r1	; 0x0b
    e190:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    e192:	75 87       	std	Z+13, r23	; 0x0d
    e194:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    e196:	17 86       	std	Z+15, r1	; 0x0f
    e198:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    e19a:	10 8a       	std	Z+16, r1	; 0x10
    e19c:	11 8a       	std	Z+17, r1	; 0x11
    e19e:	12 8a       	std	Z+18, r1	; 0x12
    e1a0:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    e1a2:	14 8a       	std	Z+20, r1	; 0x14
    e1a4:	15 8a       	std	Z+21, r1	; 0x15
    e1a6:	16 8a       	std	Z+22, r1	; 0x16
    e1a8:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    e1aa:	b7 83       	std	Z+7, r27	; 0x07
    e1ac:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    e1ae:	64 9f       	mul	r22, r20
    e1b0:	c0 01       	movw	r24, r0
    e1b2:	65 9f       	mul	r22, r21
    e1b4:	90 0d       	add	r25, r0
    e1b6:	74 9f       	mul	r23, r20
    e1b8:	90 0d       	add	r25, r0
    e1ba:	11 24       	eor	r1, r1
    e1bc:	8a 0f       	add	r24, r26
    e1be:	9b 1f       	adc	r25, r27
    e1c0:	91 87       	std	Z+9, r25	; 0x09
    e1c2:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    e1c4:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    e1c6:	49 5f       	subi	r20, 0xF9	; 249
    e1c8:	5f 4f       	sbci	r21, 0xFF	; 255
    e1ca:	83 e0       	ldi	r24, 0x03	; 3
    e1cc:	56 95       	lsr	r21
    e1ce:	47 95       	ror	r20
    e1d0:	8a 95       	dec	r24
    e1d2:	e1 f7       	brne	.-8      	; 0xe1cc <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    e1d4:	41 15       	cp	r20, r1
    e1d6:	51 05       	cpc	r21, r1
    e1d8:	29 f0       	breq	.+10     	; 0xe1e4 <MEMBLOCK_InitBag+0x84>
    e1da:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    e1dc:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    e1de:	41 50       	subi	r20, 0x01	; 1
    e1e0:	50 40       	sbci	r21, 0x00	; 0
    e1e2:	e1 f7       	brne	.-8      	; 0xe1dc <MEMBLOCK_InitBag+0x7c>
    e1e4:	08 95       	ret

0000e1e6 <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    e1e6:	af 92       	push	r10
    e1e8:	bf 92       	push	r11
    e1ea:	cf 92       	push	r12
    e1ec:	df 92       	push	r13
    e1ee:	ff 92       	push	r15
    e1f0:	0f 93       	push	r16
    e1f2:	1f 93       	push	r17
    e1f4:	cf 93       	push	r28
    e1f6:	df 93       	push	r29
    e1f8:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    e1fa:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    e1fc:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e1fe:	c0 91 54 02 	lds	r28, 0x0254
    e202:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e206:	20 91 52 02 	lds	r18, 0x0252
    e20a:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    e20e:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e210:	21 15       	cp	r18, r1
    e212:	31 05       	cpc	r19, r1
    e214:	09 f4       	brne	.+2      	; 0xe218 <MEMBLOCK_Allocate+0x32>
    e216:	81 c0       	rjmp	.+258    	; 0xe31a <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    e218:	88 81       	ld	r24, Y
    e21a:	99 81       	ldd	r25, Y+1	; 0x01
    e21c:	86 17       	cp	r24, r22
    e21e:	97 07       	cpc	r25, r23
    e220:	30 f0       	brcs	.+12     	; 0xe22e <MEMBLOCK_Allocate+0x48>
    e222:	8c 81       	ldd	r24, Y+4	; 0x04
    e224:	9d 81       	ldd	r25, Y+5	; 0x05
    e226:	89 2b       	or	r24, r25
    e228:	11 f0       	breq	.+4      	; 0xe22e <MEMBLOCK_Allocate+0x48>
			found = true;
    e22a:	41 e0       	ldi	r20, 0x01	; 1
    e22c:	03 c0       	rjmp	.+6      	; 0xe234 <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    e22e:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e230:	21 50       	subi	r18, 0x01	; 1
    e232:	30 40       	sbci	r19, 0x00	; 0
    e234:	21 15       	cp	r18, r1
    e236:	31 05       	cpc	r19, r1
    e238:	11 f0       	breq	.+4      	; 0xe23e <MEMBLOCK_Allocate+0x58>
    e23a:	44 23       	and	r20, r20
    e23c:	69 f3       	breq	.-38     	; 0xe218 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    e23e:	44 23       	and	r20, r20
    e240:	09 f4       	brne	.+2      	; 0xe244 <MEMBLOCK_Allocate+0x5e>
    e242:	6b c0       	rjmp	.+214    	; 0xe31a <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    e244:	e8 85       	ldd	r30, Y+8	; 0x08
    e246:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    e248:	20 e0       	ldi	r18, 0x00	; 0
    e24a:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    e24c:	80 81       	ld	r24, Z
    e24e:	88 23       	and	r24, r24
    e250:	21 f4       	brne	.+8      	; 0xe25a <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    e252:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    e254:	28 5f       	subi	r18, 0xF8	; 248
    e256:	3f 4f       	sbci	r19, 0xFF	; 255
    e258:	f9 cf       	rjmp	.-14     	; 0xe24c <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    e25a:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    e25c:	90 81       	ld	r25, Z
    e25e:	97 fd       	sbrc	r25, 7
    e260:	06 c0       	rjmp	.+12     	; 0xe26e <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    e262:	46 95       	lsr	r20
		++blockIndex;
    e264:	2f 5f       	subi	r18, 0xFF	; 255
    e266:	3f 4f       	sbci	r19, 0xFF	; 255
    e268:	89 2f       	mov	r24, r25
    e26a:	84 23       	and	r24, r20
    e26c:	d1 f3       	breq	.-12     	; 0xe262 <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    e26e:	40 95       	com	r20
    e270:	94 23       	and	r25, r20
    e272:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    e274:	8c 81       	ldd	r24, Y+4	; 0x04
    e276:	9d 81       	ldd	r25, Y+5	; 0x05
    e278:	01 97       	sbiw	r24, 0x01	; 1
    e27a:	9d 83       	std	Y+5, r25	; 0x05
    e27c:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    e27e:	48 81       	ld	r20, Y
    e280:	59 81       	ldd	r21, Y+1	; 0x01
    e282:	24 9f       	mul	r18, r20
    e284:	50 01       	movw	r10, r0
    e286:	25 9f       	mul	r18, r21
    e288:	b0 0c       	add	r11, r0
    e28a:	34 9f       	mul	r19, r20
    e28c:	b0 0c       	add	r11, r0
    e28e:	11 24       	eor	r1, r1
    e290:	0e 81       	ldd	r16, Y+6	; 0x06
    e292:	1f 81       	ldd	r17, Y+7	; 0x07
    e294:	0a 0d       	add	r16, r10
    e296:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    e298:	2a 81       	ldd	r18, Y+2	; 0x02
    e29a:	3b 81       	ldd	r19, Y+3	; 0x03
    e29c:	28 1b       	sub	r18, r24
    e29e:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    e2a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    e2a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    e2a4:	82 17       	cp	r24, r18
    e2a6:	93 07       	cpc	r25, r19
    e2a8:	10 f4       	brcc	.+4      	; 0xe2ae <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    e2aa:	3b 87       	std	Y+11, r19	; 0x0b
    e2ac:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    e2ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    e2b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    e2b2:	86 17       	cp	r24, r22
    e2b4:	97 07       	cpc	r25, r23
    e2b6:	10 f4       	brcc	.+4      	; 0xe2bc <MEMBLOCK_Allocate+0xd6>
    e2b8:	7f 87       	std	Y+15, r23	; 0x0f
    e2ba:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    e2bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    e2be:	9d 85       	ldd	r25, Y+13	; 0x0d
    e2c0:	68 17       	cp	r22, r24
    e2c2:	79 07       	cpc	r23, r25
    e2c4:	10 f4       	brcc	.+4      	; 0xe2ca <MEMBLOCK_Allocate+0xe4>
    e2c6:	7d 87       	std	Y+13, r23	; 0x0d
    e2c8:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    e2ca:	88 89       	ldd	r24, Y+16	; 0x10
    e2cc:	99 89       	ldd	r25, Y+17	; 0x11
    e2ce:	aa 89       	ldd	r26, Y+18	; 0x12
    e2d0:	bb 89       	ldd	r27, Y+19	; 0x13
    e2d2:	01 96       	adiw	r24, 0x01	; 1
    e2d4:	a1 1d       	adc	r26, r1
    e2d6:	b1 1d       	adc	r27, r1
    e2d8:	88 8b       	std	Y+16, r24	; 0x10
    e2da:	99 8b       	std	Y+17, r25	; 0x11
    e2dc:	aa 8b       	std	Y+18, r26	; 0x12
    e2de:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    e2e0:	cb 01       	movw	r24, r22
    e2e2:	aa 27       	eor	r26, r26
    e2e4:	bb 27       	eor	r27, r27
    e2e6:	ba 2f       	mov	r27, r26
    e2e8:	a9 2f       	mov	r26, r25
    e2ea:	98 2f       	mov	r25, r24
    e2ec:	88 27       	eor	r24, r24
    e2ee:	5a 01       	movw	r10, r20
    e2f0:	cc 24       	eor	r12, r12
    e2f2:	dd 24       	eor	r13, r13
    e2f4:	a6 01       	movw	r20, r12
    e2f6:	95 01       	movw	r18, r10
    e2f8:	bc 01       	movw	r22, r24
    e2fa:	cd 01       	movw	r24, r26
    e2fc:	0e 94 91 76 	call	0xed22	; 0xed22 <__udivmodsi4>
		bag->allocationUtilization += utilization;
    e300:	8c 89       	ldd	r24, Y+20	; 0x14
    e302:	9d 89       	ldd	r25, Y+21	; 0x15
    e304:	ae 89       	ldd	r26, Y+22	; 0x16
    e306:	bf 89       	ldd	r27, Y+23	; 0x17
    e308:	82 0f       	add	r24, r18
    e30a:	93 1f       	adc	r25, r19
    e30c:	a4 1f       	adc	r26, r20
    e30e:	b5 1f       	adc	r27, r21
    e310:	8c 8b       	std	Y+20, r24	; 0x14
    e312:	9d 8b       	std	Y+21, r25	; 0x15
    e314:	ae 8b       	std	Y+22, r26	; 0x16
    e316:	bf 8b       	std	Y+23, r27	; 0x17
    e318:	02 c0       	rjmp	.+4      	; 0xe31e <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    e31a:	00 e0       	ldi	r16, 0x00	; 0
    e31c:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    e31e:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    e320:	c8 01       	movw	r24, r16
    e322:	df 91       	pop	r29
    e324:	cf 91       	pop	r28
    e326:	1f 91       	pop	r17
    e328:	0f 91       	pop	r16
    e32a:	ff 90       	pop	r15
    e32c:	df 90       	pop	r13
    e32e:	cf 90       	pop	r12
    e330:	bf 90       	pop	r11
    e332:	af 90       	pop	r10
    e334:	08 95       	ret

0000e336 <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    e336:	cf 93       	push	r28
    e338:	df 93       	push	r29
    e33a:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    e33c:	89 2b       	or	r24, r25
    e33e:	09 f4       	brne	.+2      	; 0xe342 <MEMBLOCK_Free+0xc>
    e340:	4e c0       	rjmp	.+156    	; 0xe3de <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e342:	c0 91 54 02 	lds	r28, 0x0254
    e346:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e34a:	20 91 52 02 	lds	r18, 0x0252
    e34e:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    e352:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e354:	21 15       	cp	r18, r1
    e356:	31 05       	cpc	r19, r1
    e358:	e9 f1       	breq	.+122    	; 0xe3d4 <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    e35a:	8e 81       	ldd	r24, Y+6	; 0x06
    e35c:	9f 81       	ldd	r25, Y+7	; 0x07
    e35e:	48 17       	cp	r20, r24
    e360:	59 07       	cpc	r21, r25
    e362:	38 f0       	brcs	.+14     	; 0xe372 <MEMBLOCK_Free+0x3c>
    e364:	88 85       	ldd	r24, Y+8	; 0x08
    e366:	99 85       	ldd	r25, Y+9	; 0x09
    e368:	48 17       	cp	r20, r24
    e36a:	59 07       	cpc	r21, r25
    e36c:	10 f4       	brcc	.+4      	; 0xe372 <MEMBLOCK_Free+0x3c>
			found = true;
    e36e:	61 e0       	ldi	r22, 0x01	; 1
    e370:	03 c0       	rjmp	.+6      	; 0xe378 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    e372:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e374:	21 50       	subi	r18, 0x01	; 1
    e376:	30 40       	sbci	r19, 0x00	; 0
    e378:	21 15       	cp	r18, r1
    e37a:	31 05       	cpc	r19, r1
    e37c:	11 f0       	breq	.+4      	; 0xe382 <MEMBLOCK_Free+0x4c>
    e37e:	66 23       	and	r22, r22
    e380:	61 f3       	breq	.-40     	; 0xe35a <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    e382:	66 23       	and	r22, r22
    e384:	39 f1       	breq	.+78     	; 0xe3d4 <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    e386:	8e 81       	ldd	r24, Y+6	; 0x06
    e388:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    e38a:	28 81       	ld	r18, Y
    e38c:	39 81       	ldd	r19, Y+1	; 0x01
    e38e:	48 1b       	sub	r20, r24
    e390:	59 0b       	sbc	r21, r25
    e392:	ca 01       	movw	r24, r20
    e394:	b9 01       	movw	r22, r18
    e396:	0e 94 6a 76 	call	0xecd4	; 0xecd4 <__udivmodhi4>
    e39a:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    e39c:	cb 01       	movw	r24, r22
    e39e:	43 e0       	ldi	r20, 0x03	; 3
    e3a0:	96 95       	lsr	r25
    e3a2:	87 95       	ror	r24
    e3a4:	4a 95       	dec	r20
    e3a6:	e1 f7       	brne	.-8      	; 0xe3a0 <MEMBLOCK_Free+0x6a>
    e3a8:	e8 85       	ldd	r30, Y+8	; 0x08
    e3aa:	f9 85       	ldd	r31, Y+9	; 0x09
    e3ac:	e8 0f       	add	r30, r24
    e3ae:	f9 1f       	adc	r31, r25
    e3b0:	27 70       	andi	r18, 0x07	; 7
    e3b2:	30 70       	andi	r19, 0x00	; 0
    e3b4:	80 e8       	ldi	r24, 0x80	; 128
    e3b6:	90 e0       	ldi	r25, 0x00	; 0
    e3b8:	02 c0       	rjmp	.+4      	; 0xe3be <MEMBLOCK_Free+0x88>
    e3ba:	95 95       	asr	r25
    e3bc:	87 95       	ror	r24
    e3be:	2a 95       	dec	r18
    e3c0:	e2 f7       	brpl	.-8      	; 0xe3ba <MEMBLOCK_Free+0x84>
    e3c2:	20 81       	ld	r18, Z
    e3c4:	28 2b       	or	r18, r24
    e3c6:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    e3c8:	8c 81       	ldd	r24, Y+4	; 0x04
    e3ca:	9d 81       	ldd	r25, Y+5	; 0x05
    e3cc:	01 96       	adiw	r24, 0x01	; 1
    e3ce:	9d 83       	std	Y+5, r25	; 0x05
    e3d0:	8c 83       	std	Y+4, r24	; 0x04
    e3d2:	05 c0       	rjmp	.+10     	; 0xe3de <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    e3d4:	80 91 56 02 	lds	r24, 0x0256
    e3d8:	8f 5f       	subi	r24, 0xFF	; 255
    e3da:	80 93 56 02 	sts	0x0256, r24
    e3de:	df 91       	pop	r29
    e3e0:	cf 91       	pop	r28
    e3e2:	08 95       	ret

0000e3e4 <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    e3e4:	8f 92       	push	r8
    e3e6:	9f 92       	push	r9
    e3e8:	af 92       	push	r10
    e3ea:	cf 92       	push	r12
    e3ec:	ef 92       	push	r14
    e3ee:	0f 93       	push	r16
    e3f0:	1f 93       	push	r17
    e3f2:	cf 93       	push	r28
    e3f4:	df 93       	push	r29
    e3f6:	4b 01       	movw	r8, r22
    e3f8:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    e3fa:	33 27       	eor	r19, r19
    e3fc:	62 9f       	mul	r22, r18
    e3fe:	e0 01       	movw	r28, r0
    e400:	63 9f       	mul	r22, r19
    e402:	d0 0d       	add	r29, r0
    e404:	72 9f       	mul	r23, r18
    e406:	d0 0d       	add	r29, r0
    e408:	11 24       	eor	r1, r1
    e40a:	c4 0f       	add	r28, r20
    e40c:	d5 1f       	adc	r29, r21
    e40e:	c8 0f       	add	r28, r24
    e410:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    e412:	11 50       	subi	r17, 0x01	; 1
    e414:	1f 3f       	cpi	r17, 0xFF	; 255
    e416:	59 f0       	breq	.+22     	; 0xe42e <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    e418:	2c 2d       	mov	r18, r12
    e41a:	40 2f       	mov	r20, r16
    e41c:	6e 2d       	mov	r22, r14
    e41e:	ce 01       	movw	r24, r28
    e420:	0e 94 b5 6c 	call	0xd96a	; 0xd96a <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    e424:	c8 0d       	add	r28, r8
    e426:	d9 1d       	adc	r29, r9
    destPage++;
    e428:	e3 94       	inc	r14
    e42a:	11 50       	subi	r17, 0x01	; 1
    e42c:	a8 f7       	brcc	.-22     	; 0xe418 <PICTURE_CopyFlashToLcd+0x34>
    e42e:	df 91       	pop	r29
    e430:	cf 91       	pop	r28
    e432:	1f 91       	pop	r17
    e434:	0f 91       	pop	r16
    e436:	ef 90       	pop	r14
    e438:	cf 90       	pop	r12
    e43a:	af 90       	pop	r10
    e43c:	9f 90       	pop	r9
    e43e:	8f 90       	pop	r8
    e440:	08 95       	ret

0000e442 <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    e442:	1f 92       	push	r1
    e444:	0f 92       	push	r0
    e446:	0f b6       	in	r0, 0x3f	; 63
    e448:	0f 92       	push	r0
    e44a:	11 24       	eor	r1, r1
    e44c:	2f 93       	push	r18
    e44e:	3f 93       	push	r19
    e450:	4f 93       	push	r20
    e452:	5f 93       	push	r21
    e454:	6f 93       	push	r22
    e456:	7f 93       	push	r23
    e458:	8f 93       	push	r24
    e45a:	9f 93       	push	r25
    e45c:	af 93       	push	r26
    e45e:	bf 93       	push	r27
    e460:	ef 93       	push	r30
    e462:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    e464:	80 91 d9 17 	lds	r24, 0x17D9
    e468:	90 91 da 17 	lds	r25, 0x17DA
    e46c:	89 2b       	or	r24, r25
    e46e:	29 f0       	breq	.+10     	; 0xe47a <__vector_15+0x38>
		RTC_TickHandler();
    e470:	e0 91 d9 17 	lds	r30, 0x17D9
    e474:	f0 91 da 17 	lds	r31, 0x17DA
    e478:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    e47a:	80 91 d8 17 	lds	r24, 0x17D8
    e47e:	8f 37       	cpi	r24, 0x7F	; 127
    e480:	30 f4       	brcc	.+12     	; 0xe48e <__vector_15+0x4c>
		++RTC_ticks;
    e482:	80 91 d8 17 	lds	r24, 0x17D8
    e486:	8f 5f       	subi	r24, 0xFF	; 255
    e488:	80 93 d8 17 	sts	0x17D8, r24
    e48c:	36 c0       	rjmp	.+108    	; 0xe4fa <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    e48e:	10 92 d8 17 	sts	0x17D8, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    e492:	80 91 d7 17 	lds	r24, 0x17D7
    e496:	8b 33       	cpi	r24, 0x3B	; 59
    e498:	30 f4       	brcc	.+12     	; 0xe4a6 <__vector_15+0x64>
			++RTC_seconds;
    e49a:	80 91 d7 17 	lds	r24, 0x17D7
    e49e:	8f 5f       	subi	r24, 0xFF	; 255
    e4a0:	80 93 d7 17 	sts	0x17D7, r24
    e4a4:	2a c0       	rjmp	.+84     	; 0xe4fa <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    e4a6:	10 92 d7 17 	sts	0x17D7, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    e4aa:	80 91 d6 17 	lds	r24, 0x17D6
    e4ae:	8b 33       	cpi	r24, 0x3B	; 59
    e4b0:	30 f4       	brcc	.+12     	; 0xe4be <__vector_15+0x7c>
				++RTC_minutes;
    e4b2:	80 91 d6 17 	lds	r24, 0x17D6
    e4b6:	8f 5f       	subi	r24, 0xFF	; 255
    e4b8:	80 93 d6 17 	sts	0x17D6, r24
    e4bc:	1e c0       	rjmp	.+60     	; 0xe4fa <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    e4be:	10 92 d6 17 	sts	0x17D6, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    e4c2:	80 91 d5 17 	lds	r24, 0x17D5
    e4c6:	87 31       	cpi	r24, 0x17	; 23
    e4c8:	30 f4       	brcc	.+12     	; 0xe4d6 <__vector_15+0x94>
					++RTC_hours;
    e4ca:	80 91 d5 17 	lds	r24, 0x17D5
    e4ce:	8f 5f       	subi	r24, 0xFF	; 255
    e4d0:	80 93 d5 17 	sts	0x17D5, r24
    e4d4:	12 c0       	rjmp	.+36     	; 0xe4fa <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    e4d6:	10 92 d5 17 	sts	0x17D5, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    e4da:	80 91 d4 17 	lds	r24, 0x17D4
    e4de:	8f 5f       	subi	r24, 0xFF	; 255
    e4e0:	80 93 d4 17 	sts	0x17D4, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    e4e4:	80 91 db 17 	lds	r24, 0x17DB
    e4e8:	90 91 dc 17 	lds	r25, 0x17DC
    e4ec:	89 2b       	or	r24, r25
    e4ee:	29 f0       	breq	.+10     	; 0xe4fa <__vector_15+0xb8>
						RTC_DayHandler();
    e4f0:	e0 91 db 17 	lds	r30, 0x17DB
    e4f4:	f0 91 dc 17 	lds	r31, 0x17DC
    e4f8:	09 95       	icall
    e4fa:	ff 91       	pop	r31
    e4fc:	ef 91       	pop	r30
    e4fe:	bf 91       	pop	r27
    e500:	af 91       	pop	r26
    e502:	9f 91       	pop	r25
    e504:	8f 91       	pop	r24
    e506:	7f 91       	pop	r23
    e508:	6f 91       	pop	r22
    e50a:	5f 91       	pop	r21
    e50c:	4f 91       	pop	r20
    e50e:	3f 91       	pop	r19
    e510:	2f 91       	pop	r18
    e512:	0f 90       	pop	r0
    e514:	0f be       	out	0x3f, r0	; 63
    e516:	0f 90       	pop	r0
    e518:	1f 90       	pop	r1
    e51a:	18 95       	reti

0000e51c <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    e51c:	10 92 da 17 	sts	0x17DA, r1
    e520:	10 92 d9 17 	sts	0x17D9, r1
	RTC_DayHandler = NULL;
    e524:	10 92 dc 17 	sts	0x17DC, r1
    e528:	10 92 db 17 	sts	0x17DB, r1
	RTC_ticks = 0;
    e52c:	10 92 d8 17 	sts	0x17D8, r1
	RTC_seconds = 0;
    e530:	10 92 d7 17 	sts	0x17D7, r1
	RTC_minutes = 0;
    e534:	10 92 d6 17 	sts	0x17D6, r1
	RTC_hours = 0;
    e538:	10 92 d5 17 	sts	0x17D5, r1
	RTC_days = 0;
    e53c:	10 92 d4 17 	sts	0x17D4, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    e540:	80 91 64 00 	lds	r24, 0x0064
    e544:	8f 7b       	andi	r24, 0xBF	; 191
    e546:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    e54a:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    e54e:	80 e2       	ldi	r24, 0x20	; 32
    e550:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    e554:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    e558:	81 e0       	ldi	r24, 0x01	; 1
    e55a:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    e55e:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    e562:	80 91 b6 00 	lds	r24, 0x00B6
    e566:	99 27       	eor	r25, r25
    e568:	8f 71       	andi	r24, 0x1F	; 31
    e56a:	90 70       	andi	r25, 0x00	; 0
    e56c:	89 2b       	or	r24, r25
    e56e:	c9 f7       	brne	.-14     	; 0xe562 <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    e570:	81 e0       	ldi	r24, 0x01	; 1
    e572:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    e574:	80 93 70 00 	sts	0x0070, r24
    e578:	08 95       	ret

0000e57a <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    e57a:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    e57c:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    e57e:	90 93 da 17 	sts	0x17DA, r25
    e582:	80 93 d9 17 	sts	0x17D9, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    e586:	2f bf       	out	0x3f, r18	; 63
    e588:	08 95       	ret

0000e58a <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    e58a:	10 92 de 17 	sts	0x17DE, r1
    e58e:	10 92 dd 17 	sts	0x17DD, r1
	TIMING_currentTime = 0;
    e592:	10 92 e1 17 	sts	0x17E1, r1
    e596:	10 92 e2 17 	sts	0x17E2, r1
    e59a:	10 92 e3 17 	sts	0x17E3, r1
    e59e:	10 92 e4 17 	sts	0x17E4, r1
    e5a2:	08 95       	ret

0000e5a4 <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    e5a4:	6f 92       	push	r6
    e5a6:	7f 92       	push	r7
    e5a8:	9f 92       	push	r9
    e5aa:	af 92       	push	r10
    e5ac:	bf 92       	push	r11
    e5ae:	cf 92       	push	r12
    e5b0:	df 92       	push	r13
    e5b2:	ef 92       	push	r14
    e5b4:	ff 92       	push	r15
    e5b6:	0f 93       	push	r16
    e5b8:	1f 93       	push	r17
    e5ba:	cf 93       	push	r28
    e5bc:	df 93       	push	r29
    e5be:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    e5c0:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    e5c2:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    e5c4:	60 91 dd 17 	lds	r22, 0x17DD
    e5c8:	70 91 de 17 	lds	r23, 0x17DE
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    e5cc:	e0 91 df 17 	lds	r30, 0x17DF
    e5d0:	f0 91 e0 17 	lds	r31, 0x17E0
    e5d4:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    e5d6:	cc 24       	eor	r12, r12
    e5d8:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    e5da:	dc 01       	movw	r26, r24
    e5dc:	ed 90       	ld	r14, X+
    e5de:	fd 90       	ld	r15, X+
    e5e0:	0d 91       	ld	r16, X+
    e5e2:	1c 91       	ld	r17, X
    e5e4:	80 91 e1 17 	lds	r24, 0x17E1
    e5e8:	90 91 e2 17 	lds	r25, 0x17E2
    e5ec:	a0 91 e3 17 	lds	r26, 0x17E3
    e5f0:	b0 91 e4 17 	lds	r27, 0x17E4
    e5f4:	8e 15       	cp	r24, r14
    e5f6:	9f 05       	cpc	r25, r15
    e5f8:	a0 07       	cpc	r26, r16
    e5fa:	b1 07       	cpc	r27, r17
    e5fc:	58 f1       	brcs	.+86     	; 0xe654 <TIMING_AddEvent+0xb0>
    e5fe:	09 c0       	rjmp	.+18     	; 0xe612 <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    e600:	61 15       	cp	r22, r1
    e602:	71 05       	cpc	r23, r1
    e604:	39 f1       	breq	.+78     	; 0xe654 <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    e606:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    e608:	05 84       	ldd	r0, Z+13	; 0x0d
    e60a:	f6 85       	ldd	r31, Z+14	; 0x0e
    e60c:	e0 2d       	mov	r30, r0
			--eventsLeft;
    e60e:	61 50       	subi	r22, 0x01	; 1
    e610:	70 40       	sbci	r23, 0x00	; 0
    e612:	20 81       	ld	r18, Z
    e614:	31 81       	ldd	r19, Z+1	; 0x01
    e616:	42 81       	ldd	r20, Z+2	; 0x02
    e618:	53 81       	ldd	r21, Z+3	; 0x03
    e61a:	80 91 e1 17 	lds	r24, 0x17E1
    e61e:	90 91 e2 17 	lds	r25, 0x17E2
    e622:	a0 91 e3 17 	lds	r26, 0x17E3
    e626:	b0 91 e4 17 	lds	r27, 0x17E4
    e62a:	28 17       	cp	r18, r24
    e62c:	39 07       	cpc	r19, r25
    e62e:	4a 07       	cpc	r20, r26
    e630:	5b 07       	cpc	r21, r27
    e632:	30 f7       	brcc	.-52     	; 0xe600 <TIMING_AddEvent+0x5c>
    e634:	0f c0       	rjmp	.+30     	; 0xe654 <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    e636:	80 81       	ld	r24, Z
    e638:	91 81       	ldd	r25, Z+1	; 0x01
    e63a:	a2 81       	ldd	r26, Z+2	; 0x02
    e63c:	b3 81       	ldd	r27, Z+3	; 0x03
    e63e:	8e 15       	cp	r24, r14
    e640:	9f 05       	cpc	r25, r15
    e642:	a0 07       	cpc	r26, r16
    e644:	b1 07       	cpc	r27, r17
    e646:	48 f4       	brcc	.+18     	; 0xe65a <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    e648:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    e64a:	05 84       	ldd	r0, Z+13	; 0x0d
    e64c:	f6 85       	ldd	r31, Z+14	; 0x0e
    e64e:	e0 2d       	mov	r30, r0
		--eventsLeft;
    e650:	61 50       	subi	r22, 0x01	; 1
    e652:	70 40       	sbci	r23, 0x00	; 0
    e654:	61 15       	cp	r22, r1
    e656:	71 05       	cpc	r23, r1
    e658:	71 f7       	brne	.-36     	; 0xe636 <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    e65a:	80 91 dd 17 	lds	r24, 0x17DD
    e65e:	90 91 de 17 	lds	r25, 0x17DE
    e662:	68 17       	cp	r22, r24
    e664:	79 07       	cpc	r23, r25
    e666:	a1 f4       	brne	.+40     	; 0xe690 <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    e668:	e3 01       	movw	r28, r6
    e66a:	be 86       	std	Y+14, r11	; 0x0e
    e66c:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    e66e:	70 92 e0 17 	sts	0x17E0, r7
    e672:	60 92 df 17 	sts	0x17DF, r6
		TIMING_nextEventTime = event->triggerTime;
    e676:	88 81       	ld	r24, Y
    e678:	99 81       	ldd	r25, Y+1	; 0x01
    e67a:	aa 81       	ldd	r26, Y+2	; 0x02
    e67c:	bb 81       	ldd	r27, Y+3	; 0x03
    e67e:	80 93 e5 17 	sts	0x17E5, r24
    e682:	90 93 e6 17 	sts	0x17E6, r25
    e686:	a0 93 e7 17 	sts	0x17E7, r26
    e68a:	b0 93 e8 17 	sts	0x17E8, r27
    e68e:	06 c0       	rjmp	.+12     	; 0xe69c <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    e690:	e3 01       	movw	r28, r6
    e692:	fe 87       	std	Y+14, r31	; 0x0e
    e694:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    e696:	f6 01       	movw	r30, r12
    e698:	76 86       	std	Z+14, r7	; 0x0e
    e69a:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    e69c:	80 91 dd 17 	lds	r24, 0x17DD
    e6a0:	90 91 de 17 	lds	r25, 0x17DE
    e6a4:	01 96       	adiw	r24, 0x01	; 1
    e6a6:	90 93 de 17 	sts	0x17DE, r25
    e6aa:	80 93 dd 17 	sts	0x17DD, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    e6ae:	9f be       	out	0x3f, r9	; 63
    e6b0:	df 91       	pop	r29
    e6b2:	cf 91       	pop	r28
    e6b4:	1f 91       	pop	r17
    e6b6:	0f 91       	pop	r16
    e6b8:	ff 90       	pop	r15
    e6ba:	ef 90       	pop	r14
    e6bc:	df 90       	pop	r13
    e6be:	cf 90       	pop	r12
    e6c0:	bf 90       	pop	r11
    e6c2:	af 90       	pop	r10
    e6c4:	9f 90       	pop	r9
    e6c6:	7f 90       	pop	r7
    e6c8:	6f 90       	pop	r6
    e6ca:	08 95       	ret

0000e6cc <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    e6cc:	0f 93       	push	r16
    e6ce:	1f 93       	push	r17
    e6d0:	cf 93       	push	r28
    e6d2:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    e6d4:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    e6d6:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    e6d8:	80 91 e1 17 	lds	r24, 0x17E1
    e6dc:	90 91 e2 17 	lds	r25, 0x17E2
    e6e0:	a0 91 e3 17 	lds	r26, 0x17E3
    e6e4:	b0 91 e4 17 	lds	r27, 0x17E4
    e6e8:	01 96       	adiw	r24, 0x01	; 1
    e6ea:	a1 1d       	adc	r26, r1
    e6ec:	b1 1d       	adc	r27, r1
    e6ee:	80 93 e1 17 	sts	0x17E1, r24
    e6f2:	90 93 e2 17 	sts	0x17E2, r25
    e6f6:	a0 93 e3 17 	sts	0x17E3, r26
    e6fa:	b0 93 e4 17 	sts	0x17E4, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    e6fe:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    e700:	80 91 dd 17 	lds	r24, 0x17DD
    e704:	90 91 de 17 	lds	r25, 0x17DE
    e708:	89 2b       	or	r24, r25
    e70a:	09 f4       	brne	.+2      	; 0xe70e <TIMING_TickHandler+0x42>
    e70c:	70 c0       	rjmp	.+224    	; 0xe7ee <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    e70e:	20 91 e5 17 	lds	r18, 0x17E5
    e712:	30 91 e6 17 	lds	r19, 0x17E6
    e716:	40 91 e7 17 	lds	r20, 0x17E7
    e71a:	50 91 e8 17 	lds	r21, 0x17E8
		if (TIMING_currentTime != next_event) {
    e71e:	80 91 e1 17 	lds	r24, 0x17E1
    e722:	90 91 e2 17 	lds	r25, 0x17E2
    e726:	a0 91 e3 17 	lds	r26, 0x17E3
    e72a:	b0 91 e4 17 	lds	r27, 0x17E4
    e72e:	82 17       	cp	r24, r18
    e730:	93 07       	cpc	r25, r19
    e732:	a4 07       	cpc	r26, r20
    e734:	b5 07       	cpc	r27, r21
    e736:	11 f0       	breq	.+4      	; 0xe73c <TIMING_TickHandler+0x70>
			goon = 0;
    e738:	00 e0       	ldi	r16, 0x00	; 0
    e73a:	50 c0       	rjmp	.+160    	; 0xe7dc <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    e73c:	c0 91 df 17 	lds	r28, 0x17DF
    e740:	d0 91 e0 17 	lds	r29, 0x17E0
			TIMING_firstEvent = event->next;
    e744:	ed 85       	ldd	r30, Y+13	; 0x0d
    e746:	fe 85       	ldd	r31, Y+14	; 0x0e
    e748:	f0 93 e0 17 	sts	0x17E0, r31
    e74c:	e0 93 df 17 	sts	0x17DF, r30
			--TIMING_queueSize;
    e750:	80 91 dd 17 	lds	r24, 0x17DD
    e754:	90 91 de 17 	lds	r25, 0x17DE
    e758:	01 97       	sbiw	r24, 0x01	; 1
    e75a:	90 93 de 17 	sts	0x17DE, r25
    e75e:	80 93 dd 17 	sts	0x17DD, r24
			if (TIMING_queueSize > 0) {
    e762:	80 91 dd 17 	lds	r24, 0x17DD
    e766:	90 91 de 17 	lds	r25, 0x17DE
    e76a:	89 2b       	or	r24, r25
    e76c:	61 f0       	breq	.+24     	; 0xe786 <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    e76e:	80 81       	ld	r24, Z
    e770:	91 81       	ldd	r25, Z+1	; 0x01
    e772:	a2 81       	ldd	r26, Z+2	; 0x02
    e774:	b3 81       	ldd	r27, Z+3	; 0x03
    e776:	80 93 e5 17 	sts	0x17E5, r24
    e77a:	90 93 e6 17 	sts	0x17E6, r25
    e77e:	a0 93 e7 17 	sts	0x17E7, r26
    e782:	b0 93 e8 17 	sts	0x17E8, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    e786:	89 85       	ldd	r24, Y+9	; 0x09
    e788:	9a 85       	ldd	r25, Y+10	; 0x0a
    e78a:	00 97       	sbiw	r24, 0x00	; 0
    e78c:	19 f0       	breq	.+6      	; 0xe794 <TIMING_TickHandler+0xc8>
    e78e:	01 97       	sbiw	r24, 0x01	; 1
    e790:	39 f0       	breq	.+14     	; 0xe7a0 <TIMING_TickHandler+0xd4>
    e792:	09 c0       	rjmp	.+18     	; 0xe7a6 <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    e794:	eb 85       	ldd	r30, Y+11	; 0x0b
    e796:	fc 85       	ldd	r31, Y+12	; 0x0c
    e798:	80 81       	ld	r24, Z
    e79a:	8f 5f       	subi	r24, 0xFF	; 255
    e79c:	80 83       	st	Z, r24
		break;
    e79e:	03 c0       	rjmp	.+6      	; 0xe7a6 <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    e7a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    e7a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    e7a4:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    e7a6:	88 85       	ldd	r24, Y+8	; 0x08
    e7a8:	8f 3f       	cpi	r24, 0xFF	; 255
    e7aa:	11 f0       	breq	.+4      	; 0xe7b0 <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    e7ac:	81 50       	subi	r24, 0x01	; 1
    e7ae:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    e7b0:	88 85       	ldd	r24, Y+8	; 0x08
    e7b2:	88 23       	and	r24, r24
    e7b4:	99 f0       	breq	.+38     	; 0xe7dc <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    e7b6:	88 81       	ld	r24, Y
    e7b8:	99 81       	ldd	r25, Y+1	; 0x01
    e7ba:	aa 81       	ldd	r26, Y+2	; 0x02
    e7bc:	bb 81       	ldd	r27, Y+3	; 0x03
    e7be:	2c 81       	ldd	r18, Y+4	; 0x04
    e7c0:	3d 81       	ldd	r19, Y+5	; 0x05
    e7c2:	4e 81       	ldd	r20, Y+6	; 0x06
    e7c4:	5f 81       	ldd	r21, Y+7	; 0x07
    e7c6:	82 0f       	add	r24, r18
    e7c8:	93 1f       	adc	r25, r19
    e7ca:	a4 1f       	adc	r26, r20
    e7cc:	b5 1f       	adc	r27, r21
    e7ce:	88 83       	st	Y, r24
    e7d0:	99 83       	std	Y+1, r25	; 0x01
    e7d2:	aa 83       	std	Y+2, r26	; 0x02
    e7d4:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    e7d6:	ce 01       	movw	r24, r28
    e7d8:	0e 94 d2 72 	call	0xe5a4	; 0xe5a4 <TIMING_AddEvent>
    e7dc:	80 91 dd 17 	lds	r24, 0x17DD
    e7e0:	90 91 de 17 	lds	r25, 0x17DE
    e7e4:	89 2b       	or	r24, r25
    e7e6:	19 f0       	breq	.+6      	; 0xe7ee <TIMING_TickHandler+0x122>
    e7e8:	00 23       	and	r16, r16
    e7ea:	09 f0       	breq	.+2      	; 0xe7ee <TIMING_TickHandler+0x122>
    e7ec:	90 cf       	rjmp	.-224    	; 0xe70e <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    e7ee:	1f bf       	out	0x3f, r17	; 63
    e7f0:	df 91       	pop	r29
    e7f2:	cf 91       	pop	r28
    e7f4:	1f 91       	pop	r17
    e7f6:	0f 91       	pop	r16
    e7f8:	08 95       	ret

0000e7fa <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    e7fa:	cf 93       	push	r28
    e7fc:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    e7fe:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    e800:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    e802:	40 91 dd 17 	lds	r20, 0x17DD
    e806:	50 91 de 17 	lds	r21, 0x17DE
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    e80a:	e0 91 df 17 	lds	r30, 0x17DF
    e80e:	f0 91 e0 17 	lds	r31, 0x17E0
	TIMING_event_t * lastEvent = 0;
    e812:	a0 e0       	ldi	r26, 0x00	; 0
    e814:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    e816:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    e818:	41 15       	cp	r20, r1
    e81a:	51 05       	cpc	r21, r1
    e81c:	81 f0       	breq	.+32     	; 0xe83e <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    e81e:	e8 17       	cp	r30, r24
    e820:	f9 07       	cpc	r31, r25
    e822:	11 f4       	brne	.+4      	; 0xe828 <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    e824:	21 e0       	ldi	r18, 0x01	; 1
    e826:	06 c0       	rjmp	.+12     	; 0xe834 <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    e828:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    e82a:	05 84       	ldd	r0, Z+13	; 0x0d
    e82c:	f6 85       	ldd	r31, Z+14	; 0x0e
    e82e:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    e830:	41 50       	subi	r20, 0x01	; 1
    e832:	50 40       	sbci	r21, 0x00	; 0
    e834:	41 15       	cp	r20, r1
    e836:	51 05       	cpc	r21, r1
    e838:	11 f0       	breq	.+4      	; 0xe83e <TIMING_RemoveEvent+0x44>
    e83a:	22 23       	and	r18, r18
    e83c:	81 f3       	breq	.-32     	; 0xe81e <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    e83e:	22 23       	and	r18, r18
    e840:	d1 f0       	breq	.+52     	; 0xe876 <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    e842:	80 91 dd 17 	lds	r24, 0x17DD
    e846:	90 91 de 17 	lds	r25, 0x17DE
    e84a:	25 85       	ldd	r18, Z+13	; 0x0d
    e84c:	36 85       	ldd	r19, Z+14	; 0x0e
    e84e:	48 17       	cp	r20, r24
    e850:	59 07       	cpc	r21, r25
    e852:	29 f4       	brne	.+10     	; 0xe85e <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    e854:	30 93 e0 17 	sts	0x17E0, r19
    e858:	20 93 df 17 	sts	0x17DF, r18
    e85c:	03 c0       	rjmp	.+6      	; 0xe864 <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    e85e:	ed 01       	movw	r28, r26
    e860:	3e 87       	std	Y+14, r19	; 0x0e
    e862:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    e864:	80 91 dd 17 	lds	r24, 0x17DD
    e868:	90 91 de 17 	lds	r25, 0x17DE
    e86c:	01 97       	sbiw	r24, 0x01	; 1
    e86e:	90 93 de 17 	sts	0x17DE, r25
    e872:	80 93 dd 17 	sts	0x17DD, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    e876:	6f bf       	out	0x3f, r22	; 63
    e878:	df 91       	pop	r29
    e87a:	cf 91       	pop	r28
    e87c:	08 95       	ret

0000e87e <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    e87e:	cf 92       	push	r12
    e880:	df 92       	push	r13
    e882:	ef 92       	push	r14
    e884:	ff 92       	push	r15
    e886:	0f 93       	push	r16
    e888:	1f 93       	push	r17
    e88a:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    e88c:	44 23       	and	r20, r20
    e88e:	91 f0       	breq	.+36     	; 0xe8b4 <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    e890:	60 83       	st	Z, r22
    e892:	71 83       	std	Z+1, r23	; 0x01
    e894:	82 83       	std	Z+2, r24	; 0x02
    e896:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    e898:	04 83       	std	Z+4, r16	; 0x04
    e89a:	15 83       	std	Z+5, r17	; 0x05
    e89c:	26 83       	std	Z+6, r18	; 0x06
    e89e:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    e8a0:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    e8a2:	81 e0       	ldi	r24, 0x01	; 1
    e8a4:	90 e0       	ldi	r25, 0x00	; 0
    e8a6:	92 87       	std	Z+10, r25	; 0x0a
    e8a8:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    e8aa:	f4 86       	std	Z+12, r15	; 0x0c
    e8ac:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    e8ae:	c6 01       	movw	r24, r12
    e8b0:	0e 94 d2 72 	call	0xe5a4	; 0xe5a4 <TIMING_AddEvent>
    e8b4:	1f 91       	pop	r17
    e8b6:	0f 91       	pop	r16
    e8b8:	ff 90       	pop	r15
    e8ba:	ef 90       	pop	r14
    e8bc:	df 90       	pop	r13
    e8be:	cf 90       	pop	r12
    e8c0:	08 95       	ret

0000e8c2 <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    e8c2:	8f 92       	push	r8
    e8c4:	9f 92       	push	r9
    e8c6:	af 92       	push	r10
    e8c8:	bf 92       	push	r11
    e8ca:	cf 92       	push	r12
    e8cc:	df 92       	push	r13
    e8ce:	ef 92       	push	r14
    e8d0:	ff 92       	push	r15
    e8d2:	0f 93       	push	r16
    e8d4:	1f 93       	push	r17
    e8d6:	4b 01       	movw	r8, r22
    e8d8:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    e8da:	69 01       	movw	r12, r18
    e8dc:	7a 01       	movw	r14, r20
    e8de:	00 e0       	ldi	r16, 0x00	; 0
    e8e0:	10 e0       	ldi	r17, 0x00	; 0
    e8e2:	20 e0       	ldi	r18, 0x00	; 0
    e8e4:	30 e0       	ldi	r19, 0x00	; 0
    e8e6:	41 e0       	ldi	r20, 0x01	; 1
    e8e8:	c5 01       	movw	r24, r10
    e8ea:	b4 01       	movw	r22, r8
    e8ec:	0e 94 3f 74 	call	0xe87e	; 0xe87e <TIMING_AddRepCallbackEventAt>
    e8f0:	1f 91       	pop	r17
    e8f2:	0f 91       	pop	r16
    e8f4:	ff 90       	pop	r15
    e8f6:	ef 90       	pop	r14
    e8f8:	df 90       	pop	r13
    e8fa:	cf 90       	pop	r12
    e8fc:	bf 90       	pop	r11
    e8fe:	af 90       	pop	r10
    e900:	9f 90       	pop	r9
    e902:	8f 90       	pop	r8
    e904:	08 95       	ret

0000e906 <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    e906:	ef 92       	push	r14
    e908:	ff 92       	push	r15
    e90a:	0f 93       	push	r16
    e90c:	1f 93       	push	r17
    e90e:	7b 01       	movw	r14, r22
    e910:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    e912:	80 91 e1 17 	lds	r24, 0x17E1
    e916:	90 91 e2 17 	lds	r25, 0x17E2
    e91a:	a0 91 e3 17 	lds	r26, 0x17E3
    e91e:	b0 91 e4 17 	lds	r27, 0x17E4
    e922:	8e 0d       	add	r24, r14
    e924:	9f 1d       	adc	r25, r15
    e926:	a0 1f       	adc	r26, r16
    e928:	b1 1f       	adc	r27, r17
    e92a:	bc 01       	movw	r22, r24
    e92c:	cd 01       	movw	r24, r26
    e92e:	0e 94 61 74 	call	0xe8c2	; 0xe8c2 <TIMING_AddCallbackEventAt>
    e932:	1f 91       	pop	r17
    e934:	0f 91       	pop	r16
    e936:	ff 90       	pop	r15
    e938:	ef 90       	pop	r14
    e93a:	08 95       	ret

0000e93c <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    e93c:	7f 92       	push	r7
    e93e:	8f 92       	push	r8
    e940:	9f 92       	push	r9
    e942:	af 92       	push	r10
    e944:	bf 92       	push	r11
    e946:	cf 92       	push	r12
    e948:	df 92       	push	r13
    e94a:	ef 92       	push	r14
    e94c:	ff 92       	push	r15
    e94e:	0f 93       	push	r16
    e950:	1f 93       	push	r17
    e952:	4b 01       	movw	r8, r22
    e954:	5c 01       	movw	r10, r24
    e956:	74 2e       	mov	r7, r20
    e958:	b9 01       	movw	r22, r18
    e95a:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    e95c:	80 91 e1 17 	lds	r24, 0x17E1
    e960:	90 91 e2 17 	lds	r25, 0x17E2
    e964:	a0 91 e3 17 	lds	r26, 0x17E3
    e968:	b0 91 e4 17 	lds	r27, 0x17E4
    e96c:	88 0d       	add	r24, r8
    e96e:	99 1d       	adc	r25, r9
    e970:	aa 1d       	adc	r26, r10
    e972:	bb 1d       	adc	r27, r11
    e974:	8a 01       	movw	r16, r20
    e976:	9b 01       	movw	r18, r22
    e978:	47 2d       	mov	r20, r7
    e97a:	bc 01       	movw	r22, r24
    e97c:	cd 01       	movw	r24, r26
    e97e:	0e 94 3f 74 	call	0xe87e	; 0xe87e <TIMING_AddRepCallbackEventAt>
    e982:	1f 91       	pop	r17
    e984:	0f 91       	pop	r16
    e986:	ff 90       	pop	r15
    e988:	ef 90       	pop	r14
    e98a:	df 90       	pop	r13
    e98c:	cf 90       	pop	r12
    e98e:	bf 90       	pop	r11
    e990:	af 90       	pop	r10
    e992:	9f 90       	pop	r9
    e994:	8f 90       	pop	r8
    e996:	7f 90       	pop	r7
    e998:	08 95       	ret

0000e99a <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    e99a:	8f 92       	push	r8
    e99c:	9f 92       	push	r9
    e99e:	af 92       	push	r10
    e9a0:	bf 92       	push	r11
    e9a2:	cf 92       	push	r12
    e9a4:	df 92       	push	r13
    e9a6:	ef 92       	push	r14
    e9a8:	ff 92       	push	r15
    e9aa:	0f 93       	push	r16
    e9ac:	1f 93       	push	r17
    e9ae:	e8 2f       	mov	r30, r24
    e9b0:	4a 01       	movw	r8, r20
    e9b2:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    e9b4:	68 01       	movw	r12, r16
    e9b6:	79 01       	movw	r14, r18
    e9b8:	8a 01       	movw	r16, r20
    e9ba:	9b 01       	movw	r18, r22
    e9bc:	4e 2f       	mov	r20, r30
    e9be:	c5 01       	movw	r24, r10
    e9c0:	b4 01       	movw	r22, r8
    e9c2:	0e 94 9e 74 	call	0xe93c	; 0xe93c <TIMING_AddRepCallbackEventAfter>
    e9c6:	1f 91       	pop	r17
    e9c8:	0f 91       	pop	r16
    e9ca:	ff 90       	pop	r15
    e9cc:	ef 90       	pop	r14
    e9ce:	df 90       	pop	r13
    e9d0:	cf 90       	pop	r12
    e9d2:	bf 90       	pop	r11
    e9d4:	af 90       	pop	r10
    e9d6:	9f 90       	pop	r9
    e9d8:	8f 90       	pop	r8
    e9da:	08 95       	ret

0000e9dc <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    e9dc:	ef 92       	push	r14
    e9de:	ff 92       	push	r15
    e9e0:	0f 93       	push	r16
    e9e2:	1f 93       	push	r17
    e9e4:	cf 93       	push	r28
    e9e6:	e6 2e       	mov	r14, r22
    e9e8:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    e9ea:	80 52       	subi	r24, 0x20	; 32
    e9ec:	8f 35       	cpi	r24, 0x5F	; 95
    e9ee:	90 f4       	brcc	.+36     	; 0xea14 <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    e9f0:	95 e0       	ldi	r25, 0x05	; 5
    e9f2:	f9 2e       	mov	r15, r25
    e9f4:	8f 9d       	mul	r24, r15
    e9f6:	80 01       	movw	r16, r0
    e9f8:	11 24       	eor	r1, r1
    e9fa:	0e 5a       	subi	r16, 0xAE	; 174
    e9fc:	1f 42       	sbci	r17, 0x2F	; 47
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    e9fe:	21 e0       	ldi	r18, 0x01	; 1
    ea00:	8f ef       	ldi	r24, 0xFF	; 255
    ea02:	0e 94 76 6c 	call	0xd8ec	; 0xd8ec <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    ea06:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    ea08:	2f 2d       	mov	r18, r15
    ea0a:	4c 2f       	mov	r20, r28
    ea0c:	6e 2d       	mov	r22, r14
    ea0e:	c8 01       	movw	r24, r16
    ea10:	0e 94 b5 6c 	call	0xd96a	; 0xd96a <LCD_WritePage_F>
    ea14:	cf 91       	pop	r28
    ea16:	1f 91       	pop	r17
    ea18:	0f 91       	pop	r16
    ea1a:	ff 90       	pop	r15
    ea1c:	ef 90       	pop	r14
    ea1e:	08 95       	ret

0000ea20 <TERMFONT_DisplayString>:
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
    ea20:	0f 93       	push	r16
    ea22:	1f 93       	push	r17
    ea24:	cf 93       	push	r28
    ea26:	df 93       	push	r29
    ea28:	ec 01       	movw	r28, r24
    ea2a:	06 2f       	mov	r16, r22
    ea2c:	14 2f       	mov	r17, r20
  
    if (pTextString == NULL) { return; }
    ea2e:	89 2b       	or	r24, r25
    ea30:	61 f0       	breq	.+24     	; 0xea4a <TERMFONT_DisplayString+0x2a>
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
	column += TERMFONT_CHAR_WIDTH;
    ea32:	88 81       	ld	r24, Y
    ea34:	88 23       	and	r24, r24
    ea36:	49 f0       	breq	.+18     	; 0xea4a <TERMFONT_DisplayString+0x2a>
  
    if (pTextString == NULL) { return; }
    
    while (*pTextString != 0x00)
    {
        TERMFONT_DisplayChar(*pTextString++, page, column);
    ea38:	41 2f       	mov	r20, r17
    ea3a:	60 2f       	mov	r22, r16
    ea3c:	89 91       	ld	r24, Y+
    ea3e:	0e 94 ee 74 	call	0xe9dc	; 0xe9dc <TERMFONT_DisplayChar>
	column += TERMFONT_CHAR_WIDTH;
    ea42:	1a 5f       	subi	r17, 0xFA	; 250
    ea44:	88 81       	ld	r24, Y
    ea46:	88 23       	and	r24, r24
    ea48:	b9 f7       	brne	.-18     	; 0xea38 <TERMFONT_DisplayString+0x18>
    ea4a:	df 91       	pop	r29
    ea4c:	cf 91       	pop	r28
    ea4e:	1f 91       	pop	r17
    ea50:	0f 91       	pop	r16
    ea52:	08 95       	ret

0000ea54 <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    ea54:	20 91 64 00 	lds	r18, 0x0064
    ea58:	27 7f       	andi	r18, 0xF7	; 247
    ea5a:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    ea5e:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    ea60:	28 e0       	ldi	r18, 0x08	; 8
    ea62:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    ea66:	20 e1       	ldi	r18, 0x10	; 16
    ea68:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    ea6c:	20 91 81 00 	lds	r18, 0x0081
    ea70:	21 60       	ori	r18, 0x01	; 1
    ea72:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    ea76:	90 93 f9 17 	sts	0x17F9, r25
    ea7a:	80 93 f8 17 	sts	0x17F8, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    ea7e:	29 ee       	ldi	r18, 0xE9	; 233
    ea80:	37 e1       	ldi	r19, 0x17	; 23
    ea82:	4a e4       	ldi	r20, 0x4A	; 74
    ea84:	55 e7       	ldi	r21, 0x75	; 117
    ea86:	6a e0       	ldi	r22, 0x0A	; 10
    ea88:	70 e0       	ldi	r23, 0x00	; 0
    ea8a:	80 e0       	ldi	r24, 0x00	; 0
    ea8c:	90 e0       	ldi	r25, 0x00	; 0
    ea8e:	0e 94 83 74 	call	0xe906	; 0xe906 <TIMING_AddCallbackEventAfter>
    ea92:	08 95       	ret

0000ea94 <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    ea94:	ef 92       	push	r14
    ea96:	ff 92       	push	r15
    ea98:	0f 93       	push	r16
    ea9a:	1f 93       	push	r17
    ea9c:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    ea9e:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    eaa0:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    eaa2:	e0 91 f8 17 	lds	r30, 0x17F8
    eaa6:	f0 91 f9 17 	lds	r31, 0x17F9
    eaaa:	81 85       	ldd	r24, Z+9	; 0x09
    eaac:	84 30       	cpi	r24, 0x04	; 4
    eaae:	b0 f1       	brcs	.+108    	; 0xeb1c <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    eab0:	cf 01       	movw	r24, r30
    eab2:	0e 94 91 70 	call	0xe122	; 0xe122 <FIFO_GetUint16>
    eab6:	7c 01       	movw	r14, r24
    eab8:	00 27       	eor	r16, r16
    eaba:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    eabc:	80 91 f8 17 	lds	r24, 0x17F8
    eac0:	90 91 f9 17 	lds	r25, 0x17F9
    eac4:	0e 94 91 70 	call	0xe122	; 0xe122 <FIFO_GetUint16>
    eac8:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    eaca:	01 97       	sbiw	r24, 0x01	; 1
    eacc:	31 f4       	brne	.+12     	; 0xeada <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    eace:	10 92 57 02 	sts	0x0257, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    ead2:	80 91 81 00 	lds	r24, 0x0081
    ead6:	8e 7f       	andi	r24, 0xFE	; 254
    ead8:	06 c0       	rjmp	.+12     	; 0xeae6 <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    eada:	81 e0       	ldi	r24, 0x01	; 1
    eadc:	80 93 57 02 	sts	0x0257, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    eae0:	80 91 81 00 	lds	r24, 0x0081
    eae4:	81 60       	ori	r24, 0x01	; 1
    eae6:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    eaea:	9a 01       	movw	r18, r20
    eaec:	36 95       	lsr	r19
    eaee:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    eaf0:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    eaf2:	9a 01       	movw	r18, r20
    eaf4:	23 2f       	mov	r18, r19
    eaf6:	33 27       	eor	r19, r19
    eaf8:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    eafa:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    eafe:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    eb02:	25 2f       	mov	r18, r21
    eb04:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    eb06:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    eb0a:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    eb0e:	29 ee       	ldi	r18, 0xE9	; 233
    eb10:	37 e1       	ldi	r19, 0x17	; 23
    eb12:	4a e4       	ldi	r20, 0x4A	; 74
    eb14:	55 e7       	ldi	r21, 0x75	; 117
    eb16:	c8 01       	movw	r24, r16
    eb18:	b7 01       	movw	r22, r14
    eb1a:	0f c0       	rjmp	.+30     	; 0xeb3a <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    eb1c:	10 92 57 02 	sts	0x0257, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    eb20:	80 91 81 00 	lds	r24, 0x0081
    eb24:	8e 7f       	andi	r24, 0xFE	; 254
    eb26:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    eb2a:	29 ee       	ldi	r18, 0xE9	; 233
    eb2c:	37 e1       	ldi	r19, 0x17	; 23
    eb2e:	4a e4       	ldi	r20, 0x4A	; 74
    eb30:	55 e7       	ldi	r21, 0x75	; 117
    eb32:	6a e0       	ldi	r22, 0x0A	; 10
    eb34:	70 e0       	ldi	r23, 0x00	; 0
    eb36:	80 e0       	ldi	r24, 0x00	; 0
    eb38:	90 e0       	ldi	r25, 0x00	; 0
    eb3a:	0e 94 83 74 	call	0xe906	; 0xe906 <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    eb3e:	cf bf       	out	0x3f, r28	; 63
    eb40:	cf 91       	pop	r28
    eb42:	1f 91       	pop	r17
    eb44:	0f 91       	pop	r16
    eb46:	ff 90       	pop	r15
    eb48:	ef 90       	pop	r14
    eb4a:	08 95       	ret

0000eb4c <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    eb4c:	10 92 57 02 	sts	0x0257, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    eb50:	80 91 81 00 	lds	r24, 0x0081
    eb54:	8e 7f       	andi	r24, 0xFE	; 254
    eb56:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    eb5a:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    eb5e:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    eb62:	89 ee       	ldi	r24, 0xE9	; 233
    eb64:	97 e1       	ldi	r25, 0x17	; 23
    eb66:	0e 94 fd 73 	call	0xe7fa	; 0xe7fa <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    eb6a:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    eb6c:	80 91 64 00 	lds	r24, 0x0064
    eb70:	88 60       	ori	r24, 0x08	; 8
    eb72:	80 93 64 00 	sts	0x0064, r24
    eb76:	08 95       	ret

0000eb78 <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    eb78:	80 91 57 02 	lds	r24, 0x0257
}
    eb7c:	99 27       	eor	r25, r25
    eb7e:	08 95       	ret

0000eb80 <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    eb80:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    eb82:	e0 91 fa 17 	lds	r30, 0x17FA
    eb86:	f0 91 fb 17 	lds	r31, 0x17FB
    eb8a:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    eb8c:	24 30       	cpi	r18, 0x04	; 4
    eb8e:	08 f4       	brcc	.+2      	; 0xeb92 <SONG_CallbackControlTask_F+0x12>
    eb90:	41 c0       	rjmp	.+130    	; 0xec14 <SONG_CallbackControlTask_F+0x94>
    eb92:	e0 91 0b 18 	lds	r30, 0x180B
    eb96:	f0 91 0c 18 	lds	r31, 0x180C
    eb9a:	85 91       	lpm	r24, Z+
    eb9c:	94 91       	lpm	r25, Z+
    eb9e:	89 2b       	or	r24, r25
    eba0:	09 f4       	brne	.+2      	; 0xeba4 <SONG_CallbackControlTask_F+0x24>
    eba2:	38 c0       	rjmp	.+112    	; 0xec14 <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    eba4:	80 91 0b 18 	lds	r24, 0x180B
    eba8:	90 91 0c 18 	lds	r25, 0x180C
    ebac:	fc 01       	movw	r30, r24
    ebae:	65 91       	lpm	r22, Z+
    ebb0:	74 91       	lpm	r23, Z+
    ebb2:	c2 2f       	mov	r28, r18
    ebb4:	c4 50       	subi	r28, 0x04	; 4
    ebb6:	2f ef       	ldi	r18, 0xFF	; 255
    ebb8:	6f 3f       	cpi	r22, 0xFF	; 255
    ebba:	72 07       	cpc	r23, r18
    ebbc:	49 f4       	brne	.+18     	; 0xebd0 <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    ebbe:	80 91 0d 18 	lds	r24, 0x180D
    ebc2:	90 91 0e 18 	lds	r25, 0x180E
    ebc6:	90 93 0c 18 	sts	0x180C, r25
    ebca:	80 93 0b 18 	sts	0x180B, r24
    ebce:	1e c0       	rjmp	.+60     	; 0xec0c <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    ebd0:	02 96       	adiw	r24, 0x02	; 2
    ebd2:	90 93 0c 18 	sts	0x180C, r25
    ebd6:	80 93 0b 18 	sts	0x180B, r24
    ebda:	80 91 fa 17 	lds	r24, 0x17FA
    ebde:	90 91 fb 17 	lds	r25, 0x17FB
    ebe2:	0e 94 7e 70 	call	0xe0fc	; 0xe0fc <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    ebe6:	80 91 0b 18 	lds	r24, 0x180B
    ebea:	90 91 0c 18 	lds	r25, 0x180C
    ebee:	fc 01       	movw	r30, r24
    ebf0:	02 96       	adiw	r24, 0x02	; 2
    ebf2:	90 93 0c 18 	sts	0x180C, r25
    ebf6:	80 93 0b 18 	sts	0x180B, r24
    ebfa:	85 91       	lpm	r24, Z+
    ebfc:	94 91       	lpm	r25, Z+
    ebfe:	bc 01       	movw	r22, r24
    ec00:	80 91 fa 17 	lds	r24, 0x17FA
    ec04:	90 91 fb 17 	lds	r25, 0x17FB
    ec08:	0e 94 7e 70 	call	0xe0fc	; 0xe0fc <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    ec0c:	2c 2f       	mov	r18, r28
    ec0e:	c4 30       	cpi	r28, 0x04	; 4
    ec10:	08 f0       	brcs	.+2      	; 0xec14 <SONG_CallbackControlTask_F+0x94>
    ec12:	bf cf       	rjmp	.-130    	; 0xeb92 <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    ec14:	e0 91 0b 18 	lds	r30, 0x180B
    ec18:	f0 91 0c 18 	lds	r31, 0x180C
    ec1c:	85 91       	lpm	r24, Z+
    ec1e:	94 91       	lpm	r25, Z+
    ec20:	89 2b       	or	r24, r25
    ec22:	69 f4       	brne	.+26     	; 0xec3e <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    ec24:	e0 91 fa 17 	lds	r30, 0x17FA
    ec28:	f0 91 fb 17 	lds	r31, 0x17FB
    ec2c:	81 85       	ldd	r24, Z+9	; 0x09
    ec2e:	88 23       	and	r24, r24
    ec30:	31 f4       	brne	.+12     	; 0xec3e <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    ec32:	0e 94 bc 75 	call	0xeb78	; 0xeb78 <SOUND_IsToneBusy>
    ec36:	88 23       	and	r24, r24
    ec38:	11 f4       	brne	.+4      	; 0xec3e <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    ec3a:	0e 94 a6 75 	call	0xeb4c	; 0xeb4c <SOUND_StopAudio>
    ec3e:	cf 91       	pop	r28
    ec40:	08 95       	ret

0000ec42 <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    ec42:	0e 94 a6 75 	call	0xeb4c	; 0xeb4c <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    ec46:	8c ef       	ldi	r24, 0xFC	; 252
    ec48:	97 e1       	ldi	r25, 0x17	; 23
    ec4a:	0e 94 fd 73 	call	0xe7fa	; 0xe7fa <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    ec4e:	80 91 fa 17 	lds	r24, 0x17FA
    ec52:	90 91 fb 17 	lds	r25, 0x17FB
    ec56:	0e 94 5a 70 	call	0xe0b4	; 0xe0b4 <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    ec5a:	10 92 58 02 	sts	0x0258, r1
    ec5e:	08 95       	ret

0000ec60 <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    ec60:	0f 93       	push	r16
    ec62:	1f 93       	push	r17
    ec64:	cf 93       	push	r28
    ec66:	df 93       	push	r29
    ec68:	ec 01       	movw	r28, r24
    ec6a:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    ec6c:	80 91 58 02 	lds	r24, 0x0258
    ec70:	81 30       	cpi	r24, 0x01	; 1
    ec72:	11 f4       	brne	.+4      	; 0xec78 <SONG_StartTune_F+0x18>
		SONG_StopTune();
    ec74:	0e 94 21 76 	call	0xec42	; 0xec42 <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    ec78:	d0 93 fb 17 	sts	0x17FB, r29
    ec7c:	c0 93 fa 17 	sts	0x17FA, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    ec80:	81 e0       	ldi	r24, 0x01	; 1
    ec82:	80 93 58 02 	sts	0x0258, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    ec86:	10 93 0e 18 	sts	0x180E, r17
    ec8a:	00 93 0d 18 	sts	0x180D, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    ec8e:	10 93 0c 18 	sts	0x180C, r17
    ec92:	00 93 0b 18 	sts	0x180B, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    ec96:	0c ef       	ldi	r16, 0xFC	; 252
    ec98:	17 e1       	ldi	r17, 0x17	; 23
    ec9a:	20 ec       	ldi	r18, 0xC0	; 192
    ec9c:	35 e7       	ldi	r19, 0x75	; 117
    ec9e:	49 e0       	ldi	r20, 0x09	; 9
    eca0:	50 e0       	ldi	r21, 0x00	; 0
    eca2:	60 e0       	ldi	r22, 0x00	; 0
    eca4:	70 e0       	ldi	r23, 0x00	; 0
    eca6:	8f ef       	ldi	r24, 0xFF	; 255
    eca8:	0e 94 cd 74 	call	0xe99a	; 0xe99a <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    ecac:	ce 01       	movw	r24, r28
    ecae:	0e 94 2a 75 	call	0xea54	; 0xea54 <SOUND_StartAudio>
    ecb2:	df 91       	pop	r29
    ecb4:	cf 91       	pop	r28
    ecb6:	1f 91       	pop	r17
    ecb8:	0f 91       	pop	r16
    ecba:	08 95       	ret

0000ecbc <__udivmodqi4>:
    ecbc:	99 1b       	sub	r25, r25
    ecbe:	79 e0       	ldi	r23, 0x09	; 9
    ecc0:	04 c0       	rjmp	.+8      	; 0xecca <__udivmodqi4_ep>

0000ecc2 <__udivmodqi4_loop>:
    ecc2:	99 1f       	adc	r25, r25
    ecc4:	96 17       	cp	r25, r22
    ecc6:	08 f0       	brcs	.+2      	; 0xecca <__udivmodqi4_ep>
    ecc8:	96 1b       	sub	r25, r22

0000ecca <__udivmodqi4_ep>:
    ecca:	88 1f       	adc	r24, r24
    eccc:	7a 95       	dec	r23
    ecce:	c9 f7       	brne	.-14     	; 0xecc2 <__udivmodqi4_loop>
    ecd0:	80 95       	com	r24
    ecd2:	08 95       	ret

0000ecd4 <__udivmodhi4>:
    ecd4:	aa 1b       	sub	r26, r26
    ecd6:	bb 1b       	sub	r27, r27
    ecd8:	51 e1       	ldi	r21, 0x11	; 17
    ecda:	07 c0       	rjmp	.+14     	; 0xecea <__udivmodhi4_ep>

0000ecdc <__udivmodhi4_loop>:
    ecdc:	aa 1f       	adc	r26, r26
    ecde:	bb 1f       	adc	r27, r27
    ece0:	a6 17       	cp	r26, r22
    ece2:	b7 07       	cpc	r27, r23
    ece4:	10 f0       	brcs	.+4      	; 0xecea <__udivmodhi4_ep>
    ece6:	a6 1b       	sub	r26, r22
    ece8:	b7 0b       	sbc	r27, r23

0000ecea <__udivmodhi4_ep>:
    ecea:	88 1f       	adc	r24, r24
    ecec:	99 1f       	adc	r25, r25
    ecee:	5a 95       	dec	r21
    ecf0:	a9 f7       	brne	.-22     	; 0xecdc <__udivmodhi4_loop>
    ecf2:	80 95       	com	r24
    ecf4:	90 95       	com	r25
    ecf6:	bc 01       	movw	r22, r24
    ecf8:	cd 01       	movw	r24, r26
    ecfa:	08 95       	ret

0000ecfc <__divmodhi4>:
    ecfc:	97 fb       	bst	r25, 7
    ecfe:	09 2e       	mov	r0, r25
    ed00:	07 26       	eor	r0, r23
    ed02:	0a d0       	rcall	.+20     	; 0xed18 <__divmodhi4_neg1>
    ed04:	77 fd       	sbrc	r23, 7
    ed06:	04 d0       	rcall	.+8      	; 0xed10 <__divmodhi4_neg2>
    ed08:	e5 df       	rcall	.-54     	; 0xecd4 <__udivmodhi4>
    ed0a:	06 d0       	rcall	.+12     	; 0xed18 <__divmodhi4_neg1>
    ed0c:	00 20       	and	r0, r0
    ed0e:	1a f4       	brpl	.+6      	; 0xed16 <__divmodhi4_exit>

0000ed10 <__divmodhi4_neg2>:
    ed10:	70 95       	com	r23
    ed12:	61 95       	neg	r22
    ed14:	7f 4f       	sbci	r23, 0xFF	; 255

0000ed16 <__divmodhi4_exit>:
    ed16:	08 95       	ret

0000ed18 <__divmodhi4_neg1>:
    ed18:	f6 f7       	brtc	.-4      	; 0xed16 <__divmodhi4_exit>
    ed1a:	90 95       	com	r25
    ed1c:	81 95       	neg	r24
    ed1e:	9f 4f       	sbci	r25, 0xFF	; 255
    ed20:	08 95       	ret

0000ed22 <__udivmodsi4>:
    ed22:	a1 e2       	ldi	r26, 0x21	; 33
    ed24:	1a 2e       	mov	r1, r26
    ed26:	aa 1b       	sub	r26, r26
    ed28:	bb 1b       	sub	r27, r27
    ed2a:	fd 01       	movw	r30, r26
    ed2c:	0d c0       	rjmp	.+26     	; 0xed48 <__udivmodsi4_ep>

0000ed2e <__udivmodsi4_loop>:
    ed2e:	aa 1f       	adc	r26, r26
    ed30:	bb 1f       	adc	r27, r27
    ed32:	ee 1f       	adc	r30, r30
    ed34:	ff 1f       	adc	r31, r31
    ed36:	a2 17       	cp	r26, r18
    ed38:	b3 07       	cpc	r27, r19
    ed3a:	e4 07       	cpc	r30, r20
    ed3c:	f5 07       	cpc	r31, r21
    ed3e:	20 f0       	brcs	.+8      	; 0xed48 <__udivmodsi4_ep>
    ed40:	a2 1b       	sub	r26, r18
    ed42:	b3 0b       	sbc	r27, r19
    ed44:	e4 0b       	sbc	r30, r20
    ed46:	f5 0b       	sbc	r31, r21

0000ed48 <__udivmodsi4_ep>:
    ed48:	66 1f       	adc	r22, r22
    ed4a:	77 1f       	adc	r23, r23
    ed4c:	88 1f       	adc	r24, r24
    ed4e:	99 1f       	adc	r25, r25
    ed50:	1a 94       	dec	r1
    ed52:	69 f7       	brne	.-38     	; 0xed2e <__udivmodsi4_loop>
    ed54:	60 95       	com	r22
    ed56:	70 95       	com	r23
    ed58:	80 95       	com	r24
    ed5a:	90 95       	com	r25
    ed5c:	9b 01       	movw	r18, r22
    ed5e:	ac 01       	movw	r20, r24
    ed60:	bd 01       	movw	r22, r26
    ed62:	cf 01       	movw	r24, r30
    ed64:	08 95       	ret

0000ed66 <_exit>:
    ed66:	ff cf       	rjmp	.-2      	; 0xed66 <_exit>
