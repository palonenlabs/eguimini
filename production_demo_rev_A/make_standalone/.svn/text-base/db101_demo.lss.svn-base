
db101_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  0000f5c4  0000f658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000f5c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001651  0080025a  0080025a  0000f6b2  2**0
                  ALLOC
  3 .debug_aranges 000008b8  00000000  00000000  0000f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002cab  00000000  00000000  0000ff6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013156  00000000  00000000  00012c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000030e0  00000000  00000000  00025d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000adf0  00000000  00000000  00028e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00004fca  00000000  00000000  00033c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 0000006c  00000000  00000000  00038c05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		"\"128 64 2 1\",\r\n"
		"\"   c #FFFFFF\",\r\n"
		"\".  c #000000\",\r\n";			

void SendChar( char ch )
{
       0:	0c 94 1b 67 	jmp	0xce36	; 0xce36 <__ctors_end>
		                                true );
	}
	
	MEM_FREE( checkWidgets );
	return result;
}
       4:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
}


void S6B1713_SetDisplayOff( void )
{
       8:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
}


void LCD_FlipPixel( uint8_t x, uint8_t y )
{
       c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_DrawProgressBar(uint8_t Xstart, uint8_t Ystart, uint8_t height, uint8_t lenght, uint8_t maxvalue, uint8_t currvalue, uint8_t peakvalue)
{
      10:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
	JOYSTICK_doubleClickDelay = doubleClickDelay;
}


void JOYSTICK_PrepareForSleep( void )
{
      14:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
 * called POWER_WakeupCallback(void)
 * 
 * It enables the disabled modules and jtag again when doing a full wakeup
 */
void POWER_EnterPowerSaveMode( void )
{
      18:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
/*!
 * Turns of the backlight by turning of timer3.
 * Also clears all RGB intensity values.
 */
void BACKLIGHT_Off(void)
{
      1c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
/*
 * \param  handle  Pointer to a FIFO struct
 * \param  ProducerCallback  Function to call when FIFO goes from full to non-full
 */
void FIFO_RegisterProducer( FIFO_handle_t * handle, FIFO_ProducerCallback_t ProducerCallback )
{
      20:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>

/*!
 * \return  Total available memory in bytes
 */
MEMBLOCK_size_t MEMBLOCK_GetTotalMem( void )
{
      24:	0c 94 12 71 	jmp	0xe224	; 0xe224 <__vector_9>
/*!
 * \param  pPictureInRam  Pointer to picture in ram with same size as LCD
 */
void PICTURE_CopyFullscreenRamToLcd (const uint8_t * pPictureInRam)
{
  LCD_WriteFrameBuffer( pPictureInRam );
      28:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
		// Check if bottom of element is below bottom of visible area.
		if ((element->startPage + element->height) > (form->firstVisiblePage + LCD_PAGE_COUNT)) {
			visibility->lastPage = (form->firstVisiblePage + LCD_PAGE_COUNT - 1) -
					element->startPage;
		} else {
			visibility->lastPage = element->height - 1;
      2c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>

/*! 
 * \return  Current callback function
*/
RTC_TickHandler_t RTC_GetTickHandler( void )
{
      30:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
 *  Note that the timestamp value wraps back to zero when it reaches
 *  the maximum value for the TIMING_time_t datatype. Therefore, take care
 *  when comparing timestamps.
 */
TIMING_time_t TIMING_GetTime( void )
{
      34:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
 *
 * \param  pTextString  Pointer to null-terminated string
 * \param  page  On which page to print the string
 * \param  column  On which column to start print the string
 */
void TERMFONT_DisplayString(char const * pTextString, uint8_t page, uint8_t column){
      38:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
	if ( *pAudioDataInRam == SOUND_STOP ) {	
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
				SOUND_StopAudio();
      3c:	0c 94 0c 76 	jmp	0xec18	; 0xec18 <__vector_15>
      40:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      44:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      48:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      4c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      50:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      54:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      58:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      5c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      60:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      64:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      68:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      6c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      70:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      74:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      78:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      7c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      80:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      84:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      88:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      8c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      90:	0c 94 91 67 	jmp	0xcf22	; 0xcf22 <__vector_36>
      94:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      98:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      9c:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      a0:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      a4:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      a8:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      ac:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      b0:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      b4:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      b8:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      bc:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      c0:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      c4:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>
      c8:	0c 94 3a 67 	jmp	0xce74	; 0xce74 <__bad_interrupt>

000000cc <FLASHPICS_battery_50>:
      cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
      dc:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
      ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
      fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     10c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     11c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     12c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     13c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     14c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     15c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     16c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     17c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     18c:	00 00 00 00 df df df df df df df df df df df df     ................
     19c:	df df df df df df df df df df df 00 00 00 00 00     ................
     1ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     1bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000001cc <FLASHPICS_battery_49>:
     1cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fa fa fa     ................
     1dc:	fa fa fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     1ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     1fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     20c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     21c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     22c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     23c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     24c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     25c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     26c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     27c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     28c:	00 00 00 00 df df df df df df df df df df df df     ................
     29c:	df df df df df df df df df df df 00 00 00 00 00     ................
     2ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000002cc <FLASHPICS_battery_48>:
     2cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc f6 f2 f2 f2     ................
     2dc:	f2 f2 f6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     2ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     2fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     30c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     31c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     32c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     33c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     34c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     35c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     36c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     37c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     38c:	00 00 00 00 df df df df df df df df df df df df     ................
     39c:	df df df df df df df df df df df 00 00 00 00 00     ................
     3ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     3bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000003cc <FLASHPICS_battery_47>:
     3cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc e6 e2 e2 e2     ................
     3dc:	e2 e2 e6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     3ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     3fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     40c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     41c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     42c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     43c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     44c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     45c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     46c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     47c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     48c:	00 00 00 00 df df df df df df df df df df df df     ................
     49c:	df df df df df df df df df df df 00 00 00 00 00     ................
     4ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     4bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000004cc <FLASHPICS_battery_46>:
     4cc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc c6 c2 c2 c2     ................
     4dc:	c2 c2 c6 fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
     4ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     4fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     50c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     51c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     52c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     53c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     54c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     55c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     56c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     57c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     58c:	00 00 00 00 df df df df df df df df df df df df     ................
     59c:	df df df df df df df df df df df 00 00 00 00 00     ................
     5ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     5bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000005cc <FLASHPICS_battery_45>:
     5cc:	00 00 00 00 c0 e0 a0 a0 a0 a0 a0 bc 86 82 82 82     ................
     5dc:	82 82 86 bc a0 a0 a0 a0 a0 e0 c0 00 00 00 00 00     ................
     5ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     5fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     60c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     61c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     62c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     63c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     64c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     65c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     66c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     67c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     68c:	00 00 00 00 df df df df df df df df df df df df     ................
     69c:	df df df df df df df df df df df 00 00 00 00 00     ................
     6ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     6bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000006cc <FLASHPICS_battery_44>:
     6cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     6dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     6ec:	00 00 00 00 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
     6fc:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00     ................
     70c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     71c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     72c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     73c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     74c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     75c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     76c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     77c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     78c:	00 00 00 00 df df df df df df df df df df df df     ................
     79c:	df df df df df df df df df df df 00 00 00 00 00     ................
     7ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     7bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000007cc <FLASHPICS_battery_43>:
     7cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     7dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     7ec:	00 00 00 00 f7 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     7fc:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f7 00 00 00 00 00     ................
     80c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     81c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     82c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     83c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     84c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     85c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     86c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     87c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     88c:	00 00 00 00 df df df df df df df df df df df df     ................
     89c:	df df df df df df df df df df df 00 00 00 00 00     ................
     8ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     8bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000008cc <FLASHPICS_battery_42>:
     8cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     8dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     8ec:	00 00 00 00 f7 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4     ................
     8fc:	f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f7 00 00 00 00 00     ................
     90c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     91c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     92c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     93c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     94c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     95c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     96c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     97c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     98c:	00 00 00 00 df df df df df df df df df df df df     ................
     99c:	df df df df df df df df df df df 00 00 00 00 00     ................
     9ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     9bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000009cc <FLASHPICS_battery_41>:
     9cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     9dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     9ec:	00 00 00 00 ff f0 f8 f0 f8 f0 f8 f0 f8 f0 f8 f0     ................
     9fc:	f8 f0 f8 f0 f8 f0 f8 f0 f8 f0 ff 00 00 00 00 00     ................
     a0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     a1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     a2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     a3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     a8c:	00 00 00 00 df df df df df df df df df df df df     ................
     a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000acc <FLASHPICS_battery_40>:
     acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     aec:	00 00 00 00 ff e0 e8 e0 e8 e0 e8 e0 e8 e0 e8 e0     ................
     afc:	e8 e0 e8 e0 e8 e0 e8 e0 e8 e0 ff 00 00 00 00 00     ................
     b0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     b1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     b2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     b3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     b8c:	00 00 00 00 df df df df df df df df df df df df     ................
     b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000bcc <FLASHPICS_battery_39>:
     bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     bec:	00 00 00 00 ff c0 c8 c0 c8 c0 c8 c0 c8 c0 c8 c0     ................
     bfc:	c8 c0 c8 c0 c8 c0 c8 c0 c8 c0 ff 00 00 00 00 00     ................
     c0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     c1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     c2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     c3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     c4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     c5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     c8c:	00 00 00 00 df df df df df df df df df df df df     ................
     c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ccc <FLASHPICS_battery_38>:
     ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     cec:	00 00 00 00 ff 80 88 80 88 80 88 80 88 80 88 80     ................
     cfc:	88 80 88 80 88 80 88 80 88 80 ff 00 00 00 00 00     ................
     d0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     d1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     d2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     d3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     d4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     d5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     d8c:	00 00 00 00 df df df df df df df df df df df df     ................
     d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000dcc <FLASHPICS_battery_37>:
     dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     e0c:	00 00 00 00 fb fb fb fb fb fb fb fb fb fb fb fb     ................
     e1c:	fb fb fb fb fb fb fb fb fb fb fb 00 00 00 00 00     ................
     e2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     e3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     e4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     e5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     e8c:	00 00 00 00 df df df df df df df df df df df df     ................
     e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000ecc <FLASHPICS_battery_36>:
     ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
     f0c:	00 00 00 00 fb fa fa fa fa fa fa fa fa fa fa fa     ................
     f1c:	fa fa fa fa fa fa fa fa fa fa fb 00 00 00 00 00     ................
     f2c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
     f3c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
     f4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
     f5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
     f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
     f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
     f8c:	00 00 00 00 df df df df df df df df df df df df     ................
     f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
     fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00000fcc <FLASHPICS_battery_35>:
     fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
     fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
     fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
     ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    100c:	00 00 00 00 ff f8 fc f8 fc f8 fc f8 fc f8 fc f8     ................
    101c:	fc f8 fc f8 fc f8 fc f8 fc f8 ff 00 00 00 00 00     ................
    102c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    103c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    104c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    105c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    106c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    107c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    108c:	00 00 00 00 df df df df df df df df df df df df     ................
    109c:	df df df df df df df df df df df 00 00 00 00 00     ................
    10ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    10bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000010cc <FLASHPICS_battery_34>:
    10cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    10dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    10ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    10fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    110c:	00 00 00 00 ff f0 f4 f0 f4 f0 f4 f0 f4 f0 f4 f0     ................
    111c:	f4 f0 f4 f0 f4 f0 f4 f0 f4 f0 ff 00 00 00 00 00     ................
    112c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    113c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    114c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    115c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    116c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    117c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    118c:	00 00 00 00 df df df df df df df df df df df df     ................
    119c:	df df df df df df df df df df df 00 00 00 00 00     ................
    11ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    11bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000011cc <FLASHPICS_battery_33>:
    11cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    11dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    11ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    11fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    120c:	00 00 00 00 ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    121c:	e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00     ................
    122c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    123c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    124c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    125c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    126c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    127c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    128c:	00 00 00 00 df df df df df df df df df df df df     ................
    129c:	df df df df df df df df df df df 00 00 00 00 00     ................
    12ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    12bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000012cc <FLASHPICS_battery_32>:
    12cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    12dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    12ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    12fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    130c:	00 00 00 00 ff c0 c4 c0 c4 c0 c4 c0 c4 c0 c4 c0     ................
    131c:	c4 c0 c4 c0 c4 c0 c4 c0 c4 c0 ff 00 00 00 00 00     ................
    132c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    133c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    134c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    135c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    136c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    137c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    138c:	00 00 00 00 df df df df df df df df df df df df     ................
    139c:	df df df df df df df df df df df 00 00 00 00 00     ................
    13ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    13bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000013cc <FLASHPICS_battery_31>:
    13cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    13dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    13ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    13fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    140c:	00 00 00 00 ff 80 84 80 84 80 84 80 84 80 84 80     ................
    141c:	84 80 84 80 84 80 84 80 84 80 ff 00 00 00 00 00     ................
    142c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    143c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    144c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    145c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    146c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    147c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    148c:	00 00 00 00 df df df df df df df df df df df df     ................
    149c:	df df df df df df df df df df df 00 00 00 00 00     ................
    14ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    14bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000014cc <FLASHPICS_battery_30>:
    14cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    14dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    14ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    14fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    150c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    151c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    152c:	00 00 00 00 fd fd fd fd fd fd fd fd fd fd fd fd     ................
    153c:	fd fd fd fd fd fd fd fd fd fd fd 00 00 00 00 00     ................
    154c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    155c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    156c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    157c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    158c:	00 00 00 00 df df df df df df df df df df df df     ................
    159c:	df df df df df df df df df df df 00 00 00 00 00     ................
    15ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    15bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000015cc <FLASHPICS_battery_29>:
    15cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    15dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    15ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    15fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    160c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    161c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    162c:	00 00 00 00 ff fc fe fc fe fc fe fc fe fc fe fc     ................
    163c:	fe fc fe fc fe fc fe fc fe fc ff 00 00 00 00 00     ................
    164c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    165c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    166c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    167c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    168c:	00 00 00 00 df df df df df df df df df df df df     ................
    169c:	df df df df df df df df df df df 00 00 00 00 00     ................
    16ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    16bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000016cc <FLASHPICS_battery_28>:
    16cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    16dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    16ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    16fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    170c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    171c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    172c:	00 00 00 00 ff f8 fa f8 fa f8 fa f8 fa f8 fa f8     ................
    173c:	fa f8 fa f8 fa f8 fa f8 fa f8 ff 00 00 00 00 00     ................
    174c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    175c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    176c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    177c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    178c:	00 00 00 00 df df df df df df df df df df df df     ................
    179c:	df df df df df df df df df df df 00 00 00 00 00     ................
    17ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    17bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000017cc <FLASHPICS_battery_27>:
    17cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    17dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    17ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    17fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    180c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    181c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    182c:	00 00 00 00 ff f0 f2 f0 f2 f0 f2 f0 f2 f0 f2 f0     ................
    183c:	f2 f0 f2 f0 f2 f0 f2 f0 f2 f0 ff 00 00 00 00 00     ................
    184c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    185c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    186c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    187c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    188c:	00 00 00 00 df df df df df df df df df df df df     ................
    189c:	df df df df df df df df df df df 00 00 00 00 00     ................
    18ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    18bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000018cc <FLASHPICS_battery_26>:
    18cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    18dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    18ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    18fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    190c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    191c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    192c:	00 00 00 00 ff e0 e2 e0 e2 e0 e2 e0 e2 e0 e2 e0     ................
    193c:	e2 e0 e2 e0 e2 e0 e2 e0 e2 e0 ff 00 00 00 00 00     ................
    194c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    195c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    196c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    197c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    198c:	00 00 00 00 df df df df df df df df df df df df     ................
    199c:	df df df df df df df df df df df 00 00 00 00 00     ................
    19ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    19bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000019cc <FLASHPICS_battery_25>:
    19cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    19dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    19ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    19fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1a2c:	00 00 00 00 ff c0 c2 c0 c2 c0 c2 c0 c2 c0 c2 c0     ................
    1a3c:	c2 c0 c2 c0 c2 c0 c2 c0 c2 c0 ff 00 00 00 00 00     ................
    1a4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1a5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1a6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1a7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1a8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1a9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001acc <FLASHPICS_battery_24>:
    1acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1b2c:	00 00 00 00 ff 80 82 80 82 80 82 80 82 80 82 80     ................
    1b3c:	82 80 82 80 82 80 82 80 82 80 ff 00 00 00 00 00     ................
    1b4c:	00 00 00 00 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ....~~~~~~~~~~~~
    1b5c:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00     ~~~~~~~~~~~.....
    1b6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1b7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1b8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1b9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001bcc <FLASHPICS_battery_23>:
    1bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1c4c:	00 00 00 00 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 7e     .....~.~.~.~.~.~
    1c5c:	7f 7e 7f 7e 7f 7e 7f 7e 7f 7e 7f 00 00 00 00 00     .~.~.~.~.~......
    1c6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1c7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1c8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1c9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ccc <FLASHPICS_battery_22>:
    1ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1d4c:	00 00 00 00 7f 7c 7d 7c 7d 7c 7d 7c 7d 7c 7d 7c     .....|}|}|}|}|}|
    1d5c:	7d 7c 7d 7c 7d 7c 7d 7c 7d 7c 7f 00 00 00 00 00     }|}|}|}|}|......
    1d6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1d7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1d8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1d9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001dcc <FLASHPICS_battery_21>:
    1dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1e4c:	00 00 00 00 7f 78 79 78 79 78 79 78 79 78 79 78     .....xyxyxyxyxyx
    1e5c:	79 78 79 78 79 78 79 78 79 78 7f 00 00 00 00 00     yxyxyxyxyx......
    1e6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1e7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1e8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1e9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001ecc <FLASHPICS_battery_20>:
    1ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    1f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    1f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    1f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    1f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    1f4c:	00 00 00 00 7f 70 71 70 71 70 71 70 71 70 71 70     .....pqpqpqpqpqp
    1f5c:	71 70 71 70 71 70 71 70 71 70 7f 00 00 00 00 00     qpqpqpqpqp......
    1f6c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    1f7c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    1f8c:	00 00 00 00 df df df df df df df df df df df df     ................
    1f9c:	df df df df df df df df df df df 00 00 00 00 00     ................
    1fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    1fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00001fcc <FLASHPICS_battery_19>:
    1fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    1fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    1fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    1ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    200c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    201c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    202c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    203c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    204c:	00 00 00 00 7f 60 61 60 61 60 61 60 61 60 61 60     .....`a`a`a`a`a`
    205c:	61 60 61 60 61 60 61 60 61 60 7f 00 00 00 00 00     a`a`a`a`a`......
    206c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    207c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    208c:	00 00 00 00 df df df df df df df df df df df df     ................
    209c:	df df df df df df df df df df df 00 00 00 00 00     ................
    20ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    20bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000020cc <FLASHPICS_battery_18>:
    20cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    20dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    20ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    20fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    210c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    211c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    212c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    213c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    214c:	00 00 00 00 7f 40 41 40 41 40 41 40 41 40 41 40     .....@A@A@A@A@A@
    215c:	41 40 41 40 41 40 41 40 41 40 7f 00 00 00 00 00     A@A@A@A@A@......
    216c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    217c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    218c:	00 00 00 00 df df df df df df df df df df df df     ................
    219c:	df df df df df df df df df df df 00 00 00 00 00     ................
    21ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    21bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000021cc <FLASHPICS_battery_17>:
    21cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    21dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    21ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    21fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    220c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    221c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    222c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    223c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    224c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    225c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    226c:	00 00 00 00 bf bf bf bf bf bf bf bf bf bf bf bf     ................
    227c:	bf bf bf bf bf bf bf bf bf bf bf 00 00 00 00 00     ................
    228c:	00 00 00 00 df df df df df df df df df df df df     ................
    229c:	df df df df df df df df df df df 00 00 00 00 00     ................
    22ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    22bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000022cc <FLASHPICS_battery_16>:
    22cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    22dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    22ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    22fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    230c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    231c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    232c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    233c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    234c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    235c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    236c:	00 00 00 00 bf be be be be be be be be be be be     ................
    237c:	be be be be be be be be be be bf 00 00 00 00 00     ................
    238c:	00 00 00 00 df df df df df df df df df df df df     ................
    239c:	df df df df df df df df df df df 00 00 00 00 00     ................
    23ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    23bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000023cc <FLASHPICS_battery_15>:
    23cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    23dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    23ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    23fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    240c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    241c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    242c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    243c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    244c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    245c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    246c:	00 00 00 00 bf bc bc bc bc bc bc bc bc bc bc bc     ................
    247c:	bc bc bc bc bc bc bc bc bc bc bf 00 00 00 00 00     ................
    248c:	00 00 00 00 df df df df df df df df df df df df     ................
    249c:	df df df df df df df df df df df 00 00 00 00 00     ................
    24ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    24bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000024cc <FLASHPICS_battery_14>:
    24cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    24dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    24ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    24fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    250c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    251c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    252c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    253c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    254c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    255c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    256c:	00 00 00 00 bf b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 b8     ................
    257c:	b8 b8 b8 b8 b8 b8 b8 b8 b8 b8 bf 00 00 00 00 00     ................
    258c:	00 00 00 00 df df df df df df df df df df df df     ................
    259c:	df df df df df df df df df df df 00 00 00 00 00     ................
    25ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    25bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000025cc <FLASHPICS_battery_13>:
    25cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    25dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    25ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    25fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    260c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    261c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    262c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    263c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    264c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    265c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    266c:	00 00 00 00 bf b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 b0     ................
    267c:	b0 b0 b0 b0 b0 b0 b0 b0 b0 b0 bf 00 00 00 00 00     ................
    268c:	00 00 00 00 df df df df df df df df df df df df     ................
    269c:	df df df df df df df df df df df 00 00 00 00 00     ................
    26ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    26bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000026cc <FLASHPICS_battery_12>:
    26cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    26dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    26ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    26fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    270c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    271c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    272c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    273c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    274c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    275c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    276c:	00 00 00 00 bf a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 a0     ................
    277c:	a0 a0 a0 a0 a0 a0 a0 a0 a0 a0 bf 00 00 00 00 00     ................
    278c:	00 00 00 00 df df df df df df df df df df df df     ................
    279c:	df df df df df df df df df df df 00 00 00 00 00     ................
    27ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    27bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000027cc <FLASHPICS_battery_11>:
    27cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    27dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    27ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    27fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    280c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    281c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    282c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    283c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    284c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    285c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    286c:	00 00 00 00 ff 80 c0 80 c0 80 c0 80 c0 80 c0 80     ................
    287c:	c0 80 c0 80 c0 80 c0 80 c0 80 ff 00 00 00 00 00     ................
    288c:	00 00 00 00 df df df df df df df df df df df df     ................
    289c:	df df df df df df df df df df df 00 00 00 00 00     ................
    28ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    28bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000028cc <FLASHPICS_battery_10>:
    28cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    28dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    28ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    28fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    290c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    291c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    292c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    293c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    294c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    295c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    296c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    297c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    298c:	00 00 00 00 df df df df df df df df df df df df     ................
    299c:	df df df df df df df df df df df 00 00 00 00 00     ................
    29ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    29bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000029cc <FLASHPICS_battery_9>:
    29cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    29dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    29ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    29fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2a0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2a1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2a2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2a3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2a4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2a5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2a6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2a7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2a8c:	00 00 00 00 df de de de de de de de de de de de     ................
    2a9c:	de de de de de de de de de de df 00 00 00 00 00     ................
    2aac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2abc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002acc <FLASHPICS_battery_8>:
    2acc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2adc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2aec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2afc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2b0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2b1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2b2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2b3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2b4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2b5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2b6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2b7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2b8c:	00 00 00 00 df dc dc dc dc dc dc dc dc dc dc dc     ................
    2b9c:	dc dc dc dc dc dc dc dc dc dc df 00 00 00 00 00     ................
    2bac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2bbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002bcc <FLASHPICS_battery_7>:
    2bcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2bdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2bec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2bfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2c0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2c1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2c2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2c3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2c4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2c5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2c6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2c7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2c8c:	00 00 00 00 df d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 d8     ................
    2c9c:	d8 d8 d8 d8 d8 d8 d8 d8 d8 d8 df 00 00 00 00 00     ................
    2cac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2cbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ccc <FLASHPICS_battery_6>:
    2ccc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2cdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2cec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2cfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2d0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2d1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2d2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2d3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2d4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2d5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2d6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2d7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2d8c:	00 00 00 00 df d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2d9c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 df 00 00 00 00 00     ................
    2dac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2dbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002dcc <FLASHPICS_battery_5>:
    2dcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2ddc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2dec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2dfc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2e0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2e1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2e2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2e3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2e4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2e5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2e6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2e7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2e8c:	00 00 00 00 ff c0 e0 c0 e0 c0 e0 c0 e0 c0 e0 c0     ................
    2e9c:	e0 c0 e0 c0 e0 c0 e0 c0 e0 c0 ff 00 00 00 00 00     ................
    2eac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2ebc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002ecc <FLASHPICS_battery_4>:
    2ecc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2edc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2eec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2efc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    2f0c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    2f1c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    2f2c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    2f3c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    2f4c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    2f5c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    2f6c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    2f7c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    2f8c:	00 00 00 00 ff 80 a0 80 a0 80 a0 80 a0 80 a0 80     ................
    2f9c:	a0 80 a0 80 a0 80 a0 80 a0 80 ff 00 00 00 00 00     ................
    2fac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    2fbc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00002fcc <FLASHPICS_battery_3>:
    2fcc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    2fdc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    2fec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    2ffc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    300c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    301c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    302c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    303c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    304c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    305c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    306c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    307c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    308c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    309c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    30ac:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    30bc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

000030cc <FLASHPICS_battery_2>:
    30cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    30dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    30ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    30fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    310c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    311c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    312c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    313c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    314c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    315c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    316c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    317c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    318c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    319c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    31ac:	00 00 00 00 07 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    31bc:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 07 00 00 00 00 00     ................

000031cc <FLASHPICS_battery_1>:
    31cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    31dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    31ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    31fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    320c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    321c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    322c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    323c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    324c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    325c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    326c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    327c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    328c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    329c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    32ac:	00 00 00 00 07 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    32bc:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 07 00 00 00 00 00     ................

000032cc <FLASHPICS_battery_0>:
    32cc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    32dc:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
    32ec:	00 00 00 00 ff 00 08 00 08 00 08 00 08 00 08 00     ................
    32fc:	08 00 08 00 08 00 08 00 08 00 ff 00 00 00 00 00     ................
    330c:	00 00 00 00 ff 00 04 00 04 00 04 00 04 00 04 00     ................
    331c:	04 00 04 00 04 00 04 00 04 00 ff 00 00 00 00 00     ................
    332c:	00 00 00 00 ff 00 02 00 02 00 02 00 02 00 02 00     ................
    333c:	02 00 02 00 02 00 02 00 02 00 ff 00 00 00 00 00     ................
    334c:	00 00 00 00 ff 00 81 00 81 00 81 00 81 00 81 00     ................
    335c:	81 00 81 00 81 00 81 00 81 00 ff 00 00 00 00 00     ................
    336c:	00 00 00 00 ff 00 40 00 40 00 40 00 40 00 40 00     ......@.@.@.@.@.
    337c:	40 00 40 00 40 00 40 00 40 00 ff 00 00 00 00 00     @.@.@.@.@.......
    338c:	00 00 00 00 ff 00 20 00 20 00 20 00 20 00 20 00     ...... . . . . .
    339c:	20 00 20 00 20 00 20 00 20 00 ff 00 00 00 00 00      . . . . .......
    33ac:	00 00 00 00 07 0c 08 08 08 08 08 08 08 08 08 08     ................
    33bc:	08 08 08 08 08 08 08 08 08 0c 07 00 00 00 00 00     ................

000033cc <FLASHPICS_db101pcb>:
	...
    3464:	00 00 00 30 18 0c 06 42 84 84 04 00 00 00 00 00     ...0...B........
	...
    3628:	80 c0 60 30 18 88 c0 e0 f0 f8 fc fc fc fc fe ff     ..`0............
    3638:	ff ff ff ff fe fe fe fc fc fc fc f8 f8 f8 f0 f0     ................
    3648:	f0 f0 f0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    37dc:	00 00 00 80 c0 f0 f0 b8 0c 06 02 03 03 81 c1 f9     ................
    37ec:	81 01 01 03 03 ec fe ff f9 fc fe fe ff ff ff ff     ................
    37fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    380c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    381c:	ff ff ff ff ff ff fe fe fc fc fc fc f8 f8 f8 f0     ................
    382c:	f0 f0 e0 e0 c0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    39a0:	00 00 80 c0 e0 60 70 f8 fc 7e 3e 9f 9f 9f 3f 3f     .....`p..~>...??
    39b0:	7e 7c fc f8 f8 f8 f8 f8 f8 f8 fc fe ff ff ff ff     ~|..............
    39c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    39f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3a00:	ff ff ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0     ................
    3a10:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
	...
    3b64:	80 c0 e0 f0 f0 38 1c 1e 3f ff cf 8f 80 00 98 9c     .....8..?.......
    3b74:	4f 7e 3f 1f 9f f8 fc f8 f8 fc fc fe ff ff ff ff     O~?.............
    3b84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3be4:	ff ff ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0     ................
    3bf4:	e0 c0 c0 c0 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    3d28:	80 c0 e0 f0 f8 fc de 0f 07 cf ff ff f3 e0 20 60     .............. `
    3d38:	e7 f7 9f bf 8f c5 ef f7 ff fe fe fe ff ff ff ff     ................
    3d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dc8:	ff ff fe fe fe fc fc fc f8 f8 f0 f0 f0 e0 e0 e0     ................
    3dd8:	c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3eec:	80 c0 e0 f0 f8 fc fe 7f 03 83 e3 f7 3f 7f f8 f8     ............?...
    3efc:	f8 ff ff fe ff e3 f3 f3 fb ff ff ff ff ff ff ff     ................
    3f0c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f1c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f2c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f3c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3fac:	fe fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0     ................
    3fbc:	c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    40ac:	00 00 00 80 80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 0f     ............?...
    40bc:	ef 4f 1e fe f4 70 68 48 cf ff ff f1 fd fc ff ff     .O...phH........
    40cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    40fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    410c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    411c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    412c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    413c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    414c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    416c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    417c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    418c:	ff ff ff fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0     ................
    419c:	e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    4270:	00 00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff 87 87     ................
    4280:	87 87 b7 b7 cf 7e 3e 9e 9e fe ff fd f8 fe ff ff     .....~>.........
    4290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    42f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4370:	ff fe fe fe fc fc fc f8 f8 f8 f0 f0 e0 e0 e0 c0     ................
    4380:	c0 c0 80 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4434:	00 00 00 80 c0 e0 f0 78 7c fe ff ff ff ff ff e3     .......x|.......
    4444:	c3 c1 c1 c1 e9 e3 bf 1f 2f 29 2d 3f 3f be fe ff     ......../)-??...
    4454:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4464:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4474:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4484:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4494:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    44f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4504:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4514:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4524:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4534:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4544:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4554:	fe fe fc fc fc f8 f8 f8 f0 f0 f0 e0 e0 c0 c0 c0     ................
    4564:	80 80 80 00 00 00 00 00 00 00 00 00 00 80 80 80     ................
	...
    45f8:	00 00 00 80 c0 e0 f0 f8 fc fe ff 6f 07 87 e0 f2     ...........o....
    4608:	f2 fb e5 ee 69 61 dd cd ef 87 c7 f6 fe fe ff fb     ....ia..........
    4618:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4628:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4638:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4648:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4658:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4668:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4678:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4688:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4698:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    46f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4708:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4718:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4728:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe     ................
    4738:	fe fc fc f8 f8 f8 f1 f1 f3 e3 e3 e6 c6 46 4c 0c     .............FL.
    4748:	0c 18 98 f8 f0 f0 60 00 00 00 00 00 00 00 00 00     ......`.........
	...
    47bc:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 7f 03 61 f3     ..............a.
    47cc:	77 ff fc fc e0 e9 fd 7f ff ff c7 81 f9 ff ff ff     w...............
    47dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    47fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    480c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    481c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    482c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    483c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    484c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    485c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    486c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    487c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    488c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    489c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    48fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    490c:	ff ff ff ff 18 00 00 00 04 07 07 01 81 61 3e 00     .............a>.
	...
    4980:	00 00 80 c0 e0 f0 f8 7c 7c 7e ff ff 9f 7f 31 38     .......||~....18
    4990:	78 bd ff ff fe f2 7e 3e 1f 7f 7f 3f 0f 09 18 18     x.....~>...?....
    49a0:	1c 1f 3f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff     ..???...........
    49b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    49f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ad0:	ff ff ff ff ff ff ff ff 3f 9f c7 83 81 80 40 20     ........?.....@ 
    4ae0:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4b44:	00 00 80 c0 e0 f0 f8 fc 3e 3f 3f 7f ff df 97 90     ........>??.....
    4b54:	9c 9c de cf ff 7f 3b fb ff ff ff 1f 1f 06 60 70     ......;.......`p
    4b64:	78 f8 f0 f0 60 60 60 c0 c0 40 00 00 00 00 00 00     x...```..@......
    4b74:	00 00 00 01 01 03 03 03 07 07 07 0f 0f 1f 1f 1f     ................
    4b84:	3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     ??..............
    4b94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ba4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bb4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bc4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bd4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4be4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4bf4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c04:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c14:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c34:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c44:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff bf bf ff     ................
    4ca4:	ff ff ff ff ff ff ff fe fe fe fc fc fc f8 e8 f0     ................
    4cb4:	f8 f0 f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00     ................
	...
    4d08:	00 00 80 c0 e0 f0 f8 fc fe 1f 0f 9f ff ff e7 cb     ................
    4d18:	48 cc de ef ff ff bf 8f c4 2f 0f 8f ce 5e 7f ff     H......../...^..
    4d28:	ff ff ff fc f8 f8 fc fe fc fc fc c8 80 80 80 90     ................
    4d38:	e0 e0 f0 e2 fc fc fc f8 f8 18 10 f0 e0 e0 e0 c0     ................
    4d48:	c0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d58:	01 01 83 43 03 07 07 07 0f 0f 1f 1f 1f 3f 3f 3f     ...C.........???
    4d68:	7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d78:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4d98:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4da8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4db8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4dd8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4df8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e28:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e38:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4e68:	ff ff ff ff 9f 9f 97 81 07 ff ff ff ff 7f ff ff     ................
    4e78:	ff fb 7d 7e 7f 3f 3f 1f 1f 1f 1f cf 4f 0f 0f 8f     ..}~.??.....O...
    4e88:	1f 1f 17 3f 3f 3f 7f 7e fe fe fc fc f8 f8 f8 f0     ...???.~........
    4e98:	f0 f0 e0 e0 e0 c0 c0 80 80 80 00 00 00 00 00 00     ................
	...
    4ecc:	00 00 80 c0 e0 f0 f8 fc fe ff ff ff ff ff f7 f7     ................
    4edc:	f5 e6 c6 df ff ff 9d af 97 b7 97 0f 3f 5f bf 1f     ............?_..
    4eec:	bf ff fe ff fe fe 7c 1f bf 7f 7f 7f 7f ff ff ff     ......|.........
    4efc:	ff 9f ff ff ff ff ff ff ff ff ff ff 9f ff ff ff     ................
    4f0c:	ff e7 e0 f8 ff ff ff ff ff ff ff ff ff ff ff f6     ................
    4f1c:	fe fc 3c c0 80 00 80 fc e0 01 01 00 e0 f0 04 06     ..<.............
    4f2c:	03 00 e0 30 18 1c 04 00 00 60 70 30 00 01 81 83     ...0.....`p0....
    4f3c:	c3 03 07 07 07 0f 8f 1f 1f 1f 3f 3f 7f 7f 7f ff     ..........??....
    4f4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4f9c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fbc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fdc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4fec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    4ffc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    500c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    501c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    502c:	ff ff ff ff 7f 1f 9f ff ff ff ff ff ff ff ff ff     ................
    503c:	ff ff f7 ff ff ff ff fd f8 f8 f0 70 72 61 e0 e8     ...........pra..
    504c:	cc c2 81 90 88 04 03 20 10 0c 82 60 30 08 00 c0     ....... ...`0...
    505c:	20 1c 08 01 01 01 03 83 43 27 07 0f 8f 8f 9f 9f      .......C'......
    506c:	9f df ff df ff fe fe fe fc fc f8 f8 78 70 f0 f0     ............xp..
    507c:	e0 e0 e0 c0 c0 c0 80 80 00 00 00 00 00 00 00 00     ................
    508c:	00 00 00 00 00 00 80 c0 e0 f0 f8 7c 3e 1f 8f c7     ...........|>...
    509c:	07 07 07 07 07 07 07 07 07 0f 1f 7f ff ff ff ff     ................
    50ac:	9f 2f 3f 3f 71 65 27 a9 8c c0 66 37 67 6f 6f df     ./??qe'...f7goo.
    50bc:	df cd b1 ba 3a 76 7d fc f8 f8 f0 f1 f1 e1 eb ef     ....:v}.........
    50cc:	cf df 9f bf af 6f 7f ff ff ff ff ff ff ff ff ff     .....o..........
    50dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7e     ...............~
    50ec:	7c 00 ff f9 fb f3 00 ff f3 e3 e4 00 c8 df 9f 30     |..............0
    50fc:	00 20 f0 ff f8 e0 00 c0 fc fc 01 01 00 c0 f8 04     . ..............
    510c:	06 07 00 e0 f0 18 1c 0e 02 c0 e0 e0 b8 19 01 11     ................
    511c:	83 c3 67 07 07 0f 0f 1f 1f 1f 3f 3f 3f 7f 7f ff     ..g.......???...
    512c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    513c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    514c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    515c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    516c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    517c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    518c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    519c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    51ec:	ff ff ff ff ff ff ff ff ff ff ff ff ef c7 c1 c0     ................
    51fc:	c0 f8 ff ff 7f bf ff ff 7e 7f 3f 3f 1f 1f 0f 07     ........~.??....
    520c:	07 03 03 41 c1 e0 f0 30 00 00 00 00 01 f1 ff ff     ...A...0........
    521c:	07 03 07 07 06 0e fc bc bc b8 f9 f8 f0 f0 e0 e0     ................
    522c:	e0 c4 c2 c0 e0 e0 e4 97 6f 77 b7 d5 25 a7 87 6f     ........ow..%..o
    523c:	1f f7 83 01 00 00 00 02 02 3e 7e 7e fc fc 79 33     .........>~~..y3
    524c:	07 ff ff ff ff ff 7f 3e 0e 00 00 00 00 00 00 00     .......>........
    525c:	00 01 1e 3f 3f ff ff fe f8 f0 e3 e7 e0 e0 e0 e0     ...??...........
    526c:	e0 e0 e0 f0 d0 d8 94 87 8d 98 3a b0 d5 e5 61 7b     ..........:...a{
    527c:	38 be bf 7f f9 f8 f2 f0 e1 f3 7a bc de 6f 77 fb     8.........z..ow.
    528c:	cd b6 be 3f 3f 9f df 7f bf df ef 77 77 6f 6f ef     ...??......wwoo.
    529c:	df df 8d b3 ba 7a 75 fd ff fb fb f3 f7 f7 ef ef     .....zu.........
    52ac:	df df df bf bf 7f 7f 7f ff ff cf c7 c7 c0 db ff     ................
    52bc:	ff 1f 0e bf ff ff 7f 00 0f ff ff ff ff 00 ff ff     ................
    52cc:	fe fe 00 ff ff ff ff e0 7e ff ff fc c0 18 fe ff     ........~.......
    52dc:	f8 80 00 e0 ff fe e0 20 c1 f0 fe c3 03 01 80 f0     ....... ........
    52ec:	a0 0e 06 03 80 c0 30 38 1c 00 00 80 c0 60 21 01     ......08.....`!.
    52fc:	03 03 83 87 07 0f 0f 0f 1f 1f 3f 3f 3f 7f 7f 7f     ..........???...
    530c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    531c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    532c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    533c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    534c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    535c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    536c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    537c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    538c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    539c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    53bc:	ff ff 7f 3f 9d c9 f3 fb ff fd ff df ff ff 7f 1e     ...?............
    53cc:	97 9f 3f 3e 7c fc fc f8 fc fc fe fe fc fc fc f8     ..?>|...........
    53dc:	f8 f0 f1 80 00 00 00 00 c0 ff ff 01 00 00 00 00     ................
    53ec:	00 10 0f 0f 07 07 03 83 81 c1 c0 60 60 30 30 19     ...........``00.
    53fc:	19 0f 0f 07 07 06 86 8d 0c 0c 1e 1e 3f 3f 7f ff     ............??..
    540c:	7e be bc dc 1c 9c 3c 3c 7c fe fe ff ff ff 7f 3f     ~.....<<|......?
    541c:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    542c:	00 00 00 01 03 27 07 0f 4f 1f 9f 9f 3f 3f 3f 7f     .....'..O...???.
    543c:	7f ff ff ff f9 fa f2 f7 e7 ef e8 c8 d8 98 b9 bd     ................
    544c:	9e ef f7 fb ed ce db d7 c6 cc db 7b bb db ec 77     ...........{...w
    545c:	7b bd fe 3f 7b f9 f0 f0 f0 e3 f6 7a bc df ef f7     {..?{......z....
    546c:	f3 cd 8e 3f 79 79 72 96 74 a5 d1 ef 77 77 6f ef     ...?yyr.t...wwo.
    547c:	df df df ad b2 3a 76 75 fd f9 fb fb f7 f7 e3 ed     .....:vu........
    548c:	ef de dc dc bf bf 7f 73 71 f0 ff ff cf c7 c3 d0     .......sq.......
    549c:	ff ff 1f 1f 00 7f ff ff 7f 00 ff ff ff ff 80 ff     ................
    54ac:	ff ff ff f8 3f ff ff ff fc 1e fe ff ff fc 00 f8     ....?...........
    54bc:	ff ff f0 08 e0 f8 ff f1 00 80 e0 fc fc 03 03 01     ................
    54cc:	80 f0 18 0c 06 00 c0 e0 70 38 18 00 00 80 c1 e1     ........p8......
    54dc:	01 03 03 07 87 87 0f 0f 1f 1f 1f 3f 3f 7f 7f 7f     ...........??...
    54ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    54fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    550c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    551c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    552c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    553c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    554c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    555c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    556c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    557c:	ff ff ff ff ff ff ff ff df ff fe fc fd fc fe 7f     ................
    558c:	ff fc f7 fb ff ff c7 c3 d1 9c 9e 9f cf cf e7 e0     ................
    559c:	f8 7f 3f 1f 87 c3 91 b9 39 33 93 c7 ef ff ff ff     ..?.....93......
    55ac:	ff fb 7f 7b 7f 7f ef e0 a0 b0 f0 f8 f8 fc ec e6     ...{............
    55bc:	e6 c3 c3 81 41 c0 e0 e0 f0 f0 f8 10 00 00 00 01     ....A...........
    55cc:	03 c3 e3 c3 c3 c0 c0 a0 e0 e0 f0 f8 fc fb f1 f4     ................
    55dc:	f6 f0 f4 f2 79 38 0f 07 03 00 00 00 00 00 00 00     ....y8..........
	...
    5604:	00 01 01 02 02 00 04 04 09 09 03 13 13 27 27 ef     .............''.
    5614:	4f 4f df 9f 9f 3f 3f 7f 7f ff ff ff fb f9 f2 f7     OO...??.........
    5624:	f7 e7 ed c8 d8 d8 99 b9 bc 9f cf f7 fb dd de df     ................
    5634:	d7 cd cd 99 7b 33 93 cb 65 73 7d fe 7f 7b f9 f0     ....{3..es}..{..
    5644:	f0 e0 e7 f6 78 3c 9f cf 67 db bd ae 2f 0f 5f df     ....x<..g.../._.
    5654:	9f 7f 3f 9f cf 67 67 67 ef db df 9f 8b a2 32 75     ..?..ggg......2u
    5664:	75 bd fb fb f7 f7 f7 ef ef cf df dc bc bc bc 7f     u...............
    5674:	73 71 f0 f3 ff ff cf c7 d0 df ff 3f 1f 00 7f ff     sq.........?....
    5684:	ff ff 60 e7 ff ff ff fe 1f ff ff ff fc 00 ff ff     ..`.............
    5694:	f7 f2 f0 fe ff ff f8 88 f8 f4 ff ff 78 88 e0 fc     ............x...
    56a4:	ff e1 00 80 e0 f8 c4 07 03 00 c0 f0 18 1c 0e 00     ................
    56b4:	80 c0 70 30 18 00 00 81 c1 e3 03 03 07 07 0f 0f     ..p0............
    56c4:	0f 1f 1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ...???..........
    56d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5704:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5714:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5724:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5734:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5744:	ff ff 7f ff ff ff ff ff fc ff fe ff ff bf ff e7     ................
    5754:	e7 cd fe ff ff ef df db c5 f9 bb 9f cf d7 d7 c7     ................
    5764:	ff ff ff 7f be bc fc f9 f9 fb f3 fb f9 fc fe ff     ................
    5774:	ff df 9f 9f 0f 07 e2 f8 fc fe ff ff ff 3f 1f 8f     .............?..
    5784:	c7 e7 f7 f3 77 07 0f ff ff ff ff ff ff 7f 7e 7c     ....w.........~|
    5794:	7c fc f8 f8 fc ff ff ff ff ff ff ff ff ff ff ff     |...............
    57a4:	ff ff 7f 3f 0f 07 01 00 00 00 00 00 00 00 00 00     ...?............
	...
    57dc:	00 00 00 01 00 00 00 00 00 01 01 02 02 02 04 04     ................
    57ec:	01 09 09 13 13 07 27 27 4f 4f 1f 9f 1f 3f 3f 7f     ......''OO...??.
    57fc:	7f 7f ff ff ff fb f9 f4 f6 e7 ef ed d8 d9 98 bb     ................
    580c:	bb 3c 9e cf e7 f3 d9 cc 96 97 8d 5d dc dc 79 b1     .<.........]..y.
    581c:	cd e5 73 79 fc 7e 7f f1 f1 e6 e2 e7 e6 f4 79 bf     ..sy.~........y.
    582c:	df ef b7 b9 ac 2e 4f 5f df bf ff 7f bf df ef 67     ......O_.......g
    583c:	ef cf df df 9f 9a 22 70 75 75 fb fb fb f7 f7 e7     ......"puu......
    584c:	eb ee cf df 9c b8 b8 79 7f 7f e3 e1 e0 f7 ff 8f     .......y........
    585c:	8f c0 df ff 7f 61 ff ff ff ff ff 7f fb ff ff ff     .....a..........
    586c:	ff e9 ff ff ff ff f0 3f ff ff ff f6 2c ff ff ff     .......?....,...
    587c:	f8 00 f0 fc ff f9 f0 00 c0 fe ff e1 c1 80 c0 f8     ................
    588c:	fc 0e 17 01 80 e0 70 58 0c 00 80 c0 e0 70 30 01     ......pX.....p0.
    589c:	01 03 83 c3 47 07 0f 0f 0f 1f 1f 1f 3f 3f 7f 7f     ....G.......??..
    58ac:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    590c:	3f ff ff ff ff ff fe ff ff ff ff ff ff f7 f3 e7     ?...............
    591c:	ff ff ff ff ff fd fc ff ff df d7 e3 bb bf 8f ef     ................
    592c:	ff ff ff ff ff fd fc fe ff ff ff ff ff ff ff ff     ................
    593c:	fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    594c:	ff f8 f8 f3 f3 fb f9 f8 fc fe ff ff 9f bf 1f 0f     ................
    595c:	46 f0 f8 fc fe ff ff ff ff ff fe ff fe ff ff ff     F...............
    596c:	ff bf cf e7 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59c4:	00 01 01 00 02 02 04 04 01 09 09 13 13 07 27 07     ..............'.
    59d4:	0f 4f 1f 9f 9f 3f 3f 7f 7f 7f ff ff ff ff ff f3     .O...??.........
    59e4:	f5 e6 ef ef cd d8 d0 98 bb 3b 5a 28 ff ef f7 db     .........;Z(....
    59f4:	ed e6 df dd 9d bc f9 71 31 9d cf e6 73 79 7e ff     .......q1...sy~.
    5a04:	f3 f1 e4 e6 ee ee f4 79 3d 9f cf a7 b3 3c 7a 7f     .......y=....<z.
    5a14:	ff 7f 3f 9f ff 5f bf df ef ef cf df 9f bf 9e 4a     ..?.._.........J
    5a24:	64 75 e5 ff fb f7 f7 f7 ef ee cf df df bf b9 3c     du.............<
    5a34:	7f 7c ff e7 e3 e3 e3 ff ff 8f 8f 87 9f ff 7f 3f     .|.............?
    5a44:	e0 ff ff ff ff ff 7f ff ff ff ff 00 ff ff ff ff     ................
    5a54:	f6 ff ff ff ff e4 30 fe ff bf fc 80 f0 fc ff ff     ......0.........
    5a64:	e1 80 c0 f0 fe 07 03 81 80 f0 f8 1e 07 03 00 e0     ................
    5a74:	f0 78 dc c4 80 80 c0 e1 71 11 03 03 07 87 c7 0f     .x......q.......
    5a84:	0f 1f 1f 1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff     ....??..........
    5a94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ab4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac4:	ff ff ff ff ff f9 bf df ff ff ff ff ff bf bf ff     ................
    5ad4:	ff ff ff ff ff ff ff fd ff df ff fb f9 e3 ff ff     ................
    5ae4:	ff ff ff ff ff df ff ef ef e1 fd cf b7 f7 f7 ff     ................
    5af4:	7f 7f 3f 3f 17 17 17 1e 1f 17 17 1f 3f 3f ff ff     ..??........??..
    5b04:	ff ff ff ff ff ff ff ff ff 03 03 07 07 07 0f 0f     ................
    5b14:	1f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5b24:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f 9f     ................
    5b34:	cf e7 e1 00 00 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    5ba4:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    5bb4:	4f 4f 8f 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     OO...???........
    5bc4:	f7 f3 ec ee cf df d0 92 b0 b3 73 72 78 3f df ed     ..........srx?..
    5bd4:	d7 8d af ae 09 59 d8 99 f3 63 3b 9b ce e6 f3 fd     .....Y...c;.....
    5be4:	fe f7 f3 ed ec ce ce ed f1 fb 7f bf cf e6 72 78     ..............rx
    5bf4:	7d ff ff f7 7f ff ff 7f bf df df df 9f bf be 3e     }..............>
    5c04:	1e 55 e5 eb eb fb 77 f7 e7 ef ee de df 9e bf b9     .U....w.........
    5c14:	79 78 7a fb ff e7 c7 e3 ef ff bf 1f 8f af bf ff     yxz.............
    5c24:	7f 7f 38 ff ff ff ff f4 ff ff ff ff ff 03 ff ff     ..8.............
    5c34:	ff ff f4 ff ff ff ff fc 22 fe ff ff fc 00 c0 f0     ........".......
    5c44:	ff ff 83 03 83 e2 fe de 8f 0f 0d c0 f0 38 3c 3e     .............8<>
    5c54:	72 70 e0 e0 00 00 01 01 03 03 03 07 07 0f 0f 1f     rp..............
    5c64:	1f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff ff ff ff     ..??............
    5c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c84:	ff ff ff ff ff ff ff ff ff 3f 7f ff ff ff ff ff     .........?......
    5c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ef     ................
    5ca4:	ff fd fc f9 3f ff ff ff ff ff ff ff ff ff f7 f3     ....?...........
    5cb4:	e1 f3 cb d7 cb e3 ff ff ff ff e3 81 00 00 00 00     ................
    5cc4:	00 00 00 00 00 00 f0 f8 3f 3b f9 ff ff ff ff ff     ........?;......
    5cd4:	ff ff ff ff ff fe 78 e0 00 00 00 00 00 00 00 03     ......x.........
    5ce4:	0f 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    5cf4:	ff ff ff 7f bf 1f 4f f3 f9 70 00 00 01 01 01 00     ......O..p......
	...
    5d84:	00 01 01 02 02 02 04 04 0d 09 09 13 13 33 27 27     .............3''
    5d94:	6f 4f cf 9f 9f 3f 3f 3f 7f 7f ff ff ff ff ff ff     oO...???........
    5da4:	ff ff e7 eb ec de df 99 b0 a0 70 77 76 f0 79 3f     ..........pwv.y?
    5db4:	9f cf f7 9b cd be bb 3b 70 79 f3 e3 7a 9a ce e4     .......;py..z...
    5dc4:	f2 f9 fc e7 e3 c9 c0 cd 8d c9 e3 f3 7f be de 6e     ...............n
    5dd4:	74 f9 ff ff ff ff ff ff ff ff 3f 9f df bf be be     t.........?.....
    5de4:	7e 7d 35 85 eb eb d7 f7 f7 ef ef df dc dc be bc     ~}5.............
    5df4:	3f 73 71 f0 f2 f3 ff cf c7 c2 df ff 3f 3f 1f 1f     ?sq.........??..
    5e04:	ff ff ff 7f 30 ff ff ff ff fe f0 ff ff ff ff 80     ....0...........
    5e14:	ff ff ff ff fc fc ff ff ff f8 fc fc fc ff ff fe     ................
    5e24:	fc fc f8 f8 f0 f0 a0 a0 40 40 00 80 00 00 00 00     ........@@......
    5e34:	00 00 00 00 00 01 01 01 03 03 07 07 07 0f 0f 1f     ................
    5e44:	1f 3f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff     .???............
    5e54:	ff ff ff fb fc ce c0 ff ff df ff ff ff ff ff ff     ................
    5e64:	ff ff 7f ff ff ff ff fc fc fd ff ff ff ff ff ff     ................
    5e74:	ff ff ff ff fb f9 70 f9 fd e7 f3 f9 ff ff ff df     ......p.........
    5e84:	ff ff ff ff c7 84 c9 ff fc 70 c0 00 00 00 00 00     .........p......
    5e94:	00 00 00 01 01 03 e7 ff ff ff ff ff ff cf cf cf     ................
    5ea4:	67 27 03 00 00 00 00 00 00 00 00 00 00 00 c0 63     g'.............c
    5eb4:	3f ff ff ff ff ff ff ff ff 7f 3f 5f 67 73 79 7b     ?.........?_gsy{
    5ec4:	10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f64:	00 01 01 03 02 02 06 04 0c 09 09 19 13 33 27 27     .............3''
    5f74:	4f 4f 8f 9f 9f 9f 3f 3f 7e 7e 7e ff ff ff ff ff     OO....??~~~.....
    5f84:	ff ff ff ef e7 db dd 9e bf b3 61 60 62 ee ed e1     ..........a`b...
    5f94:	ff 7f bf cf e7 13 59 7c 33 a1 2d 6f de ce 66 3c     ......Y|3.-o..f<
    5fa4:	9d ec f6 fb fd ee c7 db 89 9d 9f db e3 f7 fe 7e     ...............~
    5fb4:	be cd 65 71 7f 7f 7f 7f ff f7 ff ff 7f bf bf be     ..eq............
    5fc4:	7e 7c 7d fd 6b ab df d7 97 ef ef cf df df 9c bc     ~|}.k...........
    5fd4:	bc 7d 7f f7 e3 e1 e0 ff ff 8f 8f c3 ff ff ff 3f     .}.............?
    5fe4:	bd ff ff ff ff ff f7 ff ff ff ff ff ff ff ff ff     ................
    5ff4:	ff ff ff ff ff ff ff fe fc fc 8c 88 00 f8 f0 88     ................
    6004:	1c 1e 36 3c 2c 6c 78 78 f8 f0 f0 e0 60 e0 c0 c0     ..6<,lxx....`...
    6014:	c0 80 e0 f0 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
    6024:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe     ................
    6034:	ff ff ff ff ff ff ff ff ff ff ff f9 f8 fd f6 eb     ................
    6044:	fd fd ef c3 f7 f7 9f c7 ef ff ff ff ff ff ff ff     ................
    6054:	ff ff fc f8 98 1f 1b e7 fc f8 f8 f8 f0 f0 e0 e0     ................
    6064:	e0 f0 df cf cf cf ff ff ff ff 7f ff f8 7c 7c 7c     .............|||
    6074:	fc fc fc e0 e0 c0 c0 fe fe ff 7f 9e ce f2 ff 7f     ................
    6084:	ff 7f 27 33 3d 3c 18 00 00 00 00 00 00 00 00 00     ..'3=<..........
	...
    6144:	00 01 01 03 02 02 04 04 0c 08 09 11 13 33 27 27     .............3''
    6154:	47 0f 4f 8f 9f bf 3f 3f 3e 7e fe fc fc ff ff ff     G.O...??>~......
    6164:	ff ff ff ff ff dc ce d2 b9 bc 3e 63 43 c1 cd cd     ..........>cC...
    6174:	c9 e3 ff ff 7f 9f cf 27 bb 75 66 6b 4b db 93 86     .......'.ufkK...
    6184:	cc 7c 3a de ee f3 f9 dc ce b7 83 1b 3b b7 c7 e6     .|:.........;...
    6194:	fe 7c 3d 99 cb f3 ff ff ff f7 ff ff ff ff df 7e     .|=............~
    61a4:	3e 7e 7d fd f9 fb fb 57 97 bf af ef df df df bf     >~}....W........
    61b4:	bf 78 7c 7b ff ff ff ff ff ff ff ff ff ff ff ff     .x|{............
    61c4:	ff ff ff ff ff ff ff ff ff ff ff ff fc ff ff fe     ................
    61d4:	fe fe fc fc fc f8 c0 80 80 81 81 c6 f6 e3 c1 f8     ................
    61e4:	7f bf df ff ff ff ff ff ff ff ff ff ff 7f bf ff     ................
    61f4:	f7 fb ff ff ff ff ff ff 7f ff 7f ff bf ff ff ff     ................
    6204:	f9 f6 fb f6 fb e1 f7 cb d7 db e7 ff ff ff fe ff     ................
    6214:	ff ff ff ff 7f 7f ff ff ff ff ff ff ff bf ff bf     ................
    6224:	ff ff ff ff fc f9 fb fb f7 f7 ef ef ef ef ef ef     ................
    6234:	ef ff ff fc fc de 82 87 c0 c0 c0 c3 c7 c7 df ff     ................
    6244:	fd fd ff ff fe fe bf 4f 17 03 00 00 00 00 00 00     .......O........
	...
    6324:	00 01 01 00 02 02 04 04 04 09 09 1b 13 33 27 27     .............3''
    6334:	67 4f 8f 8f 9f 9f 3f 3f 7f 7e 7e fc fd fd fd fe     gO....??.~~.....
    6344:	ff ff ff fe fe fe ff fd 9c a6 33 7d 7e ce 87 83     ..........3}~...
    6354:	83 9b 9b c3 ef ff ff 1f ff ff 67 79 fc ee d7 df     ..........gy....
    6364:	cf ef af 9f 7f bf 9f e7 f3 b9 9c 0f 07 37 37 76     .............77v
    6374:	ae cd fc fd fb 3b 93 c7 e7 ff cf df df bf bf 3f     .....;.........?
    6384:	3e fd ff ff ff fb bb f3 f7 b7 af 2f 7f 5f df bf     >........../._..
    6394:	bf ff 7f 7f ff ff ff ff ff c3 c0 8f ff ff df 9f     ................
    63a4:	ff ff ff ff ff 7f ff ff ff ff e7 ff ff ff ff ff     ................
    63b4:	ff ff 7f bf df ef ff fd fe ff ff ff ff ff ff ff     ................
    63c4:	ff ff ff ff ff ff df ff df ff ff ff ff ff ff ff     ................
    63d4:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe ff ff     ................
    63e4:	ff ff ff ff ff fe ff ff ff f3 ff fb ff ff fb fb     ................
    63f4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fd     ................
    6404:	ff fd ff ff ff ff ff ff ff ff ff 7f bf 3f 17 0f     .............?..
    6414:	07 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6504:	00 01 01 01 02 02 04 04 08 08 09 11 13 33 23 27     .............3#'
    6514:	47 4f cf 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     GO...??..~......
    6524:	fb fd fe ff ff ff fc fd fd fe 3a 18 6d f7 f9 fe     ..........:.m...
    6534:	8c 07 07 37 37 a7 8f ff ff ff 7e 9f cf 67 73 89     ...77.....~..gs.
    6544:	ae 6f 6d 68 4a 19 fd 75 31 9b ef f7 7b 1e ce 2e     .omhJ..u1...{...
    6554:	6e 6c 4d 1d 9b f9 fa f7 77 a7 cd ff 1f 5f df df     nlM.....w...._..
    6564:	de 9e 3f fd fd f9 bb fb f7 f7 ff ef 6f 5f 5f ff     ..?.........o__.
    6574:	bf bf 7f 7f 7f ff ff bf 5f 97 eb f5 fa fc fe ff     ........_.......
    6584:	ff ff ff ff ff ff ff ff ff ff bf ff ff f7 ef ff     ................
    6594:	ff ff ff ff ff ef ff ef ff ff ff ff ff ff ff bf     ................
    65a4:	ff bf ff fd fd ff ff ff ff df ff ff ff e7 e3 e1     ................
    65b4:	f1 ef 8f c7 f7 ff 3f 1f dd ed ff df 9f 7f ff ff     ......?.........
    65c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65d4:	ff 7f 1f 3f 1f 0d 01 01 00 00 00 00 00 00 00 00     ...?............
	...
    66e4:	00 01 01 02 02 02 04 04 08 09 09 13 13 33 27 27     .............3''
    66f4:	4f 4f 9f 9f 9f 3f 3f 7f 7f 7e fe fc fd fd fb fb     OO...??..~......
    6704:	f3 f7 f7 f3 f9 fc ff fb fb f3 f2 f0 e0 3d 9d cf     .............=..
    6714:	e7 fb bc 1e 0f 2e 7f 2f 0f 9f fe fe fe 5c 3e 9f     ......./.....\>.
    6724:	ef b7 99 bc be 31 75 73 7b eb ea 76 3e de e6 73     .....1us{..v>..s
    6734:	3d 1f 1d dd d9 bf 3b 7f f1 e6 ef ee 3e 9f ff ff     =.....;.....>...
    6744:	ff fe fe fe ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    6754:	ff ff 7f ff 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    6764:	fe ff ff 7f 7f ff ff ff df ff d7 ff f7 ff ff ff     ................
    6774:	ff ff ff e7 e9 e0 f9 df d7 c3 fb ff 1f 1d cd ef     ................
    6784:	ef df 1e fe fc ff ff fe fe ff ff ff ff ff ff ff     ................
    6794:	ff ff ff ff ff ff ff 3f 5f 0f 07 01 00 01 00 00     .......?_.......
	...
    68c4:	00 01 01 03 02 02 04 04 08 09 1b 1b 1b 33 27 27     .............3''
    68d4:	4f 4f df 9f 9f 3f 3f 7f 7f 7e fe fc fd f9 f9 fb     OO...??..~......
    68e4:	f2 f6 f6 e6 ef cf e7 fb fd fe f3 f7 e4 e1 c1 d1     ................
    68f4:	7b 3b 9f ce f7 79 3c 1e 5f ff 1f 1e 3e fc fc fc     {;...y<._...>...
    6904:	f8 7c 3e df e7 73 b9 fc ef eb c7 cf cf af ef 6f     .|>..s.........o
    6914:	bf cf e7 73 39 1b b3 bf 3b 7f 67 e2 c8 dc dc bd     ...s9...;.g.....
    6924:	3f ff ff 3f ff cf e7 ef cf cf df 9f ff ff ff ee     ?..?............
    6934:	f7 ff ff ff ff ff ff ff f7 e3 e9 e0 f9 cf c7 e3     ................
    6944:	f3 ff 1f 0f 6f ef 6f 4f 1f fe fe fe fe fe fe ff     ....o.oO........
    6954:	ff ff ff ff ff ff ff ff ff ff ff ff 7f 3f 1f 0f     .............?..
    6964:	03 01 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6aa4:	01 01 01 03 02 06 06 04 0d 0d 19 1b 1b 37 37 6f     .............77o
    6ab4:	6f 4f df 9f 9f 3f 3f 7f 7f ff ff fc fc fd fb f9     oO...??.........
    6ac4:	f3 f6 f4 e4 ec cc dc de 9f cf e7 f9 ff fc e3 eb     ................
    6ad4:	ef e7 96 95 4d 3d bd ec f6 79 2c a6 bf 3f 7c fc     ....M=...y,..?|.
    6ae4:	f8 f8 f1 f1 f9 7c 3e 9f 6f 73 f9 ec c7 df cc ed     .....|>.os......
    6af4:	29 88 fa 53 3b dd e7 72 37 76 6f cf ff df df 93     )..S;..r7vo.....
    6b04:	a5 72 cc 4f d7 f3 f3 ff 1f 0f 6f 6f 6f 4f 1f be     .r.O......oooO..
    6b14:	fe fe fe fe fe ff ff ff ff ff ff ff ff ff ff ff     ................
    6b24:	ff ff 7f 3f 1f 07 03 03 02 00 00 00 00 00 00 00     ...?............
	...
    6c84:	01 01 03 03 02 06 06 04 0d 0d 19 1b 33 33 27 67     ............33'g
    6c94:	4f cf df 9f 9f bf 3f 7f 7f ff ff ff ff ff fb f8     O.....?.........
    6ca4:	f2 f7 f7 e7 ec c8 d8 d8 99 b8 28 2c 0f 7f e7 73     ..........(,...s
    6cb4:	cd c6 97 87 8c 59 59 d9 f3 73 99 cd e3 79 7c 7e     .....YY..s...y|~
    6cc4:	7f fb f0 f0 e0 e3 e3 e2 f0 7c 3f 9f cf f3 f9 fc     .........|?.....
    6cd4:	fe ff ff ff fe fe fe fe f6 fe f7 ff ff ff ff ff     ................
    6ce4:	ff ff ff ff ff ff ff ff 7f 1f 0f 07 03 03 00 00     ................
	...
    6e64:	01 01 01 03 02 06 06 04 0d 09 19 13 13 23 27 07     .............#'.
    6e74:	4f 4f 8f 9f 1f 3f 3f 7f 7f 7f ff ff ff ff ff ff     OO...??.........
    6e84:	ff ff f3 e1 ec cf df 9f b0 b0 30 73 70 f0 f9 7f     ..........0sp...
    6e94:	3f 8f e7 33 09 06 03 01 00 01 01 01 01 01 01 01     ?..3............
    6ea4:	03 03 07 0f ff ff ff ff ff ff ff ff ff ff 7f 1f     ................
    6eb4:	0f 07 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7044:	00 01 01 02 02 00 04 04 09 09 01 13 13 07 27 27     ..............''
    7054:	4f 0f 1f 9f 9f 3f 3f 3f 7e fe fe fe ff ff ff ff     O....???~.......
    7064:	fc f8 f0 f0 f0 f0 f0 e0 e0 e0 f0 f0 f0 f8 f8 fc     ................
    7074:	ff ff ff 3f 3f 0f 07 03 01 00 00 00 00 00 00 00     ...??...........
	...
    7224:	00 01 00 00 02 00 04 04 01 09 09 13 03 03 07 07     ................
    7234:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 01 00 00 00     ................
	...

0000747c <FLASHPICS_face2>:
    747c:	15 da 25 4a b9 46 a9 26 59 46 3a 61 86 39 42 b5     ..%J.F.&YF:a.9B.
    748c:	04 63 dc f2 fd ff ff ff ff ff ff ff ff ff ff ff     .c..............
    749c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ac:	ff bf df bf d7 1f d3 05 1a 01 00 04 00 02 00 00     ................
    74bc:	00 00 01 00 01 03 03 17 47 87 0f 1f 2f 3f ff ff     ........G.../?..
    74cc:	ff ff ff ff ff ff ff ff fe fe fd fe fc fd fe fe     ................
    74dc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    74fc:	aa 15 52 25 ca 19 e2 05 3a c1 35 02 e9 02 4d d0     ..R%....:.5...M.
    750c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    751c:	ff ff ff ff ff ff ff ff ff ff ff ff b7 6f db 16     .............o..
    752c:	27 42 05 02 01 84 00 00 00 00 00 00 00 00 00 00     'B..............
	...
    7544:	00 00 00 24 00 40 00 ff ff ff ff ff ff ff ff 7f     ...$.@..........
    7554:	ff 1f ff 2f ff 5f ff ff ff ff ff ff ff ff ff ff     .../._..........
    7564:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7574:	ff ff ff ff ff ff ff ff 89 32 45 92 24 4a 29 a2     .........2E.$J).
    7584:	08 52 25 80 2c f1 fe ff ff ff ff ff ff ff ff ff     .R%.,...........
    7594:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    75a4:	df ff 7f db 25 94 04 29 40 c1 18 00 08 1a 40 0d     ....%..)@.....@.
    75b4:	4e 1c 2e 5e 9c 3e 3c 38 78 70 f0 e0 e0 c0 c0 80     N..^.><8xp......
    75c4:	04 80 00 00 04 20 0a 1b 77 ff 7f df a7 5d a3 54     ..... ..w....].T
    75d4:	25 55 29 92 95 e5 8a af 9b 27 9f 2f 5f 5f ff 1f     %U)......'./__..
    75e4:	7f 7f ff ff ff ff ff ff ff ff ff ff ff bf 7f ff     ................
    75f4:	ff ff 7f ff ff ff ff ff a2 09 52 24 89 22 48 12     ..........R$."H.
    7604:	41 16 20 03 dc ff ff ff ff ff ff ff ff ff ff ff     A. .............
    7614:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f df 75     ...............u
    7624:	ff d7 ad 5b 24 00 a4 00 10 02 10 41 00 01 27 03     ...[$......A..'.
    7634:	2b 47 4d 5d d9 bb b2 76 ed 7e 34 3d 55 2b 13 27     +GM]...v.~4=U+.'
    7644:	1b 16 2c 01 04 c0 e0 f0 fd ff 52 9d 22 e4 f9 7c     ..,.......R."..|
    7654:	9e 46 73 c3 d1 e1 81 a0 c1 d0 00 a0 00 41 02 05     .Fs..........A..
    7664:	15 03 2c 91 87 0d b7 2f 5f ff 7f fd ff f7 bf fd     ..,..../_.......
    7674:	ef bf ff fb b7 ff ff ff 24 c9 0a 50 14 41 14 a1     ........$..P.A..
    7684:	14 41 92 00 fe ff ff ff ff ff ff ff ff ff ff ff     .A..............
    7694:	ff ff ff ff ff ff ff ff bf 7f ff ef 5b df 63 bd     ............[.c.
    76a4:	6f da 04 29 42 80 00 01 00 00 00 00 00 00 00 00     o..)B...........
    76b4:	80 80 90 82 40 01 41 00 01 00 00 02 00 00 00 00     ....@.A.........
    76c4:	00 00 00 3e ff ff ff ff ff fd fb f4 ea 20 05 10     ...>......... ..
    76d4:	a5 33 6f 7f ff 53 b1 21 9c 04 02 00 00 00 00 00     .3o..S.!........
    76e4:	00 00 00 00 00 04 08 01 12 04 29 03 1f bf 3d ff     ..........)...=.
    76f4:	f7 de ff fd e7 5e ff ff 54 24 49 92 45 a8 8a 10     .....^..T$I.E...
    7704:	aa 00 22 dc ff ff ff ff ff ff ff ff ff ff ff ff     ..".............
    7714:	ff ff ff ff ff ff ff ff ff f7 bd 6f 5a e5 0a 59     ...........oZ..Y
    7724:	a5 14 43 44 88 20 00 a2 30 f8 cc dc 8e 9e 93 0a     ..CD. ..0.......
    7734:	21 10 64 60 60 c0 ad d0 d0 b0 20 60 c0 80 00 00     !.d``..... `....
    7744:	00 00 00 81 ff ff 9f 9f 3f 1f 2f 41 00 c0 00 28     ........?./A...(
    7754:	00 08 18 7a ed fa e0 c4 28 c0 80 80 00 80 00 00     ...z....(.......
	...
    7770:	00 00 00 05 03 5f de bf ff ff be fb a5 4a b4 02     ....._.......J..
    7780:	5c a0 05 ea 00 e5 f8 ff ff ff ff ff ff ff ff ff     \...............
    7790:	ff ff ff ff ff ff ff f7 bf 3f ff ff ff bf f1 ae     .........?......
    77a0:	11 42 95 a4 2b 14 52 c4 09 00 50 57 40 00 03 03     .B..+.R...PW@...
    77b0:	03 11 05 03 03 02 02 06 0c 10 29 13 77 e7 ee fe     ..........).w...
    77c0:	fe fd 06 46 02 02 02 07 1f 7f fc 80 05 00 00 02     ...F............
    77d0:	02 0c 2e e6 fe f2 df 61 ef db e7 77 27 3f 76 3f     .......a...w'?v?
    77e0:	fe fd f0 81 00 80 02 00 00 00 00 00 00 00 00 00     ................
    77f0:	00 00 00 00 00 00 c4 19 e7 ff ff ff 42 99 54 c3     ............B.T.
    7800:	14 4a a8 ea fb ff ff ff ff ff ff ff ff ff ff ff     .J..............
    7810:	ff ff ff ff ff ff 7f ff 5b d6 95 27 ba 6f d8 d3     ........[..'.o..
    7820:	34 e2 02 d5 ab 1c f3 a5 6a d9 a1 1f e0 05 28 40     4.......j.....(@
    7830:	80 00 00 00 d0 20 c0 e2 ca 94 ec ba e2 00 00 00     ..... ..........
    7840:	00 01 07 3c 50 20 00 00 00 08 01 13 00 04 00 00     ...<P ..........
    7850:	00 00 00 01 27 1f 3f ad e0 f8 a8 6c 94 9c 06 a7     ....'.?....l....
    7860:	81 2a d3 2f 5e a8 12 80 00 00 40 00 00 c0 00 50     .*./^.....@....P
    7870:	a0 c0 58 e0 ba a4 5b be 56 ef 7f ff                 ..X...[.V...

0000787c <FLASHPICS_face1>:
    787c:	f7 af bb cf db ef cd fb d7 e5 fb f5 f5 fb dd fd     ................
    788c:	ea fe de f7 ee df ed ef ed ff f5 df b7 fb fb f7     ................
    789c:	79 ff 7d 7b 7a 7d fe 79 ef fc bf 7c fd ae 7e de     y.}{z}.y...|..~.
    78ac:	b7 6e df bf 67 df 7f df bf 7f ff ff ff ff ff ff     .n..g...........
    78bc:	ff ff ff ff ff ff ff ff ff ff ff df fb f7 dd f5     ................
    78cc:	2a 1e 06 01 02 00 00 00 00 00 00 00 00 00 00 00     *...............
	...
    78f0:	00 00 00 14 50 21 c6 2d a9 7f d6 7f ff ff fd ff     ....P!.-........
    7900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7910:	ad db 5f 42 5f 9f 27 5f bf 71 ef fd fa fd fb 7c     .._B_.'_.q.....|
    7920:	fb fc f9 f2 bc fa fc f1 f4 6a 52 88 01 2a 02 05     .........jR..*..
    7930:	02 05 0b 0a 01 0b 0a 23 0f ff 7f ff ff ff ff ff     .......#........
    7940:	ff ff ff ff ff ff fd ff c5 0b 55 01 00 00 00 00     ..........U.....
	...
    795c:	80 80 80 80 80 80 00 80 00 00 00 00 00 00 00 00     ................
	...
    7978:	00 03 00 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7988:	ff ff ff ff ff ff ff ef ff 1e 45 0a 00 14 01 14     ..........E.....
    7998:	01 05 0b 17 0f 3b 07 2f 96 07 0b 03 0a 01 04 01     .....;./........
    79a8:	04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79b8:	00 35 eb ff ff bf 13 7f ff ff ff ff ff ff ff ff     .5..............
    79c8:	ff fd de b8 fa e8 e0 80 40 00 20 00 00 08 00 00     ........@. .....
    79d8:	0b 01 51 05 20 e0 e0 f0 60 f0 f0 e0 d0 e0 80 a0     ..Q. ...`.......
    79e8:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    79f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a08:	ff ff ff ff ff ff 1f 03 00 00 00 00 00 00 00 00     ................
	...
    7a38:	00 03 2e ff ff aa 61 bd ef fe 7f ff ff ff ff ff     ......a.........
    7a48:	ff ff ff ff ff ff ff 3f 5f be 48 00 00 00 00 00     .......?_.H.....
    7a58:	00 00 00 01 00 06 03 05 08 01 05 03 03 01 01 00     ................
	...
    7a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7a8c:	ff e1 80 80 00 00 80 c0 c0 60 40 c0 00 00 20 00     .........`@... .
    7a9c:	00 00 04 10 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ab4:	00 00 00 80 00 a0 68 b3 ad b5 f6 df ff 57 ff 2d     ......h......W.-
    7ac4:	fb ff ff ff ff ff ff ff ff ff 03 41 02 04 00 00     ...........A....
	...
    7afc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b0c:	ff ff ff ff ff fe fe fe fc 8c 08 90 80 80 00 80     ................
    7b1c:	80 80 80 80 80 80 80 c0 c0 c0 80 00 00 00 00 00     ................
    7b2c:	00 00 00 80 00 48 d0 a0 58 24 9a 24 85 19 a2 02     .....H..X$.$....
    7b3c:	8c 23 9d 22 cd ba d5 f5 ff ff ff ff ff ff ff ff     .#."............
    7b4c:	ff ff fe e0 c8 b0 20 e0 c0 c8 8c 08 18 00 10 00     ...... .........
	...
    7b78:	00 00 c0 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7b98:	ef fb e7 db e1 c9 a1 09 01 80 00 00 00 00 01 00     ................
    7ba8:	02 c4 20 a8 b0 6e 58 1f 67 83 0c 40 93 00 04 40     .. ..nX.g..@...@
    7bb8:	04 d0 94 f0 e6 f8 ff fa ff fe ff ff ff ff ff ff     ................
    7bc8:	ff ff ff ff ff ff ff ff ff ff fe fd f7 f8 f1 f0     ................
    7bd8:	70 70 70 70 20 30 30 30 30 30 40 80 40 80 00 00     pppp 00000@.@...
    7be8:	00 00 80 00 00 10 80 80 c8 e0 e0 b0 d8 ac ec ee     ................
    7bf8:	fe fb fb ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c18:	ff ff ff ff ff c6 03 95 02 00 00 01 04 00 00 05     ................
    7c28:	88 00 02 0a 40 81 24 c8 d2 a0 ea f0 f4 f9 fe fd     ....@.$.........
    7c38:	fe ff ff ff ff ff ff ff ff ff ff ff ff f7 ef ff     ................
    7c48:	ff ff ff ff ff ff fd ff fb ff ff ff ff ff ff ff     ................
    7c58:	ff fe ff ef 9e 0d 1a 0d 1a 40 0a 31 fe fb e4 ce     .........@.1....
    7c68:	d0 e6 ec fb f4 ff fe ff fe f6 fd ff fe ff ff fe     ................
    7c78:	ff fe ff ff                                         ....

00007c7c <FLASHPICS_cat>:
    7c7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7c8c:	ff ff fe fd de fe da e6 3a 65 cf aa fd da 7f fb     ........:e......
    7c9c:	d7 ed bb 5e eb 5e 6f b5 57 ff d5 ff df b5 7f 6d     ...^.^o.W......m
    7cac:	df ab 1f f5 df ff fb 77 ed 4f 03 2f 3f 7f ff fe     .......w.O./?...
    7cbc:	7d e1 15 ff ff 32 c4 fd ff ff 7f 9f 1d 03 23 df     }....2........#.
    7ccc:	fd e7 de 5b c6 37 04 1d a2 cd da 94 24 92 00 0a     ...[.7......$...
    7cdc:	10 00 55 00 5b a0 04 20 80 04 00 01 02 14 02 0c     ..U.[.. ........
    7cec:	00 00 00 00 00 a7 bb 6f ff 5b f7 3f fb d7 bf ff     .......o.[.?....
    7cfc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d0c:	ff ff fa bf 56 ff fd a3 ff de bb b6 6d cf 23 5c     ....V.......m.#\
    7d1c:	77 ef 3a 05 a5 0d 01 09 12 46 0b 37 2f 5f 9e 3a     w.:......F.7/_.:
    7d2c:	40 01 09 32 ff ff ff dd 41 00 c4 00 01 01 d3 a7     @..2....A.......
    7d3c:	5f 7e 57 eb ff d5 27 3f 73 e2 80 00 00 00 00 11     _~W...'?s.......
    7d4c:	fe ff ff a9 05 00 01 8c 1e 1b a7 84 00 00 01 00     ................
    7d5c:	00 00 00 00 04 01 14 00 00 01 00 20 00 00 00 00     ........... ....
    7d6c:	00 00 00 00 10 22 4c b9 27 d9 26 dd 22 5e 55 56     ....."L.'.&."^UV
    7d7c:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7d8c:	ff ff ff fb ef 7e ff fe fb ea dd fe d8 f2 f9 fa     .....~..........
    7d9c:	3c 31 1c 08 14 ec fe fe 8f 2f af de bf fe f7 df     <1......./......
    7dac:	87 4f fe 3e fd ff f7 ca 00 22 04 09 42 05 91 2e     .O.>....."..B...
    7dbc:	c5 52 ea 75 af 7e 69 cb 10 45 01 01 08 00 09 80     .R.u.~i..E......
    7dcc:	f3 7b dc 3e cf 5f e7 ef e7 53 b3 43 03 03 bf fe     .{.>._...S.C....
    7ddc:	fe 00 04 08 18 1c 18 a8 c0 80 00 00 00 05 0f 02     ................
    7dec:	04 00 08 00 08 02 28 42 a4 09 a2 1c 91 15 a2 15     ......(B........
    7dfc:	ef bb ef bf 7f ff ff ff ff ff ff ff ff ff fd ff     ................
    7e0c:	ff ff ff ff ff ff ff f7 ff ff ff df ff 7f fe fd     ................
    7e1c:	6c e8 a0 c0 80 81 0f 3f 7f fc fd f2 f7 fb e7 fd     l......?........
    7e2c:	eb f9 fb fe ff ff ff ff ff fa 80 00 00 52 a4 05     .............R..
    7e3c:	2a 5d fd d7 fd bb e6 00 02 00 00 00 00 20 fe ff     *]........... ..
    7e4c:	ff ff fa fc e9 fa f5 fb e2 f9 f2 f9 fc fe 3f 1f     ..............?.
    7e5c:	07 c0 00 e0 00 00 00 00 05 01 00 00 00 00 00 00     ................
    7e6c:	00 00 0a 00 00 24 00 aa 00 22 9c 21 c8 12 c4 11     .....$...".!....
    7e7c:	ff fe ff b5 6f fd ff f7 ff ff ff ff ff ff ff ff     ....o...........
    7e8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fb f7     ................
    7e9c:	ff be fb b6 6f ff ed 5e f4 ac a8 d9 e3 bb e3 43     ....o..^.......C
    7eac:	e7 c7 c7 07 c7 af bf ff ff ff fe e0 98 e1 fa fb     ................
    7ebc:	f7 da bf 6b ff be 2d 10 40 00 00 00 c0 b2 ff d7     ...k..-.@.......
    7ecc:	3f 47 03 07 03 c3 c3 87 e3 2b d9 ab d4 2e 19 17     ?G.......+......
    7edc:	27 01 02 00 04 02 00 00 00 00 00 00 00 00 00 00     '...............
    7eec:	20 00 20 40 a9 50 d4 24 cb 28 d3 24 d3 2c 55 a9      . @.P.$.(.$.,U.
    7efc:	5f ff f7 ff 7f ff ff f7 ff ff ff ff ff ff ff ff     _...............
    7f0c:	f7 ff ff ff ff ff bb ff ff ff f7 ff ef ff 6f 7f     ..............o.
    7f1c:	ff c5 3f ed 1b 42 03 24 4b 54 af 7f 9f 3f 5f bf     ..?..B.$KT...?_.
    7f2c:	3d af ff 57 ce 15 01 17 07 7f df ff ff ff ff ff     =..W............
    7f3c:	f3 ee bd eb 5a e5 9d 40 c1 04 02 ec 5a f7 2e cb     ....Z..@....Z...
    7f4c:	22 85 01 1f 2a 07 2e 0f 1f 0f 03 02 01 20 00 a0     "...*........ ..
    7f5c:	a0 80 00 08 00 00 00 00 00 00 00 80 00 20 db 2a     ............. .*
    7f6c:	d4 ad 22 dc b3 04 55 ac 53 a6 a9 46 b9 c5 be 6a     .."...U.S..F...j
    7f7c:	43 ff ff ff 7f ed ff ff ff ff ff ff ef ef ff ff     C...............
    7f8c:	ff ff ff ff fd fe fa ff 6e db 37 5f 37 df 3f df     ........n.7_7.?.
    7f9c:	7a e7 ee 59 f6 e5 ba c0 41 e4 ed c0 01 42 93 02     z..Y....A....B..
    7fac:	07 5e b5 af 10 00 00 90 a0 5e b8 35 e3 cd a3 ff     .^.......^.5....
    7fbc:	d7 ff ff ff ff f3 ef fe fd e0 a2 6f 3f 04 00 04     ...........o?...
    7fcc:	e0 c0 40 10 20 10 00 00 a0 00 34 13 5b c9 19 fc     ..@. .....4.[...
    7fdc:	c0 82 4e ca c4 cc 90 00 50 dc b2 3c f2 2c 41 c0     ..N.....P..<.,A.
    7fec:	81 09 57 24 4f ea 04 59 f2 a5 fe 82 3c cb 3d eb     ..W$O..Y....<.=.
    7ffc:	0f 3b ef bf df fe 1b 77 df ff ff ff 35 7f ff ff     .;.....w....5...
    800c:	3f 7f ff bf 7f bf 6f 7f df 3c e9 b2 40 95 0a 43     ?.....o..<..@..C
    801c:	06 bd a7 fd ff ff fc b3 f4 c7 5b 87 3f 0e 08 02     ..........[.?...
    802c:	00 00 00 00 01 00 c0 ba e6 10 c4 a0 40 a1 03 a6     ............@...
    803c:	c7 8f 5f bf 3f 7f 3f 4f cf 01 01 00 40 00 00 00     .._.?.?O....@...
    804c:	04 00 00 00 d0 50 be 33 61 42 c1 c6 ae 94 22 cc     .....P.3aB....".
    805c:	b3 5f f7 2d fe e8 47 b8 ff c9 03 ff af 1a 3e d0     ._.-..G.......>.
    806c:	25 c8 da 81 26 fc ec bb fe 57 f5 df bb ff fc fb     %...&....W......

0000807c <FLASHPICS_avrLogo>:
	...
    808c:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    809c:	e0 80 00 00 00 00 18 78 f8 f8 f8 f8 f8 f8 f8 f8     .......x........
    80ac:	f8 f8 f8 f8 e0 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    80c4:	80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 78 08     ..............x.
    80d4:	00 00 00 00 80 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    80e4:	f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f0 f0 f0 e0 c0     ................
    80f4:	80 58 a8 fc 2c fc cc 78 00 00 00 00 00 00 00 00     .X..,..x........
    8104:	00 00 00 00 00 80 f0 fc ff ff ff ff ff ff ff ff     ................
    8114:	ff ff ff ff ff ff ff ff ff ff fc f0 c0 00 00 00     ................
    8124:	03 0f 3f ff ff ff ff ff ff ff ff ff ff ff fc e0     ..?.............
    8134:	80 00 00 00 00 00 00 00 00 00 00 00 00 80 f0 fc     ................
    8144:	ff ff ff ff ff ff ff ff ff ff ff 1f 0f 01 00 00     ................
    8154:	00 c0 f0 fe ff ff ff ff ff ff ff ff ff 7f 7f 1f     ................
    8164:	0f 1f 1f 1f 1f 1f 7f ff ff ff ff ff ff ff ff ff     ................
    8174:	ff ff fc f1 01 01 00 00 00 00 00 00 00 00 00 00     ................
    8184:	00 00 c0 f0 fe ff ff ff ff ff ff ff ff ff ff 3f     ...............?
    8194:	03 07 3f ff ff ff ff ff ff ff ff ff ff fe f8 c0     ..?.............
    81a4:	00 00 00 01 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    81b4:	ff fc f0 80 00 00 00 00 00 00 c0 f0 fe ff ff ff     ................
    81c4:	ff ff ff ff ff ff ff ff 0f 07 01 00 00 80 e0 f8     ................
    81d4:	ff ff ff ff ff ff ff ff ff ff ff 9f 0f 01 80 00     ................
    81e4:	00 80 80 c0 c0 e0 f0 ff ff ff ff ff ff ff ff ff     ................
    81f4:	ff ff 7f 3f 00 00 00 00 00 00 00 00 00 00 00 80     ...?............
    8204:	f0 fe ff ff ff ff ff ff ff ff ff ff 1f 0f 00 00     ................
    8214:	00 00 00 00 07 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    8224:	ff fc e0 80 00 00 00 07 0f 7f ff ff ff ff ff ff     ................
    8234:	ff ff ff ff fc f0 80 e0 f8 fe ff ff ff ff ff ff     ................
    8244:	ff ff ff ff 7f 0f 01 00 00 00 80 f0 fc ff ff ff     ................
    8254:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8264:	ff ff ff ff ff ff ff ff ff ff 7f 3f 3f 1f 0f 0f     ...........??...
    8274:	07 01 00 00 00 00 00 00 00 00 00 00 80 f8 fe ff     ................
    8284:	ff ff ff ff ff ff ff ff ff ff ff ff fe fe fe fe     ................
    8294:	fe fe fe fe fe fe fe ff ff ff ff ff ff ff ff ff     ................
    82a4:	ff ff ff ff fe f0 c0 00 00 00 03 0f 7f ff ff ff     ................
    82b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    82c4:	ff 1f 07 01 00 00 00 c0 f0 fe ff ff ff ff ff ff     ................
    82d4:	ff ff ff ff ff 3f 07 03 03 03 1f ff ff ff ff ff     .....?..........
    82e4:	ff ff ff ff ff ff fc e0 00 00 00 00 00 00 00 00     ................
	...
    82fc:	00 c0 f8 fe ff ff ff ff ff ff ff ff ff ff ff 1f     ................
    830c:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    831c:	07 07 07 0f 7f ff ff ff ff ff ff ff ff ff ff fe     ................
    832c:	f8 c0 00 00 00 01 07 1f ff ff ff ff ff ff ff ff     ................
    833c:	ff ff ff ff ff 3f 1f 03 00 00 00 80 e0 f8 ff ff     .....?..........
    834c:	ff ff ff ff ff ff ff ff ff ff 0f 07 00 00 00 00     ................
    835c:	00 00 00 01 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    836c:	ff f8 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    837c:	06 07 07 07 07 07 07 07 07 07 07 07 07 03 00 00     ................
	...
    83a0:	00 03 07 07 07 07 07 07 07 07 07 07 07 07 07 04     ................
    83b0:	00 00 00 00 00 03 1f 7f ff ff ff ff ff ff 3f 0f     ..............?.
    83c0:	01 00 00 00 00 00 04 07 07 07 07 07 07 07 07 07     ................
    83d0:	07 07 07 07 01 00 00 00 00 00 00 00 00 00 00 00     ................
    83e0:	00 01 07 07 07 07 07 07 07 07 07 07 07 07 07 06     ................
	...
    8438:	01 0f 3f 1f 07 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

0000847c <FLASHPICS_chip>:
	...
    8490:	00 00 00 80 80 40 f0 f8 fc fe fe fe fe fe fe fe     .....@..........
    84a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    84d0:	fe fe fe fe fe fe fe fe fe fe fe fe fc fc f8 e0     ................
    84e0:	00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8508:	40 c0 c0 60 b0 f0 ec 28 ec fc ff ff ff fd ff ff     @..`...(........
    8518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 7f     ................
    8528:	3f 1f 0f 1f 1f 1f 3f 7f ff ff 9f 0f 1f 1f 1f ff     ?.....?.........
    8538:	ff ff ff ff ff ff 7f 3f 1f 1f 0f 1f ff ff 7f 3f     .......?.......?
    8548:	1f 1f 0f 9f 1f 8f 1f 1f 0f 1f 1f 3f ff ff d7 ff     ...........?....
    8558:	ff ff ff ff ff ff ff ff ff fe ff fe f8 d0 d0 58     ...............X
    8568:	f0 e0 c0 80 80 80 80 00 00 00 00 00 00 00 00 00     ................
	...
    8588:	5a de 5b fb f6 5f ed a5 ff ff ff ff ff ff ff ff     Z.[.._..........
    8598:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 0f 01 00     ............?...
    85a8:	00 00 78 7c 78 00 00 00 01 07 1f 7e f8 e0 80 00     ..x|x......~....
    85b8:	01 07 1f 3f 0f 01 00 80 c0 f0 fe 3f 07 03 00 00     ...?.......?....
    85c8:	80 80 04 0f 07 07 47 c0 c0 e0 f0 f0 ff ff ff ff     ......G.........
    85d8:	ff ff ff ff ff ff ff ff ff ff ff ff fe da 4b 5a     ..............KZ
    85e8:	5e f7 ff d6 ad bd b4 00 00 00 00 00 00 00 00 00     ^...............
	...
    8604:	00 00 00 09 6b 7a 6b dd fe ff b5 b5 ff ff ff ff     ....kzk.........
    8614:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff e3 e0     ................
    8624:	e0 e0 f0 f8 fc fc fc fc fc fc fc fc f0 f0 e0 e0     ................
    8634:	e1 ef ff fc f0 c0 80 00 e0 e8 fc ff ff e5 e0 e0     ................
    8644:	f0 f0 f8 ff ff ff fc f0 e0 e0 e0 e3 ff ff ff ff     ................
    8654:	ff ff ff ff ff ff ff ff ff ff ff ff ff 7f ff ff     ................
    8664:	ff ff 6b 6b 6b fe bd db f7 b4 d7 00 00 00 00 00     ..kkk...........
	...
    8684:	00 00 00 29 ed 6b ad ff fb b7 d6 ff ff ff ff f2     ...).k..........
    8694:	0e 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86a4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86b4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86c4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    86d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 01 ff     ................
    86e4:	ff ff ed ad ad fb de eb 5e d6 f6 42 00 00 00 00     ........^..B....
	...
    8704:	00 00 00 0d 0d 0d 06 03 01 00 00 00 01 03 07 ef     ................
    8714:	df 9e de 9e be be fe fe fe fd fe fe fc fd fc fd     ................
    8724:	fc fd fd fc fd fd fc fd fd fd f9 fd f9 fd f9 fd     ................
    8734:	fc f9 fd f8 fd fc f9 fd f9 fc f9 fc fd f9 f9 f9     ................
    8744:	f9 fd f8 fd f9 fd f8 fd fd f8 fd f9 fd fc fd fc     ................
    8754:	fd fd fc fd fd fc fd fc fd 3c be 3c be 9e 0f 0f     .........<.<....
    8764:	07 01 01 00 01 01 07 0f 0b 1a 1b 0a 00 00 00 00     ................
	...
    8790:	00 00 00 01 07 0f 1f 3f 3f 3f 3f 7f 7f 7f 7f 7f     .......????.....
    87a0:	7f ff ff 7f 7f ff ff ff 3f 7f ff ff 7f 7f 7f ff     ........?.......
    87b0:	ff 7f 7f 7f 7f ff 7f 7f 7f ff ff 7f 7f 7f ff ff     ................
    87c0:	7f 7f 7f ff ff 7f 7f 7f 7f ff ff 7f 7f 3f ff ff     .............?..
    87d0:	7f 7f 3f ff ff 7f 7f ff ff 7f 7f 7f 7f 3f 1f 0f     ..?..........?..
    87e0:	0f 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8820:	20 33 3f 1d 28 21 3f 3f 10 00 77 3f 1e 00 40 77      3?.(!??..w?..@w
    8830:	3f 3e 00 00 6b 7f 7d 00 00 76 7f 75 00 00 6f 7f     ?>..k.}..v.u..o.
    8840:	6a 00 00 6e 7f 6c 00 00 38 7f 7f 41 00 3c 3f 7f     j..n.l..8..A.<?.
    8850:	41 00 3e 7f 6b 00 3e 3f 6f 60 00 00 00 00 00 00     A.>.k.>?o`......
	...

0000887c <FLASHPICS_excellenceThroughTechnology>:
	...
    8884:	00 00 e0 f0 e0 80 00 00 00 00 80 c0 00 e0 f8 f8     ................
    8894:	c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88b8:	00 80 c0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    88e0:	00 00 80 f0 fc f8 00 c0 c0 80 00 00 00 80 e0 f0     ................
    88f0:	f0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8900:	00 00 00 20 fc f9 f3 e7 cf 9f 3f 7e fc f0 ef df     ... ......?~....
    8910:	bf 7c 33 07 9f 0f cc e0 80 e0 e0 80 e0 c0 00 00     .|3.............
    8920:	80 c0 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
    8930:	00 10 38 f8 c0 f0 00 00 00 1f 7f 3b fc 1e 02 00     ..8........;....
    8940:	80 e0 f8 d8 48 00 00 00 00 00 00 00 00 00 00 00     ....H...........
    8950:	00 00 00 00 00 c0 80 80 00 00 c0 c0 a0 e0 a0 c0     ................
    8960:	e0 46 0f 0f 13 3d 3e 9f cf f7 f8 7c 7e bf df cf     .F...=>....|~...
    8970:	f7 f1 fc 7c 00 00 00 00 00 00 00 00 00 00 00 00     ...|............
    8980:	00 00 00 06 3c 39 7b 7b f7 f7 f7 ef ee ee ff ff     ....<9{{........
    8990:	ff ff 80 98 bb ff fe ff ff ff cf bf 3f 7f 7f 3f     ............?..?
    89a0:	7f 7c fc f8 38 10 00 00 80 80 00 00 00 00 00 80     .|..8...........
    89b0:	c0 c0 f0 a0 e1 a1 e3 d0 a0 e0 a0 e0 a3 e0 e0 d0     ................
    89c0:	a4 e2 f1 c0 e0 f0 c0 c0 c0 00 00 00 00 00 80 00     ................
    89d0:	00 00 30 70 f8 f8 7f 7f 7f 7f 7f 3f bf cf ff ff     ..0p.......?....
    89e0:	ff fe ff bb 98 80 ff ff ff ff ee ef f7 f7 f7 73     ...............s
    89f0:	7b 79 bc 1e 04 00 00 00 00 00 00 00 00 00 00 00     {y..............
    8a00:	80 00 00 80 81 07 0f 1e 1e de de de dd df ed ff     ................
    8a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8a20:	fe fc fc fc fc de 8f 86 87 07 07 07 ff 91 ff ff     ................
    8a30:	ff ff ff ff 3f 1f cf 1f 7f cf 1f 7f 3f 8f ef 3f     ....?.......?..?
    8a40:	0f 6f 8f 8f ff ef ff ff ff ff 91 6e 0f 0f 07 07     .o.........n....
    8a50:	8e 8e de fc fc f8 fc fe ff ff ff ff ff ff ff ff     ................
    8a60:	ff ff ff ff ff ff ff ff ef ef dd df de de de 1f     ................
    8a70:	1f 0f 03 80 c0 00 00 80 80 00 00 00 00 00 00 03     ................
    8a80:	0f 1e 1f bf bf ff ff fe fe fc 79 33 03 03 8b d9     ..........y3....
    8a90:	dd de ce e7 f7 ff ff ff ff ff ff 7f 3f 3b 1b 07     ............?;..
    8aa0:	07 07 07 07 e3 e3 e3 73 7f 3f 02 28 17 2c 7f ff     .......s.?.(.,..
    8ab0:	ff ff ff fd fc fe fe fe fc fd fe f8 fe ff fc fe     ................
    8ac0:	ff fc fc ff ff ff ff ff ff 7f 28 0f 11 04 3f 7f     ..........(...?.
    8ad0:	f3 e3 e3 e7 07 07 0f 07 07 17 3b 7f 7f ff ff ff     ..........;.....
    8ae0:	ff ff ff f7 e7 ce de dd d9 8b 03 03 39 39 fc fe     ............99..
    8af0:	ff ff ff ff 9f 1f 1f 0b 03 00 00 00 00 00 00 00     ................
    8b00:	00 00 00 00 01 03 07 07 0f 0e 0c 0e 0e af ff ff     ................
    8b10:	ff ff ff ff 7f 3f 0f 17 7b fc fe ff ff fe 7c 18     .....?..{.....|.
    8b20:	00 00 00 00 03 03 01 00 00 00 00 00 00 00 00 00     ................
    8b30:	00 03 01 83 c2 b1 c3 00 03 03 c0 03 01 02 03 10     ................
    8b40:	e1 c3 c0 03 00 03 01 02 00 00 00 00 00 00 00 00     ................
    8b50:	00 01 03 07 00 00 00 00 10 7c fe ff ff fe fc 7b     .........|.....{
    8b60:	17 0f 1f 7f ff ff ff ff ff ff ef 0f 0e 0c 0e 07     ................
    8b70:	07 07 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8b88:	00 80 97 ff ff ff 0f 07 07 03 01 01 00 00 00 00     ................
    8b98:	0c 07 0f 0f 0f 0c 1c 58 f8 78 f0 f0 e0 c0 80 00     .......X.x......
	...
    8bb0:	00 00 09 0d 0f 03 00 00 00 1f 0f fe ff 78 00 00     .............x..
    8bc0:	01 03 03 0f 06 00 00 00 00 00 00 00 00 00 00 00     ................
    8bd0:	00 80 c0 c0 e0 f0 f8 f8 78 18 18 0f 0f 0f 0f 0c     ........x.......
    8be0:	00 00 00 00 00 01 03 03 07 07 ff ff ff df 80 80     ................
	...
    8c08:	01 0b 0f 0f 0f 1f 1c 18 00 00 00 00 00 00 00 00     ................
	...
    8c68:	18 1c 1e 0f 0f 0f 0f 01 00 00 00 00 00 00 00 00     ................
    8c78:	00 00 00 00                                         ....

00008c7c <FLASHPICS_eCarsLogo>:
	...
    8ca0:	00 00 80 80 40 40 a0 a0 a0 d0 d0 c0 e8 e8 e8 e0     ....@@..........
    8cb0:	f4 f4 f4 f4 f4 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8 f8     ................
    8cc0:	f0 f0 f4 f4 f4 f4 f4 f0 e0 e8 e8 e8 d0 d0 d0 a0     ................
    8cd0:	a0 a0 40 40 80 80 00 00 00 00 00 00 00 00 00 00     ..@@............
	...
    8d14:	00 00 80 c0 40 a0 d0 c8 e8 f4 f2 fa fd fd fe fe     ....@...........
    8d24:	ff ff ff ff ff ff ff ff 7f 7f 7f bf bf bf bf 1f     ................
    8d34:	df df df df 5f 5f 5f 5f 4f 5f 5f 5f 5f df df df     ....____O____...
    8d44:	5f 1f bf bf bf bf 7f 7f 7f ff ff ff ff ff ff ff     _...............
    8d54:	fe fe fd fd fa f2 f4 e8 c8 d0 a0 40 80 00 00 00     ...........@....
	...
    8d8c:	00 00 00 80 40 20 d0 ec f2 f9 fc fe ff ff ff ff     ....@ ..........
    8d9c:	ff ff ff ff ff 3f 9f 4f 2f 17 0b 0b 05 05 82 42     .....?.O/......B
    8dac:	a1 d1 e9 e4 f4 fa f8 fd fc fe fe fe ff ff ff ff     ................
    8dbc:	ff ff ff ff ff fe fe fe fd fd fa fa f4 e8 d1 a1     ................
    8dcc:	41 82 02 05 05 0b 13 37 6f 9f 7f ff ff ff ff ff     A......7o.......
    8ddc:	ff ff ff ff fe fd fa f4 e8 90 20 c0 00 00 00 00     .......... .....
	...
    8e0c:	60 18 e6 f9 fe ff ff ff ff ff ff ff ff ff ff ff     `...............
    8e1c:	ff 1f e7 19 06 01 00 00 00 00 c0 18 c4 f3 fc ff     ................
    8e2c:	ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 0f 2f 2f 2f 2f     ............////
    8e3c:	2f 2f 4f 5f bf 7f ff ff ff ff ff ff ff ff ff 7f     //O_............
    8e4c:	9c 61 1e 00 00 00 00 80 80 71 8c f1 ff ff ff ff     .a.......q......
    8e5c:	ff ff ff ff ff ff ff ff ff ff ff fc f1 c6 30 c0     ..............0.
	...
    8e88:	00 00 fc 00 f0 ff ff ff ff ff ff ff ff ff ff ff     ................
    8e98:	ff ff ff ff f3 00 ff 00 00 00 00 00 00 00 ff 00     ................
    8ea8:	ff ff ff ff ff ff ff ff 3e 3e 3e 3e 3e 3e 3e 00     ........>>>>>>>.
    8eb8:	3e 00 00 00 00 00 00 00 80 41 80 d5 eb eb eb ed     >........A......
    8ec8:	ed ec ea e5 f4 f4 f4 f0 fa fa fd fd fe ff ff ff     ................
    8ed8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8ee8:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    8f08:	00 00 1f 00 0f 7f ff ff ff ff ff ff ff ff ff ff     ................
    8f18:	ff ff ff ff ff fe f9 e6 d8 20 40 80 00 00 00 07     ......... @.....
    8f28:	08 33 4f 9f 7f ff ff ff ff ff ff ff ff ff ff f8     .3O.............
    8f38:	fa fa fa fa fa fa f9 fd fe ff ff ff ff ff ff ff     ................
    8f48:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f58:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8f68:	ff ff 3f 80 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...
    8f8c:	03 04 1b 27 5f bf 7f 7f ff ff ff ff ff ff ff ff     ...'_...........
    8f9c:	ff ff ff ff ff ff fe fe fd fa f2 f4 e8 e8 d0 d0     ................
    8fac:	c1 02 84 05 0b 17 17 2f 2f 5f 5f 5f 9f bf bf bf     .......//___....
    8fbc:	bf bf bf bf bf bf bf bf bf bf bf 3f 7f 7f ff ff     ...........?....
    8fcc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8fdc:	ff ff ff ff ff ff ff ff 7f 3f 9f 4f 37 09 06 01     .........?.O7...
	...
    9010:	00 00 01 02 02 05 0b 0b 17 17 17 2f 2f 2f 2f 2f     .........../////
    9020:	2f 2f 2f 2f 2f 2f 17 17 17 0b 0b 05 05 02 00 00     //////..........
	...
    9044:	00 00 00 01 01 02 02 05 05 0b 03 17 17 27 2f 2f     .............'//
    9054:	2f 2f 2f 2f 2f 2f 2f 2f 27 17 17 03 0b 09 05 02     ////////'.......
    9064:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000907c <FLASHPICS_PalonenLABS_128x64px>:
	...
    91fc:	fc cc cc cc cc cc cc fc 7c b0 e0 f0 bc 9c 8c 9c     ........|.......
    920c:	b8 f0 e0 80 fc fc fc 00 00 00 00 00 00 00 f0 fc     ................
    921c:	fc 0c 0c 0c 0c 0c 0c fc f8 0c fc fc 1c 7c f0 c0     .............|..
    922c:	00 00 fc fc 00 f8 fc cc cc cc cc cc cc 0c 0c 00     ................
    923c:	fc fc 0c 3c f8 e0 80 00 fc fc fc fc fc fc fc 00     ...<............
    924c:	00 00 00 00 00 80 c0 f0 f8 fc bc fc fc f0 e0 80     ................
    925c:	fc fc fc fc fc fc fc fc fc fc f0 f8 fc fc fc fc     ................
    926c:	fc fc fc fc f8 04 0c 1c 3c fc f8 f0 f0 e0 c0 c0     ........<.......
    927c:	0f 00 00 00 00 00 00 00 00 0f 0f 01 03 03 03 03     ................
    928c:	03 0f 0f 0f 03 0f 0f 0c 0c 0c 0c 0c 0c 0c 0f 0f     ................
    929c:	0f 0c 0c 0c 0c 0c 0c 0f 07 0c 0f 0f 00 00 01 07     ................
    92ac:	0f 0c 0f 0f 00 07 0f 0c 0c 0c 0c 0c 0c 0c 0c 00     ................
    92bc:	0f 0f 00 00 00 03 0f 0e 0f 0f 0f 03 0f 0f 0f 0e     ................
    92cc:	0e 0e 0e 0e 0e 0f 0f 0f 0f 07 07 07 0f 0f 0f 0f     ................
    92dc:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 03 07 0f 0f 0f 0f     ................
    92ec:	0f 0f 0f 0f 07 08 0c 0e 0f 0f 07 07 03 01 00 00     ................
	...

0000947c <FLASHPICS_pros>:
    947c:	00 00 00 00 00 f8 fc fe 1e 0e 0e 3e fe fc f8 00     ...........>....
    948c:	00 00 c0 e0 f8 fe 3e 0e 00 00 00 00 00 00 00 00     ......>.........
    949c:	00 00 00 00 00 1f 3f 7f 78 70 70 7c 3f bf ef f8     ......?.xpp|?...
    94ac:	fc 3f 9f c7 c1 c0 c0 c0 c0 80 00 00 00 00 00 00     .?..............
	...
    94c4:	80 e0 f0 fc 7f 1f 0f 03 fc ff ff ff 03 01 01 ff     ................
    94d4:	ff ff fe 00 00 00 00 00 00 00 00 00 00 00 00 0e     ................
    94e4:	0f 0f 03 01 00 00 00 00 00 03 07 0f 0f 0e 0f 07     ................
    94f4:	07 03 00 00 00 00 00 00                             ........

000094fc <FLASHPICS_plus>:
	...
    9508:	80 c0 c0 c0 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9520:	00 00 c0 e0 e0 e0 e0 e0 ff ff ff ff ff e0 e0 e0     ................
    9530:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    9540:	00 00 00 01 01 01 01 01 3f 7f 7f 7f 3f 01 01 01     ........?...?...
    9550:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000957c <FLASHPICS_minus>:
	...
    95a0:	00 00 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    95b0:	e0 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    95c0:	00 00 00 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    95d0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000095fc <FLASHPICS_X>:
    95fc:	00 00 18 3c 7c fc fc fc f8 f0 e0 c0 80 00 00 00     ...<|...........
    960c:	00 80 c0 e0 f0 f8 fc fc fc 7c 3c 18 00 00 00 00     .........|<.....
    961c:	00 00 00 00 00 00 01 03 07 0f 1f bf ff ff fe fe     ................
    962c:	ff ff bf 1f 0f 07 03 01 00 00 00 00 00 00 00 00     ................
    963c:	00 00 00 80 c0 e0 f0 f8 fc fe ff 7f 3f 1f 0f 0f     ............?...
    964c:	1f 3f 7f ff fe fc f8 f0 e0 c0 80 00 00 00 00 00     .?..............
    965c:	00 06 0f 0f 0f 0f 0f 07 03 01 00 00 00 00 00 00     ................
    966c:	00 00 00 00 01 03 07 0f 0f 0f 0f 0f 06 00 00 00     ................

0000967c <FLASHPICS_9>:
    967c:	00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    968c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    969c:	00 00 1f 7f ff ff ff f0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    96ac:	e0 e0 e0 e0 e0 e0 ff ff ff ff ff ff 00 00 00 00     ................
    96bc:	00 00 00 00 00 81 81 83 83 83 83 83 83 83 83 83     ................
    96cc:	83 83 83 83 83 c3 ff ff ff ff ff 3f 00 00 00 00     ...........?....
    96dc:	00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    96ec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

000096fc <FLASHPICS_8>:
    96fc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    970c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    971c:	00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0     ................
    972c:	f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00     ................
    973c:	00 7c ff ff ff ff ff c3 81 81 81 81 81 81 81 81     .|..............
    974c:	81 81 81 81 81 81 c3 ff ff ff ff ff 7c 00 00 00     ............|...
    975c:	00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    976c:	0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00     ................

0000977c <FLASHPICS_7>:
    977c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    978c:	7c 7c 7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00     |||||......x....
    979c:	00 00 01 03 03 03 01 00 00 00 00 00 00 00 80 c0     ................
    97ac:	e0 f0 f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00     .....?..........
	...
    97c4:	00 00 00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00     ................
	...
    97e4:	00 00 00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00     ................
	...

000097fc <FLASHPICS_6>:
    97fc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    980c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00 00     |||||||||8......
    981c:	00 00 ff ff ff ff ff ff f8 f8 f8 f8 f8 f8 f8 f8     ................
    982c:	f8 f8 f8 f8 f8 f8 f8 f0 f0 e0 c0 00 00 00 00 00     ................
    983c:	00 00 7f ff ff ff ff ff c0 80 80 80 80 80 80 80     ................
    984c:	80 80 80 80 80 80 c1 ff ff ff ff 7f 00 00 00 00     ................
    985c:	00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    986c:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

0000987c <FLASHPICS_5>:
    987c:	00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c     .......|||||||||
    988c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00 00     ||||||||||8.....
    989c:	00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0     ...?............
    98ac:	f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00 00     ................
    98bc:	00 00 00 00 00 00 80 81 81 81 81 81 81 81 81 81     ................
    98cc:	81 81 81 81 81 c3 ff ff ff ff 7e 00 00 00 00 00     ..........~.....
    98dc:	00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    98ec:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

000098fc <FLASHPICS_4>:
    98fc:	00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00 00     ................
    990c:	00 00 00 00 00 80 80 80 00 00 00 00 00 00 00 00     ................
    991c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    992c:	00 00 00 00 ff ff ff ff ff 00 00 00 00 00 00 00     ................
    993c:	00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8 f8     ....?...........
    994c:	f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00 00     ............p...
	...
    9970:	0f 0f 0f 0f 0f 00 00 00 00 00 00 00                 ............

0000997c <FLASHPICS_3>:
    997c:	00 00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    998c:	7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00 00     ||||............
    999c:	00 00 00 00 01 03 03 03 01 00 00 00 e0 f0 f0 f0     ................
    99ac:	f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00 00 00     ................
    99bc:	00 00 00 80 80 80 80 80 80 80 80 80 80 81 81 81     ................
    99cc:	81 81 81 81 83 c7 ff ff ff ff ff 7c 00 00 00 00     ...........|....
    99dc:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    99ec:	0f 0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00     ................

000099fc <FLASHPICS_2>:
    99fc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    9a0c:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    9a1c:	00 00 00 80 c0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    9a2c:	f0 f0 f0 f0 f0 f0 f9 ff ff 7f 3f 0f 00 00 00 00     ..........?.....
    9a3c:	00 00 fe ff ff ff ff ff 83 81 81 81 81 81 81 81     ................
    9a4c:	81 81 81 81 81 81 81 80 80 80 00 00 00 00 00 00     ................
    9a5c:	00 00 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9a6c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00     ................

00009a7c <FLASHPICS_1>:
    9a7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    9a8c:	fc fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    9aa8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9ab8:	00 00 00 00 00 00 00 80 80 80 80 80 80 80 80 80     ................
    9ac8:	80 ff ff ff ff ff ff 80 80 80 80 80 80 80 80 00     ................
    9ad8:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9ae8:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07     ................
    9af8:	00 00 00 00                                         ....

00009afc <FLASHPICS_0>:
    9afc:	00 00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    9b0c:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00     |||||...........
    9b1c:	00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00 00     ................
    9b2c:	00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00 00     ................
    9b3c:	00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80 80     ..?.............
    9b4c:	80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00 00     ...........?....
    9b5c:	00 00 00 00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9b6c:	0f 0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00     ................

00009b7c <FLASHPICS_ECARS_DEMO_9>:
	...
    9b90:	00 00 00 38 7c 7c 7c 7c 7c fc fc fc fc fc fc 00     ...8|||||.......
	...
    9bac:	00 00 00 f8 fc fc fc f8 00 00 00 00 00 00 00 00     ................
    9bbc:	00 00 00 00 00 00 80 80 80 00 00 00 00 00 00 00     ................
	...
    9be0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9bf0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    9c18:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    9c28:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    9c40:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    9c60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    9c70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    9c8c:	00 00 00 80 80 80 80 80 80 80 80 80 80 ff ff ff     ................
    9c9c:	ff ff ff 80 80 80 80 80 80 80 80 00 00 00 00 00     ................
    9cac:	00 00 00 07 1f 3f 7f 7f fc f8 f8 f8 f8 f8 f8 f8     .....?..........
    9cbc:	f8 f8 f8 f8 f8 ff ff ff ff ff f8 f8 f8 70 00 00     .............p..
	...
    9ce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    9cf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    9d0c:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9d1c:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00     ................
	...
    9d40:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    9d60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    9d70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    9d94:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    9da4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    9db4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    9de0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    9df0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    9e14:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    9e24:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    9e34:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    9e60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    9e70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    9e80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    9e90:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    9ea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    9eb0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    9ec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    9ed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    9ee0:	df df df df df df df df df df df df df df df df     ................
    9ef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    9f00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    9f10:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    9f20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    9f30:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    9f40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    9f50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    9f60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    9f70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

00009f7c <FLASHPICS_ECARS_DEMO_8>:
	...
    9f8c:	00 00 00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    9f9c:	7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 38 00 00 00 00     |||||||||||8....
    9fac:	00 00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c     ..........||||||
    9fbc:	7c 7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00     ||||||..........
	...
    9fe0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    9ff0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a00c:	00 00 00 0f 3f 7f ff ff f8 f0 f0 f0 f0 f0 f0 f0     ....?...........
    a01c:	f0 f0 f0 f0 f0 f0 f0 e0 e0 c0 80 00 00 00 00 00     ................
    a02c:	00 00 00 00 9f ff ff ff ff f8 f0 f0 f0 f0 f0 f0     ................
    a03c:	f0 f0 f0 f0 f0 f0 f8 ff ff ff ff 9f 00 00 00 00     ................
	...
    a060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a090:	00 00 00 80 81 81 81 81 81 81 81 81 81 81 81 81     ................
    a0a0:	81 81 c3 ff ff ff ff 7e 00 00 00 00 00 00 7c ff     .......~......|.
    a0b0:	ff ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81     ................
    a0c0:	81 81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00     .........|......
	...
    a0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a110:	00 00 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a120:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 01     ................
    a130:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a140:	0f 0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00     ................
	...
    a160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a194:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a1a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a1b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a214:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a224:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a234:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a280:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a290:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a2a0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    a2b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    a2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a2e0:	df df df df df df df df df df df df df df df df     ................
    a2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a310:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a320:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    a330:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    a340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a37c <FLASHPICS_ECARS_DEMO_7>:
	...
    a3a0:	c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a3b0:	7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00 00 00     ||..............
	...
    a3e0:	c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe fe fe fe fc     ................
    a3f0:	e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00 00 00 00 00     ................
	...
    a41c:	00 00 00 ff ff ff ff ff 01 00 00 00 00 00 00 00     ................
    a42c:	00 00 00 00 00 00 00 01 ff ff ff ff ff 00 00 00     ................
	...
    a460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    a470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 00     ................
	...
    a49c:	00 00 00 3f ff ff ff ff e0 c0 80 80 80 80 80 80     ...?............
    a4ac:	80 80 80 80 80 80 c0 e0 ff ff ff ff 3f 00 00 00     ............?...
	...
    a4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    a4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 00 00     ................
	...
    a520:	00 01 03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a530:	0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00 00     ................
	...
    a560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    a570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    a594:	00 1c fc e0 00 c0 f0 1c 1c f0 c0 00 e0 fc 1c 00     ................
    a5a4:	00 00 00 00 c0 e0 78 1e 06 00 00 00 80 e0 7c 1c     ......x.......|.
    a5b4:	7c e0 80 00 00 00 fe fe 20 10 10 10 f0 e0 00 00     |....... .......
	...
    a5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    a5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    a614:	00 00 01 0f 0e 03 00 00 00 00 03 0e 0f 01 00 00     ................
    a624:	00 30 3c 0f 03 01 00 00 00 00 00 0c 0f 03 01 01     .0<.............
    a634:	01 03 0f 0c 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
	...
    a660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    a670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    a680:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a690:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6b0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    a6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    a6e0:	df df df df df df df df df df df df df df df df     ................
    a6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    a700:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a710:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a720:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a730:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    a750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    a760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000a77c <FLASHPICS_ECARS_DEMO_6>:
	...
    a790:	fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     .....|||||||||||
    a7a0:	7c 7c 7c fc fc fc fc fc fc 78 00 00 00 00 00 00     |||......x......
    a7b0:	00 fc fc fc fc fc 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ......||||||||||
    a7c0:	7c fc f8 f8 f0 e0 80 00 00 00 00 00 00 00 00 00     |...............
	...
    a7e0:	c0 60 20 20 20 20 20 3c 06 02 02 02 02 02 06 3c     .`     <.......<
    a7f0:	20 20 20 20 20 60 c0 00 00 00 00 00 00 00 00 00          `..........
	...
    a810:	01 03 03 03 01 00 00 00 00 00 00 00 80 c0 e0 f0     ................
    a820:	f8 fe ff 3f 1f 0f 07 01 00 00 00 00 00 00 00 00     ...?............
    a830:	00 01 03 03 03 01 00 00 00 e0 f0 f0 f0 f0 f0 f0     ................
    a840:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
	...
    a860:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    a870:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    a898:	00 f0 fc fe ff ff 1f 07 03 01 00 00 00 00 00 00     ................
	...
    a8b0:	80 80 80 80 80 80 80 80 80 80 81 81 81 81 81 81     ................
    a8c0:	81 83 c7 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
	...
    a8e0:	ff 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
    a8f0:	04 00 04 00 04 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    a918:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
    a928:	00 00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 0f 0f     ................
    a938:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 07 07 03 01     ................
	...
    a960:	ff 00 02 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
    a970:	02 00 02 00 02 00 ff 00 00 00 00 00 00 00 00 00     ................
	...
    a9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    a9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    a9e0:	7f 78 79 78 79 78 79 78 79 78 79 78 79 78 79 78     .xyxyxyxyxyxyxyx
    a9f0:	79 78 79 78 79 78 7f 00 00 00 00 00 00 00 00 00     yxyxyx..........
	...
    aa20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    aa30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    aa60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    aa70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    aa80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aa90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aaa0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aab0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aae0:	df df df df df df df df df df df df df df df df     ................
    aaf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    ab00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    ab50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    ab60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ab70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000ab7c <FLASHPICS_ECARS_DEMO_5>:
    ab7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    ab8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    ab9c:	00 00 c0 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c 7c     ........||||||||
    abac:	7c 7c 7c 7c fc f8 f8 f0 e0 c0 00 00 00 00 00 00     ||||............
    abbc:	00 00 00 80 e0 f0 f8 f8 fc 7c 7c 7c 7c 7c 7c 7c     .........|||||||
    abcc:	7c 7c 7c 7c 7c fc f8 f8 f0 e0 80 00 00 00 00 00     |||||...........
    abdc:	00 00 00 00 c0 60 20 20 20 20 20 3c 06 02 02 02     .....`     <....
    abec:	02 02 06 3c 20 20 20 20 20 60 c0 00 00 00 00 00     ...<     `......
	...
    ac08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    ac18:	00 00 00 00 00 ff ff ff ff ff 01 00 00 00 00 00     ................
	...
    ac30:	00 01 ff ff ff ff ff 00 00 00 00 00 00 00 00 9f     ................
    ac40:	ff ff ff ff f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     ................
    ac50:	f0 f8 ff ff ff ff 9f 00 00 00 00 00 00 00 00 00     ................
    ac60:	ff 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
    ac70:	08 00 08 00 08 00 ff 00 00 00 00 00 00 00 00 80     ................
    ac80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    ac90:	80 80 80 80 80 80 80 00 00 00 00 00 00 3f ff ff     .............?..
    aca0:	ff ff e0 c0 80 80 80 80 80 80 80 80 80 80 80 80     ................
    acb0:	c0 e0 ff ff ff ff 3f 00 00 00 00 00 00 7c ff ff     ......?......|..
    acc0:	ff ff ff c3 81 81 81 81 81 81 81 81 81 81 81 81     ................
    acd0:	81 81 c3 ff ff ff ff ff 7c 00 00 00 00 00 00 00     ........|.......
    ace0:	ff e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0 e4 e0     ................
    acf0:	e4 e0 e4 e0 e4 e0 ff 00 00 00 00 00 00 00 07 0f     ................
    ad00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 01     ................
    ad20:	03 07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad30:	0f 07 07 03 01 00 00 00 00 00 00 00 00 00 01 03     ................
    ad40:	07 07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    ad50:	0f 0f 0f 0f 07 07 03 01 00 00 00 00 00 00 00 00     ................
    ad60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    ad70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    ada0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    adb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    ade0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    adf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ae20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ae30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ae60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ae70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ae80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    ae90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aeb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    aed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    aee0:	df df df df df df df df df df df df df df df df     ................
    aef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    af00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    af50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    af60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    af70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000af7c <FLASHPICS_ECARS_DEMO_4>:
    af7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    af8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    af9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    afac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    afbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    afcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    afdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    afec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b008:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b018:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b030:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b040:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b050:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b060:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b070:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b080:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b090:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b0a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b0b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b0c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b0d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b0e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b0f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b100:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b110:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b130:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b140:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b150:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b160:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b170:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b1a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b1b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b1e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b1f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b220:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b230:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b260:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b270:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b280:	fc fc fe fe fe fe fe fe fe fe fe 02 02 02 02 02     ................
    b290:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2a0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b2c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b2d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b2e0:	df df df df df df df df df df df df df df df df     ................
    b2f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b300:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10 10 10     ................
    b310:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b320:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b330:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b340:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b350:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b360:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b370:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b37c <FLASHPICS_ECARS_DEMO_3>:
    b37c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b38c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b39c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b3ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b3bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b3cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b3dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b3ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b408:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b418:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b430:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b440:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b450:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b460:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b470:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b480:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b490:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b4a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b4b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b4c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b4d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b4e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b4f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b500:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b510:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b530:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b540:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b550:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b560:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b570:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b5a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b5b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b5e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b5f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    b620:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    b630:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    b660:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    b670:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    b680:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    b690:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    b6a0:	fe fe fe fe fe 02 02 02 02 02 02 02 02 02 02 02     ................
    b6b0:	02 02 02 02 02 02 02 02 02 02 fe fe fe 02 02 02     ................
    b6c0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    b6d0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    b6e0:	df df df df df df df df df df df df df df df df     ................
    b6f0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    b700:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    b710:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    b720:	1f 1f 1f 1f 1f 10 10 10 10 10 10 10 10 10 10 10     ................
    b730:	10 10 10 10 10 10 10 10 10 10 1f 1f 1f 10 10 10     ................
    b740:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    b750:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    b760:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b770:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000b77c <FLASHPICS_ECARS_DEMO_2>:
    b77c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    b78c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    b79c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    b7ac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    b7bc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    b7cc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    b7dc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    b7ec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    b808:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b818:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    b830:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    b840:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    b850:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    b860:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    b870:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    b880:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    b890:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    b8a0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    b8b0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    b8c0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    b8d0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    b8e0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    b8f0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    b900:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b910:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    b930:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    b940:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    b950:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    b960:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    b970:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    b9a0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    b9b0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    b9e0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    b9f0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    ba20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    ba30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    ba60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    ba70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    ba80:	fc fc fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    ba90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    baa0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    bab0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 02 02 02     ................
    bac0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bad0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bae0:	df df df df df df df df df df df df df df df df     ................
    baf0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bb00:	0f 0f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb10:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb20:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    bb30:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 10 10 10     ................
    bb40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bb50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bb60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bb70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bb7c <FLASHPICS_ECARS_DEMO_1>:
    bb7c:	00 00 00 00 00 00 00 38 7c 7c 7c 7c 7c fc fc fc     .......8|||||...
    bb8c:	fc fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    bb9c:	00 00 00 fc fc fc fc fc 00 00 00 00 00 00 00 00     ................
    bbac:	00 00 00 00 00 80 80 80 80 80 00 00 00 00 00 00     ................
    bbbc:	00 00 00 00 38 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c 7c     ....8|||||||||||
    bbcc:	7c 7c 7c 7c 7c fc fc f8 f8 f0 e0 80 00 00 00 00     |||||...........
    bbdc:	00 00 00 00 c0 e0 e0 e0 e0 e0 e0 fc fe fe fe fe     ................
    bbec:	fe fe fe fc e0 e0 e0 e0 e0 e0 c0 00 00 00 00 00     ................
	...
    bc08:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc18:	00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00 00     ................
	...
    bc30:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    bc40:	80 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
    bc50:	e0 f0 f9 ff ff 7f 3f 0f 00 00 00 00 00 00 00 00     ......?.........
    bc60:	f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7 f7     ................
    bc70:	f7 f7 f7 f7 f7 f7 f7 00 00 00 00 00 00 00 00 80     ................
    bc80:	80 80 80 80 80 80 80 80 80 ff ff ff ff ff 80 80     ................
    bc90:	80 80 80 80 80 80 80 00 00 00 00 00 00 00 00 07     ................
    bca0:	1f 3f 7f 7f fc f8 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0     .?..............
    bcb0:	f0 ff ff ff ff ff f0 f0 f0 60 00 00 00 00 fc ff     .........`......
    bcc0:	ff ff ff ff 83 81 81 81 81 81 81 81 81 81 81 81     ................
    bcd0:	81 81 81 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
    bce0:	fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb     ................
    bcf0:	fb fb fb fb fb fb fb 00 00 00 00 00 00 00 07 0f     ................
    bd00:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd10:	0f 0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00     ................
	...
    bd30:	00 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 0f 0f     ................
    bd40:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bd50:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00 00 00 00 00     ................
    bd60:	fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd     ................
    bd70:	fd fd fd fd fd fd fd 00 00 00 00 00 00 00 00 00     ................
	...
    bda0:	00 fe fe 80 c0 60 30 10 00 00 f0 f0 20 10 10 f0     .....`0..... ...
    bdb0:	e0 20 10 10 f0 e0 00 00 00 00 00 00 00 00 00 00     . ..............
	...
    bde0:	7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e 7e     ~~~~~~~~~~~~~~~~
    bdf0:	7e 7e 7e 7e 7e 7e 7e 00 00 00 00 00 00 00 00 00     ~~~~~~~.........
	...
    be20:	00 0f 0f 01 01 03 06 0c 08 00 0f 0f 00 00 00 0f     ................
    be30:	0f 00 00 00 0f 0f 00 00 00 00 00 00 00 00 00 00     ................
	...
    be60:	bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf bf     ................
    be70:	bf bf bf bf bf bf bf 00 00 00 00 00 00 00 e0 f8     ................
    be80:	1c 04 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    be90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bea0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    beb0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bec0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    bed0:	02 02 02 06 04 1c f8 e0 00 00 00 00 00 00 00 00     ................
    bee0:	df df df df df df df df df df df df df df df df     ................
    bef0:	df df df df df df df 00 00 00 00 00 00 00 01 07     ................
    bf00:	0e 08 18 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf10:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf20:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf30:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf40:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
    bf50:	10 10 10 18 08 0e 07 01 00 00 00 00 00 00 00 00     ................
    bf60:	07 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    bf70:	0f 0f 0f 0f 0f 0f 07 00 00 00 00 00                 ............

0000bf7c <FLASHPICS_ECARS_DEMO_0>:
	...
    bf9c:	00 00 00 80 80 40 40 a0 a0 d0 d0 d0 e8 e8 e0 f4     .....@@.........
    bfac:	f4 f4 f0 fa fa fa fa fa f8 f8 fc fc fc fc fc fc     ................
    bfbc:	fc fc fc f8 f8 fa fa fa fa fa f8 f0 f4 f4 f4 e8     ................
    bfcc:	e8 e8 d0 d0 d0 a0 a0 40 40 80 80 00 00 00 00 00     .......@@.......
	...
    c014:	80 40 60 a0 d0 e8 e4 f4 fa f9 fd fe fe ff ff ff     .@`.............
    c024:	ff ff ff ff ff 7f 7f bf bf bf 5f 5f 5f 5f 8f 6f     ..........____.o
    c034:	6f 6f 6f af af af af a7 af af af af 6f 6f 6f af     ooo.........ooo.
    c044:	8f 5f 5f 5f 5f bf bf bf 7f 7f ff ff ff ff ff ff     .____...........
    c054:	ff fe fe fd f9 fa f4 e4 e8 d0 a0 40 80 00 00 00     ...........@....
	...
    c08c:	00 00 c0 20 90 e8 f6 f9 fc fe ff ff ff ff ff ff     ... ............
    c09c:	ff ff ff 7f 9f 4f 27 17 0b 05 05 02 82 41 a1 d0     .....O'......A..
    c0ac:	e8 f4 f2 fa fd fc fe fe ff ff ff ff ff ff ff ff     ................
    c0bc:	ff ff ff ff ff ff ff fe fe fd fd fa f4 e8 d0 20     ............... 
    c0cc:	c1 01 02 02 05 09 1b 37 cf 3f ff ff ff ff ff ff     .......7.?......
    c0dc:	ff ff ff ff fe fd fa f4 c8 90 60 80 00 00 00 00     ..........`.....
	...
    c108:	00 00 00 30 8c f3 fc ff ff ff ff ff ff ff ff ff     ...0............
    c118:	ff ff ff ff 0f f3 0c 03 00 00 00 00 00 e0 0c e2     ................
    c128:	f9 fe ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 07 17     .......???????..
    c138:	17 17 17 17 17 27 2f 5f bf 7f ff ff ff ff ff ff     .....'/_........
    c148:	7f 7f bf 4e 30 0f 00 00 00 80 c0 40 b8 c6 f8 ff     ...N0......@....
    c158:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fe f8     ................
    c168:	e3 18 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
	...
    c188:	00 fe 00 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c198:	ff ff ff f9 00 ff 00 00 00 00 00 00 00 7f 80 7f     ................
    c1a8:	ff ff ff ff ff ff ff 9f 9f 9f 9f 9f 9f 9f 00 1f     ................
    c1b8:	00 00 00 00 00 80 80 40 a0 c0 ea f5 f5 f5 f6 f6     .......@........
    c1c8:	f6 f5 f2 fa fa fa f8 fd fd fe fe ff ff ff ff ff     ................
    c1d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c1e8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c208:	00 0f 00 87 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    c218:	ff ff ff ff ff fc f3 ec 90 20 40 80 00 00 03 04     ......... @.....
    c228:	19 27 4f bf 7f 7f ff ff ff ff ff ff ff ff fc fd     .'O.............
    c238:	fd fd fd fd fd fc fe ff ff ff ff ff ff ff ff ff     ................
    c248:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c258:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    c268:	ff 1f c0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c288:	00 00 00 01 02 0d 13 2f 5f bf 3f 7f ff ff ff ff     ......./_.?.....
    c298:	ff ff ff ff ff ff ff ff ff ff ff fe fd f9 fa f4     ................
    c2a8:	f4 e8 e8 e0 01 42 02 05 0b 0b 17 17 2f 2f 2f 4f     .....B......///O
    c2b8:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 9f bf     ______________..
    c2c8:	3f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    c2d8:	ff ff ff ff ff ff ff ff ff ff 7f bf 9f 4f 27 1b     .............O'.
    c2e8:	04 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    c310:	00 00 01 01 02 05 05 0b 0b 0b 17 17 17 17 17 17     ................
    c320:	17 17 17 17 17 0b 0b 0b 05 05 02 02 01 00 00 00     ................
	...
    c348:	01 01 02 02 05 01 0b 0b 13 17 17 17 17 17 17 17     ................
    c358:	17 17 17 13 0b 0b 01 05 04 02 01 00 00 00 00 00     ................
	...

0000c37c <SONG_data>:
    c37c:	b9 ca be c9 2d c9 4d c8 2b c7 19 c7 37 c6 93 c4     ....-.M.+...7...
    c38c:	82 c4 71 c4 e3 c3 b9 c3                             ..q.....

0000c394 <SONG_titles>:
    c394:	5f cb ac ca b7 c9 1f c9 45 c8 23 c7 11 c7 31 c6     _.......E.#...1.
    c3a4:	8c c4 7b c4 65 c4 db c3                             ..{.e...

0000c3ac <SONG_formTitle>:
    c3ac:	53 65 6c 65 63 74 20 74 75 6e 65 73 00              Select tunes.

0000c3b9 <SONG_positiveActionTune>:
    c3b9:	0c 00 f6 36 02 00 01 00 0c 00 d9 15 02 00 01 00     ...6............
    c3c9:	0c 00 5e 12 02 00 01 00 20 00 c4 0d 10 00 01 00     ..^..... .......
	...

0000c3db <SONG_positiveActionTitle>:
    c3db:	53 75 63 63 65 73 73 00                             Success.

0000c3e3 <SONG_disasterBeepTune>:
    c3e3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c3f3:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c403:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c413:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c423:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c433:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c443:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
    c453:	02 00 f6 36 02 00 eb 26 02 00 f6 36 02 00 eb 26     ...6...&...6...&
	...

0000c465 <SONG_disasterBeepTitle>:
    c465:	4d 61 6c 66 75 6e 63 74 69 6f 6e 00                 Malfunction.

0000c471 <SONG_negativeBeepTune>:
    c471:	20 00 cd 3d 1f 00 01 00 00 00                        ..=......

0000c47b <SONG_negativeBeepTitle>:
    c47b:	42 65 65 70 20 32 00                                Beep 2.

0000c482 <SONG_positiveBeepTune>:
    c482:	03 00 ec 0a 02 00 01 00 00 00                       ..........

0000c48c <SONG_positiveBeepTitle>:
    c48c:	42 65 65 70 20 31 00                                Beep 1.

0000c493 <SONG_toneScaleTune>:
    c493:	08 00 74 41 08 00 cd 3d 08 00 4c 3a 08 00 f6 36     ..tA...=..L:...6
    c4a3:	08 00 fc 33 08 00 fa 30 08 00 4d 2e 08 00 a2 2b     ...3...0..M....+
    c4b3:	08 00 42 29 08 00 eb 26 08 00 bc 24 08 00 b2 22     ..B)...&...$..."
    c4c3:	08 00 ba 20 08 00 e6 1e 08 00 26 1d 08 00 88 1b     ... ......&.....
    c4d3:	08 00 fe 19 08 00 88 18 08 00 26 17 08 00 d9 15     ..........&.....
    c4e3:	08 00 a1 14 08 00 75 13 08 00 5e 12 08 00 54 11     ......u...^...T.
    c4f3:	08 00 5d 10 08 00 6f 0f 08 00 93 0e 08 00 c4 0d     ..]...o.........
    c503:	08 00 fc 0c 08 00 41 0c 08 00 90 0b 08 00 ec 0a     ......A.........
    c513:	08 00 4e 0a 08 00 ba 09 08 00 2f 09 08 00 ab 08     ..N......./.....
    c523:	08 00 2e 08 08 00 b8 07 08 00 49 07 08 00 e1 06     ..........I.....
    c533:	08 00 7e 06 08 00 20 06 08 00 c9 05 08 00 75 05     ..~... .......u.
    c543:	08 00 26 05 08 00 dc 04 08 00 97 04 08 00 56 04     ..&...........V.
    c553:	08 00 16 04 08 00 dc 03 08 00 a5 03 20 00 71 03     ............ .q.
    c563:	08 00 a5 03 08 00 dc 03 08 00 16 04 08 00 56 04     ..............V.
    c573:	08 00 97 04 08 00 dc 04 08 00 26 05 08 00 75 05     ..........&...u.
    c583:	08 00 c9 05 08 00 20 06 08 00 7e 06 08 00 e1 06     ...... ...~.....
    c593:	08 00 49 07 08 00 b8 07 08 00 2e 08 08 00 ab 08     ..I.............
    c5a3:	08 00 2f 09 08 00 ba 09 08 00 4e 0a 08 00 ec 0a     ../.......N.....
    c5b3:	08 00 90 0b 08 00 41 0c 08 00 fc 0c 08 00 c4 0d     ......A.........
    c5c3:	08 00 93 0e 08 00 6f 0f 08 00 5d 10 08 00 54 11     ......o...]...T.
    c5d3:	08 00 5e 12 08 00 75 13 08 00 a1 14 08 00 d9 15     ..^...u.........
    c5e3:	08 00 26 17 08 00 88 18 08 00 fe 19 08 00 88 1b     ..&.............
    c5f3:	08 00 26 1d 08 00 e6 1e 08 00 ba 20 08 00 b2 22     ..&........ ..."
    c603:	08 00 bc 24 08 00 eb 26 08 00 42 29 08 00 a2 2b     ...$...&..B)...+
    c613:	08 00 4d 2e 08 00 fa 30 08 00 fc 33 08 00 f6 36     ..M....0...3...6
    c623:	08 00 4c 3a 08 00 cd 3d 08 00 74 41 00 00           ..L:...=..tA..

0000c631 <SONG_toneScaleTitle>:
    c631:	53 63 61 6c 65 00                                   Scale.

0000c637 <SONG_whistleTune>:
    c637:	02 00 c3 05 02 00 98 05 02 00 79 05 02 00 51 05     ..........y...Q.
    c647:	02 00 2e 05 02 00 09 05 02 00 e4 04 02 00 c1 04     ................
    c657:	02 00 9c 04 02 00 76 04 02 00 52 04 02 00 2d 04     ......v...R...-.
    c667:	02 00 08 04 02 00 e2 03 02 00 b8 03 02 00 9a 03     ................
    c677:	02 00 75 03 02 00 4a 03 02 00 2b 03 02 00 04 03     ..u...J...+.....
    c687:	02 00 e0 02 02 00 01 00 02 00 c3 05 02 00 9d 05     ................
    c697:	02 00 79 05 02 00 51 05 02 00 2e 05 02 00 09 05     ..y...Q.........
    c6a7:	02 00 e4 04 02 00 c1 04 02 00 9c 04 02 00 77 04     ..............w.
    c6b7:	02 00 52 04 02 00 2d 04 02 00 08 04 02 00 e2 03     ..R...-.........
    c6c7:	02 00 b8 03 02 00 9a 03 02 00 9a 03 02 00 be 03     ................
    c6d7:	02 00 e2 03 02 00 08 04 02 00 2d 04 02 00 52 04     ..........-...R.
    c6e7:	02 00 76 04 02 00 9c 04 02 00 c1 04 02 00 e5 04     ..v.............
    c6f7:	02 00 09 05 02 00 2e 05 02 00 51 05 02 00 79 05     ..........Q...y.
    c707:	02 00 98 05 02 00 c3 05 00 00                       ..........

0000c711 <SONG_whistleTitle>:
    c711:	57 68 69 73 74 6c 65 00                             Whistle.

0000c719 <SONG_siren2Tune>:
    c719:	40 00 2f 09 40 00 c4 0d ff ff                       @./.@.....

0000c723 <SONG_siren2Title>:
    c723:	53 69 72 65 6e 20 32 00                             Siren 2.

0000c72b <SONG_siren1Tune>:
    c72b:	08 00 85 0b 08 00 70 0b 08 00 58 0b 08 00 42 0b     ......p...X...B.
    c73b:	08 00 2b 0b 08 00 18 0b 08 00 00 0b 08 00 ea 0a     ..+.............
    c74b:	08 00 d3 0a 08 00 bc 0a 08 00 a8 0a 08 00 92 0a     ................
    c75b:	08 00 7c 0a 08 00 65 0a 08 00 4e 0a 08 00 38 0a     ..|...e...N...8.
    c76b:	08 00 22 0a 08 00 0c 0a 08 00 f7 09 08 00 e0 09     ..".............
    c77b:	08 00 cb 09 08 00 b5 09 08 00 9e 09 08 00 87 09     ................
    c78b:	08 00 71 09 08 00 5b 09 08 00 45 09 08 00 30 09     ..q...[...E...0.
    c79b:	08 00 1a 09 08 00 04 09 08 00 ed 08 08 00 d6 08     ................
    c7ab:	08 00 c0 08 08 00 ab 08 08 00 94 08 08 00 94 08     ................
    c7bb:	08 00 ab 08 08 00 c0 08 08 00 d6 08 08 00 ed 08     ................
    c7cb:	08 00 04 09 08 00 1a 09 08 00 30 09 08 00 45 09     ..........0...E.
    c7db:	08 00 5b 09 08 00 71 09 08 00 87 09 08 00 9e 09     ..[...q.........
    c7eb:	08 00 b5 09 08 00 cb 09 08 00 e0 09 08 00 f7 09     ................
    c7fb:	08 00 0c 0a 08 00 22 0a 08 00 38 0a 08 00 4e 0a     ......"...8...N.
    c80b:	08 00 65 0a 08 00 7c 0a 08 00 92 0a 08 00 a8 0a     ..e...|.........
    c81b:	08 00 bc 0a 08 00 d3 0a 08 00 ea 0a 08 00 00 0b     ................
    c82b:	08 00 18 0b 08 00 2b 0b 08 00 42 0b 08 00 58 0b     ......+...B...X.
    c83b:	08 00 70 0b 08 00 85 0b ff ff                       ..p.......

0000c845 <SONG_siren1Title>:
    c845:	53 69 72 65 6e 20 31 00                             Siren 1.

0000c84d <SONG_solveigsSangTune>:
    c84d:	80 00 88 18 80 00 5e 12 40 00 5d 10 40 00 6f 0f     ......^.@.].@.o.
    c85d:	80 00 c4 0d 40 00 41 0c 40 00 90 0b 05 00 01 00     ....@.A.@.......
    c86d:	40 00 90 0b 40 00 41 0c 05 00 01 00 40 00 41 0c     @...@.A.....@.A.
    c87d:	40 00 6f 0f 80 00 5e 12 05 00 01 00 40 00 5e 12     @.o...^.....@.^.
    c88d:	40 00 6f 0f 05 00 01 00 40 00 6f 0f 40 00 5d 10     @.o.....@.o.@.].
    c89d:	05 00 01 00 40 00 5d 10 40 00 75 13 05 00 01 00     ....@.].@.u.....
    c8ad:	10 00 75 13 00 02 88 18 80 00 01 00 80 00 88 18     ..u.............
    c8bd:	80 00 5e 12 40 00 5d 10 40 00 6f 0f 80 00 c4 0d     ..^.@.].@.o.....
    c8cd:	40 00 41 0c 40 00 90 0b 05 00 01 00 40 00 90 0b     @.A.@.......@...
    c8dd:	40 00 41 0c 05 00 01 00 40 00 41 0c 40 00 6f 0f     @.A.....@.A.@.o.
    c8ed:	80 00 5e 12 05 00 01 00 40 00 5e 12 40 00 6f 0f     ..^.....@.^.@.o.
    c8fd:	05 00 01 00 40 00 6f 0f 40 00 5d 10 05 00 01 00     ....@.o.@.].....
    c90d:	40 00 5d 10 40 00 5e 12 00 02 41 0c 80 00 01 00     @.].@.^...A.....
    c91d:	ff ff                                               ..

0000c91f <SONG_solveigsSangTitle>:
    c91f:	53 6f 6c 76 65 69 67 73 20 73 61 6e 67 00           Solveigs sang.

0000c92d <SONG_minuetTune>:
    c92d:	20 00 41 0c 10 00 5e 12 10 00 5d 10 10 00 93 0e      .A...^...].....
    c93d:	10 00 c4 0d 20 00 41 0c 20 00 5e 12 20 00 5e 12     .... .A. .^. .^.
    c94d:	20 00 ec 0a 10 00 c4 0d 10 00 41 0c 10 00 ec 0a      .........A.....
    c95d:	10 00 ba 09 20 00 2f 09 20 00 5e 12 20 00 5e 12     .... ./. .^. .^.
    c96d:	20 00 c4 0d 10 00 41 0c 10 00 c4 0d 10 00 93 0e      .....A.........
    c97d:	10 00 5d 10 20 00 93 0e 10 00 c4 0d 10 00 93 0e     ..]. ...........
    c98d:	10 00 5d 10 10 00 5e 12 20 00 75 13 10 00 5e 12     ..]...^. .u...^.
    c99d:	10 00 5d 10 10 00 93 0e 10 00 5e 12 20 00 93 0e     ..].......^. ...
    c9ad:	20 00 5d 10 04 00 01 00 ff ff                        .].......

0000c9b7 <SONG_minuetTitle>:
    c9b7:	4d 69 6e 75 65 74 00                                Minuet.

0000c9be <SONG_turkeyMarchTune>:
    c9be:	10 00 75 13 10 00 d9 15 10 00 26 17 10 00 d9 15     ..u.......&.....
    c9ce:	30 00 5e 12 10 00 01 00 10 00 5d 10 10 00 5e 12     0.^.......]...^.
    c9de:	10 00 75 13 10 00 5e 12 30 00 93 0e 10 00 01 00     ..u...^.0.......
    c9ee:	10 00 c4 0d 10 00 93 0e 10 00 6f 0f 10 00 93 0e     ..........o.....
    c9fe:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ca0e:	10 00 ba 09 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    ca1e:	30 00 2f 09 10 00 01 00 10 00 ec 0a 10 00 01 00     0./.............
    ca2e:	10 00 2f 09 05 00 01 00 05 00 41 0c 05 00 ec 0a     ../.......A.....
    ca3e:	20 00 ba 09 10 00 ec 0a 10 00 01 00 10 00 41 0c      .............A.
    ca4e:	10 00 01 00 10 00 ec 0a 10 00 01 00 05 00 41 0c     ..............A.
    ca5e:	05 00 ec 0a 20 00 ba 09 10 00 ec 0a 10 00 01 00     .... ...........
    ca6e:	10 00 41 0c 10 00 01 00 10 00 ec 0a 05 00 01 00     ..A.............
    ca7e:	05 00 41 0c 05 00 ec 0a 20 00 ba 09 10 00 ec 0a     ..A..... .......
    ca8e:	10 00 01 00 10 00 41 0c 10 00 01 00 10 00 fc 0c     ......A.........
    ca9e:	10 00 01 00 30 00 93 0e 10 00 01 00 ff ff           ....0.........

0000caac <SONG_turkeyMarchTitle>:
    caac:	54 75 72 6b 65 79 20 6d 61 72 63 68 00              Turkey march.

0000cab9 <SONG_furEliseTune>:
    cab9:	10 00 ec 0a 10 00 90 0b 10 00 ec 0a 10 00 90 0b     ................
    cac9:	10 00 ec 0a 10 00 93 0e 10 00 41 0c 10 00 c4 0d     ..........A.....
    cad9:	20 00 5d 10 10 00 01 00 10 00 88 1b 10 00 d9 15      .].............
    cae9:	10 00 5d 10 20 00 93 0e 10 00 01 00 10 00 d9 15     ..]. ...........
    caf9:	10 00 54 11 10 00 93 0e 20 00 c4 0d 10 00 01 00     ..T..... .......
    cb09:	10 00 d9 15 10 00 ec 0a 10 00 90 0b 10 00 ec 0a     ................
    cb19:	10 00 90 0b 10 00 ec 0a 10 00 93 0e 10 00 41 0c     ..............A.
    cb29:	10 00 c4 0d 20 00 5d 10 10 00 01 00 10 00 88 1b     .... .].........
    cb39:	10 00 d9 15 10 00 5d 10 20 00 93 0e 10 00 01 00     ......]. .......
    cb49:	10 00 d9 15 10 00 c4 0d 10 00 93 0e 20 00 5d 10     ............ .].
    cb59:	10 00 01 00 ff ff                                   ......

0000cb5f <SONG_furEliseTitle>:
    cb5f:	46 75 65 72 20 45 6c 69 73 65 00                    Fuer Elise.

0000cb6a <big_number_pictures>:
    cb6a:	fc 9a 7c 9a fc 99 7c 99 fc 98 7c 98 fc 97 7c 97     ..|...|...|...|.
    cb7a:	fc 96 7c 96 fc 95 7c 95 fc 94 7c 94                 ..|...|...|.

0000cb86 <soc_pictures>:
    cb86:	cc 32 cc 32 cc 31 cc 31 cc 30 cc 30 cc 2f cc 2f     .2.2.1.1.0.0././
    cb96:	cc 2e cc 2e cc 2d cc 2d cc 2c cc 2c cc 2b cc 2b     .....-.-.,.,.+.+
    cba6:	cc 2a cc 2a cc 29 cc 29 cc 28 cc 28 cc 27 cc 27     .*.*.).).(.(.'.'
    cbb6:	cc 26 cc 26 cc 25 cc 25 cc 24 cc 24 cc 23 cc 23     .&.&.%.%.$.$.#.#
    cbc6:	cc 22 cc 22 cc 21 cc 21 cc 20 cc 20 cc 1f cc 1f     .".".!.!. . ....
    cbd6:	cc 1e cc 1e cc 1d cc 1d cc 1c cc 1c cc 1b cc 1b     ................
    cbe6:	cc 1a cc 1a cc 19 cc 19 cc 18 cc 18 cc 17 cc 17     ................
    cbf6:	cc 16 cc 16 cc 15 cc 15 cc 14 cc 14 cc 13 cc 13     ................
    cc06:	cc 12 cc 12 cc 11 cc 11 cc 10 cc 10 cc 0f cc 0f     ................
    cc16:	cc 0e cc 0e cc 0d cc 0d cc 0c cc 0c cc 0b cc 0b     ................
    cc26:	cc 0a cc 0a cc 09 cc 09 cc 08 cc 08 cc 07 cc 07     ................
    cc36:	cc 06 cc 06 cc 05 cc 05 cc 04 cc 04 cc 03 cc 03     ................
    cc46:	cc 02 cc 02 cc 01 cc 01 cc 00 cc 00                 ............

0000cc52 <FORMS_focusIndicator>:
    cc52:	3e 1c 08 00                                         >...

0000cc56 <TERMFONT_fontdata>:
    cc56:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    cc66:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    cc76:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
    cc86:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
    cc96:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
    cca6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
    ccb6:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
    ccc6:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
    ccd6:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
    cce6:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
    ccf6:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
    cd06:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
    cd16:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
    cd26:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    cd36:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    cd46:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
    cd56:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
    cd66:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
    cd76:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
    cd86:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
    cd96:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
    cda6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
    cdb6:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
    cdc6:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
    cdd6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
    cde6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
    cdf6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
    ce06:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
    ce16:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
    ce26:	00 00 41 36 08 00 02 01 02 04 02 78 44 42 44 78     ..A6.......xDBDx

0000ce36 <__ctors_end>:
    ce36:	11 24       	eor	r1, r1
    ce38:	1f be       	out	0x3f, r1	; 63
    ce3a:	cf ef       	ldi	r28, 0xFF	; 255
    ce3c:	d1 e2       	ldi	r29, 0x21	; 33
    ce3e:	de bf       	out	0x3e, r29	; 62
    ce40:	cd bf       	out	0x3d, r28	; 61

0000ce42 <__do_copy_data>:
    ce42:	12 e0       	ldi	r17, 0x02	; 2
    ce44:	a0 e0       	ldi	r26, 0x00	; 0
    ce46:	b2 e0       	ldi	r27, 0x02	; 2
    ce48:	e4 ec       	ldi	r30, 0xC4	; 196
    ce4a:	f5 ef       	ldi	r31, 0xF5	; 245
    ce4c:	00 e0       	ldi	r16, 0x00	; 0
    ce4e:	0b bf       	out	0x3b, r16	; 59
    ce50:	02 c0       	rjmp	.+4      	; 0xce56 <__do_copy_data+0x14>
    ce52:	07 90       	elpm	r0, Z+
    ce54:	0d 92       	st	X+, r0
    ce56:	aa 35       	cpi	r26, 0x5A	; 90
    ce58:	b1 07       	cpc	r27, r17
    ce5a:	d9 f7       	brne	.-10     	; 0xce52 <__do_copy_data+0x10>

0000ce5c <__do_clear_bss>:
    ce5c:	18 e1       	ldi	r17, 0x18	; 24
    ce5e:	aa e5       	ldi	r26, 0x5A	; 90
    ce60:	b2 e0       	ldi	r27, 0x02	; 2
    ce62:	01 c0       	rjmp	.+2      	; 0xce66 <.do_clear_bss_start>

0000ce64 <.do_clear_bss_loop>:
    ce64:	1d 92       	st	X+, r1

0000ce66 <.do_clear_bss_start>:
    ce66:	ab 3a       	cpi	r26, 0xAB	; 171
    ce68:	b1 07       	cpc	r27, r17
    ce6a:	e1 f7       	brne	.-8      	; 0xce64 <.do_clear_bss_loop>
    ce6c:	0e 94 db 68 	call	0xd1b6	; 0xd1b6 <main>
    ce70:	0c 94 e1 7a 	jmp	0xf5c2	; 0xf5c2 <_exit>

0000ce74 <__bad_interrupt>:
    ce74:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000ce78 <strcmp>:
    ce78:	fb 01       	movw	r30, r22
    ce7a:	dc 01       	movw	r26, r24
    ce7c:	8d 91       	ld	r24, X+
    ce7e:	01 90       	ld	r0, Z+
    ce80:	80 19       	sub	r24, r0
    ce82:	01 10       	cpse	r0, r1
    ce84:	d9 f3       	breq	.-10     	; 0xce7c <strcmp+0x4>
    ce86:	99 0b       	sbc	r25, r25
    ce88:	08 95       	ret

0000ce8a <strncpy>:
    ce8a:	fb 01       	movw	r30, r22
    ce8c:	dc 01       	movw	r26, r24
    ce8e:	41 50       	subi	r20, 0x01	; 1
    ce90:	50 40       	sbci	r21, 0x00	; 0
    ce92:	48 f0       	brcs	.+18     	; 0xcea6 <strncpy+0x1c>
    ce94:	01 90       	ld	r0, Z+
    ce96:	0d 92       	st	X+, r0
    ce98:	00 20       	and	r0, r0
    ce9a:	c9 f7       	brne	.-14     	; 0xce8e <strncpy+0x4>
    ce9c:	01 c0       	rjmp	.+2      	; 0xcea0 <strncpy+0x16>
    ce9e:	1d 92       	st	X+, r1
    cea0:	41 50       	subi	r20, 0x01	; 1
    cea2:	50 40       	sbci	r21, 0x00	; 0
    cea4:	e0 f7       	brcc	.-8      	; 0xce9e <strncpy+0x14>
    cea6:	08 95       	ret

0000cea8 <__eerd_word>:
    cea8:	cf 92       	push	r12
    ceaa:	df 92       	push	r13
    ceac:	ef 92       	push	r14
    ceae:	ff 92       	push	r15
    ceb0:	0f 93       	push	r16
    ceb2:	1f 93       	push	r17
    ceb4:	7c 01       	movw	r14, r24
    ceb6:	6b 01       	movw	r12, r22
    ceb8:	fb 01       	movw	r30, r22
    ceba:	09 95       	icall
    cebc:	08 2f       	mov	r16, r24
    cebe:	c7 01       	movw	r24, r14
    cec0:	01 96       	adiw	r24, 0x01	; 1
    cec2:	f6 01       	movw	r30, r12
    cec4:	09 95       	icall
    cec6:	18 2f       	mov	r17, r24
    cec8:	c8 01       	movw	r24, r16
    ceca:	1f 91       	pop	r17
    cecc:	0f 91       	pop	r16
    cece:	ff 90       	pop	r15
    ced0:	ef 90       	pop	r14
    ced2:	df 90       	pop	r13
    ced4:	cf 90       	pop	r12
    ced6:	08 95       	ret

0000ced8 <eeprom_read_byte>:
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
    ced8:	f9 99       	sbic	0x1f, 1	; 31
    ceda:	fe cf       	rjmp	.-4      	; 0xced8 <eeprom_read_byte>
#if E2END <= 0xFF
    EEARL = (size_t)__p;
#else
    EEAR = (size_t)__p;
    cedc:	92 bd       	out	0x22, r25	; 34
    cede:	81 bd       	out	0x21, r24	; 33
    /* Use inline assembly below as some AVRs have problems with accessing
    EECR with STS instructions. For example, see errata for ATmega64. 
    The code below also assumes that EECR and EEDR are in the I/O space.
    */
    uint8_t __result;
    __asm__ __volatile__
    cee0:	f8 9a       	sbi	0x1f, 0	; 31
    cee2:	80 b5       	in	r24, 0x20	; 32
        : "i" (_SFR_IO_ADDR(EECR)),
          "i" (EERE),
          "i" (_SFR_IO_ADDR(EEDR))
    );
    return __result;
}
    cee4:	99 27       	eor	r25, r25
    cee6:	08 95       	ret

0000cee8 <UnknownError>:
void Terminal( void );
void LcdContrast( void );


void UnknownError( void )
{
    cee8:	0f 93       	push	r16
    ceea:	1f 93       	push	r17
	POPUP_MsgBox( 14, 1, 10, "Unknown error!", NULL );
    ceec:	00 e0       	ldi	r16, 0x00	; 0
    ceee:	10 e0       	ldi	r17, 0x00	; 0
    cef0:	20 e0       	ldi	r18, 0x00	; 0
    cef2:	32 e0       	ldi	r19, 0x02	; 2
    cef4:	4a e0       	ldi	r20, 0x0A	; 10
    cef6:	61 e0       	ldi	r22, 0x01	; 1
    cef8:	8e e0       	ldi	r24, 0x0E	; 14
    cefa:	0e 94 6c 6e 	call	0xdcd8	; 0xdcd8 <POPUP_MsgBox>
	for (;;) {}
    cefe:	ff cf       	rjmp	.-2      	; 0xcefe <UnknownError+0x16>

0000cf00 <uart_putchar>:
	SendChar( '\n' );
}
*/

static int uart_putchar(char c, FILE *stream)
    {
    cf00:	cf 93       	push	r28
    cf02:	c8 2f       	mov	r28, r24

      if (c == '\n')
    cf04:	8a 30       	cpi	r24, 0x0A	; 10
    cf06:	19 f4       	brne	.+6      	; 0xcf0e <uart_putchar+0xe>
        uart_putchar('\r', stream);
    cf08:	8d e0       	ldi	r24, 0x0D	; 13
    cf0a:	0e 94 80 67 	call	0xcf00	; 0xcf00 <uart_putchar>
      while(!(UCSR1A & (1<<UDRE1)));
    cf0e:	80 91 c8 00 	lds	r24, 0x00C8
    cf12:	85 ff       	sbrs	r24, 5
    cf14:	fc cf       	rjmp	.-8      	; 0xcf0e <uart_putchar+0xe>
      UDR1 = c;
    cf16:	c0 93 ce 00 	sts	0x00CE, r28
      return 0;
    }
    cf1a:	80 e0       	ldi	r24, 0x00	; 0
    cf1c:	90 e0       	ldi	r25, 0x00	; 0
    cf1e:	cf 91       	pop	r28
    cf20:	08 95       	ret

0000cf22 <__vector_36>:

SIGNAL(USART1_RX_vect)
{
    cf22:	1f 92       	push	r1
    cf24:	0f 92       	push	r0
    cf26:	0f b6       	in	r0, 0x3f	; 63
    cf28:	0f 92       	push	r0
    cf2a:	11 24       	eor	r1, r1
    cf2c:	8f 93       	push	r24
  uint8_t s;

  s = UCSR1A;
    cf2e:	80 91 c8 00 	lds	r24, 0x00C8
  urx = UDR1;
    cf32:	80 91 ce 00 	lds	r24, 0x00CE
    cf36:	80 93 6b 02 	sts	0x026B, r24
//  if (bit_is_clear(s, FE1)) {
    urx_recv = 1;
    cf3a:	81 e0       	ldi	r24, 0x01	; 1
    cf3c:	80 93 6c 02 	sts	0x026C, r24
    cf40:	8f 91       	pop	r24
    cf42:	0f 90       	pop	r0
    cf44:	0f be       	out	0x3f, r0	; 63
    cf46:	0f 90       	pop	r0
    cf48:	1f 90       	pop	r1
    cf4a:	18 95       	reti

0000cf4c <USART_Init>:

void USART_Init(void)
 {
	
  /* Enable receiver, transmitter and receive interrupt. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
    cf4c:	88 e9       	ldi	r24, 0x98	; 152
    cf4e:	80 93 c9 00 	sts	0x00C9, r24
//  UCSR1B |= 1<<RXCIE1;  // receive interrupt enabled

//  UCSR1C |= 1<<1;
//  UCSR1C |= 1<<2;
  UBRR1H = 0x00;
    cf52:	10 92 cd 00 	sts	0x00CD, r1
  UBRR1L = ((CPU_F/16)/BAUD)-1; // calculates the speed of serial transmission
    cf56:	87 e0       	ldi	r24, 0x07	; 7
    cf58:	80 93 cc 00 	sts	0x00CC, r24
    cf5c:	08 95       	ret

0000cf5e <xtod>:
                // return 0
                return 0;

}

char xtod(char c) {
    cf5e:	98 2f       	mov	r25, r24
 if (c>='0' && c<='9') return c-'0';
    cf60:	80 53       	subi	r24, 0x30	; 48
    cf62:	8a 30       	cpi	r24, 0x0A	; 10
    cf64:	10 f4       	brcc	.+4      	; 0xcf6a <xtod+0xc>
    cf66:	99 27       	eor	r25, r25
    cf68:	08 95       	ret
 if (c>='A' && c<='F') return c-'A'+10;
    cf6a:	89 2f       	mov	r24, r25
    cf6c:	81 54       	subi	r24, 0x41	; 65
    cf6e:	86 30       	cpi	r24, 0x06	; 6
    cf70:	10 f4       	brcc	.+4      	; 0xcf76 <xtod+0x18>
    cf72:	97 53       	subi	r25, 0x37	; 55
    cf74:	05 c0       	rjmp	.+10     	; 0xcf80 <xtod+0x22>
 if (c>='a' && c<='f') return c-'a'+10;
    cf76:	89 2f       	mov	r24, r25
    cf78:	81 56       	subi	r24, 0x61	; 97
    cf7a:	86 30       	cpi	r24, 0x06	; 6
    cf7c:	20 f4       	brcc	.+8      	; 0xcf86 <xtod+0x28>
    cf7e:	97 55       	subi	r25, 0x57	; 87
    cf80:	89 2f       	mov	r24, r25
    cf82:	99 27       	eor	r25, r25
    cf84:	08 95       	ret
 return c=0;        // not Hex digit
    cf86:	80 e0       	ldi	r24, 0x00	; 0
    cf88:	90 e0       	ldi	r25, 0x00	; 0
}
    cf8a:	08 95       	ret

0000cf8c <HextoDec>:
 
int HextoDec(char *hex, int l)
{
    cf8c:	ef 92       	push	r14
    cf8e:	ff 92       	push	r15
    cf90:	0f 93       	push	r16
    cf92:	1f 93       	push	r17
    cf94:	fc 01       	movw	r30, r24
    if (*hex==0) return(l);
    cf96:	80 81       	ld	r24, Z
    cf98:	88 23       	and	r24, r24
    cf9a:	81 f0       	breq	.+32     	; 0xcfbc <HextoDec+0x30>
    return HextoDec(hex+1, l*16+xtod(*hex)); // hex+1?
    cf9c:	8f 01       	movw	r16, r30
    cf9e:	0f 5f       	subi	r16, 0xFF	; 255
    cfa0:	1f 4f       	sbci	r17, 0xFF	; 255
    cfa2:	7b 01       	movw	r14, r22
    cfa4:	94 e0       	ldi	r25, 0x04	; 4
    cfa6:	ee 0c       	add	r14, r14
    cfa8:	ff 1c       	adc	r15, r15
    cfaa:	9a 95       	dec	r25
    cfac:	e1 f7       	brne	.-8      	; 0xcfa6 <HextoDec+0x1a>
    cfae:	0e 94 af 67 	call	0xcf5e	; 0xcf5e <xtod>
    cfb2:	f8 01       	movw	r30, r16
    cfb4:	b7 01       	movw	r22, r14
    cfb6:	68 0f       	add	r22, r24
    cfb8:	71 1d       	adc	r23, r1
    cfba:	ed cf       	rjmp	.-38     	; 0xcf96 <HextoDec+0xa>
}
    cfbc:	cb 01       	movw	r24, r22
    cfbe:	1f 91       	pop	r17
    cfc0:	0f 91       	pop	r16
    cfc2:	ff 90       	pop	r15
    cfc4:	ef 90       	pop	r14
    cfc6:	08 95       	ret

0000cfc8 <xstrtoi>:
 
int xstrtoi(char *hex)      // hex string to integer
{
    return HextoDec(hex,0);
    cfc8:	60 e0       	ldi	r22, 0x00	; 0
    cfca:	70 e0       	ldi	r23, 0x00	; 0
    cfcc:	0e 94 c6 67 	call	0xcf8c	; 0xcf8c <HextoDec>
    cfd0:	08 95       	ret

0000cfd2 <substr>:
	pnew[numchars] = '\0';
	return pnew;
}

substr(const char *pstr, int start, int numchars, char *pnew)
{
    cfd2:	ef 92       	push	r14
    cfd4:	ff 92       	push	r15
    cfd6:	0f 93       	push	r16
    cfd8:	1f 93       	push	r17
    cfda:	8a 01       	movw	r16, r20
    cfdc:	79 01       	movw	r14, r18
	strncpy(pnew, pstr + start, numchars);
    cfde:	68 0f       	add	r22, r24
    cfe0:	79 1f       	adc	r23, r25
    cfe2:	c9 01       	movw	r24, r18
    cfe4:	0e 94 45 67 	call	0xce8a	; 0xce8a <strncpy>
	pnew[numchars] = '\0';
    cfe8:	0e 0d       	add	r16, r14
    cfea:	1f 1d       	adc	r17, r15
    cfec:	f8 01       	movw	r30, r16
    cfee:	10 82       	st	Z, r1
	return pnew;
}
    cff0:	c7 01       	movw	r24, r14
    cff2:	1f 91       	pop	r17
    cff4:	0f 91       	pop	r16
    cff6:	ff 90       	pop	r15
    cff8:	ef 90       	pop	r14
    cffa:	08 95       	ret

0000cffc <recv_input>:
 */
#define CMD_BUF_LEN 128
static char recv_input_cmdbuf[CMD_BUF_LEN];

void recv_input(uint8_t ch)
{
    cffc:	ef 92       	push	r14
    cffe:	ff 92       	push	r15
    d000:	0f 93       	push	r16
    d002:	1f 93       	push	r17
    d004:	cf 93       	push	r28
    d006:	df 93       	push	r29
    d008:	98 2f       	mov	r25, r24
  static uint8_t idx=0;

  if ((ch == '\r')||(ch == '\n')) {
    d00a:	8d 30       	cpi	r24, 0x0D	; 13
    d00c:	19 f0       	breq	.+6      	; 0xd014 <recv_input+0x18>
    d00e:	8a 30       	cpi	r24, 0x0A	; 10
    d010:	09 f0       	breq	.+2      	; 0xd014 <recv_input+0x18>
    d012:	ba c0       	rjmp	.+372    	; 0xd188 <recv_input+0x18c>
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    d014:	80 91 32 02 	lds	r24, 0x0232
    d018:	e8 2f       	mov	r30, r24
    d01a:	ff 27       	eor	r31, r31
    d01c:	ef 57       	subi	r30, 0x7F	; 127
    d01e:	fd 4f       	sbci	r31, 0xFD	; 253
    d020:	10 82       	st	Z, r1
  static char * can_addr;
  int8_t rc;
  int16_t value=0;
  char * raw_byte;

  if (s[0] == 0)
    d022:	80 91 81 02 	lds	r24, 0x0281
    d026:	88 23       	and	r24, r24
    d028:	09 f4       	brne	.+2      	; 0xd02c <recv_input+0x30>
    d02a:	ab c0       	rjmp	.+342    	; 0xd182 <recv_input+0x186>
    return;

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
    d02c:	e0 91 33 02 	lds	r30, 0x0233
    d030:	f0 91 34 02 	lds	r31, 0x0234
    d034:	10 82       	st	Z, r1
  index = 0;
    d036:	90 81       	ld	r25, Z
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    index++;
    d038:	80 91 81 02 	lds	r24, 0x0281
    d03c:	88 23       	and	r24, r24
    d03e:	d1 f0       	breq	.+52     	; 0xd074 <recv_input+0x78>
    d040:	8d 33       	cpi	r24, 0x3D	; 61
    d042:	c1 f0       	breq	.+48     	; 0xd074 <recv_input+0x78>

  /* parse the command line, seperating the command from arguments */
  cmd[0] = 0;
  index = 0;
  while ((index < sizeof(do_cmdbuf)) && s[index] && (s[index] != '=')) {
    cmd[index] = s[index];
    d044:	e9 2f       	mov	r30, r25
    d046:	ff 27       	eor	r31, r31
    d048:	a0 91 33 02 	lds	r26, 0x0233
    d04c:	b0 91 34 02 	lds	r27, 0x0234
    d050:	ae 0f       	add	r26, r30
    d052:	bf 1f       	adc	r27, r31
    d054:	ef 57       	subi	r30, 0x7F	; 127
    d056:	fd 4f       	sbci	r31, 0xFD	; 253
    d058:	80 81       	ld	r24, Z
    d05a:	8c 93       	st	X, r24
    index++;
    d05c:	9f 5f       	subi	r25, 0xFF	; 255
    d05e:	94 31       	cpi	r25, 0x14	; 20
    d060:	48 f4       	brcc	.+18     	; 0xd074 <recv_input+0x78>
    d062:	e9 2f       	mov	r30, r25
    d064:	ff 27       	eor	r31, r31
    d066:	ef 57       	subi	r30, 0x7F	; 127
    d068:	fd 4f       	sbci	r31, 0xFD	; 253
    d06a:	e0 81       	ld	r30, Z
    d06c:	ee 23       	and	r30, r30
    d06e:	11 f0       	breq	.+4      	; 0xd074 <recv_input+0x78>
    d070:	ed 33       	cpi	r30, 0x3D	; 61
    d072:	41 f7       	brne	.-48     	; 0xd044 <recv_input+0x48>
    d074:	a0 91 33 02 	lds	r26, 0x0233
    d078:	b0 91 34 02 	lds	r27, 0x0234
  }
  if (index < sizeof(do_cmdbuf)) {
    d07c:	94 31       	cpi	r25, 0x14	; 20
    d07e:	68 f4       	brcc	.+26     	; 0xd09a <recv_input+0x9e>
    cmd[index] = 0;
    d080:	89 2f       	mov	r24, r25
    d082:	99 27       	eor	r25, r25
    d084:	a8 0f       	add	r26, r24
    d086:	b9 1f       	adc	r27, r25
    d088:	1c 92       	st	X, r1
    args = &s[index];
    d08a:	fc 01       	movw	r30, r24
    d08c:	ef 57       	subi	r30, 0x7F	; 127
    d08e:	fd 4f       	sbci	r31, 0xFD	; 253
    while (*args && (*args == '='))
      args++;
    d090:	80 81       	ld	r24, Z
    d092:	8d 33       	cpi	r24, 0x3D	; 61
    d094:	21 f4       	brne	.+8      	; 0xd09e <recv_input+0xa2>
    d096:	31 96       	adiw	r30, 0x01	; 1
    d098:	fb cf       	rjmp	.-10     	; 0xd090 <recv_input+0x94>
    if (*args == 0)
      args = NULL;
  }
  else {
    cmd[sizeof(do_cmdbuf)-1] = 0;
    d09a:	fd 01       	movw	r30, r26
    d09c:	13 8a       	std	Z+19, r1	; 0x13
    args = NULL;
  }

  if (cmd[0] == 0) {
    d09e:	e0 91 33 02 	lds	r30, 0x0233
    d0a2:	f0 91 34 02 	lds	r31, 0x0234
    d0a6:	80 81       	ld	r24, Z
    d0a8:	88 23       	and	r24, r24
    d0aa:	09 f4       	brne	.+2      	; 0xd0ae <recv_input+0xb2>
    d0ac:	6a c0       	rjmp	.+212    	; 0xd182 <recv_input+0x186>
    return;
  }

  // 11bit CAN frame ?
  if (strcmp(cmd[0],'t') == 0) {
    d0ae:	64 e7       	ldi	r22, 0x74	; 116
    d0b0:	70 e0       	ldi	r23, 0x00	; 0
    d0b2:	99 27       	eor	r25, r25
    d0b4:	0e 94 3c 67 	call	0xce78	; 0xce78 <strcmp>
    d0b8:	89 2b       	or	r24, r25
    d0ba:	09 f0       	breq	.+2      	; 0xd0be <recv_input+0xc2>
    d0bc:	62 c0       	rjmp	.+196    	; 0xd182 <recv_input+0x186>
	//char *pnew = malloc(4);
	
	char *pnew = MEM_ALLOC(4);
    d0be:	82 e0       	ldi	r24, 0x02	; 2
    d0c0:	90 e0       	ldi	r25, 0x00	; 0
    d0c2:	0e 94 7a 73 	call	0xe6f4	; 0xe6f4 <MEMBLOCK_Allocate>
    d0c6:	ec 01       	movw	r28, r24

	can_addr = substr(cmd, 1, 3, pnew);
    d0c8:	9c 01       	movw	r18, r24
    d0ca:	43 e0       	ldi	r20, 0x03	; 3
    d0cc:	50 e0       	ldi	r21, 0x00	; 0
    d0ce:	61 e0       	ldi	r22, 0x01	; 1
    d0d0:	70 e0       	ldi	r23, 0x00	; 0
    d0d2:	80 91 33 02 	lds	r24, 0x0233
    d0d6:	90 91 34 02 	lds	r25, 0x0234
    d0da:	0e 94 e9 67 	call	0xcfd2	; 0xcfd2 <substr>
    d0de:	90 93 5b 02 	sts	0x025B, r25
    d0e2:	80 93 5a 02 	sts	0x025A, r24

//	printf("pnew: %s\n", pnew);
//	printf("CMD: %s\n", cmd);
//	printf("CAN ADDR: %s\n", can_addr);
	
	MEM_FREE(pnew);
    d0e6:	ce 01       	movw	r24, r28
    d0e8:	0e 94 22 74 	call	0xe844	; 0xe844 <MEMBLOCK_Free>
	//can_addr = sort_of_works_substr(cmd, 1, 3);
	
	//free(pnew);
	
	// SOC-level of battery
	if (strcmp(can_addr, "630") == 0) {
    d0ec:	64 e1       	ldi	r22, 0x14	; 20
    d0ee:	72 e0       	ldi	r23, 0x02	; 2
    d0f0:	80 91 5a 02 	lds	r24, 0x025A
    d0f4:	90 91 5b 02 	lds	r25, 0x025B
    d0f8:	0e 94 3c 67 	call	0xce78	; 0xce78 <strcmp>
    d0fc:	7c 01       	movw	r14, r24
    d0fe:	89 2b       	or	r24, r25
    d100:	09 f0       	breq	.+2      	; 0xd104 <recv_input+0x108>
    d102:	3f c0       	rjmp	.+126    	; 0xd182 <recv_input+0x186>
		wdt_reset();
    d104:	a8 95       	wdr
		// t63081122334455667788
		// 
		//printf("630!\n");
		//char *pnew2 = malloc(3);
		//raw_byte = substring(5, 7, cmd, raw_byte, sizeof raw_byte);
		*pnew = MEM_ALLOC(3);
    d106:	82 e0       	ldi	r24, 0x02	; 2
    d108:	90 e0       	ldi	r25, 0x00	; 0
    d10a:	0e 94 7a 73 	call	0xe6f4	; 0xe6f4 <MEMBLOCK_Allocate>
    d10e:	88 83       	st	Y, r24

		//raw_byte = sort_of_works_substr(cmd, 5, 2);

		raw_byte = substr(cmd, 5, 2,pnew);
    d110:	9e 01       	movw	r18, r28
    d112:	42 e0       	ldi	r20, 0x02	; 2
    d114:	50 e0       	ldi	r21, 0x00	; 0
    d116:	65 e0       	ldi	r22, 0x05	; 5
    d118:	70 e0       	ldi	r23, 0x00	; 0
    d11a:	80 91 33 02 	lds	r24, 0x0233
    d11e:	90 91 34 02 	lds	r25, 0x0234
    d122:	0e 94 e9 67 	call	0xcfd2	; 0xcfd2 <substr>
    d126:	8c 01       	movw	r16, r24
		MEM_FREE(pnew);
    d128:	ce 01       	movw	r24, r28
    d12a:	0e 94 22 74 	call	0xe844	; 0xe844 <MEMBLOCK_Free>
		//raw_byte = substr(cmd, 5, 2, pnew2);

		//free(pnew2);
		value = xstrtoi(raw_byte);
    d12e:	c8 01       	movw	r24, r16
    d130:	0e 94 e4 67 	call	0xcfc8	; 0xcfc8 <xstrtoi>
		value = value/2;	// 0.5 % per LSB
    d134:	9c 01       	movw	r18, r24
    d136:	97 ff       	sbrs	r25, 7
    d138:	02 c0       	rjmp	.+4      	; 0xd13e <recv_input+0x142>
    d13a:	2f 5f       	subi	r18, 0xFF	; 255
    d13c:	3f 4f       	sbci	r19, 0xFF	; 255
    d13e:	35 95       	asr	r19
    d140:	27 95       	ror	r18
		LCD_UpdateSOC(value);
    d142:	82 2f       	mov	r24, r18
    d144:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

			// small status line for each character received 		
			if (la == 0)
    d148:	80 91 18 02 	lds	r24, 0x0218
    d14c:	90 91 19 02 	lds	r25, 0x0219
    d150:	89 2b       	or	r24, r25
    d152:	69 f4       	brne	.+26     	; 0xd16e <recv_input+0x172>
			{
					LCD_ClrLine(1,63,2,63);
    d154:	2f e3       	ldi	r18, 0x3F	; 63
    d156:	42 e0       	ldi	r20, 0x02	; 2
    d158:	62 2f       	mov	r22, r18
    d15a:	81 e0       	ldi	r24, 0x01	; 1
    d15c:	0e 94 96 70 	call	0xe12c	; 0xe12c <LCD_ClrLine>
					la = 1;
    d160:	81 e0       	ldi	r24, 0x01	; 1
    d162:	90 e0       	ldi	r25, 0x00	; 0
    d164:	90 93 19 02 	sts	0x0219, r25
    d168:	80 93 18 02 	sts	0x0218, r24
    d16c:	0a c0       	rjmp	.+20     	; 0xd182 <recv_input+0x186>
			} else {
					LCD_SetLine(1,63,2,63);
    d16e:	2f e3       	ldi	r18, 0x3F	; 63
    d170:	42 e0       	ldi	r20, 0x02	; 2
    d172:	62 2f       	mov	r22, r18
    d174:	81 e0       	ldi	r24, 0x01	; 1
    d176:	0e 94 2e 70 	call	0xe05c	; 0xe05c <LCD_SetLine>
					la = 0;
    d17a:	f0 92 19 02 	sts	0x0219, r15
    d17e:	e0 92 18 02 	sts	0x0218, r14
  if ((ch == '\r')||(ch == '\n')) {
    //uart_putc('\n');
    recv_input_cmdbuf[idx] = 0;
    do_cmd(recv_input_cmdbuf);
    //printf_P(s_prompt);
    idx = 0;
    d182:	10 92 32 02 	sts	0x0232, r1
    d186:	10 c0       	rjmp	.+32     	; 0xd1a8 <recv_input+0x1ac>
//      idx--;
//    recv_input_cmdbuf[idx] = 0;
//  }
  else {
    //uart_putc(ch); // if we want echo, uncomment this
    recv_input_cmdbuf[idx++] = ch;
    d188:	80 91 32 02 	lds	r24, 0x0232
    d18c:	e8 2f       	mov	r30, r24
    d18e:	ff 27       	eor	r31, r31
    d190:	ef 57       	subi	r30, 0x7F	; 127
    d192:	fd 4f       	sbci	r31, 0xFD	; 253
    d194:	90 83       	st	Z, r25
    d196:	8f 5f       	subi	r24, 0xFF	; 255
    d198:	80 93 32 02 	sts	0x0232, r24
    if (idx == CMD_BUF_LEN) {
    d19c:	80 38       	cpi	r24, 0x80	; 128
    d19e:	21 f4       	brne	.+8      	; 0xd1a8 <recv_input+0x1ac>
      idx = 0;
    d1a0:	10 92 32 02 	sts	0x0232, r1
      recv_input_cmdbuf[idx] = 0;
    d1a4:	10 92 81 02 	sts	0x0281, r1
    d1a8:	df 91       	pop	r29
    d1aa:	cf 91       	pop	r28
    d1ac:	1f 91       	pop	r17
    d1ae:	0f 91       	pop	r16
    d1b0:	ff 90       	pop	r15
    d1b2:	ef 90       	pop	r14
    d1b4:	08 95       	ret

0000d1b6 <main>:

static int uart_putchar(char c, FILE *stream);
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

CAL_MAIN()
{
    d1b6:	ce ef       	ldi	r28, 0xFE	; 254
    d1b8:	d1 e2       	ldi	r29, 0x21	; 33
    d1ba:	de bf       	out	0x3e, r29	; 62
    d1bc:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_4S);
	
	LCD_UpdateSOC(1);
    d1be:	81 e0       	ldi	r24, 0x01	; 1
    d1c0:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	stdout = &mystdout;
    d1c4:	84 e2       	ldi	r24, 0x24	; 36
    d1c6:	92 e0       	ldi	r25, 0x02	; 2
    d1c8:	90 93 a8 18 	sts	0x18A8, r25
    d1cc:	80 93 a7 18 	sts	0x18A7, r24

	DDRD |= (1 << PD4); PORTD &= ~(1 << PD4); // Turn on RS232.
    d1d0:	54 9a       	sbi	0x0a, 4	; 10
    d1d2:	5c 98       	cbi	0x0b, 4	; 11

	USART_Init();
    d1d4:	0e 94 a6 67 	call	0xcf4c	; 0xcf4c <USART_Init>

	uint8_t ch;

	LCD_UpdateSOC(2);
    d1d8:	82 e0       	ldi	r24, 0x02	; 2
    d1da:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>
        
	// Initialize everything.
	InitMemory();
    d1de:	0e 94 b4 69 	call	0xd368	; 0xd368 <InitMemory>

	LCD_UpdateSOC(3);
    d1e2:	83 e0       	ldi	r24, 0x03	; 3
    d1e4:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	LCD_Init();
    d1e8:	0e 94 a8 6a 	call	0xd550	; 0xd550 <LCD_Init>

	LCD_UpdateSOC(4);
    d1ec:	84 e0       	ldi	r24, 0x04	; 4
    d1ee:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	TIMING_Init();
    d1f2:	0e 94 b0 76 	call	0xed60	; 0xed60 <TIMING_Init>

	LCD_UpdateSOC(5);
    d1f6:	85 e0       	ldi	r24, 0x05	; 5
    d1f8:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	RTC_Init();
    d1fc:	0e 94 79 76 	call	0xecf2	; 0xecf2 <RTC_Init>

	LCD_UpdateSOC(6);
    d200:	86 e0       	ldi	r24, 0x06	; 6
    d202:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	RTC_SetTickHandler( TIMING_TickHandler );
    d206:	81 e5       	ldi	r24, 0x51	; 81
    d208:	97 e7       	ldi	r25, 0x77	; 119
    d20a:	0e 94 a8 76 	call	0xed50	; 0xed50 <RTC_SetTickHandler>

	LCD_UpdateSOC(7);
    d20e:	87 e0       	ldi	r24, 0x07	; 7
    d210:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	JOYSTICK_Init( 100, 50 );
    d214:	62 e3       	ldi	r22, 0x32	; 50
    d216:	84 e6       	ldi	r24, 0x64	; 100
    d218:	0e 94 3a 71 	call	0xe274	; 0xe274 <JOYSTICK_Init>

	//USART_Init();
	
//	CAL_enable_interrupt();
	
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, 1, JOYSTICK_PollingHandler, &joystickCallbackEvent );
    d21c:	0c e5       	ldi	r16, 0x5C	; 92
    d21e:	12 e0       	ldi	r17, 0x02	; 2
    d220:	2d e4       	ldi	r18, 0x4D	; 77
    d222:	31 e7       	ldi	r19, 0x71	; 113
    d224:	41 e0       	ldi	r20, 0x01	; 1
    d226:	50 e0       	ldi	r21, 0x00	; 0
    d228:	60 e0       	ldi	r22, 0x00	; 0
    d22a:	70 e0       	ldi	r23, 0x00	; 0
    d22c:	8f ef       	ldi	r24, 0xFF	; 255
    d22e:	0e 94 15 79 	call	0xf22a	; 0xf22a <TIMING_AddRepCallbackEvent>
	
	// happy startup sound
	LCD_UpdateSOC(8);
    d232:	88 e0       	ldi	r24, 0x08	; 8
    d234:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>

	// BATTERY ICON SOC-LEVEL TEST
	int soc = 0;
			
	// interrupt enable
	SREG |= 1<<7;
    d238:	8f b7       	in	r24, 0x3f	; 63
    d23a:	80 68       	ori	r24, 0x80	; 128
    d23c:	8f bf       	out	0x3f, r24	; 63

	LCD_UpdateSOC(9);
    d23e:	89 e0       	ldi	r24, 0x09	; 9
    d240:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>
	
	// Open the CAN channel
	printf("O\r");	// (O)pen the CAN-bus
	*/
	
	LCD_UpdateSOC(10);
    d244:	8a e0       	ldi	r24, 0x0A	; 10
    d246:	0e 94 fd 6f 	call	0xdffa	; 0xdffa <LCD_UpdateSOC>
	
	PlaySound(11);
    d24a:	8b e0       	ldi	r24, 0x0B	; 11
    d24c:	90 e0       	ldi	r25, 0x00	; 0
    d24e:	0e 94 fc 69 	call	0xd3f8	; 0xd3f8 <PlaySound>
	
	//1 POWER_EnterIdleSleepMode();
	
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_excellenceThroughTechnology );
	//PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_eCarsLogo );
	PICTURE_CopyFullscreenFlashToLcd( FLASHPICS_PalonenLABS_128x64px );
    d252:	8c e7       	ldi	r24, 0x7C	; 124
    d254:	90 e9       	ldi	r25, 0x90	; 144
    d256:	0e 94 79 74 	call	0xe8f2	; 0xe8f2 <PICTURE_CopyFullscreenFlashToLcd>

	// init backlight
	BACKLIGHT_Init();
    d25a:	0e 94 cb 71 	call	0xe396	; 0xe396 <BACKLIGHT_Init>
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d25e:	6c e6       	ldi	r22, 0x6C	; 108
    d260:	77 e6       	ldi	r23, 0x67	; 103
    d262:	88 e0       	ldi	r24, 0x08	; 8
    d264:	90 e0       	ldi	r25, 0x00	; 0
    d266:	0e 94 54 67 	call	0xcea8	; 0xcea8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d26a:	90 93 1d 02 	sts	0x021D, r25
    d26e:	80 93 1c 02 	sts	0x021C, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d272:	6c e6       	ldi	r22, 0x6C	; 108
    d274:	77 e6       	ldi	r23, 0x67	; 103
    d276:	8a e0       	ldi	r24, 0x0A	; 10
    d278:	90 e0       	ldi	r25, 0x00	; 0
    d27a:	0e 94 54 67 	call	0xcea8	; 0xcea8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d27e:	90 93 23 02 	sts	0x0223, r25
    d282:	80 93 22 02 	sts	0x0222, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d286:	6c e6       	ldi	r22, 0x6C	; 108
    d288:	77 e6       	ldi	r23, 0x67	; 103
    d28a:	8c e0       	ldi	r24, 0x0C	; 12
    d28c:	90 e0       	ldi	r25, 0x00	; 0
    d28e:	0e 94 54 67 	call	0xcea8	; 0xcea8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d292:	90 93 21 02 	sts	0x0221, r25
    d296:	80 93 20 02 	sts	0x0220, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d29a:	6c e6       	ldi	r22, 0x6C	; 108
    d29c:	77 e6       	ldi	r23, 0x67	; 103
    d29e:	8e e0       	ldi	r24, 0x0E	; 14
    d2a0:	90 e0       	ldi	r25, 0x00	; 0
    d2a2:	0e 94 54 67 	call	0xcea8	; 0xcea8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d2a6:	90 93 1f 02 	sts	0x021F, r25
    d2aa:	80 93 1e 02 	sts	0x021E, r24
#if (! (defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)) )
    return __eerd_word (__p, eeprom_read_byte);
    d2ae:	6c e6       	ldi	r22, 0x6C	; 108
    d2b0:	77 e6       	ldi	r23, 0x67	; 103
    d2b2:	80 e1       	ldi	r24, 0x10	; 16
    d2b4:	90 e0       	ldi	r25, 0x00	; 0
    d2b6:	0e 94 54 67 	call	0xcea8	; 0xcea8 <__eerd_word>

/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    d2ba:	90 93 1b 02 	sts	0x021B, r25
    d2be:	80 93 1a 02 	sts	0x021A, r24
	Red = eeprom_read_word((uint16_t*)10);
	Green = eeprom_read_word((uint16_t*)12);
	Blue = eeprom_read_word((uint16_t*)14);
	Intensity = eeprom_read_word((uint16_t*)16);

	BACKLIGHT_SetRGB( Red, Green, Blue );
    d2c2:	40 91 1e 02 	lds	r20, 0x021E
    d2c6:	60 91 20 02 	lds	r22, 0x0220
    d2ca:	80 91 22 02 	lds	r24, 0x0222
    d2ce:	0e 94 23 72 	call	0xe446	; 0xe446 <BACKLIGHT_SetRGB>
	BACKLIGHT_SetIntensity(Intensity);
    d2d2:	80 91 1a 02 	lds	r24, 0x021A
    d2d6:	0e 94 ef 71 	call	0xe3de	; 0xe3de <BACKLIGHT_SetIntensity>

	TIMING_event_t * splashScreenEvent = MEM_ALLOC( TIMING_event_t );
    d2da:	8f e0       	ldi	r24, 0x0F	; 15
    d2dc:	90 e0       	ldi	r25, 0x00	; 0
    d2de:	0e 94 7a 73 	call	0xe6f4	; 0xe6f4 <MEMBLOCK_Allocate>
    d2e2:	8c 01       	movw	r16, r24
	if (splashScreenEvent == NULL) { UnknownError(); }
    d2e4:	89 2b       	or	r24, r25
    d2e6:	11 f4       	brne	.+4      	; 0xd2ec <main+0x136>
    d2e8:	0e 94 74 67 	call	0xcee8	; 0xcee8 <UnknownError>
	TIMING_counter_t volatile splashCounter = 0;
    d2ec:	19 82       	std	Y+1, r1	; 0x01
	TIMING_AddCounterEventAfter( RTC_TICKS_PER_SECOND * SPLASH_SCREEN_SECONDS,
    d2ee:	98 01       	movw	r18, r16
    d2f0:	ae 01       	movw	r20, r28
    d2f2:	4f 5f       	subi	r20, 0xFF	; 255
    d2f4:	5f 4f       	sbci	r21, 0xFF	; 255
    d2f6:	60 e8       	ldi	r22, 0x80	; 128
    d2f8:	71 e0       	ldi	r23, 0x01	; 1
    d2fa:	80 e0       	ldi	r24, 0x00	; 0
    d2fc:	90 e0       	ldi	r25, 0x00	; 0
    d2fe:	0e 94 6c 78 	call	0xf0d8	; 0xf0d8 <TIMING_AddCounterEventAfter>
			&splashCounter, splashScreenEvent );
	bool exit = false;
    d302:	ff 24       	eor	r15, r15
	do {
		POWER_EnterIdleSleepMode();
    d304:	0e 94 c6 71 	call	0xe38c	; 0xe38c <POWER_EnterIdleSleepMode>
		if (JOYSTICK_GetState() != 0x00) { exit = true; };
    d308:	0e 94 49 71 	call	0xe292	; 0xe292 <JOYSTICK_GetState>
    d30c:	88 23       	and	r24, r24
    d30e:	11 f0       	breq	.+4      	; 0xd314 <main+0x15e>
    d310:	51 e0       	ldi	r21, 0x01	; 1
    d312:	f5 2e       	mov	r15, r21
		if (splashCounter != 0) { exit = true; }
    d314:	89 81       	ldd	r24, Y+1	; 0x01
    d316:	88 23       	and	r24, r24
    d318:	11 f4       	brne	.+4      	; 0xd31e <main+0x168>
	} while (exit == false);
    d31a:	ff 20       	and	r15, r15
    d31c:	99 f3       	breq	.-26     	; 0xd304 <main+0x14e>


	TIMING_RemoveEvent( splashScreenEvent );
    d31e:	c8 01       	movw	r24, r16
    d320:	0e 94 e8 77 	call	0xefd0	; 0xefd0 <TIMING_RemoveEvent>
	MEM_FREE( splashScreenEvent );
    d324:	c8 01       	movw	r24, r16
    d326:	0e 94 22 74 	call	0xe844	; 0xe844 <MEMBLOCK_Free>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d32a:	8d ec       	ldi	r24, 0xCD	; 205
    d32c:	97 e0       	ldi	r25, 0x07	; 7
    d32e:	a7 e0       	ldi	r26, 0x07	; 7
    d330:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d332:	01 97       	sbiw	r24, 0x01	; 1
    d334:	a1 09       	sbc	r26, r1
    d336:	b1 09       	sbc	r27, r1
    d338:	00 00       	nop
    d33a:	01 f0       	breq	.+0      	; 0xd33c <main+0x186>
    d33c:	d1 f7       	brne	.-12     	; 0xd332 <main+0x17c>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d33e:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d340:	00 00       	nop
	
	DELAY_MS(500);
	
	LCD_ClrBox(0,0,128,64);
    d342:	20 e4       	ldi	r18, 0x40	; 64
    d344:	40 e8       	ldi	r20, 0x80	; 128
    d346:	60 e0       	ldi	r22, 0x00	; 0
    d348:	86 2f       	mov	r24, r22
    d34a:	0e 94 38 6d 	call	0xda70	; 0xda70 <LCD_ClrBox>
//	LcdContrast();
//}
	
	while (1)
 	{
		if (urx_recv) 
    d34e:	80 91 6c 02 	lds	r24, 0x026C
    d352:	88 23       	and	r24, r24
    d354:	e1 f3       	breq	.-8      	; 0xd34e <main+0x198>
		{	
			cli();
    d356:	f8 94       	cli
            urx_recv = 0;
    d358:	10 92 6c 02 	sts	0x026C, r1
            ch = urx;
    d35c:	80 91 6b 02 	lds	r24, 0x026B
            sei();
    d360:	78 94       	sei
            /* build a command line and execute commands when complete */
            recv_input(ch);
    d362:	0e 94 fe 67 	call	0xcffc	; 0xcffc <recv_input>
    d366:	f3 cf       	rjmp	.-26     	; 0xd34e <main+0x198>

0000d368 <InitMemory>:

static MEMBLOCK_bag_t MEMORY_blockBags[ MEMORY_BAGCOUNT ];

void InitMemory( void )
{
	MEMBLOCK_InitManager( MEMORY_BAGCOUNT, MEMORY_blockBags );
    d368:	6a e0       	ldi	r22, 0x0A	; 10
    d36a:	78 e1       	ldi	r23, 0x18	; 24
    d36c:	84 e0       	ldi	r24, 0x04	; 4
    d36e:	90 e0       	ldi	r25, 0x00	; 0
    d370:	0e 94 2e 73 	call	0xe65c	; 0xe65c <MEMBLOCK_InitManager>
	MEMBLOCK_InitBag( 0, MEMORY_BLOCKSIZE0, MEMORY_BLOCKCOUNT0, MEMORY_block0 );
    d374:	21 e0       	ldi	r18, 0x01	; 1
    d376:	33 e0       	ldi	r19, 0x03	; 3
    d378:	40 e1       	ldi	r20, 0x10	; 16
    d37a:	50 e0       	ldi	r21, 0x00	; 0
    d37c:	ba 01       	movw	r22, r20
    d37e:	80 e0       	ldi	r24, 0x00	; 0
    d380:	90 e0       	ldi	r25, 0x00	; 0
    d382:	0e 94 37 73 	call	0xe66e	; 0xe66e <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 1, MEMORY_BLOCKSIZE1, MEMORY_BLOCKCOUNT1, MEMORY_block1 );
    d386:	23 e0       	ldi	r18, 0x03	; 3
    d388:	34 e0       	ldi	r19, 0x04	; 4
    d38a:	40 e2       	ldi	r20, 0x20	; 32
    d38c:	50 e0       	ldi	r21, 0x00	; 0
    d38e:	ba 01       	movw	r22, r20
    d390:	81 e0       	ldi	r24, 0x01	; 1
    d392:	90 e0       	ldi	r25, 0x00	; 0
    d394:	0e 94 37 73 	call	0xe66e	; 0xe66e <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 2, MEMORY_BLOCKSIZE2, MEMORY_BLOCKCOUNT2, MEMORY_block2 );
    d398:	27 e0       	ldi	r18, 0x07	; 7
    d39a:	38 e0       	ldi	r19, 0x08	; 8
    d39c:	40 e1       	ldi	r20, 0x10	; 16
    d39e:	50 e0       	ldi	r21, 0x00	; 0
    d3a0:	60 e4       	ldi	r22, 0x40	; 64
    d3a2:	70 e0       	ldi	r23, 0x00	; 0
    d3a4:	82 e0       	ldi	r24, 0x02	; 2
    d3a6:	90 e0       	ldi	r25, 0x00	; 0
    d3a8:	0e 94 37 73 	call	0xe66e	; 0xe66e <MEMBLOCK_InitBag>
	MEMBLOCK_InitBag( 3, MEMORY_BLOCKSIZE3, MEMORY_BLOCKCOUNT3, MEMORY_block3 );
    d3ac:	29 e0       	ldi	r18, 0x09	; 9
    d3ae:	3c e0       	ldi	r19, 0x0C	; 12
    d3b0:	43 e0       	ldi	r20, 0x03	; 3
    d3b2:	50 e0       	ldi	r21, 0x00	; 0
    d3b4:	60 e0       	ldi	r22, 0x00	; 0
    d3b6:	74 e0       	ldi	r23, 0x04	; 4
    d3b8:	ca 01       	movw	r24, r20
    d3ba:	0e 94 37 73 	call	0xe66e	; 0xe66e <MEMBLOCK_InitBag>
    d3be:	08 95       	ret

0000d3c0 <SONG_PlayTune>:


void SONG_PlayTune( uint8_t idx, FIFO_handle_t * fifo )
{
    d3c0:	9b 01       	movw	r18, r22
	// Start song.
	///mt SONG_StartTune_F( fifo, SONG_data[idx] );
	SONG_StartTune_F( fifo, CAL_pgm_read_puint16(&SONG_data[idx]) );
    d3c2:	e8 2f       	mov	r30, r24
    d3c4:	ff 27       	eor	r31, r31
    d3c6:	ee 0f       	add	r30, r30
    d3c8:	ff 1f       	adc	r31, r31
    d3ca:	e4 58       	subi	r30, 0x84	; 132
    d3cc:	fc 43       	sbci	r31, 0x3C	; 60
    d3ce:	85 91       	lpm	r24, Z+
    d3d0:	94 91       	lpm	r25, Z+
    d3d2:	bc 01       	movw	r22, r24
    d3d4:	c9 01       	movw	r24, r18
    d3d6:	0e 94 5e 7a 	call	0xf4bc	; 0xf4bc <SONG_StartTune_F>
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d3da:	8d ec       	ldi	r24, 0xCD	; 205
    d3dc:	97 e0       	ldi	r25, 0x07	; 7
    d3de:	a7 e0       	ldi	r26, 0x07	; 7
    d3e0:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d3e2:	01 97       	sbiw	r24, 0x01	; 1
    d3e4:	a1 09       	sbc	r26, r1
    d3e6:	b1 09       	sbc	r27, r1
    d3e8:	00 00       	nop
    d3ea:	01 f0       	breq	.+0      	; 0xd3ec <SONG_PlayTune+0x2c>
    d3ec:	d1 f7       	brne	.-12     	; 0xd3e2 <SONG_PlayTune+0x22>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d3ee:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d3f0:	00 00       	nop
	// Show popup until user moves joystick.	
	POPUP_MsgBox( 16, 4, 6, message, NULL );
	// Stop song.
	*/
	DELAY_MS(500);
	SONG_StopTune();
    d3f2:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <SONG_StopTune>
    d3f6:	08 95       	ret

0000d3f8 <PlaySound>:
	MEM_FREE( songSelections );
}


void PlaySound( int song )
{
    d3f8:	cf 92       	push	r12
    d3fa:	df 92       	push	r13
    d3fc:	ef 92       	push	r14
    d3fe:	ff 92       	push	r15
    d400:	0f 93       	push	r16
    d402:	1f 93       	push	r17
    d404:	cf 93       	push	r28
    d406:	df 93       	push	r29
    d408:	cd b7       	in	r28, 0x3d	; 61
    d40a:	de b7       	in	r29, 0x3e	; 62
    d40c:	2e 97       	sbiw	r28, 0x0e	; 14
    d40e:	0f b6       	in	r0, 0x3f	; 63
    d410:	f8 94       	cli
    d412:	de bf       	out	0x3e, r29	; 62
    d414:	0f be       	out	0x3f, r0	; 63
    d416:	cd bf       	out	0x3d, r28	; 61
    d418:	8c 01       	movw	r16, r24
	FIFO_data_t * fifoBuf = MEM_ALLOC_ARRAY( FIFO_data_t, SONG_FIFO_SIZE );
    d41a:	88 e2       	ldi	r24, 0x28	; 40
    d41c:	90 e0       	ldi	r25, 0x00	; 0
    d41e:	0e 94 7a 73 	call	0xe6f4	; 0xe6f4 <MEMBLOCK_Allocate>
    d422:	7c 01       	movw	r14, r24
	WIDGETS_integer_t * songSelections = MEM_ALLOC_ARRAY( WIDGETS_integer_t, SONG_COUNT );
    d424:	80 e3       	ldi	r24, 0x30	; 48
    d426:	90 e0       	ldi	r25, 0x00	; 0
    d428:	0e 94 7a 73 	call	0xe6f4	; 0xe6f4 <MEMBLOCK_Allocate>
    d42c:	6c 01       	movw	r12, r24
	
	// Prepare FIFO for song data.
	FIFO_handle_t fifo;
	FIFO_Init( &fifo, fifoBuf, SONG_FIFO_SIZE );
    d42e:	48 e2       	ldi	r20, 0x28	; 40
    d430:	b7 01       	movw	r22, r14
    d432:	ce 01       	movw	r24, r28
    d434:	01 96       	adiw	r24, 0x01	; 1
    d436:	0e 94 c9 72 	call	0xe592	; 0xe592 <FIFO_Init>
	
	SONG_PlayTune( song, &fifo );
    d43a:	be 01       	movw	r22, r28
    d43c:	6f 5f       	subi	r22, 0xFF	; 255
    d43e:	7f 4f       	sbci	r23, 0xFF	; 255
    d440:	80 2f       	mov	r24, r16
    d442:	0e 94 e0 69 	call	0xd3c0	; 0xd3c0 <SONG_PlayTune>
	
	MEM_FREE( fifoBuf );
    d446:	c7 01       	movw	r24, r14
    d448:	0e 94 22 74 	call	0xe844	; 0xe844 <MEMBLOCK_Free>
	MEM_FREE( songSelections );
    d44c:	c6 01       	movw	r24, r12
    d44e:	0e 94 22 74 	call	0xe844	; 0xe844 <MEMBLOCK_Free>
    d452:	2e 96       	adiw	r28, 0x0e	; 14
    d454:	0f b6       	in	r0, 0x3f	; 63
    d456:	f8 94       	cli
    d458:	de bf       	out	0x3e, r29	; 62
    d45a:	0f be       	out	0x3f, r0	; 63
    d45c:	cd bf       	out	0x3d, r28	; 61
    d45e:	df 91       	pop	r29
    d460:	cf 91       	pop	r28
    d462:	1f 91       	pop	r17
    d464:	0f 91       	pop	r16
    d466:	ff 90       	pop	r15
    d468:	ef 90       	pop	r14
    d46a:	df 90       	pop	r13
    d46c:	cf 90       	pop	r12
    d46e:	08 95       	ret

0000d470 <S6B1713_HardReset>:


void S6B1713_HardReset( void )
{
	// Pulse RESET pin low for 100 milliseconds.
	LCD_RESET_PORT_REG &= ~(1 << LCD_RESET_PIN);
    d470:	41 98       	cbi	0x08, 1	; 8
	LCD_RESET_DDR_REG |= (1 << LCD_RESET_PIN);
    d472:	39 9a       	sbi	0x07, 1	; 7
            _delay_loop_2_x( (uint16_t)__loops );

    /* create a four byte counter */
    } else  {
        __ticks -= 4;                   /* caller needs 4 cycles to init counter */
        __loops = __ticks / 8;
    d474:	85 ef       	ldi	r24, 0xF5	; 245
    d476:	97 e6       	ldi	r25, 0x67	; 103
    d478:	a1 e0       	ldi	r26, 0x01	; 1
    d47a:	b0 e0       	ldi	r27, 0x00	; 0
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d47c:	01 97       	sbiw	r24, 0x01	; 1
    d47e:	a1 09       	sbc	r26, r1
    d480:	b1 09       	sbc	r27, r1
    d482:	00 00       	nop
    d484:	01 f0       	breq	.+0      	; 0xd486 <S6B1713_HardReset+0x16>
    d486:	d1 f7       	brne	.-12     	; 0xd47c <S6B1713_HardReset+0xc>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    d488:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    d48a:	00 00       	nop
	DELAY_MS( 100 );
	LCD_RESET_PORT_REG |= (1 << LCD_RESET_PIN);
    d48c:	41 9a       	sbi	0x08, 1	; 8
    d48e:	08 95       	ret

0000d490 <S6B1713M_Init>:


void S6B1713M_Init( void )
{
	// Hard reset the LCD controller chip before doing anything else.
	S6B1713_HardReset();
    d490:	0e 94 38 6a 	call	0xd470	; 0xd470 <S6B1713_HardReset>
	// Enable external memory interface, no wait states, bus keeper on, 10-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (0 << XMM0);
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
#elif defined(PCB_REV_E)
	// Enable external memory interface, no wait states, bus keeper on, 8-bit addresses.
	XMCRB = (1 << XMBK) | (1 << XMM2) | (1 << XMM1) | (1 << XMM0);
    d494:	87 e8       	ldi	r24, 0x87	; 135
    d496:	80 93 75 00 	sts	0x0075, r24
	XMCRA = (1 << SRE) | (0 << SRW11) | (0 << SRW10);
    d49a:	80 e8       	ldi	r24, 0x80	; 128
    d49c:	80 93 74 00 	sts	0x0074, r24
	DDRC |= (1 << PC0); // A0 line to LCD.
    d4a0:	38 9a       	sbi	0x07, 0	; 7
    d4a2:	08 95       	ret

0000d4a4 <S6B1713_SetDisplayOn>:
}


void S6B1713_SetDisplayOn( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_DISPLAY_ON );
    d4a4:	40 98       	cbi	0x08, 0	; 8
    d4a6:	8f ea       	ldi	r24, 0xAF	; 175
    d4a8:	80 93 00 80 	sts	0x8000, r24
    d4ac:	08 95       	ret

0000d4ae <S6B1713_SetInitialDisplayLine>:
 * \param  startLine  Set this line as the first LCD line
 */
void S6B1713_SetInitialDisplayLine( uint8_t startLine )
{
	// Truncate line to 6 bits (0-63) and issue command.
	startLine &= 0x3f;
    d4ae:	8f 73       	andi	r24, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_INITIAL_DISPLAY_LINE | startLine );
    d4b0:	40 98       	cbi	0x08, 0	; 8
    d4b2:	80 64       	ori	r24, 0x40	; 64
    d4b4:	80 93 00 80 	sts	0x8000, r24
    d4b8:	08 95       	ret

0000d4ba <S6B1713_SetReferenceVoltage>:
 * \param  value  Value for reference voltage. Refer to datasheet
 */
void S6B1713_SetReferenceVoltage( uint8_t value )
{
	// Truncate value to 6 bits (0-63) and issue command.
	value &= 0x3f;
    d4ba:	98 2f       	mov	r25, r24
    d4bc:	9f 73       	andi	r25, 0x3F	; 63
	S6B1713_WriteCommand( S6B1713_CMD_REFERENCE_VOLTAGE_MODE );
    d4be:	40 98       	cbi	0x08, 0	; 8
    d4c0:	81 e8       	ldi	r24, 0x81	; 129
    d4c2:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( value );
    d4c6:	40 98       	cbi	0x08, 0	; 8
    d4c8:	90 93 00 80 	sts	0x8000, r25
    d4cc:	08 95       	ret

0000d4ce <S6B1713_SetADCNormalDirection>:
}


void S6B1713_SetADCNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_ADC_NORMAL_DIRECTION );
    d4ce:	40 98       	cbi	0x08, 0	; 8
    d4d0:	80 ea       	ldi	r24, 0xA0	; 160
    d4d2:	80 93 00 80 	sts	0x8000, r24
    d4d6:	08 95       	ret

0000d4d8 <S6B1713_SetLCDBias1>:
}


void S6B1713_SetLCDBias1( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_LCD_BIAS_1 );
    d4d8:	40 98       	cbi	0x08, 0	; 8
    d4da:	83 ea       	ldi	r24, 0xA3	; 163
    d4dc:	80 93 00 80 	sts	0x8000, r24
    d4e0:	08 95       	ret

0000d4e2 <S6B1713_SetSHLNormalDirection>:
}


void S6B1713_SetSHLNormalDirection( void )
{
	S6B1713_WriteCommand( S6B1713_CMD_SHL_NORMAL_DIRECTION );
    d4e2:	40 98       	cbi	0x08, 0	; 8
    d4e4:	80 ec       	ldi	r24, 0xC0	; 192
    d4e6:	80 93 00 80 	sts	0x8000, r24
    d4ea:	08 95       	ret

0000d4ec <S6B1713_SetPowerControl>:
 * \param  bitmask  Set internal voltage regulator. You should use already defined values
 */
void S6B1713_SetPowerControl( uint8_t bitmask )
{
	// Clear all but relevant bits and issue command.
	bitmask &= (S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER);
    d4ec:	87 70       	andi	r24, 0x07	; 7
	S6B1713_WriteCommand( S6B1713_CMD_POWER_CONTROL | bitmask );
    d4ee:	40 98       	cbi	0x08, 0	; 8
    d4f0:	88 62       	ori	r24, 0x28	; 40
    d4f2:	80 93 00 80 	sts	0x8000, r24
    d4f6:	08 95       	ret

0000d4f8 <S6B1713_SetInternalResistorRatio>:
 * \param  ratio  Set internal resistor ratio to this enum.
 */
void S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_t ratio )
{
	// Since we are using an enum, the ratio value should always be valid, but we AND with 0x07 to be safe.
	S6B1713_WriteCommand( S6B1713_CMD_INTERNAL_RESISTOR_RATIO | (ratio & 0x07) );
    d4f8:	40 98       	cbi	0x08, 0	; 8
    d4fa:	87 70       	andi	r24, 0x07	; 7
    d4fc:	80 62       	ori	r24, 0x20	; 32
    d4fe:	80 93 00 80 	sts	0x8000, r24
    d502:	08 95       	ret

0000d504 <LCD_SetScreen>:
	LCD_topPage = lcdPage;
}


void LCD_SetScreen( uint8_t pixelMask )
{
    d504:	28 2f       	mov	r18, r24
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d506:	90 e0       	ldi	r25, 0x00	; 0
    d508:	30 e1       	ldi	r19, 0x10	; 16
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d50a:	89 2f       	mov	r24, r25
    d50c:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d50e:	40 98       	cbi	0x08, 0	; 8
    d510:	80 6b       	ori	r24, 0xB0	; 176
    d512:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d516:	40 98       	cbi	0x08, 0	; 8
    d518:	30 93 00 80 	sts	0x8000, r19
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d51c:	40 98       	cbi	0x08, 0	; 8
    d51e:	10 92 00 80 	sts	0x8000, r1
		// Set current address to start of current 8-pixel high page.
		S6B1713_SetPageAddress( page );
		S6B1713_SetColumnAddress( 0 );

		// Write LCD_WIDTH bytes (LCD_WIDTHx8 pixels).
		uint8_t width = LCD_WIDTH;
    d522:	80 e8       	ldi	r24, 0x80	; 128
		do {
			S6B1713_WriteData( pixelMask );
    d524:	40 9a       	sbi	0x08, 0	; 8
    d526:	20 93 00 81 	sts	0x8100, r18
		} while (--width > 0);
    d52a:	81 50       	subi	r24, 0x01	; 1
    d52c:	d9 f7       	brne	.-10     	; 0xd524 <LCD_SetScreen+0x20>


void LCD_SetScreen( uint8_t pixelMask )
{
	// Set pixel mask, page by page.
	for (uint8_t page = 0; page < 8; ++page) {
    d52e:	9f 5f       	subi	r25, 0xFF	; 255
    d530:	98 30       	cpi	r25, 0x08	; 8
    d532:	58 f3       	brcs	.-42     	; 0xd50a <LCD_SetScreen+0x6>
    d534:	08 95       	ret

0000d536 <LCD_SetTopPage>:
	LCD_SetScreen( 0x00 );
}


void LCD_SetTopPage( uint8_t lcdPage, uint8_t subPageOffset )
{
    d536:	1f 93       	push	r17
    d538:	18 2f       	mov	r17, r24
	// Call LCD hardware operation.
	S6B1713_SetInitialDisplayLine( ((lcdPage % LCD_PAGE_COUNT) * LCD_PAGE_HEIGHT) + subPageOffset );
    d53a:	87 70       	andi	r24, 0x07	; 7
    d53c:	88 0f       	add	r24, r24
    d53e:	88 0f       	add	r24, r24
    d540:	88 0f       	add	r24, r24
    d542:	86 0f       	add	r24, r22
    d544:	0e 94 57 6a 	call	0xd4ae	; 0xd4ae <S6B1713_SetInitialDisplayLine>
	
	// Update quick ref.
	LCD_topPage = lcdPage;
    d548:	10 93 35 02 	sts	0x0235, r17
    d54c:	1f 91       	pop	r17
    d54e:	08 95       	ret

0000d550 <LCD_Init>:
/***************************
 * Function implementations
 ***************************/

void LCD_Init( void )
{
    d550:	ef 92       	push	r14
    d552:	ff 92       	push	r15
    d554:	0f 93       	push	r16
    d556:	1f 93       	push	r17
	// Initialize interface and perform hard reset.
	S6B1713_Init();
    d558:	0e 94 48 6a 	call	0xd490	; 0xd490 <S6B1713M_Init>
	
	// Step-by-step start of the voltage regulator circuitry.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER );
    d55c:	84 e0       	ldi	r24, 0x04	; 4
    d55e:	0e 94 76 6a 	call	0xd4ec	; 0xd4ec <S6B1713_SetPowerControl>
            _delay_loop_1_x( (uint8_t)__loops );

    /* create a two byte counter */
    } else if( __ticks <= 0x40001 )  {
        __ticks -= 2;                   /* caller needs 2 cycles to init counter */
        __loops = __ticks / 4;
    d562:	85 e6       	ldi	r24, 0x65	; 101
    d564:	e8 2e       	mov	r14, r24
    d566:	8e e0       	ldi	r24, 0x0E	; 14
    d568:	f8 2e       	mov	r15, r24
    d56a:	01 2d       	mov	r16, r1
    d56c:	11 2d       	mov	r17, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d56e:	c7 01       	movw	r24, r14
    d570:	01 97       	sbiw	r24, 0x01	; 1
    d572:	f1 f7       	brne	.-4      	; 0xd570 <LCD_Init+0x20>
    d574:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d576:	00 c0       	rjmp	.+0      	; 0xd578 <LCD_Init+0x28>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR );
    d578:	86 e0       	ldi	r24, 0x06	; 6
    d57a:	0e 94 76 6a 	call	0xd4ec	; 0xd4ec <S6B1713_SetPowerControl>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d57e:	c7 01       	movw	r24, r14
    d580:	01 97       	sbiw	r24, 0x01	; 1
    d582:	f1 f7       	brne	.-4      	; 0xd580 <LCD_Init+0x30>
    d584:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d586:	00 c0       	rjmp	.+0      	; 0xd588 <LCD_Init+0x38>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.
    S6B1713_SetPowerControl( S6B1713_VOLTAGE_CONVERTER | S6B1713_VOLTAGE_REGULATOR | S6B1713_VOLTAGE_FOLLOWER );
    d588:	87 e0       	ldi	r24, 0x07	; 7
    d58a:	0e 94 76 6a 	call	0xd4ec	; 0xd4ec <S6B1713_SetPowerControl>
    S6B1713_SetInternalResistorRatio( S6B1713_INTERNAL_RESISTOR_RATIO_5p29 );
    d58e:	86 e0       	ldi	r24, 0x06	; 6
    d590:	90 e0       	ldi	r25, 0x00	; 0
    d592:	0e 94 7c 6a 	call	0xd4f8	; 0xd4f8 <S6B1713_SetInternalResistorRatio>
    S6B1713_SetReferenceVoltage( 4 ); // Contrast: Between 0 and 63.
    d596:	84 e0       	ldi	r24, 0x04	; 4
    d598:	0e 94 5d 6a 	call	0xd4ba	; 0xd4ba <S6B1713_SetReferenceVoltage>
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    d59c:	c7 01       	movw	r24, r14
    d59e:	01 97       	sbiw	r24, 0x01	; 1
    d5a0:	f1 f7       	brne	.-4      	; 0xd59e <LCD_Init+0x4e>
    d5a2:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    d5a4:	00 c0       	rjmp	.+0      	; 0xd5a6 <LCD_Init+0x56>
	DELAY_MS( 2 ); // Wait for Vout to stabilize, i.e. delay for more than 1ms.

	// LCD panel configuration.
    S6B1713_SetLCDBias1(); // Bias ratio 1/9 for 1/65 duty cycle.
    d5a6:	0e 94 6c 6a 	call	0xd4d8	; 0xd4d8 <S6B1713_SetLCDBias1>
    S6B1713_SetADCNormalDirection();
    d5aa:	0e 94 67 6a 	call	0xd4ce	; 0xd4ce <S6B1713_SetADCNormalDirection>
    S6B1713_SetSHLNormalDirection();
    d5ae:	0e 94 71 6a 	call	0xd4e2	; 0xd4e2 <S6B1713_SetSHLNormalDirection>
    LCD_SetTopPage( 0, 0 );
    d5b2:	60 e0       	ldi	r22, 0x00	; 0
    d5b4:	86 2f       	mov	r24, r22
    d5b6:	0e 94 9b 6a 	call	0xd536	; 0xd536 <LCD_SetTopPage>
	
	// Clear screen and enable display.
	LCD_SetScreen( 0x00 );
    d5ba:	80 e0       	ldi	r24, 0x00	; 0
    d5bc:	0e 94 82 6a 	call	0xd504	; 0xd504 <LCD_SetScreen>
    S6B1713_SetDisplayOn();
    d5c0:	0e 94 52 6a 	call	0xd4a4	; 0xd4a4 <S6B1713_SetDisplayOn>
	LCD_SetScreen( 0x55 );
    d5c4:	85 e5       	ldi	r24, 0x55	; 85
    d5c6:	0e 94 82 6a 	call	0xd504	; 0xd504 <LCD_SetScreen>
	LCD_SetScreen( 0x00 );
    d5ca:	80 e0       	ldi	r24, 0x00	; 0
    d5cc:	0e 94 82 6a 	call	0xd504	; 0xd504 <LCD_SetScreen>
    d5d0:	1f 91       	pop	r17
    d5d2:	0f 91       	pop	r16
    d5d4:	ff 90       	pop	r15
    d5d6:	ef 90       	pop	r14
    d5d8:	08 95       	ret

0000d5da <LCD_SetPixel>:
	}
}


void LCD_SetPixel( uint8_t x, uint8_t y )
{
    d5da:	cf 93       	push	r28
    d5dc:	df 93       	push	r29
    d5de:	cd b7       	in	r28, 0x3d	; 61
    d5e0:	de b7       	in	r29, 0x3e	; 62
    d5e2:	21 97       	sbiw	r28, 0x01	; 1
    d5e4:	0f b6       	in	r0, 0x3f	; 63
    d5e6:	f8 94       	cli
    d5e8:	de bf       	out	0x3e, r29	; 62
    d5ea:	0f be       	out	0x3f, r0	; 63
    d5ec:	cd bf       	out	0x3d, r28	; 61
    d5ee:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d5f0:	40 98       	cbi	0x08, 0	; 8
    d5f2:	80 ee       	ldi	r24, 0xE0	; 224
    d5f4:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d5f8:	86 2f       	mov	r24, r22
    d5fa:	86 95       	lsr	r24
    d5fc:	86 95       	lsr	r24
    d5fe:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d600:	40 98       	cbi	0x08, 0	; 8
    d602:	80 6b       	ori	r24, 0xB0	; 176
    d604:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d608:	82 2f       	mov	r24, r18
    d60a:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d60c:	40 98       	cbi	0x08, 0	; 8
    d60e:	99 27       	eor	r25, r25
    d610:	44 e0       	ldi	r20, 0x04	; 4
    d612:	96 95       	lsr	r25
    d614:	87 95       	ror	r24
    d616:	4a 95       	dec	r20
    d618:	e1 f7       	brne	.-8      	; 0xd612 <LCD_SetPixel+0x38>
    d61a:	80 61       	ori	r24, 0x10	; 16
    d61c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d620:	40 98       	cbi	0x08, 0	; 8
    d622:	2f 70       	andi	r18, 0x0F	; 15
    d624:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address setup
    volatile uint8_t dummy = S6B1713_ReadData(); 
    d628:	40 9a       	sbi	0x08, 0	; 8
    d62a:	80 91 00 81 	lds	r24, 0x8100
    d62e:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    d630:	40 9a       	sbi	0x08, 0	; 8
    d632:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback | (1 << (y & 0x07)) );
    d636:	40 9a       	sbi	0x08, 0	; 8
    d638:	26 2f       	mov	r18, r22
    d63a:	33 27       	eor	r19, r19
    d63c:	27 70       	andi	r18, 0x07	; 7
    d63e:	30 70       	andi	r19, 0x00	; 0
    d640:	81 e0       	ldi	r24, 0x01	; 1
    d642:	90 e0       	ldi	r25, 0x00	; 0
    d644:	02 c0       	rjmp	.+4      	; 0xd64a <LCD_SetPixel+0x70>
    d646:	88 0f       	add	r24, r24
    d648:	99 1f       	adc	r25, r25
    d64a:	2a 95       	dec	r18
    d64c:	e2 f7       	brpl	.-8      	; 0xd646 <LCD_SetPixel+0x6c>
    d64e:	48 2b       	or	r20, r24
    d650:	40 93 00 81 	sts	0x8100, r20
    d654:	21 96       	adiw	r28, 0x01	; 1
    d656:	0f b6       	in	r0, 0x3f	; 63
    d658:	f8 94       	cli
    d65a:	de bf       	out	0x3e, r29	; 62
    d65c:	0f be       	out	0x3f, r0	; 63
    d65e:	cd bf       	out	0x3d, r28	; 61
    d660:	df 91       	pop	r29
    d662:	cf 91       	pop	r28
    d664:	08 95       	ret

0000d666 <LCD_ClrPixel>:
}


void LCD_ClrPixel( uint8_t x, uint8_t y )
{
    d666:	cf 93       	push	r28
    d668:	df 93       	push	r29
    d66a:	cd b7       	in	r28, 0x3d	; 61
    d66c:	de b7       	in	r29, 0x3e	; 62
    d66e:	21 97       	sbiw	r28, 0x01	; 1
    d670:	0f b6       	in	r0, 0x3f	; 63
    d672:	f8 94       	cli
    d674:	de bf       	out	0x3e, r29	; 62
    d676:	0f be       	out	0x3f, r0	; 63
    d678:	cd bf       	out	0x3d, r28	; 61
    d67a:	28 2f       	mov	r18, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d67c:	40 98       	cbi	0x08, 0	; 8
    d67e:	80 ee       	ldi	r24, 0xE0	; 224
    d680:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d684:	86 2f       	mov	r24, r22
    d686:	86 95       	lsr	r24
    d688:	86 95       	lsr	r24
    d68a:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d68c:	40 98       	cbi	0x08, 0	; 8
    d68e:	80 6b       	ori	r24, 0xB0	; 176
    d690:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d694:	82 2f       	mov	r24, r18
    d696:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d698:	40 98       	cbi	0x08, 0	; 8
    d69a:	99 27       	eor	r25, r25
    d69c:	54 e0       	ldi	r21, 0x04	; 4
    d69e:	96 95       	lsr	r25
    d6a0:	87 95       	ror	r24
    d6a2:	5a 95       	dec	r21
    d6a4:	e1 f7       	brne	.-8      	; 0xd69e <LCD_ClrPixel+0x38>
    d6a6:	80 61       	ori	r24, 0x10	; 16
    d6a8:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d6ac:	40 98       	cbi	0x08, 0	; 8
    d6ae:	2f 70       	andi	r18, 0x0F	; 15
    d6b0:	20 93 00 80 	sts	0x8000, r18
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x );

    // A dummy read is required after column address change, before reading.
    volatile uint8_t dummy = S6B1713_ReadData(); 
    d6b4:	40 9a       	sbi	0x08, 0	; 8
    d6b6:	80 91 00 81 	lds	r24, 0x8100
    d6ba:	89 83       	std	Y+1, r24	; 0x01

	// Read 8-pixel high column, modify correct pixel and write back.
    readback = S6B1713_ReadData(); 
    d6bc:	40 9a       	sbi	0x08, 0	; 8
    d6be:	40 91 00 81 	lds	r20, 0x8100
    S6B1713_WriteData( readback & ~(1 << (y & 0x07)) );
    d6c2:	40 9a       	sbi	0x08, 0	; 8
    d6c4:	26 2f       	mov	r18, r22
    d6c6:	33 27       	eor	r19, r19
    d6c8:	27 70       	andi	r18, 0x07	; 7
    d6ca:	30 70       	andi	r19, 0x00	; 0
    d6cc:	81 e0       	ldi	r24, 0x01	; 1
    d6ce:	90 e0       	ldi	r25, 0x00	; 0
    d6d0:	02 c0       	rjmp	.+4      	; 0xd6d6 <LCD_ClrPixel+0x70>
    d6d2:	88 0f       	add	r24, r24
    d6d4:	99 1f       	adc	r25, r25
    d6d6:	2a 95       	dec	r18
    d6d8:	e2 f7       	brpl	.-8      	; 0xd6d2 <LCD_ClrPixel+0x6c>
    d6da:	80 95       	com	r24
    d6dc:	48 23       	and	r20, r24
    d6de:	40 93 00 81 	sts	0x8100, r20
    d6e2:	21 96       	adiw	r28, 0x01	; 1
    d6e4:	0f b6       	in	r0, 0x3f	; 63
    d6e6:	f8 94       	cli
    d6e8:	de bf       	out	0x3e, r29	; 62
    d6ea:	0f be       	out	0x3f, r0	; 63
    d6ec:	cd bf       	out	0x3d, r28	; 61
    d6ee:	df 91       	pop	r29
    d6f0:	cf 91       	pop	r28
    d6f2:	08 95       	ret

0000d6f4 <LCD_SetHLine>:
	return readback;
}


void LCD_SetHLine( uint8_t x1, uint8_t x2, uint8_t y )
{
    d6f4:	cf 93       	push	r28
    d6f6:	df 93       	push	r29
    d6f8:	cd b7       	in	r28, 0x3d	; 61
    d6fa:	de b7       	in	r29, 0x3e	; 62
    d6fc:	21 97       	sbiw	r28, 0x01	; 1
    d6fe:	0f b6       	in	r0, 0x3f	; 63
    d700:	f8 94       	cli
    d702:	de bf       	out	0x3e, r29	; 62
    d704:	0f be       	out	0x3f, r0	; 63
    d706:	cd bf       	out	0x3d, r28	; 61
    d708:	58 2f       	mov	r21, r24
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    d70a:	68 17       	cp	r22, r24
    d70c:	10 f4       	brcc	.+4      	; 0xd712 <LCD_SetHLine+0x1e>
		uint8_t temp = x1;
		x1 = x2;
    d70e:	56 2f       	mov	r21, r22
		x2 = temp;
    d710:	68 2f       	mov	r22, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d712:	40 98       	cbi	0x08, 0	; 8
    d714:	80 ee       	ldi	r24, 0xE0	; 224
    d716:	80 93 00 80 	sts	0x8000, r24
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d71a:	84 2f       	mov	r24, r20
    d71c:	86 95       	lsr	r24
    d71e:	86 95       	lsr	r24
    d720:	86 95       	lsr	r24
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d722:	40 98       	cbi	0x08, 0	; 8
    d724:	80 6b       	ori	r24, 0xB0	; 176
    d726:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d72a:	85 2f       	mov	r24, r21
    d72c:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d72e:	40 98       	cbi	0x08, 0	; 8
    d730:	99 27       	eor	r25, r25
    d732:	e4 e0       	ldi	r30, 0x04	; 4
    d734:	96 95       	lsr	r25
    d736:	87 95       	ror	r24
    d738:	ea 95       	dec	r30
    d73a:	e1 f7       	brne	.-8      	; 0xd734 <LCD_SetHLine+0x40>
    d73c:	80 61       	ori	r24, 0x10	; 16
    d73e:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d742:	40 98       	cbi	0x08, 0	; 8
    d744:	85 2f       	mov	r24, r21
    d746:	8f 70       	andi	r24, 0x0F	; 15
    d748:	80 93 00 80 	sts	0x8000, r24
	// Set starting address.
    S6B1713_SetPageAddress( y >> 3);
    S6B1713_SetColumnAddress( x1 );

	// Read 8-pixel high columns, modify correct pixel and write back.
	uint8_t width = x2 - x1 + 1;
    d74c:	65 1b       	sub	r22, r21
    d74e:	6f 5f       	subi	r22, 0xFF	; 255
	uint8_t pixelMask = 1 << (y & 0x07);
    d750:	24 2f       	mov	r18, r20
    d752:	33 27       	eor	r19, r19
    d754:	27 70       	andi	r18, 0x07	; 7
    d756:	30 70       	andi	r19, 0x00	; 0
    d758:	81 e0       	ldi	r24, 0x01	; 1
    d75a:	90 e0       	ldi	r25, 0x00	; 0
    d75c:	02 c0       	rjmp	.+4      	; 0xd762 <LCD_SetHLine+0x6e>
    d75e:	88 0f       	add	r24, r24
    d760:	99 1f       	adc	r25, r25
    d762:	2a 95       	dec	r18
    d764:	e2 f7       	brpl	.-8      	; 0xd75e <LCD_SetHLine+0x6a>
    d766:	98 2f       	mov	r25, r24
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    d768:	40 9a       	sbi	0x08, 0	; 8
    d76a:	80 91 00 81 	lds	r24, 0x8100
    d76e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixel and write back.
	    uint8_t readback = S6B1713_ReadData(); 
    d770:	40 9a       	sbi	0x08, 0	; 8
    d772:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | pixelMask );
    d776:	40 9a       	sbi	0x08, 0	; 8
    d778:	89 2b       	or	r24, r25
    d77a:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    d77e:	61 50       	subi	r22, 0x01	; 1
    d780:	99 f7       	brne	.-26     	; 0xd768 <LCD_SetHLine+0x74>
    d782:	21 96       	adiw	r28, 0x01	; 1
    d784:	0f b6       	in	r0, 0x3f	; 63
    d786:	f8 94       	cli
    d788:	de bf       	out	0x3e, r29	; 62
    d78a:	0f be       	out	0x3f, r0	; 63
    d78c:	cd bf       	out	0x3d, r28	; 61
    d78e:	df 91       	pop	r29
    d790:	cf 91       	pop	r28
    d792:	08 95       	ret

0000d794 <LCD_SetVLine>:
	} while (--width > 0);
}


void LCD_SetVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    d794:	cf 93       	push	r28
    d796:	df 93       	push	r29
    d798:	cd b7       	in	r28, 0x3d	; 61
    d79a:	de b7       	in	r29, 0x3e	; 62
    d79c:	21 97       	sbiw	r28, 0x01	; 1
    d79e:	0f b6       	in	r0, 0x3f	; 63
    d7a0:	f8 94       	cli
    d7a2:	de bf       	out	0x3e, r29	; 62
    d7a4:	0f be       	out	0x3f, r0	; 63
    d7a6:	cd bf       	out	0x3d, r28	; 61
    d7a8:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    d7aa:	46 17       	cp	r20, r22
    d7ac:	18 f4       	brcc	.+6      	; 0xd7b4 <LCD_SetVLine+0x20>
		uint8_t temp = y1;
    d7ae:	86 2f       	mov	r24, r22
		y1 = y2;
    d7b0:	64 2f       	mov	r22, r20
		y2 = temp;
    d7b2:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    d7b4:	76 2f       	mov	r23, r22
    d7b6:	76 95       	lsr	r23
    d7b8:	76 95       	lsr	r23
    d7ba:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    d7bc:	54 2f       	mov	r21, r20
    d7be:	56 95       	lsr	r21
    d7c0:	56 95       	lsr	r21
    d7c2:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    d7c4:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    d7c6:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = 0xff << y1Bit;
    d7c8:	8f ef       	ldi	r24, 0xFF	; 255
    d7ca:	90 e0       	ldi	r25, 0x00	; 0
    d7cc:	28 2f       	mov	r18, r24
    d7ce:	01 c0       	rjmp	.+2      	; 0xd7d2 <LCD_SetVLine+0x3e>
    d7d0:	22 0f       	add	r18, r18
    d7d2:	6a 95       	dec	r22
    d7d4:	ea f7       	brpl	.-6      	; 0xd7d0 <LCD_SetVLine+0x3c>
    d7d6:	62 2f       	mov	r22, r18
	uint8_t y2PixelMask = 0xff >> (7 - y2Bit);
    d7d8:	27 e0       	ldi	r18, 0x07	; 7
    d7da:	30 e0       	ldi	r19, 0x00	; 0
    d7dc:	24 1b       	sub	r18, r20
    d7de:	31 09       	sbc	r19, r1
    d7e0:	02 c0       	rjmp	.+4      	; 0xd7e6 <LCD_SetVLine+0x52>
    d7e2:	95 95       	asr	r25
    d7e4:	87 95       	ror	r24
    d7e6:	2a 95       	dec	r18
    d7e8:	e2 f7       	brpl	.-8      	; 0xd7e2 <LCD_SetVLine+0x4e>
    d7ea:	f8 2f       	mov	r31, r24
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d7ec:	40 98       	cbi	0x08, 0	; 8
    d7ee:	80 ee       	ldi	r24, 0xE0	; 224
    d7f0:	80 93 00 80 	sts	0x8000, r24
    d7f4:	9e 2f       	mov	r25, r30
    d7f6:	9f 77       	andi	r25, 0x7F	; 127
    d7f8:	4e 2f       	mov	r20, r30
    d7fa:	4f 70       	andi	r20, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    d7fc:	75 17       	cp	r23, r21
    d7fe:	e9 f4       	brne	.+58     	; 0xd83a <LCD_SetVLine+0xa6>
		uint8_t pixelMask = y1PixelMask & y2PixelMask;
    d800:	6f 23       	and	r22, r31

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d802:	40 98       	cbi	0x08, 0	; 8
    d804:	50 6b       	ori	r21, 0xB0	; 176
    d806:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d80a:	40 98       	cbi	0x08, 0	; 8
    d80c:	89 2f       	mov	r24, r25
    d80e:	99 27       	eor	r25, r25
    d810:	54 e0       	ldi	r21, 0x04	; 4
    d812:	96 95       	lsr	r25
    d814:	87 95       	ror	r24
    d816:	5a 95       	dec	r21
    d818:	e1 f7       	brne	.-8      	; 0xd812 <LCD_SetVLine+0x7e>
    d81a:	80 61       	ori	r24, 0x10	; 16
    d81c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d820:	40 98       	cbi	0x08, 0	; 8
    d822:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    d826:	40 9a       	sbi	0x08, 0	; 8
    d828:	80 91 00 81 	lds	r24, 0x8100
    d82c:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    d82e:	40 9a       	sbi	0x08, 0	; 8
    d830:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | pixelMask );
    d834:	40 9a       	sbi	0x08, 0	; 8
    d836:	86 2b       	or	r24, r22
    d838:	5a c0       	rjmp	.+180    	; 0xd8ee <LCD_SetVLine+0x15a>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    d83a:	25 2f       	mov	r18, r21
    d83c:	27 1b       	sub	r18, r23
    d83e:	21 50       	subi	r18, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d840:	40 98       	cbi	0x08, 0	; 8
    d842:	87 2f       	mov	r24, r23
    d844:	80 6b       	ori	r24, 0xB0	; 176
    d846:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d84a:	40 98       	cbi	0x08, 0	; 8
    d84c:	89 2f       	mov	r24, r25
    d84e:	99 27       	eor	r25, r25
    d850:	34 e0       	ldi	r19, 0x04	; 4
    d852:	96 95       	lsr	r25
    d854:	87 95       	ror	r24
    d856:	3a 95       	dec	r19
    d858:	e1 f7       	brne	.-8      	; 0xd852 <LCD_SetVLine+0xbe>
    d85a:	98 2f       	mov	r25, r24
    d85c:	90 61       	ori	r25, 0x10	; 16
    d85e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d862:	40 98       	cbi	0x08, 0	; 8
    d864:	40 93 00 80 	sts	0x8000, r20
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    d868:	40 9a       	sbi	0x08, 0	; 8
    d86a:	80 91 00 81 	lds	r24, 0x8100
    d86e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
		readback = S6B1713_ReadData(); 
    d870:	40 9a       	sbi	0x08, 0	; 8
    d872:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback | y1PixelMask );
    d876:	40 9a       	sbi	0x08, 0	; 8
    d878:	86 2b       	or	r24, r22
    d87a:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    d87e:	37 2f       	mov	r19, r23
    d880:	3f 5f       	subi	r19, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Set all pixels.
			S6B1713_WriteData( 0xff );
    d882:	82 2f       	mov	r24, r18
    d884:	21 50       	subi	r18, 0x01	; 1
    d886:	18 16       	cp	r1, r24
    d888:	ac f4       	brge	.+42     	; 0xd8b4 <LCD_SetVLine+0x120>
    d88a:	6f ef       	ldi	r22, 0xFF	; 255
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d88c:	83 2f       	mov	r24, r19
    d88e:	3f 5f       	subi	r19, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    d890:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d892:	40 98       	cbi	0x08, 0	; 8
    d894:	80 6b       	ori	r24, 0xB0	; 176
    d896:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d89a:	40 98       	cbi	0x08, 0	; 8
    d89c:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d8a0:	40 98       	cbi	0x08, 0	; 8
    d8a2:	40 93 00 80 	sts	0x8000, r20
    d8a6:	40 9a       	sbi	0x08, 0	; 8
    d8a8:	60 93 00 81 	sts	0x8100, r22
    d8ac:	82 2f       	mov	r24, r18
    d8ae:	21 50       	subi	r18, 0x01	; 1
    d8b0:	18 16       	cp	r1, r24
    d8b2:	64 f3       	brlt	.-40     	; 0xd88c <LCD_SetVLine+0xf8>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d8b4:	40 98       	cbi	0x08, 0	; 8
    d8b6:	50 6b       	ori	r21, 0xB0	; 176
    d8b8:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    d8bc:	8e 2f       	mov	r24, r30
    d8be:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d8c0:	40 98       	cbi	0x08, 0	; 8
    d8c2:	99 27       	eor	r25, r25
    d8c4:	b4 e0       	ldi	r27, 0x04	; 4
    d8c6:	96 95       	lsr	r25
    d8c8:	87 95       	ror	r24
    d8ca:	ba 95       	dec	r27
    d8cc:	e1 f7       	brne	.-8      	; 0xd8c6 <LCD_SetVLine+0x132>
    d8ce:	80 61       	ori	r24, 0x10	; 16
    d8d0:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d8d4:	40 98       	cbi	0x08, 0	; 8
    d8d6:	ef 70       	andi	r30, 0x0F	; 15
    d8d8:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    d8dc:	40 9a       	sbi	0x08, 0	; 8
    d8de:	80 91 00 81 	lds	r24, 0x8100
    d8e2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, set correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    d8e4:	40 9a       	sbi	0x08, 0	; 8
    d8e6:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback | y2PixelMask );
    d8ea:	40 9a       	sbi	0x08, 0	; 8
    d8ec:	8f 2b       	or	r24, r31
    d8ee:	80 93 00 81 	sts	0x8100, r24
    d8f2:	21 96       	adiw	r28, 0x01	; 1
    d8f4:	0f b6       	in	r0, 0x3f	; 63
    d8f6:	f8 94       	cli
    d8f8:	de bf       	out	0x3e, r29	; 62
    d8fa:	0f be       	out	0x3f, r0	; 63
    d8fc:	cd bf       	out	0x3d, r28	; 61
    d8fe:	df 91       	pop	r29
    d900:	cf 91       	pop	r28
    d902:	08 95       	ret

0000d904 <LCD_ClrVLine>:
	}
}


void LCD_ClrVLine( uint8_t x, uint8_t y1, uint8_t y2 )
{
    d904:	cf 93       	push	r28
    d906:	df 93       	push	r29
    d908:	cd b7       	in	r28, 0x3d	; 61
    d90a:	de b7       	in	r29, 0x3e	; 62
    d90c:	21 97       	sbiw	r28, 0x01	; 1
    d90e:	0f b6       	in	r0, 0x3f	; 63
    d910:	f8 94       	cli
    d912:	de bf       	out	0x3e, r29	; 62
    d914:	0f be       	out	0x3f, r0	; 63
    d916:	cd bf       	out	0x3d, r28	; 61
    d918:	e8 2f       	mov	r30, r24
	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    d91a:	46 17       	cp	r20, r22
    d91c:	18 f4       	brcc	.+6      	; 0xd924 <LCD_ClrVLine+0x20>
		uint8_t temp = y1;
    d91e:	86 2f       	mov	r24, r22
		y1 = y2;
    d920:	64 2f       	mov	r22, r20
		y2 = temp;
    d922:	48 2f       	mov	r20, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    d924:	76 2f       	mov	r23, r22
    d926:	76 95       	lsr	r23
    d928:	76 95       	lsr	r23
    d92a:	76 95       	lsr	r23
	uint8_t y2Page = y2 >> 3;
    d92c:	54 2f       	mov	r21, r20
    d92e:	56 95       	lsr	r21
    d930:	56 95       	lsr	r21
    d932:	56 95       	lsr	r21
	
	uint8_t y1Bit = y1 & 0x07;
    d934:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    d936:	47 70       	andi	r20, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    d938:	2f ef       	ldi	r18, 0xFF	; 255
    d93a:	30 e0       	ldi	r19, 0x00	; 0
    d93c:	c9 01       	movw	r24, r18
    d93e:	02 c0       	rjmp	.+4      	; 0xd944 <LCD_ClrVLine+0x40>
    d940:	88 0f       	add	r24, r24
    d942:	99 1f       	adc	r25, r25
    d944:	6a 95       	dec	r22
    d946:	e2 f7       	brpl	.-8      	; 0xd940 <LCD_ClrVLine+0x3c>
    d948:	68 2f       	mov	r22, r24
    d94a:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    d94c:	87 e0       	ldi	r24, 0x07	; 7
    d94e:	90 e0       	ldi	r25, 0x00	; 0
    d950:	84 1b       	sub	r24, r20
    d952:	91 09       	sbc	r25, r1
    d954:	02 c0       	rjmp	.+4      	; 0xd95a <LCD_ClrVLine+0x56>
    d956:	35 95       	asr	r19
    d958:	27 95       	ror	r18
    d95a:	8a 95       	dec	r24
    d95c:	e2 f7       	brpl	.-8      	; 0xd956 <LCD_ClrVLine+0x52>
    d95e:	20 95       	com	r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    d960:	40 98       	cbi	0x08, 0	; 8
    d962:	80 ee       	ldi	r24, 0xE0	; 224
    d964:	80 93 00 80 	sts	0x8000, r24
    d968:	9e 2f       	mov	r25, r30
    d96a:	9f 77       	andi	r25, 0x7F	; 127
    d96c:	fe 2f       	mov	r31, r30
    d96e:	ff 70       	andi	r31, 0x0F	; 15
	// These variables are used often below.
	volatile uint8_t dummy;
	uint8_t readback;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    d970:	75 17       	cp	r23, r21
    d972:	e9 f4       	brne	.+58     	; 0xd9ae <LCD_ClrVLine+0xaa>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    d974:	62 2b       	or	r22, r18

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d976:	40 98       	cbi	0x08, 0	; 8
    d978:	50 6b       	ori	r21, 0xB0	; 176
    d97a:	50 93 00 80 	sts	0x8000, r21

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d97e:	40 98       	cbi	0x08, 0	; 8
    d980:	89 2f       	mov	r24, r25
    d982:	99 27       	eor	r25, r25
    d984:	b4 e0       	ldi	r27, 0x04	; 4
    d986:	96 95       	lsr	r25
    d988:	87 95       	ror	r24
    d98a:	ba 95       	dec	r27
    d98c:	e1 f7       	brne	.-8      	; 0xd986 <LCD_ClrVLine+0x82>
    d98e:	80 61       	ori	r24, 0x10	; 16
    d990:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d994:	40 98       	cbi	0x08, 0	; 8
    d996:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    d99a:	40 9a       	sbi	0x08, 0	; 8
    d99c:	80 91 00 81 	lds	r24, 0x8100
    d9a0:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    d9a2:	40 9a       	sbi	0x08, 0	; 8
    d9a4:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & pixelMask );
    d9a8:	40 9a       	sbi	0x08, 0	; 8
    d9aa:	86 23       	and	r24, r22
    d9ac:	56 c0       	rjmp	.+172    	; 0xda5a <LCD_ClrVLine+0x156>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    d9ae:	35 2f       	mov	r19, r21
    d9b0:	37 1b       	sub	r19, r23
    d9b2:	31 50       	subi	r19, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    d9b4:	40 98       	cbi	0x08, 0	; 8
    d9b6:	87 2f       	mov	r24, r23
    d9b8:	80 6b       	ori	r24, 0xB0	; 176
    d9ba:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    d9be:	40 98       	cbi	0x08, 0	; 8
    d9c0:	89 2f       	mov	r24, r25
    d9c2:	99 27       	eor	r25, r25
    d9c4:	a4 e0       	ldi	r26, 0x04	; 4
    d9c6:	96 95       	lsr	r25
    d9c8:	87 95       	ror	r24
    d9ca:	aa 95       	dec	r26
    d9cc:	e1 f7       	brne	.-8      	; 0xd9c6 <LCD_ClrVLine+0xc2>
    d9ce:	98 2f       	mov	r25, r24
    d9d0:	90 61       	ori	r25, 0x10	; 16
    d9d2:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    d9d6:	40 98       	cbi	0x08, 0	; 8
    d9d8:	f0 93 00 80 	sts	0x8000, r31
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
		dummy = S6B1713_ReadData(); 
    d9dc:	40 9a       	sbi	0x08, 0	; 8
    d9de:	80 91 00 81 	lds	r24, 0x8100
    d9e2:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
		readback = S6B1713_ReadData(); 
    d9e4:	40 9a       	sbi	0x08, 0	; 8
    d9e6:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & y1PixelMask );
    d9ea:	40 9a       	sbi	0x08, 0	; 8
    d9ec:	86 23       	and	r24, r22
    d9ee:	80 93 00 81 	sts	0x8100, r24
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    d9f2:	47 2f       	mov	r20, r23
    d9f4:	4f 5f       	subi	r20, 0xFF	; 255
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x );

			// Clear all pixels.
			S6B1713_WriteData( 0x00 );
    d9f6:	83 2f       	mov	r24, r19
    d9f8:	31 50       	subi	r19, 0x01	; 1
    d9fa:	18 16       	cp	r1, r24
    d9fc:	8c f4       	brge	.+34     	; 0xda20 <LCD_ClrVLine+0x11c>
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    d9fe:	84 2f       	mov	r24, r20
    da00:	4f 5f       	subi	r20, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    da02:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da04:	40 98       	cbi	0x08, 0	; 8
    da06:	80 6b       	ori	r24, 0xB0	; 176
    da08:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da0c:	40 98       	cbi	0x08, 0	; 8
    da0e:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    da12:	40 98       	cbi	0x08, 0	; 8
    da14:	f0 93 00 80 	sts	0x8000, r31
    da18:	40 9a       	sbi	0x08, 0	; 8
    da1a:	10 92 00 81 	sts	0x8100, r1
    da1e:	eb cf       	rjmp	.-42     	; 0xd9f6 <LCD_ClrVLine+0xf2>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    da20:	40 98       	cbi	0x08, 0	; 8
    da22:	50 6b       	ori	r21, 0xB0	; 176
    da24:	50 93 00 80 	sts	0x8000, r21


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    da28:	8e 2f       	mov	r24, r30
    da2a:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    da2c:	40 98       	cbi	0x08, 0	; 8
    da2e:	99 27       	eor	r25, r25
    da30:	64 e0       	ldi	r22, 0x04	; 4
    da32:	96 95       	lsr	r25
    da34:	87 95       	ror	r24
    da36:	6a 95       	dec	r22
    da38:	e1 f7       	brne	.-8      	; 0xda32 <LCD_ClrVLine+0x12e>
    da3a:	80 61       	ori	r24, 0x10	; 16
    da3c:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    da40:	40 98       	cbi	0x08, 0	; 8
    da42:	ef 70       	andi	r30, 0x0F	; 15
    da44:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x );

	    // A dummy read is required after column address change, before reading.
	    dummy = S6B1713_ReadData(); 
    da48:	40 9a       	sbi	0x08, 0	; 8
    da4a:	80 91 00 81 	lds	r24, 0x8100
    da4e:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear correct pixels and write back.
	    readback = S6B1713_ReadData(); 
    da50:	40 9a       	sbi	0x08, 0	; 8
    da52:	80 91 00 81 	lds	r24, 0x8100
    	S6B1713_WriteData( readback & y2PixelMask );
    da56:	40 9a       	sbi	0x08, 0	; 8
    da58:	82 23       	and	r24, r18
    da5a:	80 93 00 81 	sts	0x8100, r24
    da5e:	21 96       	adiw	r28, 0x01	; 1
    da60:	0f b6       	in	r0, 0x3f	; 63
    da62:	f8 94       	cli
    da64:	de bf       	out	0x3e, r29	; 62
    da66:	0f be       	out	0x3f, r0	; 63
    da68:	cd bf       	out	0x3d, r28	; 61
    da6a:	df 91       	pop	r29
    da6c:	cf 91       	pop	r28
    da6e:	08 95       	ret

0000da70 <LCD_ClrBox>:
	}
}


void LCD_ClrBox( uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2 )
{
    da70:	cf 93       	push	r28
    da72:	df 93       	push	r29
    da74:	cd b7       	in	r28, 0x3d	; 61
    da76:	de b7       	in	r29, 0x3e	; 62
    da78:	21 97       	sbiw	r28, 0x01	; 1
    da7a:	0f b6       	in	r0, 0x3f	; 63
    da7c:	f8 94       	cli
    da7e:	de bf       	out	0x3e, r29	; 62
    da80:	0f be       	out	0x3f, r0	; 63
    da82:	cd bf       	out	0x3d, r28	; 61
    da84:	e8 2f       	mov	r30, r24
    da86:	52 2f       	mov	r21, r18
	// Swap x1 and x2 if x1 is larger.
	if (x1 > x2) {
    da88:	48 17       	cp	r20, r24
    da8a:	10 f4       	brcc	.+4      	; 0xda90 <LCD_ClrBox+0x20>
		uint8_t temp = x1;
		x1 = x2;
    da8c:	e4 2f       	mov	r30, r20
		x2 = temp;
    da8e:	48 2f       	mov	r20, r24
	}

	// Swap y1 and y2 if y1 is larger.
	if (y1 > y2) {
    da90:	56 17       	cp	r21, r22
    da92:	18 f4       	brcc	.+6      	; 0xda9a <LCD_ClrBox+0x2a>
		uint8_t temp = y1;
    da94:	86 2f       	mov	r24, r22
		y1 = y2;
    da96:	65 2f       	mov	r22, r21
		y2 = temp;
    da98:	58 2f       	mov	r21, r24
	}
	
	// Prepare some.
	uint8_t y1Page = y1 >> 3;
    da9a:	f6 2f       	mov	r31, r22
    da9c:	f6 95       	lsr	r31
    da9e:	f6 95       	lsr	r31
    daa0:	f6 95       	lsr	r31
	uint8_t y2Page = y2 >> 3;
    daa2:	75 2f       	mov	r23, r21
    daa4:	76 95       	lsr	r23
    daa6:	76 95       	lsr	r23
    daa8:	76 95       	lsr	r23
	
	uint8_t y1Bit = y1 & 0x07;
    daaa:	67 70       	andi	r22, 0x07	; 7
	uint8_t y2Bit = y2 & 0x07;
    daac:	57 70       	andi	r21, 0x07	; 7
	
	uint8_t y1PixelMask = ~(0xff << y1Bit);
    daae:	2f ef       	ldi	r18, 0xFF	; 255
    dab0:	30 e0       	ldi	r19, 0x00	; 0
    dab2:	c9 01       	movw	r24, r18
    dab4:	02 c0       	rjmp	.+4      	; 0xdaba <LCD_ClrBox+0x4a>
    dab6:	88 0f       	add	r24, r24
    dab8:	99 1f       	adc	r25, r25
    daba:	6a 95       	dec	r22
    dabc:	e2 f7       	brpl	.-8      	; 0xdab6 <LCD_ClrBox+0x46>
    dabe:	68 2f       	mov	r22, r24
    dac0:	60 95       	com	r22
	uint8_t y2PixelMask = ~(0xff >> (7 - y2Bit));
    dac2:	87 e0       	ldi	r24, 0x07	; 7
    dac4:	90 e0       	ldi	r25, 0x00	; 0
    dac6:	85 1b       	sub	r24, r21
    dac8:	91 09       	sbc	r25, r1
    daca:	02 c0       	rjmp	.+4      	; 0xdad0 <LCD_ClrBox+0x60>
    dacc:	35 95       	asr	r19
    dace:	27 95       	ror	r18
    dad0:	8a 95       	dec	r24
    dad2:	e2 f7       	brpl	.-8      	; 0xdacc <LCD_ClrBox+0x5c>
    dad4:	20 95       	com	r18
	
	uint8_t width = x2 - x1 + 1;
    dad6:	4e 1b       	sub	r20, r30
    dad8:	4f 5f       	subi	r20, 0xFF	; 255
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dada:	40 98       	cbi	0x08, 0	; 8
    dadc:	80 ee       	ldi	r24, 0xE0	; 224
    dade:	80 93 00 80 	sts	0x8000, r24
    dae2:	ae 2f       	mov	r26, r30
    dae4:	af 77       	andi	r26, 0x7F	; 127
    dae6:	be 2f       	mov	r27, r30
    dae8:	bf 70       	andi	r27, 0x0F	; 15
	volatile uint8_t dummy;
	uint8_t readback;
	uint8_t columnsLeft;

	// If y1 and y2 are in within same 8-pixel column, we must combine bitmasks.
	if (y1Page == y2Page) {
    daea:	f7 17       	cp	r31, r23
    daec:	11 f5       	brne	.+68     	; 0xdb32 <LCD_ClrBox+0xc2>
		uint8_t pixelMask = y1PixelMask | y2PixelMask;
    daee:	26 2b       	or	r18, r22

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    daf0:	40 98       	cbi	0x08, 0	; 8
    daf2:	70 6b       	ori	r23, 0xB0	; 176
    daf4:	70 93 00 80 	sts	0x8000, r23

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    daf8:	40 98       	cbi	0x08, 0	; 8
    dafa:	8a 2f       	mov	r24, r26
    dafc:	99 27       	eor	r25, r25
    dafe:	54 e0       	ldi	r21, 0x04	; 4
    db00:	96 95       	lsr	r25
    db02:	87 95       	ror	r24
    db04:	5a 95       	dec	r21
    db06:	e1 f7       	brne	.-8      	; 0xdb00 <LCD_ClrBox+0x90>
    db08:	80 61       	ori	r24, 0x10	; 16
    db0a:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    db0e:	40 98       	cbi	0x08, 0	; 8
    db10:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
    	S6B1713_SetPageAddress( y1Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    db14:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    db16:	40 9a       	sbi	0x08, 0	; 8
    db18:	80 91 00 81 	lds	r24, 0x8100
    db1c:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    db1e:	40 9a       	sbi	0x08, 0	; 8
    db20:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & pixelMask );
    db24:	40 9a       	sbi	0x08, 0	; 8
    db26:	82 23       	and	r24, r18
    db28:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    db2c:	31 50       	subi	r19, 0x01	; 1
    db2e:	99 f7       	brne	.-26     	; 0xdb16 <LCD_ClrBox+0xa6>
    db30:	6b c0       	rjmp	.+214    	; 0xdc08 <LCD_ClrBox+0x198>
	}
	// Else, if y1 and y2 are in different pages, update all affected columns.
	else {
		int8_t fullColumns = y2Page - y1Page - 1; // Number of full 8-pixel columns.
    db32:	57 2f       	mov	r21, r23
    db34:	5f 1b       	sub	r21, r31
    db36:	51 50       	subi	r21, 0x01	; 1

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    db38:	40 98       	cbi	0x08, 0	; 8
    db3a:	8f 2f       	mov	r24, r31
    db3c:	80 6b       	ori	r24, 0xB0	; 176
    db3e:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    db42:	40 98       	cbi	0x08, 0	; 8
    db44:	8a 2f       	mov	r24, r26
    db46:	99 27       	eor	r25, r25
    db48:	34 e0       	ldi	r19, 0x04	; 4
    db4a:	96 95       	lsr	r25
    db4c:	87 95       	ror	r24
    db4e:	3a 95       	dec	r19
    db50:	e1 f7       	brne	.-8      	; 0xdb4a <LCD_ClrBox+0xda>
    db52:	80 61       	ori	r24, 0x10	; 16
    db54:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    db58:	40 98       	cbi	0x08, 0	; 8
    db5a:	b0 93 00 80 	sts	0x8000, r27
		// Set starting address.
		S6B1713_SetPageAddress( y1Page );
		S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    db5e:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    db60:	40 9a       	sbi	0x08, 0	; 8
    db62:	80 91 00 81 	lds	r24, 0x8100
    db66:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
			readback = S6B1713_ReadData(); 
    db68:	40 9a       	sbi	0x08, 0	; 8
    db6a:	80 91 00 81 	lds	r24, 0x8100
			S6B1713_WriteData( readback & y1PixelMask );
    db6e:	40 9a       	sbi	0x08, 0	; 8
    db70:	86 23       	and	r24, r22
    db72:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    db76:	31 50       	subi	r19, 0x01	; 1
    db78:	99 f7       	brne	.-26     	; 0xdb60 <LCD_ClrBox+0xf0>
		
		// --- Update 8-pixel columns in between y1 and y2 pages. ---
		
		uint8_t page = y1Page + 1;
    db7a:	ff 5f       	subi	r31, 0xFF	; 255

			// Clear all pixels.
			columnsLeft = width;
			do {
				S6B1713_WriteData( 0x00 );
			} while (--columnsLeft > 0);
    db7c:	85 2f       	mov	r24, r21
    db7e:	51 50       	subi	r21, 0x01	; 1
    db80:	18 16       	cp	r1, r24
    db82:	04 f5       	brge	.+64     	; 0xdbc4 <LCD_ClrBox+0x154>
    db84:	8a 2f       	mov	r24, r26
    db86:	99 27       	eor	r25, r25
    db88:	64 e0       	ldi	r22, 0x04	; 4
    db8a:	96 95       	lsr	r25
    db8c:	87 95       	ror	r24
    db8e:	6a 95       	dec	r22
    db90:	e1 f7       	brne	.-8      	; 0xdb8a <LCD_ClrBox+0x11a>
    db92:	98 2f       	mov	r25, r24
    db94:	90 61       	ori	r25, 0x10	; 16
/*
 * Often-used functions inlined for speed optimization.
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
    db96:	8f 2f       	mov	r24, r31
    db98:	ff 5f       	subi	r31, 0xFF	; 255
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    db9a:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    db9c:	40 98       	cbi	0x08, 0	; 8
    db9e:	80 6b       	ori	r24, 0xB0	; 176
    dba0:	80 93 00 80 	sts	0x8000, r24

CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dba4:	40 98       	cbi	0x08, 0	; 8
    dba6:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dbaa:	40 98       	cbi	0x08, 0	; 8
    dbac:	b0 93 00 80 	sts	0x8000, r27
			// Set starting address.
    		S6B1713_SetPageAddress( page++ );
		    S6B1713_SetColumnAddress( x1 );

			// Clear all pixels.
			columnsLeft = width;
    dbb0:	34 2f       	mov	r19, r20
			do {
				S6B1713_WriteData( 0x00 );
    dbb2:	40 9a       	sbi	0x08, 0	; 8
    dbb4:	10 92 00 81 	sts	0x8100, r1
			} while (--columnsLeft > 0);
    dbb8:	31 50       	subi	r19, 0x01	; 1
    dbba:	d9 f7       	brne	.-10     	; 0xdbb2 <LCD_ClrBox+0x142>
    dbbc:	85 2f       	mov	r24, r21
    dbbe:	51 50       	subi	r21, 0x01	; 1
    dbc0:	18 16       	cp	r1, r24
    dbc2:	4c f3       	brlt	.-46     	; 0xdb96 <LCD_ClrBox+0x126>

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dbc4:	40 98       	cbi	0x08, 0	; 8
    dbc6:	70 6b       	ori	r23, 0xB0	; 176
    dbc8:	70 93 00 80 	sts	0x8000, r23


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dbcc:	8e 2f       	mov	r24, r30
    dbce:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dbd0:	40 98       	cbi	0x08, 0	; 8
    dbd2:	99 27       	eor	r25, r25
    dbd4:	54 e0       	ldi	r21, 0x04	; 4
    dbd6:	96 95       	lsr	r25
    dbd8:	87 95       	ror	r24
    dbda:	5a 95       	dec	r21
    dbdc:	e1 f7       	brne	.-8      	; 0xdbd6 <LCD_ClrBox+0x166>
    dbde:	80 61       	ori	r24, 0x10	; 16
    dbe0:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dbe4:	40 98       	cbi	0x08, 0	; 8
    dbe6:	ef 70       	andi	r30, 0x0F	; 15
    dbe8:	e0 93 00 80 	sts	0x8000, r30
		// Set starting address.
    	S6B1713_SetPageAddress( y2Page );
	    S6B1713_SetColumnAddress( x1 );

		// Update whole width.
		columnsLeft = width;
    dbec:	34 2f       	mov	r19, r20
		do {
		    // A dummy read is required after column address change, before reading.
			dummy = S6B1713_ReadData(); 
    dbee:	40 9a       	sbi	0x08, 0	; 8
    dbf0:	80 91 00 81 	lds	r24, 0x8100
    dbf4:	89 83       	std	Y+1, r24	; 0x01

			// Read 8-pixel column, clear correct pixels and write back.
		    readback = S6B1713_ReadData(); 
    dbf6:	40 9a       	sbi	0x08, 0	; 8
    dbf8:	80 91 00 81 	lds	r24, 0x8100
    		S6B1713_WriteData( readback & y2PixelMask );
    dbfc:	40 9a       	sbi	0x08, 0	; 8
    dbfe:	82 23       	and	r24, r18
    dc00:	80 93 00 81 	sts	0x8100, r24
		} while (--columnsLeft > 0);
    dc04:	31 50       	subi	r19, 0x01	; 1
    dc06:	99 f7       	brne	.-26     	; 0xdbee <LCD_ClrBox+0x17e>
    dc08:	21 96       	adiw	r28, 0x01	; 1
    dc0a:	0f b6       	in	r0, 0x3f	; 63
    dc0c:	f8 94       	cli
    dc0e:	de bf       	out	0x3e, r29	; 62
    dc10:	0f be       	out	0x3f, r0	; 63
    dc12:	cd bf       	out	0x3d, r28	; 61
    dc14:	df 91       	pop	r29
    dc16:	cf 91       	pop	r28
    dc18:	08 95       	ret

0000dc1a <LCD_ClrPage>:
	} while (--width > 0);
}


void LCD_ClrPage( uint8_t pixelMask, uint8_t page, uint8_t column, uint8_t width )
{
    dc1a:	cf 93       	push	r28
    dc1c:	df 93       	push	r29
    dc1e:	cd b7       	in	r28, 0x3d	; 61
    dc20:	de b7       	in	r29, 0x3e	; 62
    dc22:	21 97       	sbiw	r28, 0x01	; 1
    dc24:	0f b6       	in	r0, 0x3f	; 63
    dc26:	f8 94       	cli
    dc28:	de bf       	out	0x3e, r29	; 62
    dc2a:	0f be       	out	0x3f, r0	; 63
    dc2c:	cd bf       	out	0x3d, r28	; 61
    dc2e:	36 2f       	mov	r19, r22
    dc30:	52 2f       	mov	r21, r18
}


CAL_ALWAYS_INLINE( static inline void S6B1713_SetReadModifyWriteOn( void ) )
{
	S6B1713_WriteCommand( S6B1713_CMD_READ_MODIFY_WRITE_ON );
    dc32:	40 98       	cbi	0x08, 0	; 8
    dc34:	90 ee       	ldi	r25, 0xE0	; 224
    dc36:	90 93 00 80 	sts	0x8000, r25
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dc3a:	3f 70       	andi	r19, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dc3c:	40 98       	cbi	0x08, 0	; 8
    dc3e:	30 6b       	ori	r19, 0xB0	; 176
    dc40:	30 93 00 80 	sts	0x8000, r19


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dc44:	94 2f       	mov	r25, r20
    dc46:	9f 77       	andi	r25, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dc48:	40 98       	cbi	0x08, 0	; 8
    dc4a:	29 2f       	mov	r18, r25
    dc4c:	33 27       	eor	r19, r19
    dc4e:	e4 e0       	ldi	r30, 0x04	; 4
    dc50:	36 95       	lsr	r19
    dc52:	27 95       	ror	r18
    dc54:	ea 95       	dec	r30
    dc56:	e1 f7       	brne	.-8      	; 0xdc50 <LCD_ClrPage+0x36>
    dc58:	92 2f       	mov	r25, r18
    dc5a:	90 61       	ori	r25, 0x10	; 16
    dc5c:	90 93 00 80 	sts	0x8000, r25
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dc60:	40 98       	cbi	0x08, 0	; 8
    dc62:	4f 70       	andi	r20, 0x0F	; 15
    dc64:	40 93 00 80 	sts	0x8000, r20
	// Set current address to start of current 8-pixel high page.
	S6B1713_SetPageAddress( page );
	S6B1713_SetColumnAddress( column );

	// XOR pixel mask into page.
	uint8_t inversePixelMask = ~pixelMask;
    dc68:	98 2f       	mov	r25, r24
    dc6a:	90 95       	com	r25
	do {
	    // A dummy read is required after column address change, before reading.
	    volatile uint8_t dummy = S6B1713_ReadData(); 
    dc6c:	40 9a       	sbi	0x08, 0	; 8
    dc6e:	80 91 00 81 	lds	r24, 0x8100
    dc72:	89 83       	std	Y+1, r24	; 0x01

		// Read 8-pixel column, clear pixels and write back.
		uint8_t readback = S6B1713_ReadData();
    dc74:	40 9a       	sbi	0x08, 0	; 8
    dc76:	80 91 00 81 	lds	r24, 0x8100
		S6B1713_WriteData( readback & inversePixelMask );
    dc7a:	40 9a       	sbi	0x08, 0	; 8
    dc7c:	89 23       	and	r24, r25
    dc7e:	80 93 00 81 	sts	0x8100, r24
	} while (--width > 0);
    dc82:	51 50       	subi	r21, 0x01	; 1
    dc84:	99 f7       	brne	.-26     	; 0xdc6c <LCD_ClrPage+0x52>
    dc86:	21 96       	adiw	r28, 0x01	; 1
    dc88:	0f b6       	in	r0, 0x3f	; 63
    dc8a:	f8 94       	cli
    dc8c:	de bf       	out	0x3e, r29	; 62
    dc8e:	0f be       	out	0x3f, r0	; 63
    dc90:	cd bf       	out	0x3d, r28	; 61
    dc92:	df 91       	pop	r29
    dc94:	cf 91       	pop	r28
    dc96:	08 95       	ret

0000dc98 <LCD_WritePage_F>:
	}
}


void LCD_WritePage_F( const uint8_t CAL_PGM(* data), uint8_t page, uint8_t column, uint8_t width )
{
    dc98:	fc 01       	movw	r30, r24
    dc9a:	86 2f       	mov	r24, r22
    dc9c:	34 2f       	mov	r19, r20
 */

CAL_ALWAYS_INLINE( static inline void S6B1713_SetPageAddress( uint8_t address ) )
{
	// Truncate address to 4 bits (0-7) and issue command.
	address &= 0x0f;
    dc9e:	8f 70       	andi	r24, 0x0F	; 15
	S6B1713_WriteCommand( S6B1713_CMD_PAGE_ADDRESS | address );
    dca0:	40 98       	cbi	0x08, 0	; 8
    dca2:	80 6b       	ori	r24, 0xB0	; 176
    dca4:	80 93 00 80 	sts	0x8000, r24


CAL_ALWAYS_INLINE( static inline void S6B1713_SetColumnAddress( uint8_t address ) )
{
	// Truncate address to 7 bits (0-127) and issue command.
	address &= 0x7f;
    dca8:	84 2f       	mov	r24, r20
    dcaa:	8f 77       	andi	r24, 0x7F	; 127
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_HIGH | ((address & 0xF0) >> 4) );
    dcac:	40 98       	cbi	0x08, 0	; 8
    dcae:	99 27       	eor	r25, r25
    dcb0:	44 e0       	ldi	r20, 0x04	; 4
    dcb2:	96 95       	lsr	r25
    dcb4:	87 95       	ror	r24
    dcb6:	4a 95       	dec	r20
    dcb8:	e1 f7       	brne	.-8      	; 0xdcb2 <LCD_WritePage_F+0x1a>
    dcba:	80 61       	ori	r24, 0x10	; 16
    dcbc:	80 93 00 80 	sts	0x8000, r24
	S6B1713_WriteCommand( S6B1713_CMD_COLUMN_ADDRESS_LOW | (address & 0x0F) );
    dcc0:	40 98       	cbi	0x08, 0	; 8
    dcc2:	3f 70       	andi	r19, 0x0F	; 15
    dcc4:	30 93 00 80 	sts	0x8000, r19
	S6B1713_SetColumnAddress( column );

	// Write "size" bytes (size*8 pixels).
	do {
		// S6B1713_WriteData( *data++ );
		S6B1713_WriteData( CAL_pgm_read_byte( data ) );
    dcc8:	40 9a       	sbi	0x08, 0	; 8
    dcca:	84 91       	lpm	r24, Z+
    dccc:	80 93 00 81 	sts	0x8100, r24
		data++;
    dcd0:	31 96       	adiw	r30, 0x01	; 1
	} while (--width > 0);
    dcd2:	21 50       	subi	r18, 0x01	; 1
    dcd4:	c9 f7       	brne	.-14     	; 0xdcc8 <LCD_WritePage_F+0x30>
    dcd6:	08 95       	ret

0000dcd8 <POPUP_MsgBox>:
 * \param  margin         Number of pixels between the text and the sides of the box
 * \param  str            Pointer to a null-terminated string. Supports LF and CR.
 * \param  parentForm     If specified, this form will be redrawn before the function returns
 */
void POPUP_MsgBox( uint8_t widthInChars, uint8_t heightInPages, uint8_t margin, char const * str, FORMS_form_t * parentForm )
{
    dcd8:	4f 92       	push	r4
    dcda:	5f 92       	push	r5
    dcdc:	6f 92       	push	r6
    dcde:	7f 92       	push	r7
    dce0:	8f 92       	push	r8
    dce2:	9f 92       	push	r9
    dce4:	af 92       	push	r10
    dce6:	bf 92       	push	r11
    dce8:	cf 92       	push	r12
    dcea:	df 92       	push	r13
    dcec:	ef 92       	push	r14
    dcee:	ff 92       	push	r15
    dcf0:	0f 93       	push	r16
    dcf2:	1f 93       	push	r17
    dcf4:	cf 93       	push	r28
    dcf6:	c8 2f       	mov	r28, r24
    dcf8:	d6 2e       	mov	r13, r22
    dcfa:	e4 2e       	mov	r14, r20
    dcfc:	49 01       	movw	r8, r18
    dcfe:	38 01       	movw	r6, r16
	// Reset any hardware LCD scrolling first.
	if (parentForm != NULL) {
    dd00:	01 15       	cp	r16, r1
    dd02:	11 05       	cpc	r17, r1
    dd04:	19 f0       	breq	.+6      	; 0xdd0c <POPUP_MsgBox+0x34>
		FORMS_NormalizeLCDScroll( parentForm );
    dd06:	c8 01       	movw	r24, r16
    dd08:	0e 94 ff 75 	call	0xebfe	; 0xebfe <FORMS_NormalizeLCDScroll>
	}
	
	// Calculate some coordinates, with text centered in screen.
	uint8_t const widthInPixels = widthInChars * TERMFONT_CHAR_WIDTH;
    dd0c:	86 e0       	ldi	r24, 0x06	; 6
    dd0e:	c8 9f       	mul	r28, r24
    dd10:	80 2d       	mov	r24, r0
    dd12:	11 24       	eor	r1, r1
	uint8_t const startColumn = (LCD_WIDTH / 2) - (widthInPixels / 2);
    dd14:	86 95       	lsr	r24
    dd16:	30 e4       	ldi	r19, 0x40	; 64
    dd18:	43 2e       	mov	r4, r19
    dd1a:	48 1a       	sub	r4, r24
	uint8_t const startX = startColumn - margin;
    dd1c:	b4 2c       	mov	r11, r4
    dd1e:	be 18       	sub	r11, r14
	uint8_t const endColumn = (LCD_WIDTH / 2) + (widthInPixels / 2);
    dd20:	a8 2e       	mov	r10, r24
    dd22:	80 e4       	ldi	r24, 0x40	; 64
    dd24:	a8 0e       	add	r10, r24
	uint8_t const endX = endColumn + margin;
    dd26:	ca 2d       	mov	r28, r10
    dd28:	ce 0d       	add	r28, r14
	uint8_t const startPage = (LCD_HEIGHT / LCD_PAGE_HEIGHT / 2) - 1 - ((heightInPages - 1) / 2);
    dd2a:	2d 2d       	mov	r18, r13
    dd2c:	33 27       	eor	r19, r19
    dd2e:	c9 01       	movw	r24, r18
    dd30:	01 97       	sbiw	r24, 0x01	; 1
    dd32:	97 fd       	sbrc	r25, 7
    dd34:	c9 01       	movw	r24, r18
    dd36:	95 95       	asr	r25
    dd38:	87 95       	ror	r24
    dd3a:	93 e0       	ldi	r25, 0x03	; 3
    dd3c:	f9 2e       	mov	r15, r25
    dd3e:	f8 1a       	sub	r15, r24
	uint8_t const startY = (startPage * LCD_PAGE_HEIGHT) - margin;
    dd40:	0f 2d       	mov	r16, r15
    dd42:	00 0f       	add	r16, r16
    dd44:	00 0f       	add	r16, r16
    dd46:	00 0f       	add	r16, r16
    dd48:	0e 19       	sub	r16, r14
	uint8_t const endPage = startPage + heightInPages;
    dd4a:	5f 2c       	mov	r5, r15
    dd4c:	5d 0c       	add	r5, r13
	uint8_t const endY = (endPage * LCD_PAGE_HEIGHT) + margin;
    dd4e:	15 2d       	mov	r17, r5
    dd50:	11 0f       	add	r17, r17
    dd52:	11 0f       	add	r17, r17
    dd54:	11 0f       	add	r17, r17
    dd56:	1e 0d       	add	r17, r14
	
	// Draw popup frame.
	LCD_SetHLine( startX, endX, startY );
    dd58:	40 2f       	mov	r20, r16
    dd5a:	6c 2f       	mov	r22, r28
    dd5c:	8b 2d       	mov	r24, r11
    dd5e:	0e 94 7a 6b 	call	0xd6f4	; 0xd6f4 <LCD_SetHLine>
	LCD_SetHLine( startX, endX, endY );
    dd62:	41 2f       	mov	r20, r17
    dd64:	6c 2f       	mov	r22, r28
    dd66:	8b 2d       	mov	r24, r11
    dd68:	0e 94 7a 6b 	call	0xd6f4	; 0xd6f4 <LCD_SetHLine>
	LCD_SetHLine( startX + 1, endX + 1, endY + 1 );
    dd6c:	e1 2e       	mov	r14, r17
    dd6e:	e3 94       	inc	r14
    dd70:	dc 2e       	mov	r13, r28
    dd72:	d3 94       	inc	r13
    dd74:	cb 2c       	mov	r12, r11
    dd76:	c3 94       	inc	r12
    dd78:	4e 2d       	mov	r20, r14
    dd7a:	6d 2d       	mov	r22, r13
    dd7c:	8c 2d       	mov	r24, r12
    dd7e:	0e 94 7a 6b 	call	0xd6f4	; 0xd6f4 <LCD_SetHLine>
	LCD_SetVLine( startX, startY, endY );
    dd82:	41 2f       	mov	r20, r17
    dd84:	60 2f       	mov	r22, r16
    dd86:	8b 2d       	mov	r24, r11
    dd88:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
	LCD_SetVLine( endX, startY, endY );
    dd8c:	41 2f       	mov	r20, r17
    dd8e:	60 2f       	mov	r22, r16
    dd90:	8c 2f       	mov	r24, r28
    dd92:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
	LCD_SetVLine( endX + 1, startY + 1, endY + 1 );
    dd96:	0f 5f       	subi	r16, 0xFF	; 255
    dd98:	4e 2d       	mov	r20, r14
    dd9a:	60 2f       	mov	r22, r16
    dd9c:	8d 2d       	mov	r24, r13
    dd9e:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
	LCD_ClrBox( startX + 1, startY + 1, endX - 1, endY - 1 );
    dda2:	11 50       	subi	r17, 0x01	; 1
    dda4:	c1 50       	subi	r28, 0x01	; 1
    dda6:	21 2f       	mov	r18, r17
    dda8:	4c 2f       	mov	r20, r28
    ddaa:	60 2f       	mov	r22, r16
    ddac:	8c 2d       	mov	r24, r12
    ddae:	0e 94 38 6d 	call	0xda70	; 0xda70 <LCD_ClrBox>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
    ddb2:	c4 2d       	mov	r28, r4
				column = startColumn;
			}
			TERMFONT_DisplayChar( *str, page, column );
			column += TERMFONT_CHAR_WIDTH;
		}
		++str;
    ddb4:	f4 01       	movw	r30, r8
    ddb6:	80 81       	ld	r24, Z
    ddb8:	88 23       	and	r24, r24
    ddba:	c9 f0       	breq	.+50     	; 0xddee <POPUP_MsgBox+0x116>
    ddbc:	f5 14       	cp	r15, r5
    ddbe:	b8 f4       	brcc	.+46     	; 0xddee <POPUP_MsgBox+0x116>
	
	// Draw text with wrapping on line ends.
	uint8_t column = startColumn;
	uint8_t page = startPage;
	while ((*str != 0) && (page < endPage)) {
		if (*str == '\r') {
    ddc0:	8d 30       	cpi	r24, 0x0D	; 13
    ddc2:	11 f4       	brne	.+4      	; 0xddc8 <POPUP_MsgBox+0xf0>
			column = startColumn;
    ddc4:	c4 2d       	mov	r28, r4
    ddc6:	0d c0       	rjmp	.+26     	; 0xdde2 <POPUP_MsgBox+0x10a>
		}
		else if (*str == '\n') {
    ddc8:	8a 30       	cpi	r24, 0x0A	; 10
    ddca:	11 f4       	brne	.+4      	; 0xddd0 <POPUP_MsgBox+0xf8>
			++page;
    ddcc:	f3 94       	inc	r15
    ddce:	09 c0       	rjmp	.+18     	; 0xdde2 <POPUP_MsgBox+0x10a>
		}
		else {
			if (column >= endColumn) {
    ddd0:	ca 15       	cp	r28, r10
    ddd2:	10 f0       	brcs	.+4      	; 0xddd8 <POPUP_MsgBox+0x100>
				++page;
    ddd4:	f3 94       	inc	r15
				column = startColumn;
    ddd6:	c4 2d       	mov	r28, r4
			}
			TERMFONT_DisplayChar( *str, page, column );
    ddd8:	4c 2f       	mov	r20, r28
    ddda:	6f 2d       	mov	r22, r15
    dddc:	0e 94 36 79 	call	0xf26c	; 0xf26c <TERMFONT_DisplayChar>
			column += TERMFONT_CHAR_WIDTH;
    dde0:	ca 5f       	subi	r28, 0xFA	; 250
		}
		++str;
    dde2:	08 94       	sec
    dde4:	81 1c       	adc	r8, r1
    dde6:	91 1c       	adc	r9, r1
    dde8:	e5 cf       	rjmp	.-54     	; 0xddb4 <POPUP_MsgBox+0xdc>
	}
	
	// Wait until joystick is released (could still be held down after select a menu item).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    ddea:	0e 94 c6 71 	call	0xe38c	; 0xe38c <POWER_EnterIdleSleepMode>
    ddee:	0e 94 49 71 	call	0xe292	; 0xe292 <JOYSTICK_GetState>
    ddf2:	88 23       	and	r24, r24
    ddf4:	d1 f7       	brne	.-12     	; 0xddea <POPUP_MsgBox+0x112>
	// Wait until joystick is pressed (user wants to exit popup box).
	while (JOYSTICK_GetState() == 0x00) { POWER_EnterIdleSleepMode(); }
    ddf6:	02 c0       	rjmp	.+4      	; 0xddfc <POPUP_MsgBox+0x124>
    ddf8:	0e 94 c6 71 	call	0xe38c	; 0xe38c <POWER_EnterIdleSleepMode>
    ddfc:	0e 94 49 71 	call	0xe292	; 0xe292 <JOYSTICK_GetState>
    de00:	88 23       	and	r24, r24
    de02:	d1 f3       	breq	.-12     	; 0xddf8 <POPUP_MsgBox+0x120>
	// Wait until joystick is released again (in order not to give unwanted joystick events to the calling application).
	while (JOYSTICK_GetState() != 0x00) { POWER_EnterIdleSleepMode(); }
    de04:	02 c0       	rjmp	.+4      	; 0xde0a <POPUP_MsgBox+0x132>
    de06:	0e 94 c6 71 	call	0xe38c	; 0xe38c <POWER_EnterIdleSleepMode>
    de0a:	0e 94 49 71 	call	0xe292	; 0xe292 <JOYSTICK_GetState>
    de0e:	88 23       	and	r24, r24
    de10:	d1 f7       	brne	.-12     	; 0xde06 <POPUP_MsgBox+0x12e>

	// Redraw parent form if requested.
	if (parentForm != NULL) {
    de12:	61 14       	cp	r6, r1
    de14:	71 04       	cpc	r7, r1
    de16:	19 f0       	breq	.+6      	; 0xde1e <POPUP_MsgBox+0x146>
		FORMS_Draw( parentForm );
    de18:	c3 01       	movw	r24, r6
    de1a:	0e 94 90 75 	call	0xeb20	; 0xeb20 <FORMS_Draw>
    de1e:	cf 91       	pop	r28
    de20:	1f 91       	pop	r17
    de22:	0f 91       	pop	r16
    de24:	ff 90       	pop	r15
    de26:	ef 90       	pop	r14
    de28:	df 90       	pop	r13
    de2a:	cf 90       	pop	r12
    de2c:	bf 90       	pop	r11
    de2e:	af 90       	pop	r10
    de30:	9f 90       	pop	r9
    de32:	8f 90       	pop	r8
    de34:	7f 90       	pop	r7
    de36:	6f 90       	pop	r6
    de38:	5f 90       	pop	r5
    de3a:	4f 90       	pop	r4
    de3c:	08 95       	ret

0000de3e <LCD_UpdateBigNumbers>:
	LCD_UpdateBigNumbers(soc);
	
}

void LCD_UpdateBigNumbers(uint8_t value)
{
    de3e:	6f 92       	push	r6
    de40:	7f 92       	push	r7
    de42:	8f 92       	push	r8
    de44:	9f 92       	push	r9
    de46:	af 92       	push	r10
    de48:	bf 92       	push	r11
    de4a:	cf 92       	push	r12
    de4c:	df 92       	push	r13
    de4e:	ef 92       	push	r14
    de50:	ff 92       	push	r15
    de52:	0f 93       	push	r16
    de54:	1f 93       	push	r17
    de56:	cf 93       	push	r28
    de58:	df 93       	push	r29
    de5a:	c8 2f       	mov	r28, r24
	// Each number 32 px x 32 px in size.
	//

	int first=0;
	int second=0;
	int third=0;
    de5c:	66 24       	eor	r6, r6
    de5e:	77 24       	eor	r7, r7
	
	if (value < 1)
		value = 0;
	if (value > 254)
    de60:	8f 3f       	cpi	r24, 0xFF	; 255
    de62:	09 f4       	brne	.+2      	; 0xde66 <LCD_UpdateBigNumbers+0x28>
		value = 254;
    de64:	ce ef       	ldi	r28, 0xFE	; 254
	
	// clear background "just in case" there is some garbage on the screen
	LCD_ClrBox(0,0,96,32);
    de66:	20 e2       	ldi	r18, 0x20	; 32
    de68:	40 e6       	ldi	r20, 0x60	; 96
    de6a:	60 e0       	ldi	r22, 0x00	; 0
    de6c:	86 2f       	mov	r24, r22
    de6e:	0e 94 38 6d 	call	0xda70	; 0xda70 <LCD_ClrBox>

	if (value < 10)
    de72:	ca 30       	cpi	r28, 0x0A	; 10
    de74:	a0 f4       	brcc	.+40     	; 0xde9e <LCD_UpdateBigNumbers+0x60>
	{
		// 1 number to the middle of the screen
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[value]), 32, 0, 0, 32, 0, 32, 4);
    de76:	ec 2f       	mov	r30, r28
    de78:	ff 27       	eor	r31, r31
    de7a:	ee 0f       	add	r30, r30
    de7c:	ff 1f       	adc	r31, r31
    de7e:	e6 59       	subi	r30, 0x96	; 150
    de80:	f4 43       	sbci	r31, 0x34	; 52
    de82:	85 91       	lpm	r24, Z+
    de84:	94 91       	lpm	r25, Z+
    de86:	f4 e0       	ldi	r31, 0x04	; 4
    de88:	af 2e       	mov	r10, r31
    de8a:	b1 2c       	mov	r11, r1
    de8c:	e0 e2       	ldi	r30, 0x20	; 32
    de8e:	ce 2e       	mov	r12, r30
    de90:	d1 2c       	mov	r13, r1
    de92:	73 01       	movw	r14, r6
    de94:	86 01       	movw	r16, r12
    de96:	93 01       	movw	r18, r6
    de98:	a3 01       	movw	r20, r6
    de9a:	b6 01       	movw	r22, r12
    de9c:	8d c0       	rjmp	.+282    	; 0xdfb8 <LCD_UpdateBigNumbers+0x17a>
	} 
	else if (value > 9 && value < 100) 
    de9e:	8c 2f       	mov	r24, r28
    dea0:	8a 50       	subi	r24, 0x0A	; 10
    dea2:	8c 2e       	mov	r8, r28
    dea4:	99 24       	eor	r9, r9
    dea6:	8a 35       	cpi	r24, 0x5A	; 90
    dea8:	98 f5       	brcc	.+102    	; 0xdf10 <LCD_UpdateBigNumbers+0xd2>
	{
		// 2 numbers to the middle of the screen
		first = value / 10;
    deaa:	8c 2f       	mov	r24, r28
    deac:	6a e0       	ldi	r22, 0x0A	; 10
    deae:	0e 94 8c 7a 	call	0xf518	; 0xf518 <__udivmodqi4>
    deb2:	c8 2f       	mov	r28, r24
    deb4:	dd 27       	eor	r29, r29
		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 16, 0, 32, 4);
    deb6:	fe 01       	movw	r30, r28
    deb8:	ec 0f       	add	r30, r28
    deba:	fd 1f       	adc	r31, r29
    debc:	e6 59       	subi	r30, 0x96	; 150
    debe:	f4 43       	sbci	r31, 0x34	; 52
    dec0:	85 91       	lpm	r24, Z+
    dec2:	94 91       	lpm	r25, Z+
    dec4:	74 e0       	ldi	r23, 0x04	; 4
    dec6:	a7 2e       	mov	r10, r23
    dec8:	b1 2c       	mov	r11, r1
    deca:	60 e2       	ldi	r22, 0x20	; 32
    decc:	c6 2e       	mov	r12, r22
    dece:	d1 2c       	mov	r13, r1
    ded0:	73 01       	movw	r14, r6
    ded2:	00 e1       	ldi	r16, 0x10	; 16
    ded4:	10 e0       	ldi	r17, 0x00	; 0
    ded6:	93 01       	movw	r18, r6
    ded8:	a3 01       	movw	r20, r6
    deda:	b6 01       	movw	r22, r12
    dedc:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>
		
		second = value - (first*10);
    dee0:	ce 01       	movw	r24, r28
    dee2:	53 e0       	ldi	r21, 0x03	; 3
    dee4:	88 0f       	add	r24, r24
    dee6:	99 1f       	adc	r25, r25
    dee8:	5a 95       	dec	r21
    deea:	e1 f7       	brne	.-8      	; 0xdee4 <LCD_UpdateBigNumbers+0xa6>
    deec:	8c 0f       	add	r24, r28
    deee:	9d 1f       	adc	r25, r29
    def0:	8c 0f       	add	r24, r28
    def2:	9d 1f       	adc	r25, r29
    def4:	f4 01       	movw	r30, r8
    def6:	e8 1b       	sub	r30, r24
    def8:	f9 0b       	sbc	r31, r25
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 48, 0, 32, 4);
    defa:	ee 0f       	add	r30, r30
    defc:	ff 1f       	adc	r31, r31
    defe:	e6 59       	subi	r30, 0x96	; 150
    df00:	f4 43       	sbci	r31, 0x34	; 52
    df02:	85 91       	lpm	r24, Z+
    df04:	94 91       	lpm	r25, Z+
    df06:	00 e3       	ldi	r16, 0x30	; 48
    df08:	10 e0       	ldi	r17, 0x00	; 0
    df0a:	93 01       	movw	r18, r6
    df0c:	a3 01       	movw	r20, r6
    df0e:	53 c0       	rjmp	.+166    	; 0xdfb6 <LCD_UpdateBigNumbers+0x178>
	}
	else
	{
		// 3 numbers to the screen
		
		first = value / 100;
    df10:	8c 2f       	mov	r24, r28
    df12:	64 e6       	ldi	r22, 0x64	; 100
    df14:	0e 94 8c 7a 	call	0xf518	; 0xf518 <__udivmodqi4>
    df18:	c8 2f       	mov	r28, r24
    df1a:	dd 27       	eor	r29, r29
		second = (value - (first*100)) / 10;
    df1c:	84 e6       	ldi	r24, 0x64	; 100
    df1e:	90 e0       	ldi	r25, 0x00	; 0
    df20:	c8 9f       	mul	r28, r24
    df22:	90 01       	movw	r18, r0
    df24:	c9 9f       	mul	r28, r25
    df26:	30 0d       	add	r19, r0
    df28:	d8 9f       	mul	r29, r24
    df2a:	30 0d       	add	r19, r0
    df2c:	11 24       	eor	r1, r1
    df2e:	c9 01       	movw	r24, r18
    df30:	94 01       	movw	r18, r8
    df32:	28 1b       	sub	r18, r24
    df34:	39 0b       	sbc	r19, r25
    df36:	c9 01       	movw	r24, r18
    df38:	6a e0       	ldi	r22, 0x0A	; 10
    df3a:	70 e0       	ldi	r23, 0x00	; 0
    df3c:	0e 94 ac 7a 	call	0xf558	; 0xf558 <__divmodhi4>
    df40:	4b 01       	movw	r8, r22
		third = value - (first*100) - (second*10);
    df42:	cb 01       	movw	r24, r22
    df44:	43 e0       	ldi	r20, 0x03	; 3
    df46:	88 0f       	add	r24, r24
    df48:	99 1f       	adc	r25, r25
    df4a:	4a 95       	dec	r20
    df4c:	e1 f7       	brne	.-8      	; 0xdf46 <LCD_UpdateBigNumbers+0x108>
    df4e:	86 0f       	add	r24, r22
    df50:	97 1f       	adc	r25, r23
    df52:	86 0f       	add	r24, r22
    df54:	97 1f       	adc	r25, r23
    df56:	39 01       	movw	r6, r18
    df58:	68 1a       	sub	r6, r24
    df5a:	79 0a       	sbc	r7, r25

		// 1st number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[first]), 32, 0, 0, 0, 0, 32, 4);
    df5c:	fe 01       	movw	r30, r28
    df5e:	ec 0f       	add	r30, r28
    df60:	fd 1f       	adc	r31, r29
    df62:	e6 59       	subi	r30, 0x96	; 150
    df64:	f4 43       	sbci	r31, 0x34	; 52
    df66:	85 91       	lpm	r24, Z+
    df68:	94 91       	lpm	r25, Z+
    df6a:	34 e0       	ldi	r19, 0x04	; 4
    df6c:	a3 2e       	mov	r10, r19
    df6e:	b1 2c       	mov	r11, r1
    df70:	20 e2       	ldi	r18, 0x20	; 32
    df72:	c2 2e       	mov	r12, r18
    df74:	d1 2c       	mov	r13, r1
    df76:	ee 24       	eor	r14, r14
    df78:	ff 24       	eor	r15, r15
    df7a:	87 01       	movw	r16, r14
    df7c:	97 01       	movw	r18, r14
    df7e:	a7 01       	movw	r20, r14
    df80:	b6 01       	movw	r22, r12
    df82:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>
		
		// 2nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[second]), 32, 0, 0, 32, 0, 32, 4);
    df86:	f4 01       	movw	r30, r8
    df88:	e8 0d       	add	r30, r8
    df8a:	f9 1d       	adc	r31, r9
    df8c:	e6 59       	subi	r30, 0x96	; 150
    df8e:	f4 43       	sbci	r31, 0x34	; 52
    df90:	85 91       	lpm	r24, Z+
    df92:	94 91       	lpm	r25, Z+
    df94:	86 01       	movw	r16, r12
    df96:	97 01       	movw	r18, r14
    df98:	a7 01       	movw	r20, r14
    df9a:	b6 01       	movw	r22, r12
    df9c:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>

		// 3nd number
		PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&big_number_pictures[third]), 32, 0, 0, 64, 0, 32, 4);
    dfa0:	f3 01       	movw	r30, r6
    dfa2:	e6 0d       	add	r30, r6
    dfa4:	f7 1d       	adc	r31, r7
    dfa6:	e6 59       	subi	r30, 0x96	; 150
    dfa8:	f4 43       	sbci	r31, 0x34	; 52
    dfaa:	85 91       	lpm	r24, Z+
    dfac:	94 91       	lpm	r25, Z+
    dfae:	00 e4       	ldi	r16, 0x40	; 64
    dfb0:	10 e0       	ldi	r17, 0x00	; 0
    dfb2:	97 01       	movw	r18, r14
    dfb4:	a7 01       	movw	r20, r14
    dfb6:	b6 01       	movw	r22, r12
    dfb8:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>
			
	}

	// 3nd number
	PICTURE_CopyFlashToLcd(FLASHPICS_pros, 32, 0, 0, 32, 4, 32, 4);
    dfbc:	94 e0       	ldi	r25, 0x04	; 4
    dfbe:	a9 2e       	mov	r10, r25
    dfc0:	b1 2c       	mov	r11, r1
    dfc2:	80 e2       	ldi	r24, 0x20	; 32
    dfc4:	c8 2e       	mov	r12, r24
    dfc6:	d1 2c       	mov	r13, r1
    dfc8:	75 01       	movw	r14, r10
    dfca:	86 01       	movw	r16, r12
    dfcc:	20 e0       	ldi	r18, 0x00	; 0
    dfce:	30 e0       	ldi	r19, 0x00	; 0
    dfd0:	a9 01       	movw	r20, r18
    dfd2:	b6 01       	movw	r22, r12
    dfd4:	8c e7       	ldi	r24, 0x7C	; 124
    dfd6:	94 e9       	ldi	r25, 0x94	; 148
    dfd8:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>
    dfdc:	df 91       	pop	r29
    dfde:	cf 91       	pop	r28
    dfe0:	1f 91       	pop	r17
    dfe2:	0f 91       	pop	r16
    dfe4:	ff 90       	pop	r15
    dfe6:	ef 90       	pop	r14
    dfe8:	df 90       	pop	r13
    dfea:	cf 90       	pop	r12
    dfec:	bf 90       	pop	r11
    dfee:	af 90       	pop	r10
    dff0:	9f 90       	pop	r9
    dff2:	8f 90       	pop	r8
    dff4:	7f 90       	pop	r7
    dff6:	6f 90       	pop	r6
    dff8:	08 95       	ret

0000dffa <LCD_UpdateSOC>:
	FLASHPICS_battery_50,
	FLASHPICS_battery_50
};
		
void LCD_UpdateSOC(uint8_t soc)
{
    dffa:	af 92       	push	r10
    dffc:	bf 92       	push	r11
    dffe:	cf 92       	push	r12
    e000:	df 92       	push	r13
    e002:	ef 92       	push	r14
    e004:	ff 92       	push	r15
    e006:	0f 93       	push	r16
    e008:	1f 93       	push	r17
    e00a:	cf 93       	push	r28
    e00c:	c8 2f       	mov	r28, r24
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages );	
	*/
	if (soc < 1)
		soc = 0;
	if (soc > 100)
    e00e:	85 36       	cpi	r24, 0x65	; 101
    e010:	08 f0       	brcs	.+2      	; 0xe014 <LCD_UpdateSOC+0x1a>
		soc = 100;
    e012:	c4 e6       	ldi	r28, 0x64	; 100
		
	PICTURE_CopyFlashToLcd(CAL_pgm_read_puint8(&soc_pictures[soc]), 32, 0, 0, 96, 0, 32, 8);
    e014:	ec 2f       	mov	r30, r28
    e016:	ff 27       	eor	r31, r31
    e018:	ee 0f       	add	r30, r30
    e01a:	ff 1f       	adc	r31, r31
    e01c:	ea 57       	subi	r30, 0x7A	; 122
    e01e:	f4 43       	sbci	r31, 0x34	; 52
    e020:	85 91       	lpm	r24, Z+
    e022:	94 91       	lpm	r25, Z+
    e024:	b8 e0       	ldi	r27, 0x08	; 8
    e026:	ab 2e       	mov	r10, r27
    e028:	b1 2c       	mov	r11, r1
    e02a:	a0 e2       	ldi	r26, 0x20	; 32
    e02c:	ca 2e       	mov	r12, r26
    e02e:	d1 2c       	mov	r13, r1
    e030:	ee 24       	eor	r14, r14
    e032:	ff 24       	eor	r15, r15
    e034:	00 e6       	ldi	r16, 0x60	; 96
    e036:	10 e0       	ldi	r17, 0x00	; 0
    e038:	97 01       	movw	r18, r14
    e03a:	a7 01       	movw	r20, r14
    e03c:	b6 01       	movw	r22, r12
    e03e:	0e 94 8d 74 	call	0xe91a	; 0xe91a <PICTURE_CopyFlashToLcd>
	
	LCD_UpdateBigNumbers(soc);
    e042:	8c 2f       	mov	r24, r28
    e044:	0e 94 1f 6f 	call	0xde3e	; 0xde3e <LCD_UpdateBigNumbers>
    e048:	cf 91       	pop	r28
    e04a:	1f 91       	pop	r17
    e04c:	0f 91       	pop	r16
    e04e:	ff 90       	pop	r15
    e050:	ef 90       	pop	r14
    e052:	df 90       	pop	r13
    e054:	cf 90       	pop	r12
    e056:	bf 90       	pop	r11
    e058:	af 90       	pop	r10
    e05a:	08 95       	ret

0000e05c <LCD_SetLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_SetLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e05c:	9f 92       	push	r9
    e05e:	af 92       	push	r10
    e060:	bf 92       	push	r11
    e062:	cf 92       	push	r12
    e064:	df 92       	push	r13
    e066:	ef 92       	push	r14
    e068:	ff 92       	push	r15
    e06a:	0f 93       	push	r16
    e06c:	1f 93       	push	r17
    e06e:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e070:	48 17       	cp	r20, r24
    e072:	30 f4       	brcc	.+12     	; 0xe080 <LCD_SetLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e074:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e076:	84 2f       	mov	r24, r20
        Xend = dx;
    e078:	40 2f       	mov	r20, r16
        dy = Ystart;
    e07a:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e07c:	62 2f       	mov	r22, r18
        Yend = dy;
    e07e:	21 2f       	mov	r18, r17
    }
	
    dx = Xend - Xstart;
    e080:	04 2f       	mov	r16, r20
    e082:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e084:	12 2f       	mov	r17, r18
    e086:	16 1b       	sub	r17, r22

    x = Xstart;
    e088:	b8 2e       	mov	r11, r24
    y = Ystart;
    e08a:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e08c:	07 ff       	sbrs	r16, 7
    e08e:	04 c0       	rjmp	.+8      	; 0xe098 <LCD_SetLine+0x3c>
        xinc = -1;
    e090:	2f ef       	ldi	r18, 0xFF	; 255
    e092:	92 2e       	mov	r9, r18
        dx = -dx;
    e094:	01 95       	neg	r16
    e096:	02 c0       	rjmp	.+4      	; 0xe09c <LCD_SetLine+0x40>
    } else {
	    xinc = 1;
    e098:	91 e0       	ldi	r25, 0x01	; 1
    e09a:	99 2e       	mov	r9, r25
	}
    if (dy < 0){
    e09c:	17 ff       	sbrs	r17, 7
    e09e:	04 c0       	rjmp	.+8      	; 0xe0a8 <LCD_SetLine+0x4c>
        yinc = -1;
    e0a0:	8f ef       	ldi	r24, 0xFF	; 255
    e0a2:	a8 2e       	mov	r10, r24
        dy = -dy;
    e0a4:	11 95       	neg	r17
    e0a6:	02 c0       	rjmp	.+4      	; 0xe0ac <LCD_SetLine+0x50>
    } else {
        yinc = 1;
    e0a8:	c1 e0       	ldi	r28, 0x01	; 1
    e0aa:	ac 2e       	mov	r10, r28
	}

    /****************************************/

    if (dx > dy){
    e0ac:	10 17       	cp	r17, r16
    e0ae:	d4 f4       	brge	.+52     	; 0xe0e4 <LCD_SetLine+0x88>
        e = dy - dx;
    e0b0:	c1 2f       	mov	r28, r17
    e0b2:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e0b4:	dd 24       	eor	r13, r13
    e0b6:	e0 2e       	mov	r14, r16
    e0b8:	ff 24       	eor	r15, r15
    e0ba:	e7 fc       	sbrc	r14, 7
    e0bc:	f0 94       	com	r15
    e0be:	f7 fc       	sbrc	r15, 7
    e0c0:	2a c0       	rjmp	.+84     	; 0xe116 <LCD_SetLine+0xba>
            {
            /* write out the data */
            LCD_SetPixel(x,y);
    e0c2:	6c 2d       	mov	r22, r12
    e0c4:	8b 2d       	mov	r24, r11
    e0c6:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <LCD_SetPixel>
            if (e >= 0){
    e0ca:	c7 fd       	sbrc	r28, 7
    e0cc:	02 c0       	rjmp	.+4      	; 0xe0d2 <LCD_SetLine+0x76>
                e -= dx;
    e0ce:	c0 1b       	sub	r28, r16
                y += yinc;
    e0d0:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e0d2:	c1 0f       	add	r28, r17
            x += xinc;
    e0d4:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e0d6:	d3 94       	inc	r13
    e0d8:	8d 2d       	mov	r24, r13
    e0da:	99 27       	eor	r25, r25
    e0dc:	e8 16       	cp	r14, r24
    e0de:	f9 06       	cpc	r15, r25
    e0e0:	84 f7       	brge	.-32     	; 0xe0c2 <LCD_SetLine+0x66>
    e0e2:	19 c0       	rjmp	.+50     	; 0xe116 <LCD_SetLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e0e4:	c0 2f       	mov	r28, r16
    e0e6:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e0e8:	dd 24       	eor	r13, r13
    e0ea:	e1 2e       	mov	r14, r17
    e0ec:	ff 24       	eor	r15, r15
    e0ee:	e7 fc       	sbrc	r14, 7
    e0f0:	f0 94       	com	r15
    e0f2:	f7 fc       	sbrc	r15, 7
    e0f4:	10 c0       	rjmp	.+32     	; 0xe116 <LCD_SetLine+0xba>
            LCD_SetPixel(x,y);
    e0f6:	6c 2d       	mov	r22, r12
    e0f8:	8b 2d       	mov	r24, r11
    e0fa:	0e 94 ed 6a 	call	0xd5da	; 0xd5da <LCD_SetPixel>
    
            if (e >= 0){
    e0fe:	c7 fd       	sbrc	r28, 7
    e100:	02 c0       	rjmp	.+4      	; 0xe106 <LCD_SetLine+0xaa>
                e -= dy;
    e102:	c1 1b       	sub	r28, r17
                x += xinc;
    e104:	b9 0c       	add	r11, r9
            }
            e += dx;
    e106:	c0 0f       	add	r28, r16
            y += yinc;
    e108:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e10a:	d3 94       	inc	r13
    e10c:	8d 2d       	mov	r24, r13
    e10e:	99 27       	eor	r25, r25
    e110:	e8 16       	cp	r14, r24
    e112:	f9 06       	cpc	r15, r25
    e114:	84 f7       	brge	.-32     	; 0xe0f6 <LCD_SetLine+0x9a>
    e116:	cf 91       	pop	r28
    e118:	1f 91       	pop	r17
    e11a:	0f 91       	pop	r16
    e11c:	ff 90       	pop	r15
    e11e:	ef 90       	pop	r14
    e120:	df 90       	pop	r13
    e122:	cf 90       	pop	r12
    e124:	bf 90       	pop	r11
    e126:	af 90       	pop	r10
    e128:	9f 90       	pop	r9
    e12a:	08 95       	ret

0000e12c <LCD_ClrLine>:
 * \param  Ystart  Y-coordinate for the start of the line
 * \param  Xend    X-coordinate for the end of the line
 * \param  Yend    X-coordinate for the end of the line
 */
void LCD_ClrLine(uint8_t Xstart, uint8_t Ystart, uint8_t Xend, uint8_t Yend)
{
    e12c:	9f 92       	push	r9
    e12e:	af 92       	push	r10
    e130:	bf 92       	push	r11
    e132:	cf 92       	push	r12
    e134:	df 92       	push	r13
    e136:	ef 92       	push	r14
    e138:	ff 92       	push	r15
    e13a:	0f 93       	push	r16
    e13c:	1f 93       	push	r17
    e13e:	cf 93       	push	r28
    uint8_t x, y, i;
    int8_t e, xinc, yinc;
    int8_t dx, dy;

    if (Xstart > Xend){
    e140:	48 17       	cp	r20, r24
    e142:	30 f4       	brcc	.+12     	; 0xe150 <LCD_ClrLine+0x24>
        dx = Xstart;        /* swap x1,y1  with x2,y2 */
    e144:	08 2f       	mov	r16, r24
        Xstart = Xend;
    e146:	84 2f       	mov	r24, r20
        Xend = dx;
    e148:	40 2f       	mov	r20, r16
        dy = Ystart;
    e14a:	16 2f       	mov	r17, r22
        Ystart = Yend;
    e14c:	62 2f       	mov	r22, r18
        Yend = dy;
    e14e:	21 2f       	mov	r18, r17
    }

    dx = Xend - Xstart;
    e150:	04 2f       	mov	r16, r20
    e152:	08 1b       	sub	r16, r24
    dy = Yend - Ystart;
    e154:	12 2f       	mov	r17, r18
    e156:	16 1b       	sub	r17, r22

    x = Xstart;
    e158:	b8 2e       	mov	r11, r24
    y = Ystart;
    e15a:	c6 2e       	mov	r12, r22

    if (dx < 0){
    e15c:	07 ff       	sbrs	r16, 7
    e15e:	04 c0       	rjmp	.+8      	; 0xe168 <LCD_ClrLine+0x3c>
        xinc = -1;
    e160:	6f ef       	ldi	r22, 0xFF	; 255
    e162:	96 2e       	mov	r9, r22
        dx = -dx;
    e164:	01 95       	neg	r16
    e166:	02 c0       	rjmp	.+4      	; 0xe16c <LCD_ClrLine+0x40>
    } else {
	    xinc = 1;
    e168:	51 e0       	ldi	r21, 0x01	; 1
    e16a:	95 2e       	mov	r9, r21
	}
    if (dy < 0){
    e16c:	17 ff       	sbrs	r17, 7
    e16e:	04 c0       	rjmp	.+8      	; 0xe178 <LCD_ClrLine+0x4c>
        yinc = -1;
    e170:	4f ef       	ldi	r20, 0xFF	; 255
    e172:	a4 2e       	mov	r10, r20
        dy = -dy;
    e174:	11 95       	neg	r17
    e176:	02 c0       	rjmp	.+4      	; 0xe17c <LCD_ClrLine+0x50>
    } else {
        yinc = 1;
    e178:	31 e0       	ldi	r19, 0x01	; 1
    e17a:	a3 2e       	mov	r10, r19
	}

    /****************************************/

    if (dx > dy){
    e17c:	10 17       	cp	r17, r16
    e17e:	d4 f4       	brge	.+52     	; 0xe1b4 <LCD_ClrLine+0x88>
        e = dy - dx;
    e180:	c1 2f       	mov	r28, r17
    e182:	c0 1b       	sub	r28, r16
        for (i = 0; i <= dx; i++)
    e184:	dd 24       	eor	r13, r13
    e186:	e0 2e       	mov	r14, r16
    e188:	ff 24       	eor	r15, r15
    e18a:	e7 fc       	sbrc	r14, 7
    e18c:	f0 94       	com	r15
    e18e:	f7 fc       	sbrc	r15, 7
    e190:	2a c0       	rjmp	.+84     	; 0xe1e6 <LCD_ClrLine+0xba>
            {
            /* write out the data */
            LCD_ClrPixel(x,y);
    e192:	6c 2d       	mov	r22, r12
    e194:	8b 2d       	mov	r24, r11
    e196:	0e 94 33 6b 	call	0xd666	; 0xd666 <LCD_ClrPixel>
            if (e >= 0){
    e19a:	c7 fd       	sbrc	r28, 7
    e19c:	02 c0       	rjmp	.+4      	; 0xe1a2 <LCD_ClrLine+0x76>
                e -= dx;
    e19e:	c0 1b       	sub	r28, r16
                y += yinc;
    e1a0:	ca 0c       	add	r12, r10
            } 
            e += dy;
    e1a2:	c1 0f       	add	r28, r17
            x += xinc;
    e1a4:	b9 0c       	add	r11, r9

    /****************************************/

    if (dx > dy){
        e = dy - dx;
        for (i = 0; i <= dx; i++)
    e1a6:	d3 94       	inc	r13
    e1a8:	8d 2d       	mov	r24, r13
    e1aa:	99 27       	eor	r25, r25
    e1ac:	e8 16       	cp	r14, r24
    e1ae:	f9 06       	cpc	r15, r25
    e1b0:	84 f7       	brge	.-32     	; 0xe192 <LCD_ClrLine+0x66>
    e1b2:	19 c0       	rjmp	.+50     	; 0xe1e6 <LCD_ClrLine+0xba>
            } 
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
    e1b4:	c0 2f       	mov	r28, r16
    e1b6:	c1 1b       	sub	r28, r17
        for (i = 0; i <= dy; i++){
    e1b8:	dd 24       	eor	r13, r13
    e1ba:	e1 2e       	mov	r14, r17
    e1bc:	ff 24       	eor	r15, r15
    e1be:	e7 fc       	sbrc	r14, 7
    e1c0:	f0 94       	com	r15
    e1c2:	f7 fc       	sbrc	r15, 7
    e1c4:	10 c0       	rjmp	.+32     	; 0xe1e6 <LCD_ClrLine+0xba>
            LCD_ClrPixel(x,y);
    e1c6:	6c 2d       	mov	r22, r12
    e1c8:	8b 2d       	mov	r24, r11
    e1ca:	0e 94 33 6b 	call	0xd666	; 0xd666 <LCD_ClrPixel>
    
            if (e >= 0){
    e1ce:	c7 fd       	sbrc	r28, 7
    e1d0:	02 c0       	rjmp	.+4      	; 0xe1d6 <LCD_ClrLine+0xaa>
                e -= dy;
    e1d2:	c1 1b       	sub	r28, r17
                x += xinc;
    e1d4:	b9 0c       	add	r11, r9
            } 
            e += dx;
    e1d6:	c0 0f       	add	r28, r16
            y += yinc;
    e1d8:	ca 0c       	add	r12, r10
            e += dy;
            x += xinc;
        }
    } else {
        e = dx - dy;
        for (i = 0; i <= dy; i++){
    e1da:	d3 94       	inc	r13
    e1dc:	8d 2d       	mov	r24, r13
    e1de:	99 27       	eor	r25, r25
    e1e0:	e8 16       	cp	r14, r24
    e1e2:	f9 06       	cpc	r15, r25
    e1e4:	84 f7       	brge	.-32     	; 0xe1c6 <LCD_ClrLine+0x9a>
    e1e6:	cf 91       	pop	r28
    e1e8:	1f 91       	pop	r17
    e1ea:	0f 91       	pop	r16
    e1ec:	ff 90       	pop	r15
    e1ee:	ef 90       	pop	r14
    e1f0:	df 90       	pop	r13
    e1f2:	cf 90       	pop	r12
    e1f4:	bf 90       	pop	r11
    e1f6:	af 90       	pop	r10
    e1f8:	9f 90       	pop	r9
    e1fa:	08 95       	ret

0000e1fc <JOYSTICK_SetActiveMode>:
 *
 */
static void JOYSTICK_SetActiveMode( void )
{
	// Direction pins to input with pull-up.
	JOYSTICK_DDR_REG &= ~(JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e1fc:	87 b1       	in	r24, 0x07	; 7
    e1fe:	87 70       	andi	r24, 0x07	; 7
    e200:	87 b9       	out	0x07, r24	; 7
	JOYSTICK_PORT_REG |= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e202:	88 b1       	in	r24, 0x08	; 8
    e204:	88 6f       	ori	r24, 0xF8	; 248
    e206:	88 b9       	out	0x08, r24	; 8
	// Common pin to output low.
	JOYSTICK_COM_PORT_REG &= ~(1 << JOYSTICK_COM_PIN);
    e208:	2c 98       	cbi	0x05, 4	; 5
	JOYSTICK_COM_DDR_REG |= (1 << JOYSTICK_COM_PIN);
    e20a:	24 9a       	sbi	0x04, 4	; 4
    e20c:	08 95       	ret

0000e20e <JOYSTICK_DisableWakeupInterrupt>:
 * Disables the external interrupt running on the joystick's common pin
 *
 */
static void JOYSTICK_DisableWakeupInterrupt( void )
{
	uint8_t savedSREG = SREG;
    e20e:	8f b7       	in	r24, 0x3f	; 63
	CAL_disable_interrupt();
    e210:	f8 94       	cli
	
	JOYSTICK_COM_PCMSK_REG &= ~(1 << JOYSTICK_COM_PCINT_BIT); // Disable joystick common line for interrupts.
    e212:	90 91 6b 00 	lds	r25, 0x006B
    e216:	9f 7e       	andi	r25, 0xEF	; 239
    e218:	90 93 6b 00 	sts	0x006B, r25
	PCIFR = (1 << JOYSTICK_COM_PCIF_BIT); // Clear pending flags.
    e21c:	91 e0       	ldi	r25, 0x01	; 1
    e21e:	9b bb       	out	0x1b, r25	; 27
	
	SREG = savedSREG;
    e220:	8f bf       	out	0x3f, r24	; 63
    e222:	08 95       	ret

0000e224 <__vector_9>:
 * When in WakeUp mode and joystick is moved, return to active mode
 *
 */

CAL_ISR( JOYSTICK_COM_INTVECT )
{
    e224:	1f 92       	push	r1
    e226:	0f 92       	push	r0
    e228:	0f b6       	in	r0, 0x3f	; 63
    e22a:	0f 92       	push	r0
    e22c:	11 24       	eor	r1, r1
    e22e:	2f 93       	push	r18
    e230:	3f 93       	push	r19
    e232:	4f 93       	push	r20
    e234:	5f 93       	push	r21
    e236:	6f 93       	push	r22
    e238:	7f 93       	push	r23
    e23a:	8f 93       	push	r24
    e23c:	9f 93       	push	r25
    e23e:	af 93       	push	r26
    e240:	bf 93       	push	r27
    e242:	ef 93       	push	r30
    e244:	ff 93       	push	r31
	POWER_WakeupCallback();
    e246:	0e 94 c2 71 	call	0xe384	; 0xe384 <POWER_WakeupCallback>
	JOYSTICK_SetActiveMode();
    e24a:	0e 94 fe 70 	call	0xe1fc	; 0xe1fc <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e24e:	0e 94 07 71 	call	0xe20e	; 0xe20e <JOYSTICK_DisableWakeupInterrupt>
    e252:	ff 91       	pop	r31
    e254:	ef 91       	pop	r30
    e256:	bf 91       	pop	r27
    e258:	af 91       	pop	r26
    e25a:	9f 91       	pop	r25
    e25c:	8f 91       	pop	r24
    e25e:	7f 91       	pop	r23
    e260:	6f 91       	pop	r22
    e262:	5f 91       	pop	r21
    e264:	4f 91       	pop	r20
    e266:	3f 91       	pop	r19
    e268:	2f 91       	pop	r18
    e26a:	0f 90       	pop	r0
    e26c:	0f be       	out	0x3f, r0	; 63
    e26e:	0f 90       	pop	r0
    e270:	1f 90       	pop	r1
    e272:	18 95       	reti

0000e274 <JOYSTICK_Init>:
 * \param  pressAndHoldDelay  How long do you have to press (in mumber of pollings) before it is counted as a hold
 * \param  doubleClickDelay   Max time between clicks (in number of pollings) to call it a double-click
 *
 */
void JOYSTICK_Init( JOYSTICK_delay_t pressAndHoldDelay, JOYSTICK_delay_t doubleClickDelay )
{
    e274:	0f 93       	push	r16
    e276:	1f 93       	push	r17
    e278:	18 2f       	mov	r17, r24
    e27a:	06 2f       	mov	r16, r22
	// Setup pins and interrupts.
	JOYSTICK_SetActiveMode();
    e27c:	0e 94 fe 70 	call	0xe1fc	; 0xe1fc <JOYSTICK_SetActiveMode>
	JOYSTICK_DisableWakeupInterrupt();
    e280:	0e 94 07 71 	call	0xe20e	; 0xe20e <JOYSTICK_DisableWakeupInterrupt>

	// Delay configuration.
	JOYSTICK_pressAndHoldDelay = pressAndHoldDelay;
    e284:	10 93 39 02 	sts	0x0239, r17
	JOYSTICK_doubleClickDelay = doubleClickDelay;
    e288:	00 93 38 02 	sts	0x0238, r16
    e28c:	1f 91       	pop	r17
    e28e:	0f 91       	pop	r16
    e290:	08 95       	ret

0000e292 <JOYSTICK_GetState>:
/*
 * \return  Current state of the joystick
 */
uint8_t JOYSTICK_GetState( void )
{
	return JOYSTICK_currentState;
    e292:	80 91 3b 02 	lds	r24, 0x023B
}
    e296:	99 27       	eor	r25, r25
    e298:	08 95       	ret

0000e29a <JOYSTICK_PollingHandler>:
 * It must not be called more often than maximum mechanical bounce time,
 * it's also not reentrant
 *
 */
void JOYSTICK_PollingHandler( void )
{
    e29a:	0f 93       	push	r16
    e29c:	1f 93       	push	r17
    e29e:	cf 93       	push	r28
    e2a0:	df 93       	push	r29
    e2a2:	cd b7       	in	r28, 0x3d	; 61
    e2a4:	de b7       	in	r29, 0x3e	; 62
    e2a6:	25 97       	sbiw	r28, 0x05	; 5
    e2a8:	0f b6       	in	r0, 0x3f	; 63
    e2aa:	f8 94       	cli
    e2ac:	de bf       	out	0x3e, r29	; 62
    e2ae:	0f be       	out	0x3f, r0	; 63
    e2b0:	cd bf       	out	0x3d, r28	; 61
	static uint8_t lastSample = 0;
	static JOYSTICK_delay_t pressAndHoldCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
	static JOYSTICK_delay_t doubleClickCountdown[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };

	// Read joystick state and mask out all but the joystick signals. Buttons are active low, but we invert to active high.
	uint8_t newState = ~JOYSTICK_PIN_REG;
    e2b2:	36 b1       	in	r19, 0x06	; 6
    e2b4:	30 95       	com	r19
	newState &= (JOYSTICK_UP | JOYSTICK_DOWN | JOYSTICK_LEFT | JOYSTICK_RIGHT | JOYSTICK_ENTER);
    e2b6:	38 7f       	andi	r19, 0xF8	; 248
	
	// Compare to last sample. If equal, process it. If not, store and wait for next sample.
	if (newState != lastSample) {
    e2b8:	80 91 3c 02 	lds	r24, 0x023C
    e2bc:	38 17       	cp	r19, r24
    e2be:	19 f0       	breq	.+6      	; 0xe2c6 <JOYSTICK_PollingHandler+0x2c>
		// Store sample for debouncing next time polling handler is called.
		lastSample = newState;
    e2c0:	30 93 3c 02 	sts	0x023C, r19
    e2c4:	54 c0       	rjmp	.+168    	; 0xe36e <JOYSTICK_PollingHandler+0xd4>

	} else {
		// Extract information about button state.
		uint8_t changedButtons = JOYSTICK_currentState ^ newState;
    e2c6:	20 91 3b 02 	lds	r18, 0x023B
    e2ca:	23 27       	eor	r18, r19
		uint8_t clickedButtons = changedButtons & newState;
    e2cc:	02 2f       	mov	r16, r18
    e2ce:	03 23       	and	r16, r19
		uint8_t releasedButtons = changedButtons & JOYSTICK_currentState;
    e2d0:	50 91 3b 02 	lds	r21, 0x023B
    e2d4:	52 23       	and	r21, r18
		uint8_t stillPressed = ~changedButtons & newState;
    e2d6:	92 2f       	mov	r25, r18
    e2d8:	90 95       	com	r25
    e2da:	93 23       	and	r25, r19
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
    e2dc:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t doubleClickMask = 0x00;
    e2de:	71 2f       	mov	r23, r17
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
    e2e0:	41 e0       	ldi	r20, 0x01	; 1
    e2e2:	ad e3       	ldi	r26, 0x3D	; 61
    e2e4:	b2 e0       	ldi	r27, 0x02	; 2
    e2e6:	e5 e4       	ldi	r30, 0x45	; 69
    e2e8:	f2 e0       	ldi	r31, 0x02	; 2
    e2ea:	67 e0       	ldi	r22, 0x07	; 7
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
			// Count down double-click delay regardless of events and states.
			if (doubleClickCountdown[i] > 0) {
    e2ec:	80 81       	ld	r24, Z
    e2ee:	88 23       	and	r24, r24
    e2f0:	11 f0       	breq	.+4      	; 0xe2f6 <JOYSTICK_PollingHandler+0x5c>
				--doubleClickCountdown[i];
    e2f2:	81 50       	subi	r24, 0x01	; 1
    e2f4:	80 83       	st	Z, r24
			}
			
			// Handle clicked buttons.
			if (clickedButtons & buttonMask) {
    e2f6:	80 2f       	mov	r24, r16
    e2f8:	84 23       	and	r24, r20
    e2fa:	49 f0       	breq	.+18     	; 0xe30e <JOYSTICK_PollingHandler+0x74>
				// Reset hold delay upon each new button press.
				pressAndHoldCountdown[i] = JOYSTICK_pressAndHoldDelay;
    e2fc:	80 91 39 02 	lds	r24, 0x0239
    e300:	8c 93       	st	X, r24

				// Check for double-click.
				if (doubleClickCountdown[i] > 0) {
    e302:	80 81       	ld	r24, Z
    e304:	81 11       	cpse	r24, r1
					doubleClickMask |= buttonMask;
    e306:	14 2b       	or	r17, r20
				}

				// Reset double-click counter value since was just clicked.
				doubleClickCountdown[i] = JOYSTICK_doubleClickDelay;
    e308:	80 91 38 02 	lds	r24, 0x0238
    e30c:	80 83       	st	Z, r24
			}
			
			// Check for press-and-hold.
			if (stillPressed & buttonMask) {
    e30e:	89 2f       	mov	r24, r25
    e310:	84 23       	and	r24, r20
    e312:	41 f0       	breq	.+16     	; 0xe324 <JOYSTICK_PollingHandler+0x8a>
				// Count down if not reached zero yet. If already reached zero, we won't repeat the hold event.
				if (pressAndHoldCountdown[i] > 0x00) {
    e314:	8c 91       	ld	r24, X
    e316:	88 23       	and	r24, r24
    e318:	29 f0       	breq	.+10     	; 0xe324 <JOYSTICK_PollingHandler+0x8a>
					// Count down and set bit in press-and-hold mask when counter reaches zero.
					--pressAndHoldCountdown[i];
    e31a:	81 50       	subi	r24, 0x01	; 1
    e31c:	8c 93       	st	X, r24
					if (pressAndHoldCountdown[i] == 0x00) {
    e31e:	88 23       	and	r24, r24
    e320:	09 f4       	brne	.+2      	; 0xe324 <JOYSTICK_PollingHandler+0x8a>
						pressAndHoldMask |= buttonMask;
    e322:	74 2b       	or	r23, r20
					}
				}
			}
			
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
    e324:	44 0f       	add	r20, r20
		
		// Check for press-and-hold and double-click and update countdown values.
		uint8_t pressAndHoldMask = 0x00;
		uint8_t doubleClickMask = 0x00;
		uint8_t buttonMask = 0x01; // Used for selecting the one bit we process every iteration below.
		for (uint8_t i = 0; i < 8; ++i) { // Walk through all eight button bits, even if not all bits are joystick buttons.
    e326:	61 50       	subi	r22, 0x01	; 1
    e328:	31 96       	adiw	r30, 0x01	; 1
    e32a:	11 96       	adiw	r26, 0x01	; 1
    e32c:	67 ff       	sbrs	r22, 7
    e32e:	de cf       	rjmp	.-68     	; 0xe2ec <JOYSTICK_PollingHandler+0x52>
			// Prepare bitmask for next button bit.
			buttonMask <<= 1;
		} // end: for (uint8_t i = 0; i < 8; ++i) ...
		
		// Update state variables.
		JOYSTICK_currentHoldState |= pressAndHoldMask;
    e330:	80 91 3a 02 	lds	r24, 0x023A
    e334:	87 2b       	or	r24, r23
    e336:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentHoldState &= ~releasedButtons;
    e33a:	95 2f       	mov	r25, r21
    e33c:	90 95       	com	r25
    e33e:	80 91 3a 02 	lds	r24, 0x023A
    e342:	89 23       	and	r24, r25
    e344:	80 93 3a 02 	sts	0x023A, r24
		JOYSTICK_currentState = newState;
    e348:	30 93 3b 02 	sts	0x023B, r19
		
		// Call event handler if registered and events found.
		if ((JOYSTICK_EventHandler != NULL) && ((changedButtons | pressAndHoldMask | doubleClickMask) != 0x00)) {
    e34c:	e0 91 36 02 	lds	r30, 0x0236
    e350:	f0 91 37 02 	lds	r31, 0x0237
    e354:	30 97       	sbiw	r30, 0x00	; 0
    e356:	59 f0       	breq	.+22     	; 0xe36e <JOYSTICK_PollingHandler+0xd4>
    e358:	27 2b       	or	r18, r23
    e35a:	21 2b       	or	r18, r17
    e35c:	41 f0       	breq	.+16     	; 0xe36e <JOYSTICK_PollingHandler+0xd4>
			// Prepare event struct.
			JOYSTICK_event_t event;
			event.state = newState;
    e35e:	39 83       	std	Y+1, r19	; 0x01
			event.clicked = clickedButtons;
    e360:	0a 83       	std	Y+2, r16	; 0x02
			event.released = releasedButtons;
    e362:	5b 83       	std	Y+3, r21	; 0x03
			event.held = pressAndHoldMask;
    e364:	7c 83       	std	Y+4, r23	; 0x04
			event.dclick = doubleClickMask;
    e366:	1d 83       	std	Y+5, r17	; 0x05
			
			// Call event handler.
			JOYSTICK_EventHandler( &event );
    e368:	ce 01       	movw	r24, r28
    e36a:	01 96       	adiw	r24, 0x01	; 1
    e36c:	09 95       	icall
    e36e:	25 96       	adiw	r28, 0x05	; 5
    e370:	0f b6       	in	r0, 0x3f	; 63
    e372:	f8 94       	cli
    e374:	de bf       	out	0x3e, r29	; 62
    e376:	0f be       	out	0x3f, r0	; 63
    e378:	cd bf       	out	0x3d, r28	; 61
    e37a:	df 91       	pop	r29
    e37c:	cf 91       	pop	r28
    e37e:	1f 91       	pop	r17
    e380:	0f 91       	pop	r16
    e382:	08 95       	ret

0000e384 <POWER_WakeupCallback>:
 * after the interrupt is done, it should call this function. Otherwise the power-driver 
 * will make the controller sleep again after the interrupt is done
 */
void POWER_WakeupCallback( void )
{
	POWER_wakeupRequested = true;
    e384:	81 e0       	ldi	r24, 0x01	; 1
    e386:	80 93 4d 02 	sts	0x024D, r24
    e38a:	08 95       	ret

0000e38c <POWER_EnterIdleSleepMode>:
}

void POWER_EnterIdleSleepMode( void )
{
	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | (1 << SE);
    e38c:	81 e0       	ldi	r24, 0x01	; 1
    e38e:	83 bf       	out	0x33, r24	; 51
	CAL_sleep();
    e390:	88 95       	sleep
	SMCR = (0 << SE);
    e392:	13 be       	out	0x33, r1	; 51
    e394:	08 95       	ret

0000e396 <BACKLIGHT_Init>:
 */
void BACKLIGHT_Init( void )
{
	//if (BACKLIGHT_HasExternalPower()) {
	if (true) {
		PRR1 &= ~(1 << PRTIM3); // Turn on timer 3.
    e396:	80 91 65 00 	lds	r24, 0x0065
    e39a:	87 7f       	andi	r24, 0xF7	; 247
    e39c:	80 93 65 00 	sts	0x0065, r24
	
		// Set PWM pins for RGB backlight to output.
		DDRE |= (1 << PE3) | (1 << PE4) | (1 << PE5);
    e3a0:	8d b1       	in	r24, 0x0d	; 13
    e3a2:	88 63       	ori	r24, 0x38	; 56
    e3a4:	8d b9       	out	0x0d, r24	; 13
		// Start with black, in power up initialization.
		OCR_RED = BACKLIGHT_red;
    e3a6:	80 91 51 02 	lds	r24, 0x0251
    e3aa:	99 27       	eor	r25, r25
    e3ac:	90 93 99 00 	sts	0x0099, r25
    e3b0:	80 93 98 00 	sts	0x0098, r24
		OCR_GREEN = BACKLIGHT_green;
    e3b4:	80 91 50 02 	lds	r24, 0x0250
    e3b8:	99 27       	eor	r25, r25
    e3ba:	90 93 9b 00 	sts	0x009B, r25
    e3be:	80 93 9a 00 	sts	0x009A, r24
		OCR_BLUE = BACKLIGHT_blue;
    e3c2:	80 91 4f 02 	lds	r24, 0x024F
    e3c6:	99 27       	eor	r25, r25
    e3c8:	90 93 9d 00 	sts	0x009D, r25
    e3cc:	80 93 9c 00 	sts	0x009C, r24
		// Clear OC3x on upcounting, Set OC3x on downcounting
		// PWM, Phase correct, 8-bit. Mode 1 in datasheet
		TCCR3A = (1 << COM3A1) | (0 << COM3A0) | 
    e3d0:	89 ea       	ldi	r24, 0xA9	; 169
    e3d2:	80 93 90 00 	sts	0x0090, r24
				 (1 << COM3B1) | (0 << COM3B0) | 
				 (1 << COM3C1) | (0 << COM3C0) | 
				 (0 << WGM31) | (1 << WGM30);
		TCCR3B = (0 << WGM33) | (0 << WGM32) | 
    e3d6:	81 e0       	ldi	r24, 0x01	; 1
    e3d8:	80 93 91 00 	sts	0x0091, r24
    e3dc:	08 95       	ret

0000e3de <BACKLIGHT_SetIntensity>:

/*!
 * Change the intensity of the backlight without changing the color.
 */
void BACKLIGHT_SetIntensity(uint8_t intensity)
{
    e3de:	cf 93       	push	r28
    e3e0:	48 2f       	mov	r20, r24
    uint8_t red, green, blue;
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;
   // Fetch original RGB Levels
    red = BACKLIGHT_red;
    e3e2:	e0 91 51 02 	lds	r30, 0x0251
    green = BACKLIGHT_green;
    e3e6:	f0 91 50 02 	lds	r31, 0x0250
    blue = BACKLIGHT_blue;
    e3ea:	c0 91 4f 02 	lds	r28, 0x024F
    // Adjust original values with intensity 
    mathVar = red * intensity;
    red = mathVar / max;
    e3ee:	2f ef       	ldi	r18, 0xFF	; 255
    e3f0:	30 e0       	ldi	r19, 0x00	; 0
    e3f2:	e8 9f       	mul	r30, r24
    e3f4:	c0 01       	movw	r24, r0
    e3f6:	11 24       	eor	r1, r1
    e3f8:	b9 01       	movw	r22, r18
    e3fa:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e3fe:	e6 2f       	mov	r30, r22
    mathVar = green * intensity;
    green = mathVar / max;
    e400:	f4 9f       	mul	r31, r20
    e402:	c0 01       	movw	r24, r0
    e404:	11 24       	eor	r1, r1
    e406:	b9 01       	movw	r22, r18
    e408:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e40c:	f6 2f       	mov	r31, r22
    mathVar = blue * intensity;
    blue = mathVar / max;
    e40e:	c4 9f       	mul	r28, r20
    e410:	c0 01       	movw	r24, r0
    e412:	11 24       	eor	r1, r1
    e414:	b9 01       	movw	r22, r18
    e416:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    // Set new updated Levels
    BACKLIGHT_intensity = intensity;
    e41a:	40 93 4e 02 	sts	0x024E, r20
    OCR_RED = red;
    e41e:	8e 2f       	mov	r24, r30
    e420:	99 27       	eor	r25, r25
    e422:	90 93 99 00 	sts	0x0099, r25
    e426:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e42a:	8f 2f       	mov	r24, r31
    e42c:	99 27       	eor	r25, r25
    e42e:	90 93 9b 00 	sts	0x009B, r25
    e432:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e436:	86 2f       	mov	r24, r22
    e438:	99 27       	eor	r25, r25
    e43a:	90 93 9d 00 	sts	0x009D, r25
    e43e:	80 93 9c 00 	sts	0x009C, r24
    e442:	cf 91       	pop	r28
    e444:	08 95       	ret

0000e446 <BACKLIGHT_SetRGB>:
 * \param  red  Amount of red color in backlight.
 * \param  green  Amount of green color in backlight.
 * \param  blue  Amount of blue color in backlight.
 */
void BACKLIGHT_SetRGB(uint8_t red, uint8_t green , uint8_t blue)
{
    e446:	38 2f       	mov	r19, r24
    e448:	e6 2f       	mov	r30, r22
    uint8_t max = 0xFF;
    uint16_t mathVar = 0x0000;

    BACKLIGHT_red = red;
    e44a:	80 93 51 02 	sts	0x0251, r24
    BACKLIGHT_green = green;
    e44e:	60 93 50 02 	sts	0x0250, r22
    BACKLIGHT_blue = blue;
    e452:	40 93 4f 02 	sts	0x024F, r20

    // Adjust original values with intensity if intensity is set.
    if (BACKLIGHT_intensity != 0xFF){
    e456:	20 91 4e 02 	lds	r18, 0x024E
    e45a:	2f 3f       	cpi	r18, 0xFF	; 255
    e45c:	c1 f0       	breq	.+48     	; 0xe48e <BACKLIGHT_SetRGB+0x48>
      mathVar = red * BACKLIGHT_intensity;
      red = mathVar / max;
    e45e:	82 9f       	mul	r24, r18
    e460:	c0 01       	movw	r24, r0
    e462:	11 24       	eor	r1, r1
    e464:	6f ef       	ldi	r22, 0xFF	; 255
    e466:	70 e0       	ldi	r23, 0x00	; 0
    e468:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e46c:	36 2f       	mov	r19, r22
      mathVar = green * BACKLIGHT_intensity;
      green = mathVar / max;
    e46e:	e2 9f       	mul	r30, r18
    e470:	c0 01       	movw	r24, r0
    e472:	11 24       	eor	r1, r1
    e474:	6f ef       	ldi	r22, 0xFF	; 255
    e476:	70 e0       	ldi	r23, 0x00	; 0
    e478:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e47c:	e6 2f       	mov	r30, r22
      mathVar = blue * BACKLIGHT_intensity;
      blue = mathVar / max;
    e47e:	42 9f       	mul	r20, r18
    e480:	c0 01       	movw	r24, r0
    e482:	11 24       	eor	r1, r1
    e484:	6f ef       	ldi	r22, 0xFF	; 255
    e486:	70 e0       	ldi	r23, 0x00	; 0
    e488:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e48c:	46 2f       	mov	r20, r22
    }
    OCR_RED = red;
    e48e:	83 2f       	mov	r24, r19
    e490:	99 27       	eor	r25, r25
    e492:	90 93 99 00 	sts	0x0099, r25
    e496:	80 93 98 00 	sts	0x0098, r24
    OCR_GREEN = green;
    e49a:	8e 2f       	mov	r24, r30
    e49c:	99 27       	eor	r25, r25
    e49e:	90 93 9b 00 	sts	0x009B, r25
    e4a2:	80 93 9a 00 	sts	0x009A, r24
    OCR_BLUE = blue;
    e4a6:	84 2f       	mov	r24, r20
    e4a8:	99 27       	eor	r25, r25
    e4aa:	90 93 9d 00 	sts	0x009D, r25
    e4ae:	80 93 9c 00 	sts	0x009C, r24
    e4b2:	08 95       	ret

0000e4b4 <FIFO_InternalPutData>:
 * 
 * \param  handle  Which FIFO to add data to
 * \param  data  Data to add
*/
static void FIFO_InternalPutData( FIFO_handle_t volatile * handle, FIFO_data_t data )
{
    e4b4:	cf 93       	push	r28
    e4b6:	df 93       	push	r29
    e4b8:	dc 01       	movw	r26, r24
	// If full, wait until someone (e.g. interrupt handler) removes data.
	do {} while (handle->itemsFree == 0);
    e4ba:	ed 01       	movw	r28, r26
    e4bc:	88 85       	ldd	r24, Y+8	; 0x08
    e4be:	88 23       	and	r24, r24
    e4c0:	e1 f3       	breq	.-8      	; 0xe4ba <FIFO_InternalPutData+0x6>
	
	// Insert one data item at head and move head pointer.
	*(handle->head) = data;
    e4c2:	ec 81       	ldd	r30, Y+4	; 0x04
    e4c4:	fd 81       	ldd	r31, Y+5	; 0x05
    e4c6:	60 83       	st	Z, r22
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e4c8:	2a 81       	ldd	r18, Y+2	; 0x02
    e4ca:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->head == bufferEnd) {
    e4cc:	8c 81       	ldd	r24, Y+4	; 0x04
    e4ce:	9d 81       	ldd	r25, Y+5	; 0x05
    e4d0:	82 17       	cp	r24, r18
    e4d2:	93 07       	cpc	r25, r19
    e4d4:	31 f4       	brne	.+12     	; 0xe4e2 <FIFO_InternalPutData+0x2e>
		handle->head = handle->bufferStart;
    e4d6:	8d 91       	ld	r24, X+
    e4d8:	9c 91       	ld	r25, X
    e4da:	11 97       	sbiw	r26, 0x01	; 1
    e4dc:	9d 83       	std	Y+5, r25	; 0x05
    e4de:	8c 83       	std	Y+4, r24	; 0x04
    e4e0:	06 c0       	rjmp	.+12     	; 0xe4ee <FIFO_InternalPutData+0x3a>
	} else {
		++(handle->head);
    e4e2:	fd 01       	movw	r30, r26
    e4e4:	84 81       	ldd	r24, Z+4	; 0x04
    e4e6:	95 81       	ldd	r25, Z+5	; 0x05
    e4e8:	01 96       	adiw	r24, 0x01	; 1
    e4ea:	95 83       	std	Z+5, r25	; 0x05
    e4ec:	84 83       	std	Z+4, r24	; 0x04
	}

	bool shouldCallConsumer = false; // Will be set to true if FIFO was empty when Put was called.
    e4ee:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e4f0:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e4f2:	f8 94       	cli
	if (handle->itemsUsed == 0) { shouldCallConsumer = true; }
    e4f4:	ed 01       	movw	r28, r26
    e4f6:	89 85       	ldd	r24, Y+9	; 0x09
    e4f8:	88 23       	and	r24, r24
    e4fa:	09 f4       	brne	.+2      	; 0xe4fe <FIFO_InternalPutData+0x4a>
    e4fc:	21 e0       	ldi	r18, 0x01	; 1
	--(handle->itemsFree);
    e4fe:	fd 01       	movw	r30, r26
    e500:	80 85       	ldd	r24, Z+8	; 0x08
    e502:	81 50       	subi	r24, 0x01	; 1
    e504:	80 87       	std	Z+8, r24	; 0x08
	++(handle->itemsUsed);
    e506:	81 85       	ldd	r24, Z+9	; 0x09
    e508:	8f 5f       	subi	r24, 0xFF	; 255
    e50a:	81 87       	std	Z+9, r24	; 0x09
	SREG = storedSREG;
    e50c:	9f bf       	out	0x3f, r25	; 63
	
	// Notify registered consumer.
	if (shouldCallConsumer == true) {
    e50e:	22 23       	and	r18, r18
    e510:	49 f0       	breq	.+18     	; 0xe524 <FIFO_InternalPutData+0x70>
		if (handle->ConsumerCallback != NULL) {
    e512:	84 85       	ldd	r24, Z+12	; 0x0c
    e514:	95 85       	ldd	r25, Z+13	; 0x0d
    e516:	89 2b       	or	r24, r25
    e518:	29 f0       	breq	.+10     	; 0xe524 <FIFO_InternalPutData+0x70>
			handle->ConsumerCallback( handle );
    e51a:	04 84       	ldd	r0, Z+12	; 0x0c
    e51c:	f5 85       	ldd	r31, Z+13	; 0x0d
    e51e:	e0 2d       	mov	r30, r0
    e520:	cd 01       	movw	r24, r26
    e522:	09 95       	icall
    e524:	df 91       	pop	r29
    e526:	cf 91       	pop	r28
    e528:	08 95       	ret

0000e52a <FIFO_InternalGetData>:
 * \param  handle  From which FIFO to get data
 *
 * \retval  Data  got from the handle
*/
static FIFO_data_t FIFO_InternalGetData( FIFO_handle_t volatile * handle )
{
    e52a:	cf 93       	push	r28
    e52c:	df 93       	push	r29
    e52e:	ec 01       	movw	r28, r24
	// If empty, wait until someone (e.g. interrupt handler) insert data.
	do {} while (handle->itemsUsed == 0);
    e530:	89 85       	ldd	r24, Y+9	; 0x09
    e532:	88 23       	and	r24, r24
    e534:	e9 f3       	breq	.-6      	; 0xe530 <FIFO_InternalGetData+0x6>
	
	// Move tail pointer.
	FIFO_data_t * bufferEnd = handle->bufferEnd; // Need to get this first, since struct is volatile.
    e536:	2a 81       	ldd	r18, Y+2	; 0x02
    e538:	3b 81       	ldd	r19, Y+3	; 0x03
	if (handle->tail == bufferEnd) {
    e53a:	8e 81       	ldd	r24, Y+6	; 0x06
    e53c:	9f 81       	ldd	r25, Y+7	; 0x07
    e53e:	82 17       	cp	r24, r18
    e540:	93 07       	cpc	r25, r19
    e542:	19 f4       	brne	.+6      	; 0xe54a <FIFO_InternalGetData+0x20>
		handle->tail = handle->bufferStart;
    e544:	88 81       	ld	r24, Y
    e546:	99 81       	ldd	r25, Y+1	; 0x01
    e548:	03 c0       	rjmp	.+6      	; 0xe550 <FIFO_InternalGetData+0x26>
	} else {
		++(handle->tail);
    e54a:	8e 81       	ldd	r24, Y+6	; 0x06
    e54c:	9f 81       	ldd	r25, Y+7	; 0x07
    e54e:	01 96       	adiw	r24, 0x01	; 1
    e550:	9f 83       	std	Y+7, r25	; 0x07
    e552:	8e 83       	std	Y+6, r24	; 0x06
	}
	
	bool shouldCallProducer = false; // Will be set to true if FIFO was full when Get was called.
    e554:	20 e0       	ldi	r18, 0x00	; 0

	// Critical section: Update data counters.
	uint8_t storedSREG = SREG;
    e556:	9f b7       	in	r25, 0x3f	; 63
	CAL_disable_interrupt();
    e558:	f8 94       	cli
	if (handle->itemsFree == 0) { shouldCallProducer = true; }
    e55a:	88 85       	ldd	r24, Y+8	; 0x08
    e55c:	88 23       	and	r24, r24
    e55e:	09 f4       	brne	.+2      	; 0xe562 <FIFO_InternalGetData+0x38>
    e560:	21 e0       	ldi	r18, 0x01	; 1
	++(handle->itemsFree);
    e562:	88 85       	ldd	r24, Y+8	; 0x08
    e564:	8f 5f       	subi	r24, 0xFF	; 255
    e566:	88 87       	std	Y+8, r24	; 0x08
	--(handle->itemsUsed);
    e568:	89 85       	ldd	r24, Y+9	; 0x09
    e56a:	81 50       	subi	r24, 0x01	; 1
    e56c:	89 87       	std	Y+9, r24	; 0x09
	SREG = storedSREG;
    e56e:	9f bf       	out	0x3f, r25	; 63

	// Notify registered producer.
	if (shouldCallProducer == true) {
    e570:	22 23       	and	r18, r18
    e572:	41 f0       	breq	.+16     	; 0xe584 <FIFO_InternalGetData+0x5a>
		if (handle->ProducerCallback != NULL) {
    e574:	8a 85       	ldd	r24, Y+10	; 0x0a
    e576:	9b 85       	ldd	r25, Y+11	; 0x0b
    e578:	89 2b       	or	r24, r25
    e57a:	21 f0       	breq	.+8      	; 0xe584 <FIFO_InternalGetData+0x5a>
			handle->ProducerCallback( handle );
    e57c:	ea 85       	ldd	r30, Y+10	; 0x0a
    e57e:	fb 85       	ldd	r31, Y+11	; 0x0b
    e580:	ce 01       	movw	r24, r28
    e582:	09 95       	icall
		}
	}

	// Return data item at current tail position.
	return *(handle->tail);
    e584:	ee 81       	ldd	r30, Y+6	; 0x06
    e586:	ff 81       	ldd	r31, Y+7	; 0x07
    e588:	80 81       	ld	r24, Z
}
    e58a:	99 27       	eor	r25, r25
    e58c:	df 91       	pop	r29
    e58e:	cf 91       	pop	r28
    e590:	08 95       	ret

0000e592 <FIFO_Init>:
 *  \param  handle  Pointer to FIFO state structure.
 *  \param  buffer  Pointer to memory buffer to be used by the FIFO.
 *  \param  size    Size of the memory buffer in bytes (actually number of FIFO_data_t's).
 */
void FIFO_Init( FIFO_handle_t * handle, FIFO_data_t * buffer, FIFO_size_t size )
{
    e592:	fc 01       	movw	r30, r24
	// Initialize to an empty state, ready for data.
	handle->bufferStart = buffer;
    e594:	71 83       	std	Z+1, r23	; 0x01
    e596:	60 83       	st	Z, r22
	handle->bufferEnd = buffer + size - 1;
    e598:	cb 01       	movw	r24, r22
    e59a:	84 0f       	add	r24, r20
    e59c:	91 1d       	adc	r25, r1
    e59e:	01 97       	sbiw	r24, 0x01	; 1
    e5a0:	93 83       	std	Z+3, r25	; 0x03
    e5a2:	82 83       	std	Z+2, r24	; 0x02
	
	handle->head = handle->bufferStart;
    e5a4:	75 83       	std	Z+5, r23	; 0x05
    e5a6:	64 83       	std	Z+4, r22	; 0x04
	handle->tail = handle->bufferEnd;
    e5a8:	97 83       	std	Z+7, r25	; 0x07
    e5aa:	86 83       	std	Z+6, r24	; 0x06
	
	handle->itemsFree = size;
    e5ac:	40 87       	std	Z+8, r20	; 0x08
	handle->itemsUsed = 0;
    e5ae:	11 86       	std	Z+9, r1	; 0x09
	
	handle->ProducerCallback = NULL;
    e5b0:	13 86       	std	Z+11, r1	; 0x0b
    e5b2:	12 86       	std	Z+10, r1	; 0x0a
	handle->ConsumerCallback = NULL;
    e5b4:	15 86       	std	Z+13, r1	; 0x0d
    e5b6:	14 86       	std	Z+12, r1	; 0x0c
    e5b8:	08 95       	ret

0000e5ba <FIFO_GetUint8>:
 */
uint8_t FIFO_GetUint8( FIFO_handle_t * handle )
{
	// Get data item and cast to return type.
	uint8_t data;
	data =  ((uint8_t) FIFO_InternalGetData( handle )) << (8*0);
    e5ba:	0e 94 95 72 	call	0xe52a	; 0xe52a <FIFO_InternalGetData>
	
	return data;
}
    e5be:	99 27       	eor	r25, r25
    e5c0:	08 95       	ret

0000e5c2 <FIFO_Flush>:

/*
 * \param  handler  Which FIFO to flush
 */
void FIFO_Flush( FIFO_handle_t * handle )
{
    e5c2:	0f 93       	push	r16
    e5c4:	1f 93       	push	r17
    e5c6:	cf 93       	push	r28
    e5c8:	df 93       	push	r29
    e5ca:	cd b7       	in	r28, 0x3d	; 61
    e5cc:	de b7       	in	r29, 0x3e	; 62
    e5ce:	21 97       	sbiw	r28, 0x01	; 1
    e5d0:	0f b6       	in	r0, 0x3f	; 63
    e5d2:	f8 94       	cli
    e5d4:	de bf       	out	0x3e, r29	; 62
    e5d6:	0f be       	out	0x3f, r0	; 63
    e5d8:	cd bf       	out	0x3d, r28	; 61
    e5da:	8c 01       	movw	r16, r24
	// Read and discard all remaining contents.
	while (FIFO_IsEmpty( handle ) == false) {
		uint8_t volatile dummy = FIFO_GetUint8( handle );
    e5dc:	fc 01       	movw	r30, r24
    e5de:	81 85       	ldd	r24, Z+9	; 0x09
    e5e0:	88 23       	and	r24, r24
    e5e2:	41 f0       	breq	.+16     	; 0xe5f4 <FIFO_Flush+0x32>
    e5e4:	c8 01       	movw	r24, r16
    e5e6:	0e 94 dd 72 	call	0xe5ba	; 0xe5ba <FIFO_GetUint8>
    e5ea:	89 83       	std	Y+1, r24	; 0x01
    e5ec:	f8 01       	movw	r30, r16
    e5ee:	81 85       	ldd	r24, Z+9	; 0x09
    e5f0:	88 23       	and	r24, r24
    e5f2:	c1 f7       	brne	.-16     	; 0xe5e4 <FIFO_Flush+0x22>
    e5f4:	21 96       	adiw	r28, 0x01	; 1
    e5f6:	0f b6       	in	r0, 0x3f	; 63
    e5f8:	f8 94       	cli
    e5fa:	de bf       	out	0x3e, r29	; 62
    e5fc:	0f be       	out	0x3f, r0	; 63
    e5fe:	cd bf       	out	0x3d, r28	; 61
    e600:	df 91       	pop	r29
    e602:	cf 91       	pop	r28
    e604:	1f 91       	pop	r17
    e606:	0f 91       	pop	r16
    e608:	08 95       	ret

0000e60a <FIFO_PutUint16>:
/*
 * \param  handle  Pointer to FIFO to put data in
 * \param  data    16-bit unsigned integer to put into FIFO
 */
void FIFO_PutUint16( FIFO_handle_t * handle, uint16_t data )
{
    e60a:	ef 92       	push	r14
    e60c:	ff 92       	push	r15
    e60e:	0f 93       	push	r16
    e610:	1f 93       	push	r17
    e612:	7c 01       	movw	r14, r24
    e614:	8b 01       	movw	r16, r22
	// Split data and put bytes into FIFO.
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (0*8)) & 0xff) );
    e616:	0e 94 5a 72 	call	0xe4b4	; 0xe4b4 <FIFO_InternalPutData>
	FIFO_InternalPutData( handle, (FIFO_data_t) ((data >> (1*8)) & 0xff) );
    e61a:	81 2f       	mov	r24, r17
    e61c:	99 27       	eor	r25, r25
    e61e:	68 2f       	mov	r22, r24
    e620:	c7 01       	movw	r24, r14
    e622:	0e 94 5a 72 	call	0xe4b4	; 0xe4b4 <FIFO_InternalPutData>
    e626:	1f 91       	pop	r17
    e628:	0f 91       	pop	r16
    e62a:	ff 90       	pop	r15
    e62c:	ef 90       	pop	r14
    e62e:	08 95       	ret

0000e630 <FIFO_GetUint16>:
 * \param  handle  Pointer to FIFO to get data from
 *
 * \return  Unsigned  16-bit integer containing data from the FIFO
 */
uint16_t FIFO_GetUint16( FIFO_handle_t * handle )
{
    e630:	ef 92       	push	r14
    e632:	ff 92       	push	r15
    e634:	0f 93       	push	r16
    e636:	1f 93       	push	r17
    e638:	8c 01       	movw	r16, r24
	// Get bytes and combine into return data type.
	uint16_t data;
	data =  ((uint16_t) FIFO_InternalGetData( handle )) << (8*0);
    e63a:	0e 94 95 72 	call	0xe52a	; 0xe52a <FIFO_InternalGetData>
    e63e:	e8 2e       	mov	r14, r24
    e640:	ff 24       	eor	r15, r15
	data |= ((uint16_t) FIFO_InternalGetData( handle )) << (8*1);
    e642:	c8 01       	movw	r24, r16
    e644:	0e 94 95 72 	call	0xe52a	; 0xe52a <FIFO_InternalGetData>
    e648:	99 27       	eor	r25, r25
    e64a:	98 2f       	mov	r25, r24
    e64c:	88 27       	eor	r24, r24
	
	return data;
}
    e64e:	8e 29       	or	r24, r14
    e650:	9f 29       	or	r25, r15
    e652:	1f 91       	pop	r17
    e654:	0f 91       	pop	r16
    e656:	ff 90       	pop	r15
    e658:	ef 90       	pop	r14
    e65a:	08 95       	ret

0000e65c <MEMBLOCK_InitManager>:
 * \param  bagCount  Number of bags
 * \param  workspace  Pointer to an allocated MEMBLOCK_bag_t struct
 */
void MEMBLOCK_InitManager( MEMBLOCK_size_t bagCount, MEMBLOCK_bag_t * workspace )
{
	MEMBLOCK_manager.bagCount = bagCount;
    e65c:	90 93 53 02 	sts	0x0253, r25
    e660:	80 93 52 02 	sts	0x0252, r24
	MEMBLOCK_manager.bags = workspace;
    e664:	70 93 55 02 	sts	0x0255, r23
    e668:	60 93 54 02 	sts	0x0254, r22
    e66c:	08 95       	ret

0000e66e <MEMBLOCK_InitBag>:
 * \param  blockCount  And how many blocks?
 * \param  workspace  Pointer to an already allocated memory space where the bag will "allocate" it's data.
 *
 */
void MEMBLOCK_InitBag( MEMBLOCK_size_t bagIndex, MEMBLOCK_size_t blockSize, MEMBLOCK_size_t blockCount, uint8_t * workspace )
{
    e66e:	d9 01       	movw	r26, r18
	MEMBLOCK_bag_t * const bag = MEMBLOCK_manager.bags + bagIndex;
    e670:	28 e1       	ldi	r18, 0x18	; 24
    e672:	30 e0       	ldi	r19, 0x00	; 0
    e674:	82 9f       	mul	r24, r18
    e676:	f0 01       	movw	r30, r0
    e678:	83 9f       	mul	r24, r19
    e67a:	f0 0d       	add	r31, r0
    e67c:	92 9f       	mul	r25, r18
    e67e:	f0 0d       	add	r31, r0
    e680:	11 24       	eor	r1, r1
    e682:	cf 01       	movw	r24, r30
    e684:	e0 91 54 02 	lds	r30, 0x0254
    e688:	f0 91 55 02 	lds	r31, 0x0255
    e68c:	e8 0f       	add	r30, r24
    e68e:	f9 1f       	adc	r31, r25
	
	// Init state variables.
	bag->blockSize = blockSize;
    e690:	71 83       	std	Z+1, r23	; 0x01
    e692:	60 83       	st	Z, r22
	bag->blockCount = blockCount;
    e694:	53 83       	std	Z+3, r21	; 0x03
    e696:	42 83       	std	Z+2, r20	; 0x02
	bag->freeBlockCount = blockCount;
    e698:	55 83       	std	Z+5, r21	; 0x05
    e69a:	44 83       	std	Z+4, r20	; 0x04
	bag->peakUsage = 0;
    e69c:	13 86       	std	Z+11, r1	; 0x0b
    e69e:	12 86       	std	Z+10, r1	; 0x0a
	bag->minBlockSize = blockSize;
    e6a0:	75 87       	std	Z+13, r23	; 0x0d
    e6a2:	64 87       	std	Z+12, r22	; 0x0c
	bag->maxBlockSize = 0;
    e6a4:	17 86       	std	Z+15, r1	; 0x0f
    e6a6:	16 86       	std	Z+14, r1	; 0x0e
	bag->allocationCount = 0;
    e6a8:	10 8a       	std	Z+16, r1	; 0x10
    e6aa:	11 8a       	std	Z+17, r1	; 0x11
    e6ac:	12 8a       	std	Z+18, r1	; 0x12
    e6ae:	13 8a       	std	Z+19, r1	; 0x13
	bag->allocationUtilization = 0;
    e6b0:	14 8a       	std	Z+20, r1	; 0x14
    e6b2:	15 8a       	std	Z+21, r1	; 0x15
    e6b4:	16 8a       	std	Z+22, r1	; 0x16
    e6b6:	17 8a       	std	Z+23, r1	; 0x17
	
	// Init pointers, have freeBlockMap located immediately after the blocks themselves.
	bag->bufferStart = workspace;
    e6b8:	b7 83       	std	Z+7, r27	; 0x07
    e6ba:	a6 83       	std	Z+6, r26	; 0x06
	bag->freeBlockMap = workspace + (blockSize * blockCount);
    e6bc:	64 9f       	mul	r22, r20
    e6be:	c0 01       	movw	r24, r0
    e6c0:	65 9f       	mul	r22, r21
    e6c2:	90 0d       	add	r25, r0
    e6c4:	74 9f       	mul	r23, r20
    e6c6:	90 0d       	add	r25, r0
    e6c8:	11 24       	eor	r1, r1
    e6ca:	8a 0f       	add	r24, r26
    e6cc:	9b 1f       	adc	r25, r27
    e6ce:	91 87       	std	Z+9, r25	; 0x09
    e6d0:	80 87       	std	Z+8, r24	; 0x08
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
    e6d2:	fc 01       	movw	r30, r24
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
    e6d4:	49 5f       	subi	r20, 0xF9	; 249
    e6d6:	5f 4f       	sbci	r21, 0xFF	; 255
    e6d8:	83 e0       	ldi	r24, 0x03	; 3
    e6da:	56 95       	lsr	r21
    e6dc:	47 95       	ror	r20
    e6de:	8a 95       	dec	r24
    e6e0:	e1 f7       	brne	.-8      	; 0xe6da <MEMBLOCK_InitBag+0x6c>
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
		++mapPtr;
		--mapBytesLeft;
    e6e2:	41 15       	cp	r20, r1
    e6e4:	51 05       	cpc	r21, r1
    e6e6:	29 f0       	breq	.+10     	; 0xe6f2 <MEMBLOCK_InitBag+0x84>
    e6e8:	8f ef       	ldi	r24, 0xFF	; 255
	
	// Set all map bits to "1".
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t mapBytesLeft = ((blockCount + 7) / 8);
	while (mapBytesLeft > 0) {
		*mapPtr = 0xff;
    e6ea:	81 93       	st	Z+, r24
		++mapPtr;
		--mapBytesLeft;
    e6ec:	41 50       	subi	r20, 0x01	; 1
    e6ee:	50 40       	sbci	r21, 0x00	; 0
    e6f0:	e1 f7       	brne	.-8      	; 0xe6ea <MEMBLOCK_InitBag+0x7c>
    e6f2:	08 95       	ret

0000e6f4 <MEMBLOCK_Allocate>:
 * \param  size  In bytes how much memory we want to allocate
 *
 * \return  Pointer to allocated memory
 */
void * MEMBLOCK_Allocate( MEMBLOCK_size_t size )
{
    e6f4:	af 92       	push	r10
    e6f6:	bf 92       	push	r11
    e6f8:	cf 92       	push	r12
    e6fa:	df 92       	push	r13
    e6fc:	ff 92       	push	r15
    e6fe:	0f 93       	push	r16
    e700:	1f 93       	push	r17
    e702:	cf 93       	push	r28
    e704:	df 93       	push	r29
    e706:	bc 01       	movw	r22, r24
	// Work undisturbed.
	uint8_t savedSREG = SREG;
    e708:	ff b6       	in	r15, 0x3f	; 63
	CAL_disable_interrupt();
    e70a:	f8 94       	cli
	
	// Iterate through bags and find first bag with suitable blocks.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e70c:	c0 91 54 02 	lds	r28, 0x0254
    e710:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e714:	20 91 52 02 	lds	r18, 0x0252
    e718:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    e71c:	40 e0       	ldi	r20, 0x00	; 0
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e71e:	21 15       	cp	r18, r1
    e720:	31 05       	cpc	r19, r1
    e722:	09 f4       	brne	.+2      	; 0xe726 <MEMBLOCK_Allocate+0x32>
    e724:	81 c0       	rjmp	.+258    	; 0xe828 <MEMBLOCK_Allocate+0x134>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Have we found a bag with large enough blocks and with free blocks?
		if ((bag->blockSize >= size) && (bag->freeBlockCount > 0)) {
    e726:	88 81       	ld	r24, Y
    e728:	99 81       	ldd	r25, Y+1	; 0x01
    e72a:	86 17       	cp	r24, r22
    e72c:	97 07       	cpc	r25, r23
    e72e:	30 f0       	brcs	.+12     	; 0xe73c <MEMBLOCK_Allocate+0x48>
    e730:	8c 81       	ldd	r24, Y+4	; 0x04
    e732:	9d 81       	ldd	r25, Y+5	; 0x05
    e734:	89 2b       	or	r24, r25
    e736:	11 f0       	breq	.+4      	; 0xe73c <MEMBLOCK_Allocate+0x48>
			found = true;
    e738:	41 e0       	ldi	r20, 0x01	; 1
    e73a:	03 c0       	rjmp	.+6      	; 0xe742 <MEMBLOCK_Allocate+0x4e>
		} else {
			++bag;
    e73c:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e73e:	21 50       	subi	r18, 0x01	; 1
    e740:	30 40       	sbci	r19, 0x00	; 0
    e742:	21 15       	cp	r18, r1
    e744:	31 05       	cpc	r19, r1
    e746:	11 f0       	breq	.+4      	; 0xe74c <MEMBLOCK_Allocate+0x58>
    e748:	44 23       	and	r20, r20
    e74a:	69 f3       	breq	.-38     	; 0xe726 <MEMBLOCK_Allocate+0x32>
		}
	}
	
	// If found, allocate it.
	void * ptr;
	if (found) {
    e74c:	44 23       	and	r20, r20
    e74e:	09 f4       	brne	.+2      	; 0xe752 <MEMBLOCK_Allocate+0x5e>
    e750:	6b c0       	rjmp	.+214    	; 0xe828 <MEMBLOCK_Allocate+0x134>
CAL_ALWAYS_INLINE( static inline void * MEMBLOCK_ReserveFirstFreeBlock( MEMBLOCK_bag_t * bag ) )
{
	// NOTE: This function assumes that there IS a free block in the bag.
	
	// Iterate through map and find first "1" bit.
	uint8_t * mapPtr = bag->freeBlockMap;
    e752:	e8 85       	ldd	r30, Y+8	; 0x08
    e754:	f9 85       	ldd	r31, Y+9	; 0x09
	MEMBLOCK_size_t blockIndex = 0;
    e756:	20 e0       	ldi	r18, 0x00	; 0
    e758:	30 e0       	ldi	r19, 0x00	; 0
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
		blockIndex += 8;
    e75a:	80 81       	ld	r24, Z
    e75c:	88 23       	and	r24, r24
    e75e:	21 f4       	brne	.+8      	; 0xe768 <MEMBLOCK_Allocate+0x74>
	uint8_t * mapPtr = bag->freeBlockMap;
	MEMBLOCK_size_t blockIndex = 0;
	
	// Find first byte with at least one "1" bit.
	while (*mapPtr == 0x00) {
		++mapPtr;
    e760:	31 96       	adiw	r30, 0x01	; 1
		blockIndex += 8;
    e762:	28 5f       	subi	r18, 0xF8	; 248
    e764:	3f 4f       	sbci	r19, 0xFF	; 255
    e766:	f9 cf       	rjmp	.-14     	; 0xe75a <MEMBLOCK_Allocate+0x66>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
    e768:	40 e8       	ldi	r20, 0x80	; 128
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
		++blockIndex;
    e76a:	90 81       	ld	r25, Z
    e76c:	97 fd       	sbrc	r25, 7
    e76e:	06 c0       	rjmp	.+12     	; 0xe77c <MEMBLOCK_Allocate+0x88>
	}
	
	// Find first "1" bit in byte, start with MSB.
	uint8_t bitmask = 0x80; // MSB=1.
	while ((*mapPtr & bitmask) == 0x00) {
		bitmask >>= 1;
    e770:	46 95       	lsr	r20
		++blockIndex;
    e772:	2f 5f       	subi	r18, 0xFF	; 255
    e774:	3f 4f       	sbci	r19, 0xFF	; 255
    e776:	89 2f       	mov	r24, r25
    e778:	84 23       	and	r24, r20
    e77a:	d1 f3       	breq	.-12     	; 0xe770 <MEMBLOCK_Allocate+0x7c>
	}
	
	// Mark block as not free anymore.
	*mapPtr &= ~bitmask;
    e77c:	40 95       	com	r20
    e77e:	94 23       	and	r25, r20
    e780:	90 83       	st	Z, r25
	--(bag->freeBlockCount);
    e782:	8c 81       	ldd	r24, Y+4	; 0x04
    e784:	9d 81       	ldd	r25, Y+5	; 0x05
    e786:	01 97       	sbiw	r24, 0x01	; 1
    e788:	9d 83       	std	Y+5, r25	; 0x05
    e78a:	8c 83       	std	Y+4, r24	; 0x04

	// Return pointer to block.
	void * ptr = ((uint8_t *) bag->bufferStart) + (blockIndex * bag->blockSize);
    e78c:	48 81       	ld	r20, Y
    e78e:	59 81       	ldd	r21, Y+1	; 0x01
    e790:	24 9f       	mul	r18, r20
    e792:	50 01       	movw	r10, r0
    e794:	25 9f       	mul	r18, r21
    e796:	b0 0c       	add	r11, r0
    e798:	34 9f       	mul	r19, r20
    e79a:	b0 0c       	add	r11, r0
    e79c:	11 24       	eor	r1, r1
    e79e:	0e 81       	ldd	r16, Y+6	; 0x06
    e7a0:	1f 81       	ldd	r17, Y+7	; 0x07
    e7a2:	0a 0d       	add	r16, r10
    e7a4:	1b 1d       	adc	r17, r11
	if (found) {
		// Mark and update free count.
		ptr = MEMBLOCK_ReserveFirstFreeBlock( bag );
		
		// Update peak usage if required.
		MEMBLOCK_size_t usedBlocks = bag->blockCount - bag->freeBlockCount;
    e7a6:	2a 81       	ldd	r18, Y+2	; 0x02
    e7a8:	3b 81       	ldd	r19, Y+3	; 0x03
    e7aa:	28 1b       	sub	r18, r24
    e7ac:	39 0b       	sbc	r19, r25
		if (usedBlocks > bag->peakUsage) {
    e7ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    e7b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    e7b2:	82 17       	cp	r24, r18
    e7b4:	93 07       	cpc	r25, r19
    e7b6:	10 f4       	brcc	.+4      	; 0xe7bc <MEMBLOCK_Allocate+0xc8>
			bag->peakUsage = usedBlocks;
    e7b8:	3b 87       	std	Y+11, r19	; 0x0b
    e7ba:	2a 87       	std	Y+10, r18	; 0x0a
		}
		
		// Update allocation utilization tracking.
		if (size > bag->maxBlockSize) { bag->maxBlockSize = size; }
    e7bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    e7be:	9f 85       	ldd	r25, Y+15	; 0x0f
    e7c0:	86 17       	cp	r24, r22
    e7c2:	97 07       	cpc	r25, r23
    e7c4:	10 f4       	brcc	.+4      	; 0xe7ca <MEMBLOCK_Allocate+0xd6>
    e7c6:	7f 87       	std	Y+15, r23	; 0x0f
    e7c8:	6e 87       	std	Y+14, r22	; 0x0e
		if (size < bag->minBlockSize) { bag->minBlockSize = size; }
    e7ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    e7cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    e7ce:	68 17       	cp	r22, r24
    e7d0:	79 07       	cpc	r23, r25
    e7d2:	10 f4       	brcc	.+4      	; 0xe7d8 <MEMBLOCK_Allocate+0xe4>
    e7d4:	7d 87       	std	Y+13, r23	; 0x0d
    e7d6:	6c 87       	std	Y+12, r22	; 0x0c
		++(bag->allocationCount);
    e7d8:	88 89       	ldd	r24, Y+16	; 0x10
    e7da:	99 89       	ldd	r25, Y+17	; 0x11
    e7dc:	aa 89       	ldd	r26, Y+18	; 0x12
    e7de:	bb 89       	ldd	r27, Y+19	; 0x13
    e7e0:	01 96       	adiw	r24, 0x01	; 1
    e7e2:	a1 1d       	adc	r26, r1
    e7e4:	b1 1d       	adc	r27, r1
    e7e6:	88 8b       	std	Y+16, r24	; 0x10
    e7e8:	99 8b       	std	Y+17, r25	; 0x11
    e7ea:	aa 8b       	std	Y+18, r26	; 0x12
    e7ec:	bb 8b       	std	Y+19, r27	; 0x13
		uint32_t utilization = (uint32_t) size * 256 / bag->blockSize;
    e7ee:	cb 01       	movw	r24, r22
    e7f0:	aa 27       	eor	r26, r26
    e7f2:	bb 27       	eor	r27, r27
    e7f4:	ba 2f       	mov	r27, r26
    e7f6:	a9 2f       	mov	r26, r25
    e7f8:	98 2f       	mov	r25, r24
    e7fa:	88 27       	eor	r24, r24
    e7fc:	5a 01       	movw	r10, r20
    e7fe:	cc 24       	eor	r12, r12
    e800:	dd 24       	eor	r13, r13
    e802:	a6 01       	movw	r20, r12
    e804:	95 01       	movw	r18, r10
    e806:	bc 01       	movw	r22, r24
    e808:	cd 01       	movw	r24, r26
    e80a:	0e 94 bf 7a 	call	0xf57e	; 0xf57e <__udivmodsi4>
		bag->allocationUtilization += utilization;
    e80e:	8c 89       	ldd	r24, Y+20	; 0x14
    e810:	9d 89       	ldd	r25, Y+21	; 0x15
    e812:	ae 89       	ldd	r26, Y+22	; 0x16
    e814:	bf 89       	ldd	r27, Y+23	; 0x17
    e816:	82 0f       	add	r24, r18
    e818:	93 1f       	adc	r25, r19
    e81a:	a4 1f       	adc	r26, r20
    e81c:	b5 1f       	adc	r27, r21
    e81e:	8c 8b       	std	Y+20, r24	; 0x14
    e820:	9d 8b       	std	Y+21, r25	; 0x15
    e822:	ae 8b       	std	Y+22, r26	; 0x16
    e824:	bf 8b       	std	Y+23, r27	; 0x17
    e826:	02 c0       	rjmp	.+4      	; 0xe82c <MEMBLOCK_Allocate+0x138>
	} else {
		ptr = NULL;
    e828:	00 e0       	ldi	r16, 0x00	; 0
    e82a:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Restore interrupt state and return.
	SREG = savedSREG;
    e82c:	ff be       	out	0x3f, r15	; 63
	return ptr;
}
    e82e:	c8 01       	movw	r24, r16
    e830:	df 91       	pop	r29
    e832:	cf 91       	pop	r28
    e834:	1f 91       	pop	r17
    e836:	0f 91       	pop	r16
    e838:	ff 90       	pop	r15
    e83a:	df 90       	pop	r13
    e83c:	cf 90       	pop	r12
    e83e:	bf 90       	pop	r11
    e840:	af 90       	pop	r10
    e842:	08 95       	ret

0000e844 <MEMBLOCK_Free>:

/*!
 * \param  ptr  Pointer to allocated memory
 */
void MEMBLOCK_Free( void const * ptr )
{
    e844:	cf 93       	push	r28
    e846:	df 93       	push	r29
    e848:	ac 01       	movw	r20, r24
	// Always ok to free a NULL, since users would find that convenient.
	if (ptr == NULL) { return; }
    e84a:	89 2b       	or	r24, r25
    e84c:	09 f4       	brne	.+2      	; 0xe850 <MEMBLOCK_Free+0xc>
    e84e:	4e c0       	rjmp	.+156    	; 0xe8ec <MEMBLOCK_Free+0xa8>
	
	// Iterate through bags and find bag that contains the block.
	MEMBLOCK_bag_t * bag = MEMBLOCK_manager.bags;
    e850:	c0 91 54 02 	lds	r28, 0x0254
    e854:	d0 91 55 02 	lds	r29, 0x0255
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;
    e858:	20 91 52 02 	lds	r18, 0x0252
    e85c:	30 91 53 02 	lds	r19, 0x0253

	bool found = false;
    e860:	60 e0       	ldi	r22, 0x00	; 0
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
			found = true;
		} else {
			++bag;
			--bagsLeft;
    e862:	21 15       	cp	r18, r1
    e864:	31 05       	cpc	r19, r1
    e866:	e9 f1       	breq	.+122    	; 0xe8e2 <MEMBLOCK_Free+0x9e>
	MEMBLOCK_size_t bagsLeft = MEMBLOCK_manager.bagCount;

	bool found = false;
	while ((bagsLeft > 0) && (found == false)) {
		// Is pointer within this bag's bounds?
		if ((ptr >= (void *) bag->bufferStart) && (ptr < ((void *) bag->freeBlockMap))) {
    e868:	8e 81       	ldd	r24, Y+6	; 0x06
    e86a:	9f 81       	ldd	r25, Y+7	; 0x07
    e86c:	48 17       	cp	r20, r24
    e86e:	59 07       	cpc	r21, r25
    e870:	38 f0       	brcs	.+14     	; 0xe880 <MEMBLOCK_Free+0x3c>
    e872:	88 85       	ldd	r24, Y+8	; 0x08
    e874:	99 85       	ldd	r25, Y+9	; 0x09
    e876:	48 17       	cp	r20, r24
    e878:	59 07       	cpc	r21, r25
    e87a:	10 f4       	brcc	.+4      	; 0xe880 <MEMBLOCK_Free+0x3c>
			found = true;
    e87c:	61 e0       	ldi	r22, 0x01	; 1
    e87e:	03 c0       	rjmp	.+6      	; 0xe886 <MEMBLOCK_Free+0x42>
		} else {
			++bag;
    e880:	68 96       	adiw	r28, 0x18	; 24
			--bagsLeft;
    e882:	21 50       	subi	r18, 0x01	; 1
    e884:	30 40       	sbci	r19, 0x00	; 0
    e886:	21 15       	cp	r18, r1
    e888:	31 05       	cpc	r19, r1
    e88a:	11 f0       	breq	.+4      	; 0xe890 <MEMBLOCK_Free+0x4c>
    e88c:	66 23       	and	r22, r22
    e88e:	61 f3       	breq	.-40     	; 0xe868 <MEMBLOCK_Free+0x24>
		}
	}
	
	// If found, free it. If not, increase invalid free attempt count in manager.
	if (found) {
    e890:	66 23       	and	r22, r22
    e892:	39 f1       	breq	.+78     	; 0xe8e2 <MEMBLOCK_Free+0x9e>
		// Calculate block index first.
		MEMBLOCK_size_t bufferIndex = ((uint8_t *) ptr) - bag->bufferStart;
    e894:	8e 81       	ldd	r24, Y+6	; 0x06
    e896:	9f 81       	ldd	r25, Y+7	; 0x07
		MEMBLOCK_size_t blockIndex = bufferIndex / bag->blockSize;
    e898:	28 81       	ld	r18, Y
    e89a:	39 81       	ldd	r19, Y+1	; 0x01
    e89c:	48 1b       	sub	r20, r24
    e89e:	59 0b       	sbc	r21, r25
    e8a0:	ca 01       	movw	r24, r20
    e8a2:	b9 01       	movw	r22, r18
    e8a4:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    e8a8:	9b 01       	movw	r18, r22
		
		// Mark block as free and update free block count.
		bag->freeBlockMap[blockIndex / 8] |= (0x80 >> (blockIndex % 8));
    e8aa:	cb 01       	movw	r24, r22
    e8ac:	43 e0       	ldi	r20, 0x03	; 3
    e8ae:	96 95       	lsr	r25
    e8b0:	87 95       	ror	r24
    e8b2:	4a 95       	dec	r20
    e8b4:	e1 f7       	brne	.-8      	; 0xe8ae <MEMBLOCK_Free+0x6a>
    e8b6:	e8 85       	ldd	r30, Y+8	; 0x08
    e8b8:	f9 85       	ldd	r31, Y+9	; 0x09
    e8ba:	e8 0f       	add	r30, r24
    e8bc:	f9 1f       	adc	r31, r25
    e8be:	27 70       	andi	r18, 0x07	; 7
    e8c0:	30 70       	andi	r19, 0x00	; 0
    e8c2:	80 e8       	ldi	r24, 0x80	; 128
    e8c4:	90 e0       	ldi	r25, 0x00	; 0
    e8c6:	02 c0       	rjmp	.+4      	; 0xe8cc <MEMBLOCK_Free+0x88>
    e8c8:	95 95       	asr	r25
    e8ca:	87 95       	ror	r24
    e8cc:	2a 95       	dec	r18
    e8ce:	e2 f7       	brpl	.-8      	; 0xe8c8 <MEMBLOCK_Free+0x84>
    e8d0:	20 81       	ld	r18, Z
    e8d2:	28 2b       	or	r18, r24
    e8d4:	20 83       	st	Z, r18
		++(bag->freeBlockCount);
    e8d6:	8c 81       	ldd	r24, Y+4	; 0x04
    e8d8:	9d 81       	ldd	r25, Y+5	; 0x05
    e8da:	01 96       	adiw	r24, 0x01	; 1
    e8dc:	9d 83       	std	Y+5, r25	; 0x05
    e8de:	8c 83       	std	Y+4, r24	; 0x04
    e8e0:	05 c0       	rjmp	.+10     	; 0xe8ec <MEMBLOCK_Free+0xa8>
	} else {
		++(MEMBLOCK_manager.invalidFreeAttemptCount);
    e8e2:	80 91 56 02 	lds	r24, 0x0256
    e8e6:	8f 5f       	subi	r24, 0xFF	; 255
    e8e8:	80 93 56 02 	sts	0x0256, r24
    e8ec:	df 91       	pop	r29
    e8ee:	cf 91       	pop	r28
    e8f0:	08 95       	ret

0000e8f2 <PICTURE_CopyFullscreenFlashToLcd>:

/*!
 * \param  pPictureInFlash  Pointer to picture in flash with same size as LCD
 */
void PICTURE_CopyFullscreenFlashToLcd ( const uint8_t CAL_PGM(* pPictureInFlash))
{
    e8f2:	1f 93       	push	r17
    e8f4:	cf 93       	push	r28
    e8f6:	df 93       	push	r29
    e8f8:	ec 01       	movw	r28, r24
  uint8_t page = 0;
    e8fa:	10 e0       	ldi	r17, 0x00	; 0
  do{
    LCD_WritePage_F( pPictureInFlash, page, 0, LCD_WIDTH);  // Write full row with page height.
    e8fc:	20 e8       	ldi	r18, 0x80	; 128
    e8fe:	40 e0       	ldi	r20, 0x00	; 0
    e900:	61 2f       	mov	r22, r17
    e902:	ce 01       	movw	r24, r28
    e904:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <LCD_WritePage_F>
    pPictureInFlash += LCD_WIDTH;
    e908:	c0 58       	subi	r28, 0x80	; 128
    e90a:	df 4f       	sbci	r29, 0xFF	; 255
    page++;
    e90c:	1f 5f       	subi	r17, 0xFF	; 255
  }while (page < LCD_PAGE_HEIGHT);
    e90e:	18 30       	cpi	r17, 0x08	; 8
    e910:	a8 f3       	brcs	.-22     	; 0xe8fc <PICTURE_CopyFullscreenFlashToLcd+0xa>
    e912:	df 91       	pop	r29
    e914:	cf 91       	pop	r28
    e916:	1f 91       	pop	r17
    e918:	08 95       	ret

0000e91a <PICTURE_CopyFlashToLcd>:
 */
void PICTURE_CopyFlashToLcd(
		uint8_t CAL_PGM(const * source), uint16_t sourceWidth, uint16_t sourceX, uint8_t sourcePage,
		uint8_t destX, uint8_t destPage,
		uint8_t width, uint8_t heightInPages )
{
    e91a:	8f 92       	push	r8
    e91c:	9f 92       	push	r9
    e91e:	af 92       	push	r10
    e920:	cf 92       	push	r12
    e922:	ef 92       	push	r14
    e924:	0f 93       	push	r16
    e926:	1f 93       	push	r17
    e928:	cf 93       	push	r28
    e92a:	df 93       	push	r29
    e92c:	4b 01       	movw	r8, r22
    e92e:	1a 2d       	mov	r17, r10
  // Move data pointer to starting points.
  source += (sourceWidth * sourcePage) + sourceX;
    e930:	33 27       	eor	r19, r19
    e932:	62 9f       	mul	r22, r18
    e934:	e0 01       	movw	r28, r0
    e936:	63 9f       	mul	r22, r19
    e938:	d0 0d       	add	r29, r0
    e93a:	72 9f       	mul	r23, r18
    e93c:	d0 0d       	add	r29, r0
    e93e:	11 24       	eor	r1, r1
    e940:	c4 0f       	add	r28, r20
    e942:	d5 1f       	adc	r29, r21
    e944:	c8 0f       	add	r28, r24
    e946:	d9 1f       	adc	r29, r25
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    
    // Move to next page.
    source += sourceWidth;
    destPage++;
    e948:	11 50       	subi	r17, 0x01	; 1
    e94a:	1f 3f       	cpi	r17, 0xFF	; 255
    e94c:	59 f0       	breq	.+22     	; 0xe964 <PICTURE_CopyFlashToLcd+0x4a>
  
  // Copy page-by-page.
  uint8_t pagesLeft = heightInPages;
  while (pagesLeft-- > 0) {
    // Copy byte-by-byte within page.
    LCD_WritePage_F( source, destPage, destX, width );
    e94e:	2c 2d       	mov	r18, r12
    e950:	40 2f       	mov	r20, r16
    e952:	6e 2d       	mov	r22, r14
    e954:	ce 01       	movw	r24, r28
    e956:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <LCD_WritePage_F>
    
    // Move to next page.
    source += sourceWidth;
    e95a:	c8 0d       	add	r28, r8
    e95c:	d9 1d       	adc	r29, r9
    destPage++;
    e95e:	e3 94       	inc	r14
    e960:	11 50       	subi	r17, 0x01	; 1
    e962:	a8 f7       	brcc	.-22     	; 0xe94e <PICTURE_CopyFlashToLcd+0x34>
    e964:	df 91       	pop	r29
    e966:	cf 91       	pop	r28
    e968:	1f 91       	pop	r17
    e96a:	0f 91       	pop	r16
    e96c:	ef 90       	pop	r14
    e96e:	cf 90       	pop	r12
    e970:	af 90       	pop	r10
    e972:	9f 90       	pop	r9
    e974:	8f 90       	pop	r8
    e976:	08 95       	ret

0000e978 <FORMS_CalculateStartPages>:
 * been added or removed from the form.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_CalculateStartPages( FORMS_form_t * form )
{
    e978:	cf 93       	push	r28
    e97a:	df 93       	push	r29
    e97c:	fc 01       	movw	r30, r24
	// Setup iteration variables.
	FORMS_element_t * element = form->firstElement;
    e97e:	a6 81       	ldd	r26, Z+6	; 0x06
    e980:	b7 81       	ldd	r27, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    e982:	95 81       	ldd	r25, Z+5	; 0x05
	FORMS_size_t currentHeight = 0;
    e984:	40 e0       	ldi	r20, 0x00	; 0
	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
		currentHeight += element->height;
		element = element->next;
		--elementsLeft;
    e986:	99 23       	and	r25, r25
    e988:	41 f0       	breq	.+16     	; 0xe99a <FORMS_CalculateStartPages+0x22>
	FORMS_size_t elementsLeft = form->elementCount;
	FORMS_size_t currentHeight = 0;

	// Set start pages - element by element.
	while (elementsLeft > 0) {
		element->startPage = currentHeight;
    e98a:	4c 93       	st	X, r20
		currentHeight += element->height;
    e98c:	ed 01       	movw	r28, r26
    e98e:	89 81       	ldd	r24, Y+1	; 0x01
    e990:	48 0f       	add	r20, r24
		element = element->next;
    e992:	ad 85       	ldd	r26, Y+13	; 0x0d
    e994:	be 85       	ldd	r27, Y+14	; 0x0e
		--elementsLeft;
    e996:	91 50       	subi	r25, 0x01	; 1
    e998:	f6 cf       	rjmp	.-20     	; 0xe986 <FORMS_CalculateStartPages+0xe>
	}

	// Now, we know the height of the entire form.
	form->height = currentHeight;
    e99a:	43 83       	std	Z+3, r20	; 0x03
	
	// Make sure form is not scrolled beyond bottom now when we have recalculated.
	if (form->height < LCD_PAGE_COUNT) {
    e99c:	48 30       	cpi	r20, 0x08	; 8
    e99e:	10 f4       	brcc	.+4      	; 0xe9a4 <FORMS_CalculateStartPages+0x2c>
		form->firstVisiblePage = 0;
    e9a0:	12 82       	std	Z+2, r1	; 0x02
    e9a2:	0a c0       	rjmp	.+20     	; 0xe9b8 <FORMS_CalculateStartPages+0x40>
	}
	else if ((form->firstVisiblePage + LCD_PAGE_COUNT) > form->height) {
    e9a4:	82 81       	ldd	r24, Z+2	; 0x02
    e9a6:	99 27       	eor	r25, r25
    e9a8:	08 96       	adiw	r24, 0x08	; 8
    e9aa:	24 2f       	mov	r18, r20
    e9ac:	33 27       	eor	r19, r19
    e9ae:	28 17       	cp	r18, r24
    e9b0:	39 07       	cpc	r19, r25
    e9b2:	14 f4       	brge	.+4      	; 0xe9b8 <FORMS_CalculateStartPages+0x40>
		form->firstVisiblePage = currentHeight - LCD_PAGE_COUNT;
    e9b4:	48 50       	subi	r20, 0x08	; 8
    e9b6:	42 83       	std	Z+2, r20	; 0x02
	}
	
	// Indicate that we have recalculated start pages.
	form->needsRecalculation = false;
    e9b8:	84 81       	ldd	r24, Z+4	; 0x04
    e9ba:	8d 7f       	andi	r24, 0xFD	; 253
    e9bc:	84 83       	std	Z+4, r24	; 0x04
    e9be:	df 91       	pop	r29
    e9c0:	cf 91       	pop	r28
    e9c2:	08 95       	ret

0000e9c4 <FORMS_DrawScrollbar>:
 * position indicator if required.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawScrollbar( FORMS_form_t const * form )
{
    e9c4:	ff 92       	push	r15
    e9c6:	0f 93       	push	r16
    e9c8:	1f 93       	push	r17
    e9ca:	cf 93       	push	r28
    e9cc:	df 93       	push	r29
    e9ce:	8c 01       	movw	r16, r24
	// Draw vertical separator and clear old bar.
	LCD_SetVLine( LCD_WIDTH - 3, 0, LCD_HEIGHT - 1 );
    e9d0:	4f e3       	ldi	r20, 0x3F	; 63
    e9d2:	60 e0       	ldi	r22, 0x00	; 0
    e9d4:	8d e7       	ldi	r24, 0x7D	; 125
    e9d6:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
	LCD_ClrVLine( LCD_WIDTH - 2, 0, LCD_HEIGHT - 1 );
    e9da:	4f e3       	ldi	r20, 0x3F	; 63
    e9dc:	60 e0       	ldi	r22, 0x00	; 0
    e9de:	8e e7       	ldi	r24, 0x7E	; 126
    e9e0:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_ClrVLine>
	LCD_ClrVLine( LCD_WIDTH - 1, 0, LCD_HEIGHT - 1 );
    e9e4:	4f e3       	ldi	r20, 0x3F	; 63
    e9e6:	60 e0       	ldi	r22, 0x00	; 0
    e9e8:	8f e7       	ldi	r24, 0x7F	; 127
    e9ea:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_ClrVLine>

	// Draw scroll position indicator if form is not empty.
	if (form->height > LCD_PAGE_COUNT) {
    e9ee:	e8 01       	movw	r28, r16
    e9f0:	fb 80       	ldd	r15, Y+3	; 0x03
    e9f2:	e8 e0       	ldi	r30, 0x08	; 8
    e9f4:	ef 15       	cp	r30, r15
    e9f6:	08 f0       	brcs	.+2      	; 0xe9fa <FORMS_DrawScrollbar+0x36>
    e9f8:	5d c0       	rjmp	.+186    	; 0xeab4 <FORMS_DrawScrollbar+0xf0>
		// Indicator height shows the size of the visible parts
		// related to the entire form height.
		uint16_t heightOfBar = (uint16_t) LCD_HEIGHT * LCD_PAGE_COUNT / form->height;
    e9fa:	2f 2d       	mov	r18, r15
    e9fc:	33 27       	eor	r19, r19
    e9fe:	80 e0       	ldi	r24, 0x00	; 0
    ea00:	92 e0       	ldi	r25, 0x02	; 2
    ea02:	b9 01       	movw	r22, r18
    ea04:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    ea08:	fb 01       	movw	r30, r22
		
		// Make sure the bar is not too small or too large.
		if (heightOfBar == 0) {
    ea0a:	61 15       	cp	r22, r1
    ea0c:	71 05       	cpc	r23, r1
    ea0e:	19 f4       	brne	.+6      	; 0xea16 <FORMS_DrawScrollbar+0x52>
			heightOfBar = 1;
    ea10:	e1 e0       	ldi	r30, 0x01	; 1
    ea12:	f0 e0       	ldi	r31, 0x00	; 0
    ea14:	05 c0       	rjmp	.+10     	; 0xea20 <FORMS_DrawScrollbar+0x5c>
		}
		else if (heightOfBar > LCD_HEIGHT) {
    ea16:	61 34       	cpi	r22, 0x41	; 65
    ea18:	71 05       	cpc	r23, r1
    ea1a:	10 f0       	brcs	.+4      	; 0xea20 <FORMS_DrawScrollbar+0x5c>
			heightOfBar = LCD_HEIGHT;
    ea1c:	e0 e4       	ldi	r30, 0x40	; 64
    ea1e:	f0 e0       	ldi	r31, 0x00	; 0
		}

		// Position shows the relative position of the visible area within the entire form.
		uint16_t startOfBar = form->firstVisiblePage * (LCD_HEIGHT - heightOfBar) /
    ea20:	e8 01       	movw	r28, r16
    ea22:	8a 81       	ldd	r24, Y+2	; 0x02
    ea24:	48 2f       	mov	r20, r24
    ea26:	55 27       	eor	r21, r21
    ea28:	80 e4       	ldi	r24, 0x40	; 64
    ea2a:	90 e0       	ldi	r25, 0x00	; 0
    ea2c:	8e 1b       	sub	r24, r30
    ea2e:	9f 0b       	sbc	r25, r31
    ea30:	2f 2d       	mov	r18, r15
    ea32:	33 27       	eor	r19, r19
    ea34:	28 50       	subi	r18, 0x08	; 8
    ea36:	30 40       	sbci	r19, 0x00	; 0
    ea38:	48 9f       	mul	r20, r24
    ea3a:	b0 01       	movw	r22, r0
    ea3c:	49 9f       	mul	r20, r25
    ea3e:	70 0d       	add	r23, r0
    ea40:	58 9f       	mul	r21, r24
    ea42:	70 0d       	add	r23, r0
    ea44:	11 24       	eor	r1, r1
    ea46:	cb 01       	movw	r24, r22
    ea48:	b9 01       	movw	r22, r18
    ea4a:	0e 94 98 7a 	call	0xf530	; 0xf530 <__udivmodhi4>
    ea4e:	eb 01       	movw	r28, r22
		                      (form->height - LCD_PAGE_COUNT);

		// Adjust start according to LCD hardware scrolling.
		startOfBar = (startOfBar + (LCD_GetTopPage() * LCD_PAGE_HEIGHT)) % LCD_HEIGHT;
    ea50:	80 91 35 02 	lds	r24, 0x0235
    ea54:	99 27       	eor	r25, r25
    ea56:	23 e0       	ldi	r18, 0x03	; 3
    ea58:	88 0f       	add	r24, r24
    ea5a:	99 1f       	adc	r25, r25
    ea5c:	2a 95       	dec	r18
    ea5e:	e1 f7       	brne	.-8      	; 0xea58 <FORMS_DrawScrollbar+0x94>
    ea60:	c8 0f       	add	r28, r24
    ea62:	d9 1f       	adc	r29, r25
    ea64:	cf 73       	andi	r28, 0x3F	; 63
    ea66:	d0 70       	andi	r29, 0x00	; 0

		// If bar wraps from bottom to top after adjusting it, draw it in two steps.
		if ((startOfBar + heightOfBar) > LCD_HEIGHT) {
    ea68:	ce 01       	movw	r24, r28
    ea6a:	8e 0f       	add	r24, r30
    ea6c:	9f 1f       	adc	r25, r31
    ea6e:	1c 2f       	mov	r17, r28
    ea70:	1e 0f       	add	r17, r30
    ea72:	81 34       	cpi	r24, 0x41	; 65
    ea74:	91 05       	cpc	r25, r1
    ea76:	98 f0       	brcs	.+38     	; 0xea9e <FORMS_DrawScrollbar+0xda>
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, LCD_HEIGHT - 1 );
    ea78:	4f e3       	ldi	r20, 0x3F	; 63
    ea7a:	6c 2f       	mov	r22, r28
    ea7c:	8e e7       	ldi	r24, 0x7E	; 126
    ea7e:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, LCD_HEIGHT - 1 );
    ea82:	4f e3       	ldi	r20, 0x3F	; 63
    ea84:	6c 2f       	mov	r22, r28
    ea86:	8f e7       	ldi	r24, 0x7F	; 127
    ea88:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 2, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ea8c:	11 54       	subi	r17, 0x41	; 65
    ea8e:	41 2f       	mov	r20, r17
    ea90:	60 e0       	ldi	r22, 0x00	; 0
    ea92:	8e e7       	ldi	r24, 0x7E	; 126
    ea94:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, 0, (startOfBar + heightOfBar) - LCD_HEIGHT - 1 );
    ea98:	41 2f       	mov	r20, r17
    ea9a:	60 e0       	ldi	r22, 0x00	; 0
    ea9c:	08 c0       	rjmp	.+16     	; 0xeaae <FORMS_DrawScrollbar+0xea>
		} else {
			LCD_SetVLine( LCD_WIDTH - 2, startOfBar, startOfBar + heightOfBar - 1 );
    ea9e:	11 50       	subi	r17, 0x01	; 1
    eaa0:	41 2f       	mov	r20, r17
    eaa2:	6c 2f       	mov	r22, r28
    eaa4:	8e e7       	ldi	r24, 0x7E	; 126
    eaa6:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
			LCD_SetVLine( LCD_WIDTH - 1, startOfBar, startOfBar + heightOfBar - 1 );
    eaaa:	41 2f       	mov	r20, r17
    eaac:	6c 2f       	mov	r22, r28
    eaae:	8f e7       	ldi	r24, 0x7F	; 127
    eab0:	0e 94 ca 6b 	call	0xd794	; 0xd794 <LCD_SetVLine>
    eab4:	df 91       	pop	r29
    eab6:	cf 91       	pop	r28
    eab8:	1f 91       	pop	r17
    eaba:	0f 91       	pop	r16
    eabc:	ff 90       	pop	r15
    eabe:	08 95       	ret

0000eac0 <FORMS_DrawFocusIndicator>:
 * It draws the focus arrow next to the current focused page on screen.
 *
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
    eac0:	0f 93       	push	r16
    eac2:	1f 93       	push	r17
    eac4:	cf 93       	push	r28
    eac6:	df 93       	push	r29
    eac8:	8c 01       	movw	r16, r24
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    eaca:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
    eacc:	40 e4       	ldi	r20, 0x40	; 64
    eace:	60 e0       	ldi	r22, 0x00	; 0
    ead0:	8c 2f       	mov	r24, r28
    ead2:	0e 94 82 6c 	call	0xd904	; 0xd904 <LCD_ClrVLine>
 * \param  form  Pointer to form.
 */
static void FORMS_DrawFocusIndicator( FORMS_form_t const * form )
{
	// Clear old indicator.
	for (uint8_t col = 0; col < FORMS_FIRST_COLUMN; ++col) {
    ead6:	cf 5f       	subi	r28, 0xFF	; 255
    ead8:	c4 30       	cpi	r28, 0x04	; 4
    eada:	c0 f3       	brcs	.-16     	; 0xeacc <FORMS_DrawFocusIndicator+0xc>
		LCD_ClrVLine( col, 0, LCD_HEIGHT );
	}

	// Check that focused element is within visible area.
	FORMS_size_t focusedPage = form->focusedElement->startPage +
    eadc:	d8 01       	movw	r26, r16
    eade:	ed 91       	ld	r30, X+
    eae0:	fc 91       	ld	r31, X
    eae2:	60 81       	ld	r22, Z
    eae4:	82 81       	ldd	r24, Z+2	; 0x02
    eae6:	68 0f       	add	r22, r24
	                             form->focusedElement->focusedPage;
	if ((focusedPage >= form->firstVisiblePage) &&
    eae8:	e8 01       	movw	r28, r16
    eaea:	ea 81       	ldd	r30, Y+2	; 0x02
    eaec:	6e 17       	cp	r22, r30
    eaee:	98 f0       	brcs	.+38     	; 0xeb16 <FORMS_DrawFocusIndicator+0x56>
    eaf0:	26 2f       	mov	r18, r22
    eaf2:	33 27       	eor	r19, r19
    eaf4:	8e 2f       	mov	r24, r30
    eaf6:	99 27       	eor	r25, r25
    eaf8:	08 96       	adiw	r24, 0x08	; 8
    eafa:	28 17       	cp	r18, r24
    eafc:	39 07       	cpc	r19, r25
    eafe:	5c f4       	brge	.+22     	; 0xeb16 <FORMS_DrawFocusIndicator+0x56>
	    (focusedPage < (form->firstVisiblePage + LCD_PAGE_COUNT))) {
		// Find start position for indicator, adjust for LCD hardware scrolling.
		uint8_t lcdPage = LCD_ROW2PAGE( focusedPage - form->firstVisiblePage );
    eb00:	6e 1b       	sub	r22, r30
    eb02:	80 91 35 02 	lds	r24, 0x0235
    eb06:	68 0f       	add	r22, r24
    eb08:	67 70       	andi	r22, 0x07	; 7

		// Draw indicator.
		LCD_WritePage_F( FORMS_focusIndicator, lcdPage, 0, FORMS_FIRST_COLUMN );
    eb0a:	24 e0       	ldi	r18, 0x04	; 4
    eb0c:	40 e0       	ldi	r20, 0x00	; 0
    eb0e:	82 e5       	ldi	r24, 0x52	; 82
    eb10:	9c ec       	ldi	r25, 0xCC	; 204
    eb12:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <LCD_WritePage_F>
    eb16:	df 91       	pop	r29
    eb18:	cf 91       	pop	r28
    eb1a:	1f 91       	pop	r17
    eb1c:	0f 91       	pop	r16
    eb1e:	08 95       	ret

0000eb20 <FORMS_Draw>:
 * after displaying other graphics on top, for instance.
 *
 * \param  form  Pointer to form to draw.
 */
void FORMS_Draw( FORMS_form_t * form )
{
    eb20:	cf 92       	push	r12
    eb22:	df 92       	push	r13
    eb24:	ef 92       	push	r14
    eb26:	ff 92       	push	r15
    eb28:	0f 93       	push	r16
    eb2a:	1f 93       	push	r17
    eb2c:	cf 93       	push	r28
    eb2e:	df 93       	push	r29
    eb30:	8c 01       	movw	r16, r24
	// Clear screen first.
	LCD_SetScreen( 0x00 );
    eb32:	80 e0       	ldi	r24, 0x00	; 0
    eb34:	0e 94 82 6a 	call	0xd504	; 0xd504 <LCD_SetScreen>
	
	// Exit if there is nothing to draw for some reason.
	if (form->elementCount == 0) {return; }
    eb38:	f8 01       	movw	r30, r16
    eb3a:	85 81       	ldd	r24, Z+5	; 0x05
    eb3c:	88 23       	and	r24, r24
    eb3e:	09 f4       	brne	.+2      	; 0xeb42 <FORMS_Draw+0x22>
    eb40:	55 c0       	rjmp	.+170    	; 0xebec <FORMS_Draw+0xcc>

	// Calculate start pages if required.
	if (form->needsRecalculation) {
    eb42:	84 81       	ldd	r24, Z+4	; 0x04
    eb44:	81 ff       	sbrs	r24, 1
    eb46:	03 c0       	rjmp	.+6      	; 0xeb4e <FORMS_Draw+0x2e>
		FORMS_CalculateStartPages( form );
    eb48:	c8 01       	movw	r24, r16
    eb4a:	0e 94 bc 74 	call	0xe978	; 0xe978 <FORMS_CalculateStartPages>
	}

	// Setup iteration variables.
	FORMS_element_t const * element = form->firstElement;
    eb4e:	f8 01       	movw	r30, r16
    eb50:	c6 81       	ldd	r28, Z+6	; 0x06
    eb52:	d7 81       	ldd	r29, Z+7	; 0x07
	FORMS_size_t elementsLeft = form->elementCount;
    eb54:	e5 80       	ldd	r14, Z+5	; 0x05

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
		--elementsLeft;
    eb56:	ee 20       	and	r14, r14
    eb58:	b9 f0       	breq	.+46     	; 0xeb88 <FORMS_Draw+0x68>
    eb5a:	98 81       	ld	r25, Y
    eb5c:	89 81       	ldd	r24, Y+1	; 0x01
    eb5e:	89 0f       	add	r24, r25
    eb60:	91 2d       	mov	r25, r1
    eb62:	91 1d       	adc	r25, r1
    eb64:	01 97       	sbiw	r24, 0x01	; 1
    eb66:	22 81       	ldd	r18, Z+2	; 0x02
    eb68:	33 27       	eor	r19, r19
    eb6a:	82 17       	cp	r24, r18
    eb6c:	93 07       	cpc	r25, r19
    eb6e:	64 f4       	brge	.+24     	; 0xeb88 <FORMS_Draw+0x68>
	FORMS_size_t elementsLeft = form->elementCount;

	// Find first element that have parts to draw on LCD.
	while ((elementsLeft > 0) &&
	       ((element->startPage + element->height - 1) < form->firstVisiblePage)) {
		element = element->next;
    eb70:	0d 84       	ldd	r0, Y+13	; 0x0d
    eb72:	de 85       	ldd	r29, Y+14	; 0x0e
    eb74:	c0 2d       	mov	r28, r0
		--elementsLeft;
    eb76:	ea 94       	dec	r14
    eb78:	39 f0       	breq	.+14     	; 0xeb88 <FORMS_Draw+0x68>
    eb7a:	98 81       	ld	r25, Y
    eb7c:	89 81       	ldd	r24, Y+1	; 0x01
    eb7e:	89 0f       	add	r24, r25
    eb80:	91 2d       	mov	r25, r1
    eb82:	91 1d       	adc	r25, r1
    eb84:	01 97       	sbiw	r24, 0x01	; 1
    eb86:	f1 cf       	rjmp	.-30     	; 0xeb6a <FORMS_Draw+0x4a>
	}

	// Find first page to draw within element.
	FORMS_size_t internalPage = form->firstVisiblePage - element->startPage;
    eb88:	f8 01       	movw	r30, r16
    eb8a:	f2 80       	ldd	r15, Z+2	; 0x02
    eb8c:	88 81       	ld	r24, Y
    eb8e:	f8 1a       	sub	r15, r24

	// Draw nodes page by page until end of LCD reached or no more elements left.
	uint8_t lcdPage = LCD_GetTopPage();
    eb90:	d0 90 35 02 	lds	r13, 0x0235
	uint8_t lcdPagesLeft = LCD_PAGE_COUNT;
    eb94:	38 e0       	ldi	r19, 0x08	; 8
    eb96:	c3 2e       	mov	r12, r19
			}
			--lcdPagesLeft;
		}
		internalPage = 0;
		element = element->next;
		--elementsLeft;
    eb98:	ee 20       	and	r14, r14
    eb9a:	f1 f0       	breq	.+60     	; 0xebd8 <FORMS_Draw+0xb8>
    eb9c:	14 c0       	rjmp	.+40     	; 0xebc6 <FORMS_Draw+0xa6>
			++internalPage;
			++lcdPage;
			if (lcdPage >= LCD_PAGE_COUNT) {
				lcdPage = 0;
			}
			--lcdPagesLeft;
    eb9e:	89 81       	ldd	r24, Y+1	; 0x01
    eba0:	f8 16       	cp	r15, r24
    eba2:	98 f4       	brcc	.+38     	; 0xebca <FORMS_Draw+0xaa>
	while ((lcdPagesLeft > 0) && (elementsLeft > 0)) {
		while ((lcdPagesLeft > 0) && (internalPage < element->height)) {

			///mt element->traits->DrawPage( element, internalPage, lcdPage );
			FORMS_DrawPageFunc_t drawPageFunc;
			drawPageFunc = (FORMS_DrawPageFunc_t)(CAL_pgm_read_pvoid(&(element->traits->DrawPage)));
    eba4:	ed 81       	ldd	r30, Y+5	; 0x05
    eba6:	fe 81       	ldd	r31, Y+6	; 0x06
    eba8:	38 96       	adiw	r30, 0x08	; 8
    ebaa:	25 91       	lpm	r18, Z+
    ebac:	34 91       	lpm	r19, Z+
			drawPageFunc( element, internalPage, lcdPage );
    ebae:	4d 2d       	mov	r20, r13
    ebb0:	6f 2d       	mov	r22, r15
    ebb2:	ce 01       	movw	r24, r28
    ebb4:	f9 01       	movw	r30, r18
    ebb6:	09 95       	icall

			++internalPage;
    ebb8:	f3 94       	inc	r15
			++lcdPage;
    ebba:	d3 94       	inc	r13
			if (lcdPage >= LCD_PAGE_COUNT) {
    ebbc:	f7 e0       	ldi	r31, 0x07	; 7
    ebbe:	fd 15       	cp	r31, r13
    ebc0:	08 f4       	brcc	.+2      	; 0xebc4 <FORMS_Draw+0xa4>
				lcdPage = 0;
    ebc2:	dd 24       	eor	r13, r13
			}
			--lcdPagesLeft;
    ebc4:	ca 94       	dec	r12
    ebc6:	cc 20       	and	r12, r12
    ebc8:	51 f7       	brne	.-44     	; 0xeb9e <FORMS_Draw+0x7e>
		}
		internalPage = 0;
    ebca:	ff 24       	eor	r15, r15
		element = element->next;
    ebcc:	0d 84       	ldd	r0, Y+13	; 0x0d
    ebce:	de 85       	ldd	r29, Y+14	; 0x0e
    ebd0:	c0 2d       	mov	r28, r0
		--elementsLeft;
    ebd2:	ea 94       	dec	r14
    ebd4:	cc 20       	and	r12, r12
    ebd6:	01 f7       	brne	.-64     	; 0xeb98 <FORMS_Draw+0x78>
	}	

	// Draw non-element form graphics.
	if (form->useScrollbar) {
    ebd8:	f8 01       	movw	r30, r16
    ebda:	84 81       	ldd	r24, Z+4	; 0x04
    ebdc:	80 ff       	sbrs	r24, 0
    ebde:	03 c0       	rjmp	.+6      	; 0xebe6 <FORMS_Draw+0xc6>
		FORMS_DrawScrollbar( form );
    ebe0:	c8 01       	movw	r24, r16
    ebe2:	0e 94 e2 74 	call	0xe9c4	; 0xe9c4 <FORMS_DrawScrollbar>
	}
	FORMS_DrawFocusIndicator( form );
    ebe6:	c8 01       	movw	r24, r16
    ebe8:	0e 94 60 75 	call	0xeac0	; 0xeac0 <FORMS_DrawFocusIndicator>
    ebec:	df 91       	pop	r29
    ebee:	cf 91       	pop	r28
    ebf0:	1f 91       	pop	r17
    ebf2:	0f 91       	pop	r16
    ebf4:	ff 90       	pop	r15
    ebf6:	ef 90       	pop	r14
    ebf8:	df 90       	pop	r13
    ebfa:	cf 90       	pop	r12
    ebfc:	08 95       	ret

0000ebfe <FORMS_NormalizeLCDScroll>:
 * a pop-up box, without having to compensate for hardware LCD scrolling.
 *
 * \param  form  Pointer to the form currently being on screen.
 */
void FORMS_NormalizeLCDScroll( FORMS_form_t * form )
{
    ebfe:	0f 93       	push	r16
    ec00:	1f 93       	push	r17
    ec02:	8c 01       	movw	r16, r24
	LCD_SetTopPage( 0, 0 );
    ec04:	60 e0       	ldi	r22, 0x00	; 0
    ec06:	86 2f       	mov	r24, r22
    ec08:	0e 94 9b 6a 	call	0xd536	; 0xd536 <LCD_SetTopPage>
	FORMS_Draw( form );
    ec0c:	c8 01       	movw	r24, r16
    ec0e:	0e 94 90 75 	call	0xeb20	; 0xeb20 <FORMS_Draw>
    ec12:	1f 91       	pop	r17
    ec14:	0f 91       	pop	r16
    ec16:	08 95       	ret

0000ec18 <__vector_15>:
 * Private function implementations.
 ************************************/

//! This interrupt handler is called every tick.
CAL_ISR( TIMER2_OVF_vect )
{
    ec18:	1f 92       	push	r1
    ec1a:	0f 92       	push	r0
    ec1c:	0f b6       	in	r0, 0x3f	; 63
    ec1e:	0f 92       	push	r0
    ec20:	11 24       	eor	r1, r1
    ec22:	2f 93       	push	r18
    ec24:	3f 93       	push	r19
    ec26:	4f 93       	push	r20
    ec28:	5f 93       	push	r21
    ec2a:	6f 93       	push	r22
    ec2c:	7f 93       	push	r23
    ec2e:	8f 93       	push	r24
    ec30:	9f 93       	push	r25
    ec32:	af 93       	push	r26
    ec34:	bf 93       	push	r27
    ec36:	ef 93       	push	r30
    ec38:	ff 93       	push	r31
	// Call external tick handler if present.
	if (RTC_TickHandler != NULL) {
    ec3a:	80 91 6f 18 	lds	r24, 0x186F
    ec3e:	90 91 70 18 	lds	r25, 0x1870
    ec42:	89 2b       	or	r24, r25
    ec44:	29 f0       	breq	.+10     	; 0xec50 <__vector_15+0x38>
		RTC_TickHandler();
    ec46:	e0 91 6f 18 	lds	r30, 0x186F
    ec4a:	f0 91 70 18 	lds	r31, 0x1870
    ec4e:	09 95       	icall
	}
	
	// Count ticks or wrap back to zero.
	if (RTC_ticks < (RTC_TICKS_PER_SECOND - 1)) {
    ec50:	80 91 6e 18 	lds	r24, 0x186E
    ec54:	8f 37       	cpi	r24, 0x7F	; 127
    ec56:	30 f4       	brcc	.+12     	; 0xec64 <__vector_15+0x4c>
		++RTC_ticks;
    ec58:	80 91 6e 18 	lds	r24, 0x186E
    ec5c:	8f 5f       	subi	r24, 0xFF	; 255
    ec5e:	80 93 6e 18 	sts	0x186E, r24
    ec62:	36 c0       	rjmp	.+108    	; 0xecd0 <__vector_15+0xb8>
	} else {
		RTC_ticks = 0;
    ec64:	10 92 6e 18 	sts	0x186E, r1
		
		// Count seconds or wrap back to zero.
		if (RTC_seconds < (RTC_SECONDS_PER_MINUTE - 1)) {
    ec68:	80 91 6d 18 	lds	r24, 0x186D
    ec6c:	8b 33       	cpi	r24, 0x3B	; 59
    ec6e:	30 f4       	brcc	.+12     	; 0xec7c <__vector_15+0x64>
			++RTC_seconds;
    ec70:	80 91 6d 18 	lds	r24, 0x186D
    ec74:	8f 5f       	subi	r24, 0xFF	; 255
    ec76:	80 93 6d 18 	sts	0x186D, r24
    ec7a:	2a c0       	rjmp	.+84     	; 0xecd0 <__vector_15+0xb8>
		} else {
			RTC_seconds = 0;
    ec7c:	10 92 6d 18 	sts	0x186D, r1
			
			// Count minutes or wrap back to zero.
			if (RTC_minutes < (RTC_MINUTES_PER_HOUR - 1)) {
    ec80:	80 91 6c 18 	lds	r24, 0x186C
    ec84:	8b 33       	cpi	r24, 0x3B	; 59
    ec86:	30 f4       	brcc	.+12     	; 0xec94 <__vector_15+0x7c>
				++RTC_minutes;
    ec88:	80 91 6c 18 	lds	r24, 0x186C
    ec8c:	8f 5f       	subi	r24, 0xFF	; 255
    ec8e:	80 93 6c 18 	sts	0x186C, r24
    ec92:	1e c0       	rjmp	.+60     	; 0xecd0 <__vector_15+0xb8>
			} else {
				RTC_minutes = 0;
    ec94:	10 92 6c 18 	sts	0x186C, r1
				
				// Count hours or wrap back to zero.
				if (RTC_hours < (RTC_HOURS_PER_DAY - 1)) {
    ec98:	80 91 6b 18 	lds	r24, 0x186B
    ec9c:	87 31       	cpi	r24, 0x17	; 23
    ec9e:	30 f4       	brcc	.+12     	; 0xecac <__vector_15+0x94>
					++RTC_hours;
    eca0:	80 91 6b 18 	lds	r24, 0x186B
    eca4:	8f 5f       	subi	r24, 0xFF	; 255
    eca6:	80 93 6b 18 	sts	0x186B, r24
    ecaa:	12 c0       	rjmp	.+36     	; 0xecd0 <__vector_15+0xb8>
				} else {
					RTC_hours = 0;
    ecac:	10 92 6b 18 	sts	0x186B, r1
	
					// Count days and overflow when RTC_day_t datatype overflows.
					++RTC_days;
    ecb0:	80 91 6a 18 	lds	r24, 0x186A
    ecb4:	8f 5f       	subi	r24, 0xFF	; 255
    ecb6:	80 93 6a 18 	sts	0x186A, r24
					
					// Call external day handler if present.
					if (RTC_DayHandler != NULL) {
    ecba:	80 91 71 18 	lds	r24, 0x1871
    ecbe:	90 91 72 18 	lds	r25, 0x1872
    ecc2:	89 2b       	or	r24, r25
    ecc4:	29 f0       	breq	.+10     	; 0xecd0 <__vector_15+0xb8>
						RTC_DayHandler();
    ecc6:	e0 91 71 18 	lds	r30, 0x1871
    ecca:	f0 91 72 18 	lds	r31, 0x1872
    ecce:	09 95       	icall
    ecd0:	ff 91       	pop	r31
    ecd2:	ef 91       	pop	r30
    ecd4:	bf 91       	pop	r27
    ecd6:	af 91       	pop	r26
    ecd8:	9f 91       	pop	r25
    ecda:	8f 91       	pop	r24
    ecdc:	7f 91       	pop	r23
    ecde:	6f 91       	pop	r22
    ece0:	5f 91       	pop	r21
    ece2:	4f 91       	pop	r20
    ece4:	3f 91       	pop	r19
    ece6:	2f 91       	pop	r18
    ece8:	0f 90       	pop	r0
    ecea:	0f be       	out	0x3f, r0	; 63
    ecec:	0f 90       	pop	r0
    ecee:	1f 90       	pop	r1
    ecf0:	18 95       	reti

0000ecf2 <RTC_Init>:
 *  This function must be called before doing anything with the library.
 */
void RTC_Init( void )
{
	// Reset handler and time values.
	RTC_TickHandler = NULL;
    ecf2:	10 92 70 18 	sts	0x1870, r1
    ecf6:	10 92 6f 18 	sts	0x186F, r1
	RTC_DayHandler = NULL;
    ecfa:	10 92 72 18 	sts	0x1872, r1
    ecfe:	10 92 71 18 	sts	0x1871, r1
	RTC_ticks = 0;
    ed02:	10 92 6e 18 	sts	0x186E, r1
	RTC_seconds = 0;
    ed06:	10 92 6d 18 	sts	0x186D, r1
	RTC_minutes = 0;
    ed0a:	10 92 6c 18 	sts	0x186C, r1
	RTC_hours = 0;
    ed0e:	10 92 6b 18 	sts	0x186B, r1
	RTC_days = 0;
    ed12:	10 92 6a 18 	sts	0x186A, r1
	
	// Setup asynchronous oscillator.
	PRR0 &= ~(1 << PRTIM2); // Turn on Timer/Counter 2 module.
    ed16:	80 91 64 00 	lds	r24, 0x0064
    ed1a:	8f 7b       	andi	r24, 0xBF	; 191
    ed1c:	80 93 64 00 	sts	0x0064, r24
	TIMSK2 = 0x00; // Disable Timer/Counter 2 interrupts.
    ed20:	10 92 70 00 	sts	0x0070, r1
	ASSR = (1 << AS2); // Switch to asynchronous clock source.
    ed24:	80 e2       	ldi	r24, 0x20	; 32
    ed26:	80 93 b6 00 	sts	0x00B6, r24

	TCCR2A = (0 << WGM21) | (0 << WGM20); // Normal counter mode.
    ed2a:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = (0 << WGM22) | (0 << CS22) | (0 << CS21) | (1 << CS20); // No prescaling.
    ed2e:	81 e0       	ldi	r24, 0x01	; 1
    ed30:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2 = 0; // Make sure we start from zero.
    ed34:	10 92 b2 00 	sts	0x00B2, r1

	do {} while ((ASSR & ((1 << TCN2UB)  | // Wait for asynchronous clock domain
    ed38:	80 91 b6 00 	lds	r24, 0x00B6
    ed3c:	99 27       	eor	r25, r25
    ed3e:	8f 71       	andi	r24, 0x1F	; 31
    ed40:	90 70       	andi	r25, 0x00	; 0
    ed42:	89 2b       	or	r24, r25
    ed44:	c9 f7       	brne	.-14     	; 0xed38 <RTC_Init+0x46>
	                      (1 << OCR2AUB) | // to stabilize and synchronize.
	                      (1 << OCR2BUB) |
	                      (1 << TCR2AUB) |
	                      (1 << TCR2BUB))) != 0x00);

	TIFR2 = (1 << TOV2); // Clear any pending Overflow interrupts.
    ed46:	81 e0       	ldi	r24, 0x01	; 1
    ed48:	87 bb       	out	0x17, r24	; 23
	TIMSK2 = (1 << TOIE2); // Enable Overflow interrupts.
    ed4a:	80 93 70 00 	sts	0x0070, r24
    ed4e:	08 95       	ret

0000ed50 <RTC_SetTickHandler>:
 * \param  TickHandler  Callback function to call on every tick
 */
void RTC_SetTickHandler( RTC_TickHandler_t TickHandler )
{
	// Make sure we operate without being disturbed by interrupts.
	uint8_t const savedSREG = SREG;
    ed50:	2f b7       	in	r18, 0x3f	; 63
	CAL_disable_interrupt();
    ed52:	f8 94       	cli
	
	// Set handler and notify driver that it's there.
	RTC_TickHandler = TickHandler;
    ed54:	90 93 70 18 	sts	0x1870, r25
    ed58:	80 93 6f 18 	sts	0x186F, r24
	
	// Restore interrupt state (and rest of status flags, which don't care).	
	SREG = savedSREG;
    ed5c:	2f bf       	out	0x3f, r18	; 63
    ed5e:	08 95       	ret

0000ed60 <TIMING_Init>:
 *  even before any calls to TIMING_TickHandler.
 */
void TIMING_Init( void )
{
	// Initialize necessary state variables.
	TIMING_queueSize = 0;
    ed60:	10 92 74 18 	sts	0x1874, r1
    ed64:	10 92 73 18 	sts	0x1873, r1
	TIMING_currentTime = 0;
    ed68:	10 92 77 18 	sts	0x1877, r1
    ed6c:	10 92 78 18 	sts	0x1878, r1
    ed70:	10 92 79 18 	sts	0x1879, r1
    ed74:	10 92 7a 18 	sts	0x187A, r1
    ed78:	08 95       	ret

0000ed7a <TIMING_AddEvent>:
 * This function adds an event into the timing queue.
 *
 * \param  event  Pointer to initialized event.
 */
static void TIMING_AddEvent( TIMING_event_t * event )
{
    ed7a:	6f 92       	push	r6
    ed7c:	7f 92       	push	r7
    ed7e:	9f 92       	push	r9
    ed80:	af 92       	push	r10
    ed82:	bf 92       	push	r11
    ed84:	cf 92       	push	r12
    ed86:	df 92       	push	r13
    ed88:	ef 92       	push	r14
    ed8a:	ff 92       	push	r15
    ed8c:	0f 93       	push	r16
    ed8e:	1f 93       	push	r17
    ed90:	cf 93       	push	r28
    ed92:	df 93       	push	r29
    ed94:	3c 01       	movw	r6, r24
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    ed96:	9f b6       	in	r9, 0x3f	; 63
	CAL_disable_interrupt();
    ed98:	f8 94       	cli
	
	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    ed9a:	60 91 73 18 	lds	r22, 0x1873
    ed9e:	70 91 74 18 	lds	r23, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    eda2:	e0 91 75 18 	lds	r30, 0x1875
    eda6:	f0 91 76 18 	lds	r31, 0x1876
    edaa:	5f 01       	movw	r10, r30
	TIMING_event_t * lastEvent = 0;
    edac:	cc 24       	eor	r12, r12
    edae:	dd 24       	eor	r13, r13
	// If event timestamp is less than or equal to current timestamp, it means
	// that the time variable needs to wrap to zero before this event will trigger.
	// Therefore we need to iterate through the queue until we find the first
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
    edb0:	dc 01       	movw	r26, r24
    edb2:	ed 90       	ld	r14, X+
    edb4:	fd 90       	ld	r15, X+
    edb6:	0d 91       	ld	r16, X+
    edb8:	1c 91       	ld	r17, X
    edba:	80 91 77 18 	lds	r24, 0x1877
    edbe:	90 91 78 18 	lds	r25, 0x1878
    edc2:	a0 91 79 18 	lds	r26, 0x1879
    edc6:	b0 91 7a 18 	lds	r27, 0x187A
    edca:	8e 15       	cp	r24, r14
    edcc:	9f 05       	cpc	r25, r15
    edce:	a0 07       	cpc	r26, r16
    edd0:	b1 07       	cpc	r27, r17
    edd2:	58 f1       	brcs	.+86     	; 0xee2a <TIMING_AddEvent+0xb0>
    edd4:	09 c0       	rjmp	.+18     	; 0xede8 <TIMING_AddEvent+0x6e>
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;
    edd6:	61 15       	cp	r22, r1
    edd8:	71 05       	cpc	r23, r1
    edda:	39 f1       	breq	.+78     	; 0xee2a <TIMING_AddEvent+0xb0>
	// event that also has trigger time less than the current timestamp, and
	// then start to compare.
	if (event->triggerTime <= TIMING_currentTime) {
		///mt 20080301 while ((eventsLeft > 0) && (currentEvent->triggerTime >= TIMING_currentTime)) {
		while ((currentEvent->triggerTime >= TIMING_currentTime) && (eventsLeft > 0)) {
			lastEvent = currentEvent;
    eddc:	6f 01       	movw	r12, r30
			currentEvent = currentEvent->next;
    edde:	05 84       	ldd	r0, Z+13	; 0x0d
    ede0:	f6 85       	ldd	r31, Z+14	; 0x0e
    ede2:	e0 2d       	mov	r30, r0
			--eventsLeft;
    ede4:	61 50       	subi	r22, 0x01	; 1
    ede6:	70 40       	sbci	r23, 0x00	; 0
    ede8:	20 81       	ld	r18, Z
    edea:	31 81       	ldd	r19, Z+1	; 0x01
    edec:	42 81       	ldd	r20, Z+2	; 0x02
    edee:	53 81       	ldd	r21, Z+3	; 0x03
    edf0:	80 91 77 18 	lds	r24, 0x1877
    edf4:	90 91 78 18 	lds	r25, 0x1878
    edf8:	a0 91 79 18 	lds	r26, 0x1879
    edfc:	b0 91 7a 18 	lds	r27, 0x187A
    ee00:	28 17       	cp	r18, r24
    ee02:	39 07       	cpc	r19, r25
    ee04:	4a 07       	cpc	r20, r26
    ee06:	5b 07       	cpc	r21, r27
    ee08:	30 f7       	brcc	.-52     	; 0xedd6 <TIMING_AddEvent+0x5c>
    ee0a:	0f c0       	rjmp	.+30     	; 0xee2a <TIMING_AddEvent+0xb0>
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
		currentEvent = currentEvent->next;
		--eventsLeft;
    ee0c:	80 81       	ld	r24, Z
    ee0e:	91 81       	ldd	r25, Z+1	; 0x01
    ee10:	a2 81       	ldd	r26, Z+2	; 0x02
    ee12:	b3 81       	ldd	r27, Z+3	; 0x03
    ee14:	8e 15       	cp	r24, r14
    ee16:	9f 05       	cpc	r25, r15
    ee18:	a0 07       	cpc	r26, r16
    ee1a:	b1 07       	cpc	r27, r17
    ee1c:	48 f4       	brcc	.+18     	; 0xee30 <TIMING_AddEvent+0xb6>
	}
	
	// Now, find the first event that has trigger time equal or larger than the
	// one we are about to add to the queue.
	while ((eventsLeft > 0) && (currentEvent->triggerTime < event->triggerTime)) {
		lastEvent = currentEvent;
    ee1e:	6f 01       	movw	r12, r30
		currentEvent = currentEvent->next;
    ee20:	05 84       	ldd	r0, Z+13	; 0x0d
    ee22:	f6 85       	ldd	r31, Z+14	; 0x0e
    ee24:	e0 2d       	mov	r30, r0
		--eventsLeft;
    ee26:	61 50       	subi	r22, 0x01	; 1
    ee28:	70 40       	sbci	r23, 0x00	; 0
    ee2a:	61 15       	cp	r22, r1
    ee2c:	71 05       	cpc	r23, r1
    ee2e:	71 f7       	brne	.-36     	; 0xee0c <TIMING_AddEvent+0x92>
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to insert our event at the head of the queue and correct the
	// TIMING_nextEventTime variable. If not, we insert in between
	// two other events.
	if (eventsLeft == TIMING_queueSize) {
    ee30:	80 91 73 18 	lds	r24, 0x1873
    ee34:	90 91 74 18 	lds	r25, 0x1874
    ee38:	68 17       	cp	r22, r24
    ee3a:	79 07       	cpc	r23, r25
    ee3c:	a1 f4       	brne	.+40     	; 0xee66 <TIMING_AddEvent+0xec>
		event->next = TIMING_firstEvent;
    ee3e:	e3 01       	movw	r28, r6
    ee40:	be 86       	std	Y+14, r11	; 0x0e
    ee42:	ad 86       	std	Y+13, r10	; 0x0d
		TIMING_firstEvent = event;
    ee44:	70 92 76 18 	sts	0x1876, r7
    ee48:	60 92 75 18 	sts	0x1875, r6
		TIMING_nextEventTime = event->triggerTime;
    ee4c:	88 81       	ld	r24, Y
    ee4e:	99 81       	ldd	r25, Y+1	; 0x01
    ee50:	aa 81       	ldd	r26, Y+2	; 0x02
    ee52:	bb 81       	ldd	r27, Y+3	; 0x03
    ee54:	80 93 7b 18 	sts	0x187B, r24
    ee58:	90 93 7c 18 	sts	0x187C, r25
    ee5c:	a0 93 7d 18 	sts	0x187D, r26
    ee60:	b0 93 7e 18 	sts	0x187E, r27
    ee64:	06 c0       	rjmp	.+12     	; 0xee72 <TIMING_AddEvent+0xf8>
	} else {
		event->next = currentEvent;
    ee66:	e3 01       	movw	r28, r6
    ee68:	fe 87       	std	Y+14, r31	; 0x0e
    ee6a:	ed 87       	std	Y+13, r30	; 0x0d
		lastEvent->next = event;
    ee6c:	f6 01       	movw	r30, r12
    ee6e:	76 86       	std	Z+14, r7	; 0x0e
    ee70:	65 86       	std	Z+13, r6	; 0x0d
	}
	++TIMING_queueSize;
    ee72:	80 91 73 18 	lds	r24, 0x1873
    ee76:	90 91 74 18 	lds	r25, 0x1874
    ee7a:	01 96       	adiw	r24, 0x01	; 1
    ee7c:	90 93 74 18 	sts	0x1874, r25
    ee80:	80 93 73 18 	sts	0x1873, r24
		
	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    ee84:	9f be       	out	0x3f, r9	; 63
    ee86:	df 91       	pop	r29
    ee88:	cf 91       	pop	r28
    ee8a:	1f 91       	pop	r17
    ee8c:	0f 91       	pop	r16
    ee8e:	ff 90       	pop	r15
    ee90:	ef 90       	pop	r14
    ee92:	df 90       	pop	r13
    ee94:	cf 90       	pop	r12
    ee96:	bf 90       	pop	r11
    ee98:	af 90       	pop	r10
    ee9a:	9f 90       	pop	r9
    ee9c:	7f 90       	pop	r7
    ee9e:	6f 90       	pop	r6
    eea0:	08 95       	ret

0000eea2 <TIMING_TickHandler>:
 *
 *  The state of the interrupt flag is restore to its original state when
 *  this function exits.
 */
void TIMING_TickHandler( void )
{
    eea2:	0f 93       	push	r16
    eea4:	1f 93       	push	r17
    eea6:	cf 93       	push	r28
    eea8:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    eeaa:	1f b7       	in	r17, 0x3f	; 63
	CAL_disable_interrupt();
    eeac:	f8 94       	cli

	// Time is increment in any case.
	++TIMING_currentTime;
    eeae:	80 91 77 18 	lds	r24, 0x1877
    eeb2:	90 91 78 18 	lds	r25, 0x1878
    eeb6:	a0 91 79 18 	lds	r26, 0x1879
    eeba:	b0 91 7a 18 	lds	r27, 0x187A
    eebe:	01 96       	adiw	r24, 0x01	; 1
    eec0:	a1 1d       	adc	r26, r1
    eec2:	b1 1d       	adc	r27, r1
    eec4:	80 93 77 18 	sts	0x1877, r24
    eec8:	90 93 78 18 	sts	0x1878, r25
    eecc:	a0 93 79 18 	sts	0x1879, r26
    eed0:	b0 93 7a 18 	sts	0x187A, r27
	
	// Something to do only if there are events in the queue and timestamps match.
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
    eed4:	01 e0       	ldi	r16, 0x01	; 1
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
				event->triggerTime += event->period;
				TIMING_AddEvent( event );
    eed6:	80 91 73 18 	lds	r24, 0x1873
    eeda:	90 91 74 18 	lds	r25, 0x1874
    eede:	89 2b       	or	r24, r25
    eee0:	09 f4       	brne	.+2      	; 0xeee4 <TIMING_TickHandler+0x42>
    eee2:	70 c0       	rjmp	.+224    	; 0xefc4 <TIMING_TickHandler+0x122>
	///kmr while ((TIMING_queueSize > 0) && (TIMING_currentTime == TIMING_nextEventTime)) {
	///kmr Rework while() statement to explictly set order of volatile variable access
	// mt further rework to avoid "break"
	uint8_t goon = 1;
	while ( ( TIMING_queueSize > 0 ) && goon ) {
		TIMING_time_t next_event = TIMING_nextEventTime;
    eee4:	20 91 7b 18 	lds	r18, 0x187B
    eee8:	30 91 7c 18 	lds	r19, 0x187C
    eeec:	40 91 7d 18 	lds	r20, 0x187D
    eef0:	50 91 7e 18 	lds	r21, 0x187E
		if (TIMING_currentTime != next_event) {
    eef4:	80 91 77 18 	lds	r24, 0x1877
    eef8:	90 91 78 18 	lds	r25, 0x1878
    eefc:	a0 91 79 18 	lds	r26, 0x1879
    ef00:	b0 91 7a 18 	lds	r27, 0x187A
    ef04:	82 17       	cp	r24, r18
    ef06:	93 07       	cpc	r25, r19
    ef08:	a4 07       	cpc	r26, r20
    ef0a:	b5 07       	cpc	r27, r21
    ef0c:	11 f0       	breq	.+4      	; 0xef12 <TIMING_TickHandler+0x70>
			goon = 0;
    ef0e:	00 e0       	ldi	r16, 0x00	; 0
    ef10:	50 c0       	rjmp	.+160    	; 0xefb2 <TIMING_TickHandler+0x110>
		}
		else {
			// Remove first event from queue and update TIMING_nextEventTime if necessary.
			TIMING_event_t * event = TIMING_firstEvent;
    ef12:	c0 91 75 18 	lds	r28, 0x1875
    ef16:	d0 91 76 18 	lds	r29, 0x1876
			TIMING_firstEvent = event->next;
    ef1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    ef1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    ef1e:	f0 93 76 18 	sts	0x1876, r31
    ef22:	e0 93 75 18 	sts	0x1875, r30
			--TIMING_queueSize;
    ef26:	80 91 73 18 	lds	r24, 0x1873
    ef2a:	90 91 74 18 	lds	r25, 0x1874
    ef2e:	01 97       	sbiw	r24, 0x01	; 1
    ef30:	90 93 74 18 	sts	0x1874, r25
    ef34:	80 93 73 18 	sts	0x1873, r24
			if (TIMING_queueSize > 0) {
    ef38:	80 91 73 18 	lds	r24, 0x1873
    ef3c:	90 91 74 18 	lds	r25, 0x1874
    ef40:	89 2b       	or	r24, r25
    ef42:	61 f0       	breq	.+24     	; 0xef5c <TIMING_TickHandler+0xba>
				TIMING_nextEventTime = TIMING_firstEvent->triggerTime;
    ef44:	80 81       	ld	r24, Z
    ef46:	91 81       	ldd	r25, Z+1	; 0x01
    ef48:	a2 81       	ldd	r26, Z+2	; 0x02
    ef4a:	b3 81       	ldd	r27, Z+3	; 0x03
    ef4c:	80 93 7b 18 	sts	0x187B, r24
    ef50:	90 93 7c 18 	sts	0x187C, r25
    ef54:	a0 93 7d 18 	sts	0x187D, r26
    ef58:	b0 93 7e 18 	sts	0x187E, r27
 *
 * \param  event  Pointer to event.
 */
static void TIMING_DoEvent( TIMING_event_t const * event )
{
	switch (event->type) {
    ef5c:	89 85       	ldd	r24, Y+9	; 0x09
    ef5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    ef60:	00 97       	sbiw	r24, 0x00	; 0
    ef62:	19 f0       	breq	.+6      	; 0xef6a <TIMING_TickHandler+0xc8>
    ef64:	01 97       	sbiw	r24, 0x01	; 1
    ef66:	39 f0       	breq	.+14     	; 0xef76 <TIMING_TickHandler+0xd4>
    ef68:	09 c0       	rjmp	.+18     	; 0xef7c <TIMING_TickHandler+0xda>
		case TIMING_COUNTER_EVENT :
			++(*(event->counterPtr)); // Increment variable pointed to by counterPtr.
    ef6a:	eb 85       	ldd	r30, Y+11	; 0x0b
    ef6c:	fc 85       	ldd	r31, Y+12	; 0x0c
    ef6e:	80 81       	ld	r24, Z
    ef70:	8f 5f       	subi	r24, 0xFF	; 255
    ef72:	80 83       	st	Z, r24
		break;
    ef74:	03 c0       	rjmp	.+6      	; 0xef7c <TIMING_TickHandler+0xda>

		case TIMING_CALLBACK_EVENT :
			event->Callback();  // Call callback function.
    ef76:	eb 85       	ldd	r30, Y+11	; 0x0b
    ef78:	fc 85       	ldd	r31, Y+12	; 0x0c
    ef7a:	09 95       	icall
		
			// Perform operation depending on event type.
			TIMING_DoEvent( event );
		
			// Decrement event repeat count if not TIMING_INFINITE_REPEAT.
			if (event->repeatCount != TIMING_INFINITE_REPEAT) {
    ef7c:	88 85       	ldd	r24, Y+8	; 0x08
    ef7e:	8f 3f       	cpi	r24, 0xFF	; 255
    ef80:	11 f0       	breq	.+4      	; 0xef86 <TIMING_TickHandler+0xe4>
				--(event->repeatCount);
    ef82:	81 50       	subi	r24, 0x01	; 1
    ef84:	88 87       	std	Y+8, r24	; 0x08
			}
		
			// Re-insert event if there are repetitions left.
			if (event->repeatCount > 0) {
    ef86:	88 85       	ldd	r24, Y+8	; 0x08
    ef88:	88 23       	and	r24, r24
    ef8a:	99 f0       	breq	.+38     	; 0xefb2 <TIMING_TickHandler+0x110>
				event->triggerTime += event->period;
    ef8c:	88 81       	ld	r24, Y
    ef8e:	99 81       	ldd	r25, Y+1	; 0x01
    ef90:	aa 81       	ldd	r26, Y+2	; 0x02
    ef92:	bb 81       	ldd	r27, Y+3	; 0x03
    ef94:	2c 81       	ldd	r18, Y+4	; 0x04
    ef96:	3d 81       	ldd	r19, Y+5	; 0x05
    ef98:	4e 81       	ldd	r20, Y+6	; 0x06
    ef9a:	5f 81       	ldd	r21, Y+7	; 0x07
    ef9c:	82 0f       	add	r24, r18
    ef9e:	93 1f       	adc	r25, r19
    efa0:	a4 1f       	adc	r26, r20
    efa2:	b5 1f       	adc	r27, r21
    efa4:	88 83       	st	Y, r24
    efa6:	99 83       	std	Y+1, r25	; 0x01
    efa8:	aa 83       	std	Y+2, r26	; 0x02
    efaa:	bb 83       	std	Y+3, r27	; 0x03
				TIMING_AddEvent( event );
    efac:	ce 01       	movw	r24, r28
    efae:	0e 94 bd 76 	call	0xed7a	; 0xed7a <TIMING_AddEvent>
    efb2:	80 91 73 18 	lds	r24, 0x1873
    efb6:	90 91 74 18 	lds	r25, 0x1874
    efba:	89 2b       	or	r24, r25
    efbc:	19 f0       	breq	.+6      	; 0xefc4 <TIMING_TickHandler+0x122>
    efbe:	00 23       	and	r16, r16
    efc0:	09 f0       	breq	.+2      	; 0xefc4 <TIMING_TickHandler+0x122>
    efc2:	90 cf       	rjmp	.-224    	; 0xeee4 <TIMING_TickHandler+0x42>
			}
		}
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    efc4:	1f bf       	out	0x3f, r17	; 63
    efc6:	df 91       	pop	r29
    efc8:	cf 91       	pop	r28
    efca:	1f 91       	pop	r17
    efcc:	0f 91       	pop	r16
    efce:	08 95       	ret

0000efd0 <TIMING_RemoveEvent>:
 *  leaves the queue untouched.
 *
 *  \param  event  Pointer to event control block to remove.
 */
void TIMING_RemoveEvent( TIMING_event_t const * event )
{
    efd0:	cf 93       	push	r28
    efd2:	df 93       	push	r29
	// Wait need to operate on the queue undisturbed.
	uint8_t const savedSREG = SREG;
    efd4:	6f b7       	in	r22, 0x3f	; 63
	CAL_disable_interrupt();
    efd6:	f8 94       	cli

	// Set up event queue iteration variables.
	TIMING_queueSize_t eventsLeft = TIMING_queueSize;
    efd8:	40 91 73 18 	lds	r20, 0x1873
    efdc:	50 91 74 18 	lds	r21, 0x1874
	TIMING_event_t * currentEvent = TIMING_firstEvent;
    efe0:	e0 91 75 18 	lds	r30, 0x1875
    efe4:	f0 91 76 18 	lds	r31, 0x1876
	TIMING_event_t * lastEvent = 0;
    efe8:	a0 e0       	ldi	r26, 0x00	; 0
    efea:	b0 e0       	ldi	r27, 0x00	; 0
	bool eventFound = false;
    efec:	20 e0       	ldi	r18, 0x00	; 0
		if (currentEvent == event) {
			eventFound = true;
		} else {
			lastEvent = currentEvent;
			currentEvent = currentEvent->next;
			--eventsLeft;		
    efee:	41 15       	cp	r20, r1
    eff0:	51 05       	cpc	r21, r1
    eff2:	81 f0       	breq	.+32     	; 0xf014 <TIMING_RemoveEvent+0x44>
	TIMING_event_t * lastEvent = 0;
	bool eventFound = false;
	
	// Search for matching event pointer.
	while ((eventsLeft > 0) && (eventFound == false)) {
		if (currentEvent == event) {
    eff4:	e8 17       	cp	r30, r24
    eff6:	f9 07       	cpc	r31, r25
    eff8:	11 f4       	brne	.+4      	; 0xeffe <TIMING_RemoveEvent+0x2e>
			eventFound = true;
    effa:	21 e0       	ldi	r18, 0x01	; 1
    effc:	06 c0       	rjmp	.+12     	; 0xf00a <TIMING_RemoveEvent+0x3a>
		} else {
			lastEvent = currentEvent;
    effe:	df 01       	movw	r26, r30
			currentEvent = currentEvent->next;
    f000:	05 84       	ldd	r0, Z+13	; 0x0d
    f002:	f6 85       	ldd	r31, Z+14	; 0x0e
    f004:	e0 2d       	mov	r30, r0
			--eventsLeft;		
    f006:	41 50       	subi	r20, 0x01	; 1
    f008:	50 40       	sbci	r21, 0x00	; 0
    f00a:	41 15       	cp	r20, r1
    f00c:	51 05       	cpc	r21, r1
    f00e:	11 f0       	breq	.+4      	; 0xf014 <TIMING_RemoveEvent+0x44>
    f010:	22 23       	and	r18, r18
    f012:	81 f3       	breq	.-32     	; 0xeff4 <TIMING_RemoveEvent+0x24>
	}
	
	// If eventsLeft is untouched, we haven't iterated in the queue, and we
	// need to remove the very first event in the queue. Otherwise, remove
	// from within the queue. If the event was found, that is.
	if (eventFound == true) {
    f014:	22 23       	and	r18, r18
    f016:	d1 f0       	breq	.+52     	; 0xf04c <TIMING_RemoveEvent+0x7c>
		if (eventsLeft == TIMING_queueSize) {
    f018:	80 91 73 18 	lds	r24, 0x1873
    f01c:	90 91 74 18 	lds	r25, 0x1874
    f020:	25 85       	ldd	r18, Z+13	; 0x0d
    f022:	36 85       	ldd	r19, Z+14	; 0x0e
    f024:	48 17       	cp	r20, r24
    f026:	59 07       	cpc	r21, r25
    f028:	29 f4       	brne	.+10     	; 0xf034 <TIMING_RemoveEvent+0x64>
			TIMING_firstEvent = currentEvent->next;
    f02a:	30 93 76 18 	sts	0x1876, r19
    f02e:	20 93 75 18 	sts	0x1875, r18
    f032:	03 c0       	rjmp	.+6      	; 0xf03a <TIMING_RemoveEvent+0x6a>
		} else {
			lastEvent->next = currentEvent->next;
    f034:	ed 01       	movw	r28, r26
    f036:	3e 87       	std	Y+14, r19	; 0x0e
    f038:	2d 87       	std	Y+13, r18	; 0x0d
		}
		--TIMING_queueSize;
    f03a:	80 91 73 18 	lds	r24, 0x1873
    f03e:	90 91 74 18 	lds	r25, 0x1874
    f042:	01 97       	sbiw	r24, 0x01	; 1
    f044:	90 93 74 18 	sts	0x1874, r25
    f048:	80 93 73 18 	sts	0x1873, r24
	}

	// Restore status register value, including Global Interrupt Flag.
	SREG = savedSREG;
    f04c:	6f bf       	out	0x3f, r22	; 63
    f04e:	df 91       	pop	r29
    f050:	cf 91       	pop	r28
    f052:	08 95       	ret

0000f054 <TIMING_AddRepCounterEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  counterPtr      Pointer to counter variable to increment when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCounterEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f054:	cf 92       	push	r12
    f056:	df 92       	push	r13
    f058:	ef 92       	push	r14
    f05a:	ff 92       	push	r15
    f05c:	0f 93       	push	r16
    f05e:	1f 93       	push	r17
    f060:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f062:	44 23       	and	r20, r20
    f064:	81 f0       	breq	.+32     	; 0xf086 <TIMING_AddRepCounterEventAt+0x32>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f066:	60 83       	st	Z, r22
    f068:	71 83       	std	Z+1, r23	; 0x01
    f06a:	82 83       	std	Z+2, r24	; 0x02
    f06c:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f06e:	04 83       	std	Z+4, r16	; 0x04
    f070:	15 83       	std	Z+5, r17	; 0x05
    f072:	26 83       	std	Z+6, r18	; 0x06
    f074:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f076:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_COUNTER_EVENT;
    f078:	12 86       	std	Z+10, r1	; 0x0a
    f07a:	11 86       	std	Z+9, r1	; 0x09
		event->counterPtr = counterPtr;
    f07c:	f4 86       	std	Z+12, r15	; 0x0c
    f07e:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f080:	c6 01       	movw	r24, r12
    f082:	0e 94 bd 76 	call	0xed7a	; 0xed7a <TIMING_AddEvent>
    f086:	1f 91       	pop	r17
    f088:	0f 91       	pop	r16
    f08a:	ff 90       	pop	r15
    f08c:	ef 90       	pop	r14
    f08e:	df 90       	pop	r13
    f090:	cf 90       	pop	r12
    f092:	08 95       	ret

0000f094 <TIMING_AddCounterEventAt>:
 *  \param  timestamp   Timestamp to trigger event.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAt( TIMING_time_t timestamp, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f094:	8f 92       	push	r8
    f096:	9f 92       	push	r9
    f098:	af 92       	push	r10
    f09a:	bf 92       	push	r11
    f09c:	cf 92       	push	r12
    f09e:	df 92       	push	r13
    f0a0:	ef 92       	push	r14
    f0a2:	ff 92       	push	r15
    f0a4:	0f 93       	push	r16
    f0a6:	1f 93       	push	r17
    f0a8:	4b 01       	movw	r8, r22
    f0aa:	5c 01       	movw	r10, r24
	TIMING_AddRepCounterEventAt( timestamp, 1, 0, counterPtr, event );
    f0ac:	69 01       	movw	r12, r18
    f0ae:	7a 01       	movw	r14, r20
    f0b0:	00 e0       	ldi	r16, 0x00	; 0
    f0b2:	10 e0       	ldi	r17, 0x00	; 0
    f0b4:	20 e0       	ldi	r18, 0x00	; 0
    f0b6:	30 e0       	ldi	r19, 0x00	; 0
    f0b8:	41 e0       	ldi	r20, 0x01	; 1
    f0ba:	c5 01       	movw	r24, r10
    f0bc:	b4 01       	movw	r22, r8
    f0be:	0e 94 2a 78 	call	0xf054	; 0xf054 <TIMING_AddRepCounterEventAt>
    f0c2:	1f 91       	pop	r17
    f0c4:	0f 91       	pop	r16
    f0c6:	ff 90       	pop	r15
    f0c8:	ef 90       	pop	r14
    f0ca:	df 90       	pop	r13
    f0cc:	cf 90       	pop	r12
    f0ce:	bf 90       	pop	r11
    f0d0:	af 90       	pop	r10
    f0d2:	9f 90       	pop	r9
    f0d4:	8f 90       	pop	r8
    f0d6:	08 95       	ret

0000f0d8 <TIMING_AddCounterEventAfter>:
 *  \param  delay       Delay in ticks until event triggers.
 *  \param  counterPtr  Pointer to counter variable to increment when event triggers.
 *  \param  event       Pointer to unintialized event control block.
 */
void TIMING_AddCounterEventAfter( TIMING_time_t delay, TIMING_counter_t volatile * counterPtr, TIMING_event_t * event )
{
    f0d8:	ef 92       	push	r14
    f0da:	ff 92       	push	r15
    f0dc:	0f 93       	push	r16
    f0de:	1f 93       	push	r17
    f0e0:	7b 01       	movw	r14, r22
    f0e2:	8c 01       	movw	r16, r24
	TIMING_AddCounterEventAt( TIMING_currentTime + delay, counterPtr, event );
    f0e4:	80 91 77 18 	lds	r24, 0x1877
    f0e8:	90 91 78 18 	lds	r25, 0x1878
    f0ec:	a0 91 79 18 	lds	r26, 0x1879
    f0f0:	b0 91 7a 18 	lds	r27, 0x187A
    f0f4:	8e 0d       	add	r24, r14
    f0f6:	9f 1d       	adc	r25, r15
    f0f8:	a0 1f       	adc	r26, r16
    f0fa:	b1 1f       	adc	r27, r17
    f0fc:	bc 01       	movw	r22, r24
    f0fe:	cd 01       	movw	r24, r26
    f100:	0e 94 4a 78 	call	0xf094	; 0xf094 <TIMING_AddCounterEventAt>
    f104:	1f 91       	pop	r17
    f106:	0f 91       	pop	r16
    f108:	ff 90       	pop	r15
    f10a:	ef 90       	pop	r14
    f10c:	08 95       	ret

0000f10e <TIMING_AddRepCallbackEventAt>:
 *  \param  period          Event period in number of ticks.
 *  \param  Callback        Pointer to function to be called when event triggers.
 *  \param  event           Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAt( TIMING_time_t firstTimestamp, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f10e:	cf 92       	push	r12
    f110:	df 92       	push	r13
    f112:	ef 92       	push	r14
    f114:	ff 92       	push	r15
    f116:	0f 93       	push	r16
    f118:	1f 93       	push	r17
    f11a:	f6 01       	movw	r30, r12
	// Repeat count 0 is interpreted "don't run"
	if (repeatCount > 0) {
    f11c:	44 23       	and	r20, r20
    f11e:	91 f0       	breq	.+36     	; 0xf144 <TIMING_AddRepCallbackEventAt+0x36>
		// Prepare event structure and add it to queue.
		event->triggerTime = firstTimestamp;
    f120:	60 83       	st	Z, r22
    f122:	71 83       	std	Z+1, r23	; 0x01
    f124:	82 83       	std	Z+2, r24	; 0x02
    f126:	93 83       	std	Z+3, r25	; 0x03
		event->period = period;
    f128:	04 83       	std	Z+4, r16	; 0x04
    f12a:	15 83       	std	Z+5, r17	; 0x05
    f12c:	26 83       	std	Z+6, r18	; 0x06
    f12e:	37 83       	std	Z+7, r19	; 0x07
		event->repeatCount = repeatCount;
    f130:	40 87       	std	Z+8, r20	; 0x08
		event->type = TIMING_CALLBACK_EVENT;
    f132:	81 e0       	ldi	r24, 0x01	; 1
    f134:	90 e0       	ldi	r25, 0x00	; 0
    f136:	92 87       	std	Z+10, r25	; 0x0a
    f138:	81 87       	std	Z+9, r24	; 0x09
		event->Callback = Callback;
    f13a:	f4 86       	std	Z+12, r15	; 0x0c
    f13c:	e3 86       	std	Z+11, r14	; 0x0b
		TIMING_AddEvent( event );
    f13e:	c6 01       	movw	r24, r12
    f140:	0e 94 bd 76 	call	0xed7a	; 0xed7a <TIMING_AddEvent>
    f144:	1f 91       	pop	r17
    f146:	0f 91       	pop	r16
    f148:	ff 90       	pop	r15
    f14a:	ef 90       	pop	r14
    f14c:	df 90       	pop	r13
    f14e:	cf 90       	pop	r12
    f150:	08 95       	ret

0000f152 <TIMING_AddCallbackEventAt>:
 *  \param  timestamp  Timestamp to trigger event.
 *  \param  Callback   Pointer to function to be called when event triggers.
 *  \param  event      Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAt( TIMING_time_t timestamp, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f152:	8f 92       	push	r8
    f154:	9f 92       	push	r9
    f156:	af 92       	push	r10
    f158:	bf 92       	push	r11
    f15a:	cf 92       	push	r12
    f15c:	df 92       	push	r13
    f15e:	ef 92       	push	r14
    f160:	ff 92       	push	r15
    f162:	0f 93       	push	r16
    f164:	1f 93       	push	r17
    f166:	4b 01       	movw	r8, r22
    f168:	5c 01       	movw	r10, r24
	TIMING_AddRepCallbackEventAt( timestamp, 1, 0, Callback, event );
    f16a:	69 01       	movw	r12, r18
    f16c:	7a 01       	movw	r14, r20
    f16e:	00 e0       	ldi	r16, 0x00	; 0
    f170:	10 e0       	ldi	r17, 0x00	; 0
    f172:	20 e0       	ldi	r18, 0x00	; 0
    f174:	30 e0       	ldi	r19, 0x00	; 0
    f176:	41 e0       	ldi	r20, 0x01	; 1
    f178:	c5 01       	movw	r24, r10
    f17a:	b4 01       	movw	r22, r8
    f17c:	0e 94 87 78 	call	0xf10e	; 0xf10e <TIMING_AddRepCallbackEventAt>
    f180:	1f 91       	pop	r17
    f182:	0f 91       	pop	r16
    f184:	ff 90       	pop	r15
    f186:	ef 90       	pop	r14
    f188:	df 90       	pop	r13
    f18a:	cf 90       	pop	r12
    f18c:	bf 90       	pop	r11
    f18e:	af 90       	pop	r10
    f190:	9f 90       	pop	r9
    f192:	8f 90       	pop	r8
    f194:	08 95       	ret

0000f196 <TIMING_AddCallbackEventAfter>:
 *  \param  delay     Delay in ticks until event triggers.
 *  \param  Callback  Pointer to function to be called when event triggers.
 *  \param  event     Pointer to unintialized event control block.
 */
void TIMING_AddCallbackEventAfter( TIMING_time_t delay, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f196:	ef 92       	push	r14
    f198:	ff 92       	push	r15
    f19a:	0f 93       	push	r16
    f19c:	1f 93       	push	r17
    f19e:	7b 01       	movw	r14, r22
    f1a0:	8c 01       	movw	r16, r24
	TIMING_AddCallbackEventAt( TIMING_currentTime + delay, Callback, event );
    f1a2:	80 91 77 18 	lds	r24, 0x1877
    f1a6:	90 91 78 18 	lds	r25, 0x1878
    f1aa:	a0 91 79 18 	lds	r26, 0x1879
    f1ae:	b0 91 7a 18 	lds	r27, 0x187A
    f1b2:	8e 0d       	add	r24, r14
    f1b4:	9f 1d       	adc	r25, r15
    f1b6:	a0 1f       	adc	r26, r16
    f1b8:	b1 1f       	adc	r27, r17
    f1ba:	bc 01       	movw	r22, r24
    f1bc:	cd 01       	movw	r24, r26
    f1be:	0e 94 a9 78 	call	0xf152	; 0xf152 <TIMING_AddCallbackEventAt>
    f1c2:	1f 91       	pop	r17
    f1c4:	0f 91       	pop	r16
    f1c6:	ff 90       	pop	r15
    f1c8:	ef 90       	pop	r14
    f1ca:	08 95       	ret

0000f1cc <TIMING_AddRepCallbackEventAfter>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEventAfter( TIMING_time_t firstDelay, TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f1cc:	7f 92       	push	r7
    f1ce:	8f 92       	push	r8
    f1d0:	9f 92       	push	r9
    f1d2:	af 92       	push	r10
    f1d4:	bf 92       	push	r11
    f1d6:	cf 92       	push	r12
    f1d8:	df 92       	push	r13
    f1da:	ef 92       	push	r14
    f1dc:	ff 92       	push	r15
    f1de:	0f 93       	push	r16
    f1e0:	1f 93       	push	r17
    f1e2:	4b 01       	movw	r8, r22
    f1e4:	5c 01       	movw	r10, r24
    f1e6:	74 2e       	mov	r7, r20
    f1e8:	b9 01       	movw	r22, r18
    f1ea:	a8 01       	movw	r20, r16
	TIMING_AddRepCallbackEventAt( TIMING_currentTime + firstDelay, repeatCount, period, Callback, event );
    f1ec:	80 91 77 18 	lds	r24, 0x1877
    f1f0:	90 91 78 18 	lds	r25, 0x1878
    f1f4:	a0 91 79 18 	lds	r26, 0x1879
    f1f8:	b0 91 7a 18 	lds	r27, 0x187A
    f1fc:	88 0d       	add	r24, r8
    f1fe:	99 1d       	adc	r25, r9
    f200:	aa 1d       	adc	r26, r10
    f202:	bb 1d       	adc	r27, r11
    f204:	8a 01       	movw	r16, r20
    f206:	9b 01       	movw	r18, r22
    f208:	47 2d       	mov	r20, r7
    f20a:	bc 01       	movw	r22, r24
    f20c:	cd 01       	movw	r24, r26
    f20e:	0e 94 87 78 	call	0xf10e	; 0xf10e <TIMING_AddRepCallbackEventAt>
    f212:	1f 91       	pop	r17
    f214:	0f 91       	pop	r16
    f216:	ff 90       	pop	r15
    f218:	ef 90       	pop	r14
    f21a:	df 90       	pop	r13
    f21c:	cf 90       	pop	r12
    f21e:	bf 90       	pop	r11
    f220:	af 90       	pop	r10
    f222:	9f 90       	pop	r9
    f224:	8f 90       	pop	r8
    f226:	7f 90       	pop	r7
    f228:	08 95       	ret

0000f22a <TIMING_AddRepCallbackEvent>:
 *  \param  period       Event period in number of ticks.
 *  \param  Callback     Pointer to function to be called when event triggers.
 *  \param  event        Pointer to unintialized event control block.
 */
void TIMING_AddRepCallbackEvent( TIMING_repeatCount_t repeatCount, TIMING_time_t period, TIMING_Callback_t Callback, TIMING_event_t * event )
{
    f22a:	8f 92       	push	r8
    f22c:	9f 92       	push	r9
    f22e:	af 92       	push	r10
    f230:	bf 92       	push	r11
    f232:	cf 92       	push	r12
    f234:	df 92       	push	r13
    f236:	ef 92       	push	r14
    f238:	ff 92       	push	r15
    f23a:	0f 93       	push	r16
    f23c:	1f 93       	push	r17
    f23e:	e8 2f       	mov	r30, r24
    f240:	4a 01       	movw	r8, r20
    f242:	5b 01       	movw	r10, r22
	TIMING_AddRepCallbackEventAfter( period, repeatCount, period, Callback, event );
    f244:	68 01       	movw	r12, r16
    f246:	79 01       	movw	r14, r18
    f248:	8a 01       	movw	r16, r20
    f24a:	9b 01       	movw	r18, r22
    f24c:	4e 2f       	mov	r20, r30
    f24e:	c5 01       	movw	r24, r10
    f250:	b4 01       	movw	r22, r8
    f252:	0e 94 e6 78 	call	0xf1cc	; 0xf1cc <TIMING_AddRepCallbackEventAfter>
    f256:	1f 91       	pop	r17
    f258:	0f 91       	pop	r16
    f25a:	ff 90       	pop	r15
    f25c:	ef 90       	pop	r14
    f25e:	df 90       	pop	r13
    f260:	cf 90       	pop	r12
    f262:	bf 90       	pop	r11
    f264:	af 90       	pop	r10
    f266:	9f 90       	pop	r9
    f268:	8f 90       	pop	r8
    f26a:	08 95       	ret

0000f26c <TERMFONT_DisplayChar>:
 * \param  character  Character to print
 * \param  page  On which page to print the character
 * \param  column  On which column to start print the character
 */
void TERMFONT_DisplayChar(char character, uint8_t page, uint8_t column)
{
    f26c:	ef 92       	push	r14
    f26e:	ff 92       	push	r15
    f270:	0f 93       	push	r16
    f272:	1f 93       	push	r17
    f274:	cf 93       	push	r28
    f276:	e6 2e       	mov	r14, r22
    f278:	c4 2f       	mov	r28, r20
    const uint8_t CAL_PGM(*pCharacterStart);
    uint8_t fontIndex;
    // Check that the ASCII character is printable, and set to font table ref.
    if ((character >= ' ') && (character <= '~')){
    f27a:	80 52       	subi	r24, 0x20	; 32
    f27c:	8f 35       	cpi	r24, 0x5F	; 95
    f27e:	90 f4       	brcc	.+36     	; 0xf2a4 <TERMFONT_DisplayChar+0x38>
        fontIndex = character - ' ';
        pCharacterStart = TERMFONT_fontdata + (fontIndex*TERMFONT_FONT_DATA_WIDTH); // Initialize pointer to characterfont.
    f280:	95 e0       	ldi	r25, 0x05	; 5
    f282:	f9 2e       	mov	r15, r25
    f284:	8f 9d       	mul	r24, r15
    f286:	80 01       	movw	r16, r0
    f288:	11 24       	eor	r1, r1
    f28a:	0a 5a       	subi	r16, 0xAA	; 170
    f28c:	13 43       	sbci	r17, 0x33	; 51
        LCD_ClrPage( 0xFF, page, column, 1 );  // Clear first empty line, character divider.
    f28e:	21 e0       	ldi	r18, 0x01	; 1
    f290:	8f ef       	ldi	r24, 0xFF	; 255
    f292:	0e 94 0d 6e 	call	0xdc1a	; 0xdc1a <LCD_ClrPage>
        column++;                              // Set address to where fontdata should start.
    f296:	cf 5f       	subi	r28, 0xFF	; 255
        // Send character and address to character to display.
        LCD_WritePage_F(pCharacterStart, page, column, TERMFONT_FONT_DATA_WIDTH);
    f298:	2f 2d       	mov	r18, r15
    f29a:	4c 2f       	mov	r20, r28
    f29c:	6e 2d       	mov	r22, r14
    f29e:	c8 01       	movw	r24, r16
    f2a0:	0e 94 4c 6e 	call	0xdc98	; 0xdc98 <LCD_WritePage_F>
    f2a4:	cf 91       	pop	r28
    f2a6:	1f 91       	pop	r17
    f2a8:	0f 91       	pop	r16
    f2aa:	ff 90       	pop	r15
    f2ac:	ef 90       	pop	r14
    f2ae:	08 95       	ret

0000f2b0 <SOUND_StartAudio>:
 * \param  pAudioFifoHandle  FIFO to read song data from.
 */
void SOUND_StartAudio( FIFO_handle_t * pAudioFifoHandle )
{
	// Enable timer 1.
	PRR0 &= ~(1 << PRTIM1); 
    f2b0:	20 91 64 00 	lds	r18, 0x0064
    f2b4:	27 7f       	andi	r18, 0xF7	; 247
    f2b6:	20 93 64 00 	sts	0x0064, r18
	// Set the piezo driving pin as output.
	DDRB |= (1<<PB7);       
    f2ba:	27 9a       	sbi	0x04, 7	; 4
	// Clear OC1C when upcounting, set when downcounting
	// Phase/Freq-correct PWM, top value = ICR1
	// Mode 8 in ATmega1281 datasheet.
	// No settings to be done in TCCR1C.
	TCCR1A = (1<<COM1C1);   
    f2bc:	28 e0       	ldi	r18, 0x08	; 8
    f2be:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = (1<<WGM13);    
    f2c2:	20 e1       	ldi	r18, 0x10	; 16
    f2c4:	20 93 81 00 	sts	0x0081, r18
	// Start Timer1, no prescaler.
	TCCR1B |= (1 << CS10);  
    f2c8:	20 91 81 00 	lds	r18, 0x0081
    f2cc:	21 60       	ori	r18, 0x01	; 1
    f2ce:	20 93 81 00 	sts	0x0081, r18
	
	pSoundfifoHandle = pAudioFifoHandle;
    f2d2:	90 93 8f 18 	sts	0x188F, r25
    f2d6:	80 93 8e 18 	sts	0x188E, r24
	
	// Set callback to check if there have been any data in fifo.
	TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f2da:	2f e7       	ldi	r18, 0x7F	; 127
    f2dc:	38 e1       	ldi	r19, 0x18	; 24
    f2de:	48 e7       	ldi	r20, 0x78	; 120
    f2e0:	59 e7       	ldi	r21, 0x79	; 121
    f2e2:	6a e0       	ldi	r22, 0x0A	; 10
    f2e4:	70 e0       	ldi	r23, 0x00	; 0
    f2e6:	80 e0       	ldi	r24, 0x00	; 0
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	0e 94 cb 78 	call	0xf196	; 0xf196 <TIMING_AddCallbackEventAfter>
    f2ee:	08 95       	ret

0000f2f0 <SOUND_PlayAudioTask>:
 * when previous tone expire.
 * This task is initiated by the SOUND_StartAudio function, and is 
 * called from the timing system. 
 */
static void SOUND_PlayAudioTask( void )
{
    f2f0:	ef 92       	push	r14
    f2f2:	ff 92       	push	r15
    f2f4:	0f 93       	push	r16
    f2f6:	1f 93       	push	r17
    f2f8:	cf 93       	push	r28
	uint8_t storedSreg = SREG;
    f2fa:	cf b7       	in	r28, 0x3f	; 63
	CAL_disable_interrupt();
    f2fc:	f8 94       	cli

	// Length of tone defined as number of timing lib ticks.
	TIMING_time_t durationTicks = 0;  
	
	// Check if there are a complete note in fifo.
	if ( FIFO_HasData(pSoundfifoHandle, uint32_t) == true ) {	
    f2fe:	e0 91 8e 18 	lds	r30, 0x188E
    f302:	f0 91 8f 18 	lds	r31, 0x188F
    f306:	81 85       	ldd	r24, Z+9	; 0x09
    f308:	84 30       	cpi	r24, 0x04	; 4
    f30a:	b0 f1       	brcs	.+108    	; 0xf378 <SOUND_PlayAudioTask+0x88>
		// Get length of tone.
		durationTicks = FIFO_GetUint16 ( pSoundfifoHandle ); 
    f30c:	cf 01       	movw	r24, r30
    f30e:	0e 94 18 73 	call	0xe630	; 0xe630 <FIFO_GetUint16>
    f312:	7c 01       	movw	r14, r24
    f314:	00 27       	eor	r16, r16
    f316:	11 27       	eor	r17, r17
		// Get frequency of tone.
		tone = FIFO_GetUint16( pSoundfifoHandle );  
    f318:	80 91 8e 18 	lds	r24, 0x188E
    f31c:	90 91 8f 18 	lds	r25, 0x188F
    f320:	0e 94 18 73 	call	0xe630	; 0xe630 <FIFO_GetUint16>
    f324:	ac 01       	movw	r20, r24
		
		// If pause, stop timer1.
		if ( tone == SOUND_PAUSE ) {	
    f326:	01 97       	sbiw	r24, 0x01	; 1
    f328:	31 f4       	brne	.+12     	; 0xf336 <SOUND_PlayAudioTask+0x46>
			toneActive = false;
    f32a:	10 92 57 02 	sts	0x0257, r1
			// Stop Timer1.
			TCCR1B &= ~(1 << CS10);
    f32e:	80 91 81 00 	lds	r24, 0x0081
    f332:	8e 7f       	andi	r24, 0xFE	; 254
    f334:	06 c0       	rjmp	.+12     	; 0xf342 <SOUND_PlayAudioTask+0x52>
		} else {	
			toneActive = true;
    f336:	81 e0       	ldi	r24, 0x01	; 1
    f338:	80 93 57 02 	sts	0x0257, r24
			// Start Timer1.
			TCCR1B |= (1 << CS10);                  
    f33c:	80 91 81 00 	lds	r24, 0x0081
    f340:	81 60       	ori	r24, 0x01	; 1
    f342:	80 93 81 00 	sts	0x0081, r24
		// Following 2 lines may be uncommented if a strike effect is wanted when setting a new tone.
		// TCNT1H = 0;                  
		// TCNT1L = 0;
		
		// Adjust value to give square vawe.
		uint16_t tempToneH = tone / 2;  
    f346:	9a 01       	movw	r18, r20
    f348:	36 95       	lsr	r19
    f34a:	27 95       	ror	r18
		uint8_t tempToneL = tempToneH;
    f34c:	82 2f       	mov	r24, r18
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f34e:	9a 01       	movw	r18, r20
    f350:	23 2f       	mov	r18, r19
    f352:	33 27       	eor	r19, r19
    f354:	26 95       	lsr	r18
		// Set output compare to half of TOP value.
		// Half value produces a square vawe out on PWM.
		OCR1CH = tempToneH;             
    f356:	20 93 8d 00 	sts	0x008D, r18
		OCR1CL = tempToneL;             
    f35a:	80 93 8c 00 	sts	0x008C, r24
		
		// Read the TOP value.
		tempToneH = tone;               
		// High byte -> Low byte.
		tempToneH >>= 8;                
    f35e:	25 2f       	mov	r18, r21
    f360:	33 27       	eor	r19, r19
		// Load ICR1H, high byte (TOP value).
		ICR1H = tempToneH;              
    f362:	20 93 87 00 	sts	0x0087, r18
		// Load ICR1L, low byte (TOP value).
		ICR1L = tone;                   
    f366:	40 93 86 00 	sts	0x0086, r20
		
		// Add a callback timing event to this funtion after tone duration is ended.
		TIMING_AddCallbackEventAfter( durationTicks, SOUND_PlayAudioTask, &audioTimingEvent );
    f36a:	2f e7       	ldi	r18, 0x7F	; 127
    f36c:	38 e1       	ldi	r19, 0x18	; 24
    f36e:	48 e7       	ldi	r20, 0x78	; 120
    f370:	59 e7       	ldi	r21, 0x79	; 121
    f372:	c8 01       	movw	r24, r16
    f374:	b7 01       	movw	r22, r14
    f376:	0f c0       	rjmp	.+30     	; 0xf396 <SOUND_PlayAudioTask+0xa6>
	}
	
	// No available data in fifo, go silent.
	else {	
		toneActive = false;
    f378:	10 92 57 02 	sts	0x0257, r1
		// Stop Timer1.
		TCCR1B &= ~(1 << CS10);         
    f37c:	80 91 81 00 	lds	r24, 0x0081
    f380:	8e 7f       	andi	r24, 0xFE	; 254
    f382:	80 93 81 00 	sts	0x0081, r24
		
		// Set up timing event to fire and check the fifo after given delay.
		TIMING_AddCallbackEventAfter( SOUND_CHECK_FIFO_DELAY, SOUND_PlayAudioTask, &audioTimingEvent );
    f386:	2f e7       	ldi	r18, 0x7F	; 127
    f388:	38 e1       	ldi	r19, 0x18	; 24
    f38a:	48 e7       	ldi	r20, 0x78	; 120
    f38c:	59 e7       	ldi	r21, 0x79	; 121
    f38e:	6a e0       	ldi	r22, 0x0A	; 10
    f390:	70 e0       	ldi	r23, 0x00	; 0
    f392:	80 e0       	ldi	r24, 0x00	; 0
    f394:	90 e0       	ldi	r25, 0x00	; 0
    f396:	0e 94 cb 78 	call	0xf196	; 0xf196 <TIMING_AddCallbackEventAfter>
	}
	
	SREG = storedSreg;
    f39a:	cf bf       	out	0x3f, r28	; 63
    f39c:	cf 91       	pop	r28
    f39e:	1f 91       	pop	r17
    f3a0:	0f 91       	pop	r16
    f3a2:	ff 90       	pop	r15
    f3a4:	ef 90       	pop	r14
    f3a6:	08 95       	ret

0000f3a8 <SOUND_StopAudio>:
/*!
 *  Remove timing event for sound fifo check. 
 */
void SOUND_StopAudio( void )
{
	toneActive = false;
    f3a8:	10 92 57 02 	sts	0x0257, r1
	// Stop Timer1.
	TCCR1B &= ~(1 << CS10);   
    f3ac:	80 91 81 00 	lds	r24, 0x0081
    f3b0:	8e 7f       	andi	r24, 0xFE	; 254
    f3b2:	80 93 81 00 	sts	0x0081, r24
	// Clear TOP value to make sure no note is played at next startup.
	ICR1H = 0;                
    f3b6:	10 92 87 00 	sts	0x0087, r1
	ICR1L = 0;
    f3ba:	10 92 86 00 	sts	0x0086, r1
	// Remove the "audio fifo check" event (active or not).
	TIMING_RemoveEvent( &audioTimingEvent );  
    f3be:	8f e7       	ldi	r24, 0x7F	; 127
    f3c0:	98 e1       	ldi	r25, 0x18	; 24
    f3c2:	0e 94 e8 77 	call	0xefd0	; 0xefd0 <TIMING_RemoveEvent>
	// Release the piezo driving pin.
	DDRB &= ~(1<<PB7);                        
    f3c6:	27 98       	cbi	0x04, 7	; 4
	// Disable timer 1.
	PRR0 |= (1 << PRTIM1);    
    f3c8:	80 91 64 00 	lds	r24, 0x0064
    f3cc:	88 60       	ori	r24, 0x08	; 8
    f3ce:	80 93 64 00 	sts	0x0064, r24
    f3d2:	08 95       	ret

0000f3d4 <SOUND_IsToneBusy>:
/*!
 * \return True if any tone is currently playing, false if not.
 */
bool SOUND_IsToneBusy( void )
{
	return toneActive;
    f3d4:	80 91 57 02 	lds	r24, 0x0257
}
    f3d8:	99 27       	eor	r25, r25
    f3da:	08 95       	ret

0000f3dc <SONG_CallbackControlTask_F>:
/*!
 *  Feeds the audio fifo from flash, check repeat symbol in soundfiles 
 *  and stop timing events if incoming data show stop symbol.
 */
void SONG_CallbackControlTask_F( void )
{
    f3dc:	cf 93       	push	r28
	uint8_t freeFifoSize = 0;
	
	// Check empty space in fifo.
	freeFifoSize = FIFO_GetItemsFree( pSongFifoHandle );  
    f3de:	e0 91 90 18 	lds	r30, 0x1890
    f3e2:	f0 91 91 18 	lds	r31, 0x1891
    f3e6:	20 85       	ldd	r18, Z+8	; 0x08
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f3e8:	24 30       	cpi	r18, 0x04	; 4
    f3ea:	08 f4       	brcc	.+2      	; 0xf3ee <SONG_CallbackControlTask_F+0x12>
    f3ec:	41 c0       	rjmp	.+130    	; 0xf470 <SONG_CallbackControlTask_F+0x94>
    f3ee:	e0 91 a1 18 	lds	r30, 0x18A1
    f3f2:	f0 91 a2 18 	lds	r31, 0x18A2
    f3f6:	85 91       	lpm	r24, Z+
    f3f8:	94 91       	lpm	r25, Z+
    f3fa:	89 2b       	or	r24, r25
    f3fc:	09 f4       	brne	.+2      	; 0xf400 <SONG_CallbackControlTask_F+0x24>
    f3fe:	38 c0       	rjmp	.+112    	; 0xf470 <SONG_CallbackControlTask_F+0x94>
	
	// Check if possible to load smallest amount of note data and
	// if the next element in array is stop symbol. 
	while ((freeFifoSize >= SONG_LENGTH_OF_TONE) && (CAL_pgm_read_word(pAudioDataInFlash) != SOUND_STOP)) {
		// Is next a repeat character?
		if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_REPEAT ) {	
    f400:	80 91 a1 18 	lds	r24, 0x18A1
    f404:	90 91 a2 18 	lds	r25, 0x18A2
    f408:	fc 01       	movw	r30, r24
    f40a:	65 91       	lpm	r22, Z+
    f40c:	74 91       	lpm	r23, Z+
    f40e:	c2 2f       	mov	r28, r18
    f410:	c4 50       	subi	r28, 0x04	; 4
    f412:	2f ef       	ldi	r18, 0xFF	; 255
    f414:	6f 3f       	cpi	r22, 0xFF	; 255
    f416:	72 07       	cpc	r23, r18
    f418:	49 f4       	brne	.+18     	; 0xf42c <SONG_CallbackControlTask_F+0x50>
			// Reload pointer.
			pAudioDataInFlash = pAudioDataStartInFlash; 
    f41a:	80 91 a3 18 	lds	r24, 0x18A3
    f41e:	90 91 a4 18 	lds	r25, 0x18A4
    f422:	90 93 a2 18 	sts	0x18A2, r25
    f426:	80 93 a1 18 	sts	0x18A1, r24
    f42a:	1e c0       	rjmp	.+60     	; 0xf468 <SONG_CallbackControlTask_F+0x8c>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
		}
		// Read 4 bytes and move to fifo.
		else {
			// Put duration of note in fifo.
			FIFO_PutUint16 ( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) ); 
    f42c:	02 96       	adiw	r24, 0x02	; 2
    f42e:	90 93 a2 18 	sts	0x18A2, r25
    f432:	80 93 a1 18 	sts	0x18A1, r24
    f436:	80 91 90 18 	lds	r24, 0x1890
    f43a:	90 91 91 18 	lds	r25, 0x1891
    f43e:	0e 94 05 73 	call	0xe60a	; 0xe60a <FIFO_PutUint16>
			// Put Note value of note in fifo.
			FIFO_PutUint16( pSongFifoHandle, CAL_pgm_read_word(pAudioDataInFlash++) );  
    f442:	80 91 a1 18 	lds	r24, 0x18A1
    f446:	90 91 a2 18 	lds	r25, 0x18A2
    f44a:	fc 01       	movw	r30, r24
    f44c:	02 96       	adiw	r24, 0x02	; 2
    f44e:	90 93 a2 18 	sts	0x18A2, r25
    f452:	80 93 a1 18 	sts	0x18A1, r24
    f456:	85 91       	lpm	r24, Z+
    f458:	94 91       	lpm	r25, Z+
    f45a:	bc 01       	movw	r22, r24
    f45c:	80 91 90 18 	lds	r24, 0x1890
    f460:	90 91 91 18 	lds	r25, 0x1891
    f464:	0e 94 05 73 	call	0xe60a	; 0xe60a <FIFO_PutUint16>
			freeFifoSize -= SONG_LENGTH_OF_TONE;
    f468:	2c 2f       	mov	r18, r28
    f46a:	c4 30       	cpi	r28, 0x04	; 4
    f46c:	08 f0       	brcs	.+2      	; 0xf470 <SONG_CallbackControlTask_F+0x94>
    f46e:	bf cf       	rjmp	.-130    	; 0xf3ee <SONG_CallbackControlTask_F+0x12>
		}
	}

	// End/Stop of audiofile?
	if ( CAL_pgm_read_word(pAudioDataInFlash) == SOUND_STOP ) {	
    f470:	e0 91 a1 18 	lds	r30, 0x18A1
    f474:	f0 91 a2 18 	lds	r31, 0x18A2
    f478:	85 91       	lpm	r24, Z+
    f47a:	94 91       	lpm	r25, Z+
    f47c:	89 2b       	or	r24, r25
    f47e:	69 f4       	brne	.+26     	; 0xf49a <SONG_CallbackControlTask_F+0xbe>
		// Check that fifo is empty.
		if ( FIFO_IsEmpty(pSongFifoHandle) ) {	
    f480:	e0 91 90 18 	lds	r30, 0x1890
    f484:	f0 91 91 18 	lds	r31, 0x1891
    f488:	81 85       	ldd	r24, Z+9	; 0x09
    f48a:	88 23       	and	r24, r24
    f48c:	31 f4       	brne	.+12     	; 0xf49a <SONG_CallbackControlTask_F+0xbe>
			// Wait to finish last note.
			if ( !SOUND_IsToneBusy() ) {	
    f48e:	0e 94 ea 79 	call	0xf3d4	; 0xf3d4 <SOUND_IsToneBusy>
    f492:	88 23       	and	r24, r24
    f494:	11 f4       	brne	.+4      	; 0xf49a <SONG_CallbackControlTask_F+0xbe>
				SOUND_StopAudio();
    f496:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <SOUND_StopAudio>
    f49a:	cf 91       	pop	r28
    f49c:	08 95       	ret

0000f49e <SONG_StopTune>:
}

void SONG_StopTune( void )
{
	// Call sound driver and stop timer1.
	SOUND_StopAudio();                      
    f49e:	0e 94 d4 79 	call	0xf3a8	; 0xf3a8 <SOUND_StopAudio>
	// Manually remove repetitive timing event.
	TIMING_RemoveEvent( &songTimingEvent ); 
    f4a2:	82 e9       	ldi	r24, 0x92	; 146
    f4a4:	98 e1       	ldi	r25, 0x18	; 24
    f4a6:	0e 94 e8 77 	call	0xefd0	; 0xefd0 <TIMING_RemoveEvent>
	// Clear the audio fifo
	FIFO_Flush( pSongFifoHandle );          
    f4aa:	80 91 90 18 	lds	r24, 0x1890
    f4ae:	90 91 91 18 	lds	r25, 0x1891
    f4b2:	0e 94 e1 72 	call	0xe5c2	; 0xe5c2 <FIFO_Flush>
	// Set flag -> not active.
	songPlaying = false;                    
    f4b6:	10 92 58 02 	sts	0x0258, r1
    f4ba:	08 95       	ret

0000f4bc <SONG_StartTune_F>:
 *
 * \param  pAudioFifoHandle  FIFO to put song data into.
 * \param  pTuneInFlash      Song data array.
 */
void SONG_StartTune_F( FIFO_handle_t * pAudioFifoHandle, uint16_t CAL_PGM(const * pTuneInFlash) )
{
    f4bc:	0f 93       	push	r16
    f4be:	1f 93       	push	r17
    f4c0:	cf 93       	push	r28
    f4c2:	df 93       	push	r29
    f4c4:	ec 01       	movw	r28, r24
    f4c6:	8b 01       	movw	r16, r22
	if (songPlaying == true) {
    f4c8:	80 91 58 02 	lds	r24, 0x0258
    f4cc:	81 30       	cpi	r24, 0x01	; 1
    f4ce:	11 f4       	brne	.+4      	; 0xf4d4 <SONG_StartTune_F+0x18>
		SONG_StopTune();
    f4d0:	0e 94 4f 7a 	call	0xf49e	; 0xf49e <SONG_StopTune>
	}

	// Give the fifo handler to song library.
	pSongFifoHandle = pAudioFifoHandle;     
    f4d4:	d0 93 91 18 	sts	0x1891, r29
    f4d8:	c0 93 90 18 	sts	0x1890, r28
	// Signal that audio are playing.
	songPlaying = true;                     
    f4dc:	81 e0       	ldi	r24, 0x01	; 1
    f4de:	80 93 58 02 	sts	0x0258, r24
	// Save start address of audio in flash.
	pAudioDataStartInFlash = pTuneInFlash;  
    f4e2:	10 93 a4 18 	sts	0x18A4, r17
    f4e6:	00 93 a3 18 	sts	0x18A3, r16
	// Save start address to working pointer.
	pAudioDataInFlash = pTuneInFlash;       
    f4ea:	10 93 a2 18 	sts	0x18A2, r17
    f4ee:	00 93 a1 18 	sts	0x18A1, r16
	
	/* Insert song event in timing events.
	   Repeat until manually removed, repeat every SONG_PERIOD_TIME, 
	   callback "SONG_CallbackControlTask_F", 
	   Timing event "songTimingEvent". */
	TIMING_AddRepCallbackEvent( TIMING_INFINITE_REPEAT, SONG_PERIOD_TIME, SONG_CallbackControlTask_F, &songTimingEvent );
    f4f2:	02 e9       	ldi	r16, 0x92	; 146
    f4f4:	18 e1       	ldi	r17, 0x18	; 24
    f4f6:	2e ee       	ldi	r18, 0xEE	; 238
    f4f8:	39 e7       	ldi	r19, 0x79	; 121
    f4fa:	49 e0       	ldi	r20, 0x09	; 9
    f4fc:	50 e0       	ldi	r21, 0x00	; 0
    f4fe:	60 e0       	ldi	r22, 0x00	; 0
    f500:	70 e0       	ldi	r23, 0x00	; 0
    f502:	8f ef       	ldi	r24, 0xFF	; 255
    f504:	0e 94 15 79 	call	0xf22a	; 0xf22a <TIMING_AddRepCallbackEvent>
	
	// Start up timers and fifo read out control.
	SOUND_StartAudio( pAudioFifoHandle );   
    f508:	ce 01       	movw	r24, r28
    f50a:	0e 94 58 79 	call	0xf2b0	; 0xf2b0 <SOUND_StartAudio>
    f50e:	df 91       	pop	r29
    f510:	cf 91       	pop	r28
    f512:	1f 91       	pop	r17
    f514:	0f 91       	pop	r16
    f516:	08 95       	ret

0000f518 <__udivmodqi4>:
    f518:	99 1b       	sub	r25, r25
    f51a:	79 e0       	ldi	r23, 0x09	; 9
    f51c:	04 c0       	rjmp	.+8      	; 0xf526 <__udivmodqi4_ep>

0000f51e <__udivmodqi4_loop>:
    f51e:	99 1f       	adc	r25, r25
    f520:	96 17       	cp	r25, r22
    f522:	08 f0       	brcs	.+2      	; 0xf526 <__udivmodqi4_ep>
    f524:	96 1b       	sub	r25, r22

0000f526 <__udivmodqi4_ep>:
    f526:	88 1f       	adc	r24, r24
    f528:	7a 95       	dec	r23
    f52a:	c9 f7       	brne	.-14     	; 0xf51e <__udivmodqi4_loop>
    f52c:	80 95       	com	r24
    f52e:	08 95       	ret

0000f530 <__udivmodhi4>:
    f530:	aa 1b       	sub	r26, r26
    f532:	bb 1b       	sub	r27, r27
    f534:	51 e1       	ldi	r21, 0x11	; 17
    f536:	07 c0       	rjmp	.+14     	; 0xf546 <__udivmodhi4_ep>

0000f538 <__udivmodhi4_loop>:
    f538:	aa 1f       	adc	r26, r26
    f53a:	bb 1f       	adc	r27, r27
    f53c:	a6 17       	cp	r26, r22
    f53e:	b7 07       	cpc	r27, r23
    f540:	10 f0       	brcs	.+4      	; 0xf546 <__udivmodhi4_ep>
    f542:	a6 1b       	sub	r26, r22
    f544:	b7 0b       	sbc	r27, r23

0000f546 <__udivmodhi4_ep>:
    f546:	88 1f       	adc	r24, r24
    f548:	99 1f       	adc	r25, r25
    f54a:	5a 95       	dec	r21
    f54c:	a9 f7       	brne	.-22     	; 0xf538 <__udivmodhi4_loop>
    f54e:	80 95       	com	r24
    f550:	90 95       	com	r25
    f552:	bc 01       	movw	r22, r24
    f554:	cd 01       	movw	r24, r26
    f556:	08 95       	ret

0000f558 <__divmodhi4>:
    f558:	97 fb       	bst	r25, 7
    f55a:	09 2e       	mov	r0, r25
    f55c:	07 26       	eor	r0, r23
    f55e:	0a d0       	rcall	.+20     	; 0xf574 <__divmodhi4_neg1>
    f560:	77 fd       	sbrc	r23, 7
    f562:	04 d0       	rcall	.+8      	; 0xf56c <__divmodhi4_neg2>
    f564:	e5 df       	rcall	.-54     	; 0xf530 <__udivmodhi4>
    f566:	06 d0       	rcall	.+12     	; 0xf574 <__divmodhi4_neg1>
    f568:	00 20       	and	r0, r0
    f56a:	1a f4       	brpl	.+6      	; 0xf572 <__divmodhi4_exit>

0000f56c <__divmodhi4_neg2>:
    f56c:	70 95       	com	r23
    f56e:	61 95       	neg	r22
    f570:	7f 4f       	sbci	r23, 0xFF	; 255

0000f572 <__divmodhi4_exit>:
    f572:	08 95       	ret

0000f574 <__divmodhi4_neg1>:
    f574:	f6 f7       	brtc	.-4      	; 0xf572 <__divmodhi4_exit>
    f576:	90 95       	com	r25
    f578:	81 95       	neg	r24
    f57a:	9f 4f       	sbci	r25, 0xFF	; 255
    f57c:	08 95       	ret

0000f57e <__udivmodsi4>:
    f57e:	a1 e2       	ldi	r26, 0x21	; 33
    f580:	1a 2e       	mov	r1, r26
    f582:	aa 1b       	sub	r26, r26
    f584:	bb 1b       	sub	r27, r27
    f586:	fd 01       	movw	r30, r26
    f588:	0d c0       	rjmp	.+26     	; 0xf5a4 <__udivmodsi4_ep>

0000f58a <__udivmodsi4_loop>:
    f58a:	aa 1f       	adc	r26, r26
    f58c:	bb 1f       	adc	r27, r27
    f58e:	ee 1f       	adc	r30, r30
    f590:	ff 1f       	adc	r31, r31
    f592:	a2 17       	cp	r26, r18
    f594:	b3 07       	cpc	r27, r19
    f596:	e4 07       	cpc	r30, r20
    f598:	f5 07       	cpc	r31, r21
    f59a:	20 f0       	brcs	.+8      	; 0xf5a4 <__udivmodsi4_ep>
    f59c:	a2 1b       	sub	r26, r18
    f59e:	b3 0b       	sbc	r27, r19
    f5a0:	e4 0b       	sbc	r30, r20
    f5a2:	f5 0b       	sbc	r31, r21

0000f5a4 <__udivmodsi4_ep>:
    f5a4:	66 1f       	adc	r22, r22
    f5a6:	77 1f       	adc	r23, r23
    f5a8:	88 1f       	adc	r24, r24
    f5aa:	99 1f       	adc	r25, r25
    f5ac:	1a 94       	dec	r1
    f5ae:	69 f7       	brne	.-38     	; 0xf58a <__udivmodsi4_loop>
    f5b0:	60 95       	com	r22
    f5b2:	70 95       	com	r23
    f5b4:	80 95       	com	r24
    f5b6:	90 95       	com	r25
    f5b8:	9b 01       	movw	r18, r22
    f5ba:	ac 01       	movw	r20, r24
    f5bc:	bd 01       	movw	r22, r26
    f5be:	cf 01       	movw	r24, r30
    f5c0:	08 95       	ret

0000f5c2 <_exit>:
    f5c2:	ff cf       	rjmp	.-2      	; 0xf5c2 <_exit>
